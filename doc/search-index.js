var searchIndex = {};
searchIndex['lux'] = {"items":[[4,"LuxError","lux","Any error that Lux might run into.",null,null],[13,"WindowError","","An error that can occur when creating a window.",0,null],[13,"OpenGlError","","An error that can occur when creating an opengl context.",0,null],[13,"ImageError","","An error related to image decoding.",0,null],[13,"ShaderError","","An error that can occur when compiling or linking shaders.",0,null],[13,"IoError","","An error that can occur when required I/O fails.",0,null],[13,"FontNotLoaded","","An error that can occur when attempting to use a font that hasn't\nbeen loaded yet.",0,null],[13,"DrawError","","An error that was produced while submitting a draw call",0,null],[13,"TextureCreationError","","An error occured while creating a texture",0,null],[13,"IndexBufferCreationError","","An error creating an index buffer occured",0,null],[13,"VertexBufferCreationError","","An error creating an vertex buffer occured",0,null],[11,"clone","glutin::api::cocoa::monitor","",1,{"inputs":[{"name":"monitorid"}],"output":{"name":"monitorid"}}],[11,"get_name","","",1,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","",1,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","",1,null],[11,"default","glutin::api::cocoa::headless","",2,{"inputs":[{"name":"platformspecificheadlessbuilderattributes"}],"output":{"name":"platformspecificheadlessbuilderattributes"}}],[11,"new","","",3,null],[11,"make_current","","",3,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",3,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",3,null],[11,"swap_buffers","","",3,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",3,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",3,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"drop","glutin::api::cocoa","",4,null],[11,"default","","",5,{"inputs":[{"name":"platformspecificwindowbuilderattributes"}],"output":{"name":"platformspecificwindowbuilderattributes"}}],[11,"clone","","",6,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","",6,null],[11,"next","","",7,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"new","","",9,{"inputs":[{"name":"window"},{"name":"windowattributes"},{"name":"pixelformatrequirements"},{"name":"glattributes"},{"name":"platformspecificwindowbuilderattributes"}],"output":{"name":"result"}}],[11,"set_title","","",9,null],[11,"show","","",9,null],[11,"hide","","",9,null],[11,"get_position","","",9,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","",9,null],[11,"get_inner_size","","",9,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","",9,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","",9,null],[11,"create_window_proxy","","",9,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"poll_events","","",9,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",9,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"platform_display","","",9,null],[11,"platform_window","","",9,null],[11,"set_window_resize_callback","","",9,null],[11,"set_cursor","","",9,null],[11,"set_cursor_state","","",9,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"hidpi_factor","","",9,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","",9,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"make_current","","",9,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",9,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",9,null],[11,"swap_buffers","","",9,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",9,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",9,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"drop","","",10,null],[11,"deref","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"idref"}],"output":{"name":"idref"}}],[11,"fmt","glutin::events","",11,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",12,{"inputs":[{"name":"touchphase"}],"output":{"name":"touchphase"}}],[11,"eq","","",12,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"touchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"touch"}],"output":{"name":"touch"}}],[11,"fmt","","",13,{"inputs":[{"name":"touch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",14,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",15,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"mousescrolldelta"}],"output":{"name":"mousescrolldelta"}}],[11,"fmt","","",16,{"inputs":[{"name":"mousescrolldelta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",17,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","glutin::headless","Initializes a new `HeadlessRendererBuilder` with default values.",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",18,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",18,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",19,null],[11,"get_api","","Returns the API that is currently provided by this window.",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",19,null],[11,"make_current","","",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",19,null],[11,"swap_buffers","","",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",19,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"new","glutin::window","Initializes a new `WindowBuilder` with default values.",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",20,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",20,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",20,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",20,{"inputs":[{"name":"windowbuilder"},{"name":"string"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",20,{"inputs":[{"name":"windowbuilder"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",20,{"inputs":[{"name":"windowbuilder"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",20,{"inputs":[{"name":"windowbuilder"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",20,{"inputs":[{"name":"windowbuilder"},{"name":"glprofile"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",20,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",20,{"inputs":[{"name":"windowbuilder"},{"name":"robustness"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",20,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request.",20,{"inputs":[{"name":"windowbuilder"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",20,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",20,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",20,{"inputs":[{"name":"windowbuilder"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means \"I don't care\".",20,{"inputs":[{"name":"windowbuilder"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",20,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",20,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",20,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"default","glutin","",21,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",21,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",21,null],[11,"show","","Shows the window if it was hidden.",21,null],[11,"hide","","Hides the window if it was visible.",21,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",21,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",21,null],[11,"get_inner_size","","Returns the size in points of the client area of the window.",21,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",21,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",21,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",21,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",21,null],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",21,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",21,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",21,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",21,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",21,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",21,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",21,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",21,null],[11,"get_api","","Returns the API that is currently provided by this window.",21,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",21,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",21,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",21,null],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",21,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",21,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",21,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",21,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"make_current","","",21,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",21,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",21,null],[11,"swap_buffers","","",21,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",21,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",21,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"clone","glutin::window","",22,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",22,null],[11,"next","","",23,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next","","",24,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"availablemonitorsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"get_name","","Returns a human-readable name of the monitor.",26,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",26,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",26,null],[11,"get_nswindow","glutin","",21,null],[11,"fmt","","",27,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",27,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"contexterror"}],"output":{"name":"str"}}],[11,"eq","","",29,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",29,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"glprofile"}],"output":{"name":"glprofile"}}],[11,"fmt","","",30,{"inputs":[{"name":"glprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"glrequest"}],"output":{"name":"glrequest"}}],[11,"fmt","","",31,{"inputs":[{"name":"glrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",31,{"inputs":[{"name":"glrequest"}],"output":{"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"robustness"}],"output":{"name":"robustness"}}],[11,"fmt","","",32,{"inputs":[{"name":"robustness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"releasebehavior"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",33,{"inputs":[{"name":"releasebehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"mousecursor"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",34,{"inputs":[{"name":"mousecursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"cursorstate"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",35,{"inputs":[{"name":"cursorstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",36,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"pixelformatrequirements"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"default","","",37,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",38,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"default","","",38,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"clone","","",39,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",39,{"inputs":[{"name":"glattributes"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"default","","",39,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}],[11,"eq","glutin::native_monitor","",40,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"nativemonitorid"}],"output":{"name":"nativemonitorid"}}],[11,"to_key","glutin::events","",17,null],[11,"into_sprite","image::dynimage","",41,{"inputs":[{"name":"dynamicimage"},{"name":"d"}],"output":{"name":"luxresult"}}],[11,"clone","image::math::nq","",42,{"inputs":[{"name":"quad"}],"output":{"name":"quad"}}],[11,"new","","Creates a new neuronal network and trains it with the supplied data",43,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",43,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",43,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",43,null],[11,"clone","image::imageops::colorops","",44,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[11,"index_of","","",44,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",44,null],[11,"index_of","image::math::nq","",43,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",43,null],[11,"clone","image::imageops::sample","",45,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[11,"new","image::webp::decoder","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",46,{"inputs":[{"name":"webpdecoder"},{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",46,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",46,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",46,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",46,null],[11,"read_image","","",46,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"new","image::webp::vp8","",47,{"inputs":[{"name":"boolreader"}],"output":{"name":"boolreader"}}],[11,"init","","",47,null],[11,"read_bool","","",47,{"inputs":[{"name":"boolreader"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"read_literal","","",47,{"inputs":[{"name":"boolreader"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"read_magnitude_and_sign","","",47,{"inputs":[{"name":"boolreader"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"read_with_tree","","",47,null],[11,"read_flag","","",47,{"inputs":[{"name":"boolreader"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"macroblock"}],"output":{"name":"macroblock"}}],[11,"clone","","",49,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",49,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",49,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"default","","",50,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"clone","","",50,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",51,{"inputs":[{"name":"vp8decoder"},{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",51,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[11,"new","image::ppm::encoder","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",52,{"inputs":[{"name":"ppmencoder"},{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",52,null],[11,"new","image::png","Creates a new decoder that decodes from the stream ```r```",53,{"inputs":[{"name":"pngdecoder"},{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",53,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",53,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",53,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",53,null],[11,"read_image","","",53,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"new","","Create a new encoder that writes its output to ```w```",54,{"inputs":[{"name":"pngencoder"},{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",54,null],[11,"from","image::color","",55,null],[11,"from","image::image","",56,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[11,"default","image::ico::decoder","",57,{"inputs":[{"name":"direntry"}],"output":{"name":"direntry"}}],[11,"clone","","",57,{"inputs":[{"name":"direntry"}],"output":{"name":"direntry"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",58,{"inputs":[{"name":"icodecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"dimensions","","",58,{"inputs":[{"name":"icodecoder"}],"output":{"name":"result"}}],[11,"colortype","","",58,{"inputs":[{"name":"icodecoder"}],"output":{"name":"result"}}],[11,"row_len","","",58,{"inputs":[{"name":"icodecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",58,null],[11,"read_image","","",58,{"inputs":[{"name":"icodecoder"}],"output":{"name":"result"}}],[11,"new","image::jpeg::encoder","Create a new encoder that writes its output to ```w```",59,{"inputs":[{"name":"jpegencoder"},{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",59,null],[11,"clone","image::jpeg::decoder","",60,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"eq","","",61,{"inputs":[{"name":"jpegstate"},{"name":"jpegstate"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"jpegstate"},{"name":"jpegstate"}],"output":{"name":"bool"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",62,{"inputs":[{"name":"jpegdecoder"},{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",62,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",62,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",62,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",62,null],[11,"read_image","","",62,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"clone","image::jpeg::entropy","",63,{"inputs":[{"name":"hufftable"}],"output":{"name":"hufftable"}}],[11,"default","","",63,{"inputs":[{"name":"hufftable"}],"output":{"name":"hufftable"}}],[11,"new","","",64,{"inputs":[{"name":"huffdecoder"}],"output":{"name":"huffdecoder"}}],[11,"read_bit","","",64,{"inputs":[{"name":"huffdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"receive","","",64,{"inputs":[{"name":"huffdecoder"},{"name":"r"},{"name":"u8"}],"output":{"name":"result"}}],[11,"decode_symbol","","",64,{"inputs":[{"name":"huffdecoder"},{"name":"r"},{"name":"hufftable"}],"output":{"name":"result"}}],[11,"new","image::gif","Creates a new decoder that decodes the input steam ```r```",65,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",65,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"colortype","","",65,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"row_len","","",65,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",65,null],[11,"read_image","","",65,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new GIF encoder.",66,{"inputs":[{"name":"encoder"},{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",66,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"from","image::image","",56,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[11,"hash","image::tiff::decoder::ifd","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_u16","","",67,{"inputs":[{"name":"tag"},{"name":"u16"}],"output":{"name":"tag"}}],[11,"fmt","","",68,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"from_i64","","",68,{"inputs":[{"name":"type"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",68,{"inputs":[{"name":"type"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",69,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_u32","","",69,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"as_u32_vec","","",69,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"entry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",70,null],[11,"val","","",70,{"inputs":[{"name":"entry"},{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"fmt","image::tiff::decoder::stream","",71,{"inputs":[{"name":"byteorder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"byteorder"}],"output":{"name":"byteorder"}}],[11,"new","","Wraps a reader",72,{"inputs":[{"name":"lzwreader"},{"name":"smartreader"}],"output":{"name":"result"}}],[11,"read","","",72,null],[11,"byte_order","","",72,{"inputs":[{"name":"lzwreader"}],"output":{"name":"byteorder"}}],[11,"fmt","","",73,{"inputs":[{"name":"smartreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wrap","","Wraps a reader",73,{"inputs":[{"name":"smartreader"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"smartreader"}}],[11,"byte_order","","",73,{"inputs":[{"name":"smartreader"}],"output":{"name":"byteorder"}}],[11,"read","","",73,null],[11,"seek","","",73,{"inputs":[{"name":"smartreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"eq","image::tiff::decoder","",74,{"inputs":[{"name":"photometricinterpretation"},{"name":"photometricinterpretation"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"photometricinterpretation"},{"name":"photometricinterpretation"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"photometricinterpretation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"photometricinterpretation"}],"output":{"name":"photometricinterpretation"}}],[11,"from_i64","","",74,{"inputs":[{"name":"photometricinterpretation"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",74,{"inputs":[{"name":"photometricinterpretation"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",75,{"inputs":[{"name":"compressionmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"compressionmethod"}],"output":{"name":"compressionmethod"}}],[11,"from_i64","","",75,{"inputs":[{"name":"compressionmethod"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",75,{"inputs":[{"name":"compressionmethod"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",76,{"inputs":[{"name":"planarconfiguration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"planarconfiguration"}],"output":{"name":"planarconfiguration"}}],[11,"from_i64","","",76,{"inputs":[{"name":"planarconfiguration"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",76,{"inputs":[{"name":"planarconfiguration"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",77,{"inputs":[{"name":"predictor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"predictor"}],"output":{"name":"predictor"}}],[11,"from_i64","","",77,{"inputs":[{"name":"predictor"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",77,{"inputs":[{"name":"predictor"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",78,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",78,{"inputs":[{"name":"tiffdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"init","","Initializes the decoder.",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",78,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",78,null],[11,"read_image","","",78,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"fmt","image::tga::decoder","",79,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_reader","","",80,{"inputs":[{"name":"colormap"},{"name":"read"},{"name":"u16"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","Get one entry from the color map",80,null],[11,"new","","Create a new decoder that decodes from the stream `r`",81,{"inputs":[{"name":"tgadecoder"},{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",81,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"colortype","","",81,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"row_len","","",81,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",81,null],[11,"read_image","","",81,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"clone","image::bmp::decoder","",82,{"inputs":[{"name":"imagetype"}],"output":{"name":"imagetype"}}],[11,"eq","","",82,{"inputs":[{"name":"imagetype"},{"name":"imagetype"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"imagetype"},{"name":"imagetype"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"bmpheadertype"},{"name":"bmpheadertype"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"bmpheadertype"},{"name":"bmpheadertype"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"format16bit"},{"name":"format16bit"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"format16bit"},{"name":"format16bit"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"formatfullbytes"},{"name":"formatfullbytes"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"formatfullbytes"},{"name":"formatfullbytes"}],"output":{"name":"bool"}}],[11,"next","","",86,{"inputs":[{"name":"rowiterator"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"rleinsniterator"}],"output":{"name":"option"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",88,{"inputs":[{"name":"bmpdecoder"},{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",88,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",88,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",88,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",88,null],[11,"read_image","","",88,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"fmt","image::image","",56,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",56,{"inputs":[{"name":"imageerror"}],"output":{"name":"str"}}],[11,"cause","","",56,{"inputs":[{"name":"imageerror"}],"output":{"name":"option"}}],[11,"from","","",56,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"from","","",56,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",89,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",90,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",92,{"inputs":[{"name":"subimage"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",92,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",92,null],[11,"to_image","","Convert this subimage to an ImageBuffer",92,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",92,null],[11,"bounds","","",92,null],[11,"get_pixel","","",92,null],[11,"put_pixel","","",92,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",92,null],[11,"get_pixel_mut","","",92,null],[11,"new","image::utils::bitstream","Creates a new bit reader",93,{"inputs":[{"name":"lsbreader"},{"name":"r"}],"output":{"name":"lsbreader"}}],[11,"read","","",93,null],[11,"new","","Creates a new bit reader",94,{"inputs":[{"name":"msbreader"},{"name":"r"}],"output":{"name":"msbreader"}}],[11,"read","","",94,null],[11,"read_bits","","",93,{"inputs":[{"name":"lsbreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_bits","","",94,{"inputs":[{"name":"msbreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",95,{"inputs":[{"name":"lsbwriter"},{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",95,null],[11,"flush","","",95,{"inputs":[{"name":"lsbwriter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",96,{"inputs":[{"name":"msbwriter"},{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",96,null],[11,"flush","","",96,{"inputs":[{"name":"msbwriter"}],"output":{"name":"result"}}],[11,"write_bits","","",95,{"inputs":[{"name":"lsbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",96,{"inputs":[{"name":"msbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"clone","image::dynimage","",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",41,null],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",41,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.",41,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",41,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",41,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",41,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",41,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",41,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"result"}}],[11,"dimensions","","",41,null],[11,"bounds","","",41,null],[11,"get_pixel","","",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",41,null],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",41,null],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",41,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","image::color","",55,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",55,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",97,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"u8"}}],[11,"color_model","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"str"}}],[11,"color_type","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"colortype"}}],[11,"channels","","",97,null],[11,"channels_mut","","",97,null],[11,"channels4","","",97,null],[11,"from_channels","","",97,{"inputs":[{"name":"rgb"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",97,null],[11,"from_slice_mut","","",97,null],[11,"to_rgb","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",97,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",97,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",97,null],[11,"map_with_alpha","","",97,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",97,null],[11,"map2","","",97,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",97,null],[11,"invert","","",97,null],[11,"blend","","",97,null],[11,"index","","",97,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",97,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",98,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"u8"}}],[11,"color_model","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"str"}}],[11,"color_type","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"colortype"}}],[11,"channels","","",98,null],[11,"channels_mut","","",98,null],[11,"channels4","","",98,null],[11,"from_channels","","",98,{"inputs":[{"name":"luma"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",98,null],[11,"from_slice_mut","","",98,null],[11,"to_rgb","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",98,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",98,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",98,null],[11,"map_with_alpha","","",98,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",98,null],[11,"map2","","",98,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",98,null],[11,"invert","","",98,null],[11,"blend","","",98,null],[11,"index","","",98,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",98,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",99,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"u8"}}],[11,"color_model","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"str"}}],[11,"color_type","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"colortype"}}],[11,"channels","","",99,null],[11,"channels_mut","","",99,null],[11,"channels4","","",99,null],[11,"from_channels","","",99,{"inputs":[{"name":"rgba"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",99,null],[11,"from_slice_mut","","",99,null],[11,"to_rgb","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",99,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",99,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",99,null],[11,"map_with_alpha","","",99,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",99,null],[11,"map2","","",99,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",99,null],[11,"invert","","",99,null],[11,"blend","","",99,null],[11,"index","","",99,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",99,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",100,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"u8"}}],[11,"color_model","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"str"}}],[11,"color_type","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"colortype"}}],[11,"channels","","",100,null],[11,"channels_mut","","",100,null],[11,"channels4","","",100,null],[11,"from_channels","","",100,{"inputs":[{"name":"lumaa"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",100,null],[11,"from_slice_mut","","",100,null],[11,"to_rgb","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",100,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",100,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",100,null],[11,"map_with_alpha","","",100,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",100,null],[11,"map2","","",100,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",100,null],[11,"invert","","",100,null],[11,"blend","","",100,null],[11,"index","","",100,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",100,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_color","","",98,null],[11,"from_color","","",98,null],[11,"from_color","","",98,null],[11,"from_color","","",100,null],[11,"from_color","","",100,null],[11,"from_color","","",100,null],[11,"from_color","","",99,null],[11,"from_color","","",99,null],[11,"from_color","","",99,null],[11,"from_color","","",97,null],[11,"from_color","","",97,null],[11,"from_color","","",97,null],[11,"blend","","",100,null],[11,"blend","","",98,null],[11,"blend","","",99,null],[11,"blend","","",97,null],[11,"invert","","",100,null],[11,"invert","","",98,null],[11,"invert","","",99,null],[11,"invert","","",97,null],[11,"next","image::buffer","",101,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"pixelsmut"}],"output":{"name":"option"}}],[11,"next_back","","",102,{"inputs":[{"name":"pixelsmut"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"enumeratepixels"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"enumeratepixelsmut"}],"output":{"name":"option"}}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",105,null],[11,"width","","The width of this image.",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",105,null],[11,"save","","Saves the buffer to a file at the path specified.",105,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",105,null],[11,"deref_mut","","",105,null],[11,"index","","",105,null],[11,"index_mut","","",105,null],[11,"clone","","",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",105,null],[11,"bounds","","",105,null],[11,"get_pixel","","",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",105,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",105,null],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",105,null],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",105,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",105,null],[11,"convert","","",105,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","image::animation","Contructs a new frame iterator",106,{"inputs":[{"name":"frames"},{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",107,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",107,{"inputs":[{"name":"frame"},{"name":"imagebuffer"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",107,{"inputs":[{"name":"frame"},{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",107,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",107,{"inputs":[{"name":"frame"}],"output":{"name":"imagebuffer"}}],[11,"into_buffer","","Returns the image buffer",107,{"inputs":[{"name":"frame"}],"output":{"name":"imagebuffer"}}],[11,"left","","Returns the x offset",107,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",107,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",106,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[11,"fmt","lux","",0,{"inputs":[{"name":"luxerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"luxerror"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"gliumcreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"programcreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"programchoosercreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"texturecreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"ioerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"drawerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"imageerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"buffercreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"buffercreationerror"}],"output":{"name":"luxerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"luxerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"types","","Typedefs for use inside Lux.",null,null],[6,"Idx","lux::types","The type for indexing into vertices when drawing shapes.",null,null],[6,"Float","","The floating point type used for positions and colors.",null,null],[0,"color","lux","Color creation functions and some named defaults.",null,null],[5,"rgb","lux::color","Constructs a color from R, G, and B components.",null,null],[5,"rgba","","Constructs a color from R, G, B, and A components.",null,null],[5,"hsv","","Constructs a color from Hue, Saturation and Value components.",null,null],[5,"hsva","","Same as `hsv` but with an alpha component.",null,null],[5,"hex_rgb","","Convertes a u32 to a color by treating the last 3 bytes as rgb tripples.",null,null],[5,"hex_rgba","","Convertes a u32 to a color by treating the 4 bytes as rgb tripples.",null,null],[7,"ALICEBLUE","","All of the wc3 named colors.",null,null],[7,"ANTIQUEWHITE","","",null,null],[7,"AQUA","","",null,null],[7,"AQUAMARINE","","",null,null],[7,"AZURE","","",null,null],[7,"BEIGE","","",null,null],[7,"BISQUE","","",null,null],[7,"BLACK","","",null,null],[7,"BLANCHEDALMOND","","",null,null],[7,"BLUE","","",null,null],[7,"BLUEVIOLET","","",null,null],[7,"BROWN","","",null,null],[7,"BURLYWOOD","","",null,null],[7,"CADETBLUE","","",null,null],[7,"CHARTREUSE","","",null,null],[7,"CHOCOLATE","","",null,null],[7,"CORAL","","",null,null],[7,"CORNFLOWERBLUE","","",null,null],[7,"CORNSILK","","",null,null],[7,"CRIMSON","","",null,null],[7,"CYAN","","",null,null],[7,"DARKBLUE","","",null,null],[7,"DARKCYAN","","",null,null],[7,"DARKGOLDENROD","","",null,null],[7,"DARKGRAY","","",null,null],[7,"DARKGREEN","","",null,null],[7,"DARKKHAKI","","",null,null],[7,"DARKMAGENTA","","",null,null],[7,"DARKOLIVEGREEN","","",null,null],[7,"DARKORANGE","","",null,null],[7,"DARKORCHID","","",null,null],[7,"DARKRED","","",null,null],[7,"DARKSALMON","","",null,null],[7,"DARKSEAGREEN","","",null,null],[7,"DARKSLATEBLUE","","",null,null],[7,"DARKSLATEGRAY","","",null,null],[7,"DARKTURQUOISE","","",null,null],[7,"DARKVIOLET","","",null,null],[7,"DEEPPINK","","",null,null],[7,"DEEPSKYBLUE","","",null,null],[7,"DIMGRAY","","",null,null],[7,"DODGERBLUE","","",null,null],[7,"FIREBRICK","","",null,null],[7,"FLORALWHITE","","",null,null],[7,"FORESTGREEN","","",null,null],[7,"FUCHSIA","","",null,null],[7,"GAINSBORO","","",null,null],[7,"GHOSTWHITE","","",null,null],[7,"GOLD","","",null,null],[7,"GOLDENROD","","",null,null],[7,"GRAY","","",null,null],[7,"GREEN","","",null,null],[7,"GREENYELLOW","","",null,null],[7,"HONEYDEW","","",null,null],[7,"HOTPINK","","",null,null],[7,"INDIANRED","","",null,null],[7,"INDIGO","","",null,null],[7,"IVORY","","",null,null],[7,"KHAKI","","",null,null],[7,"LAVENDER","","",null,null],[7,"LAVENDERBLUSH","","",null,null],[7,"LAWNGREEN","","",null,null],[7,"LEMONCHIFFON","","",null,null],[7,"LIGHTBLUE","","",null,null],[7,"LIGHTCORAL","","",null,null],[7,"LIGHTCYAN","","",null,null],[7,"LIGHTGOLDENRODYELLOW","","",null,null],[7,"LIGHTGREEN","","",null,null],[7,"LIGHTGREY","","",null,null],[7,"LIGHTPINK","","",null,null],[7,"LIGHTSALMON","","",null,null],[7,"LIGHTSEAGREEN","","",null,null],[7,"LIGHTSKYBLUE","","",null,null],[7,"LIGHTSLATEGRAY","","",null,null],[7,"LIGHTSTEELBLUE","","",null,null],[7,"LIGHTYELLOW","","",null,null],[7,"LIME","","",null,null],[7,"LIMEGREEN","","",null,null],[7,"LINEN","","",null,null],[7,"MAGENTA","","",null,null],[7,"MAROON","","",null,null],[7,"MEDIUMAQUAMARINE","","",null,null],[7,"MEDIUMBLUE","","",null,null],[7,"MEDIUMORCHID","","",null,null],[7,"MEDIUMPURPLE","","",null,null],[7,"MEDIUMSEAGREEN","","",null,null],[7,"MEDIUMSLATEBLUE","","",null,null],[7,"MEDIUMSPRINGGREEN","","",null,null],[7,"MEDIUMTURQUOISE","","",null,null],[7,"MEDIUMVIOLETRED","","",null,null],[7,"MIDNIGHTBLUE","","",null,null],[7,"MINTCREAM","","",null,null],[7,"MISTYROSE","","",null,null],[7,"MOCCASIN","","",null,null],[7,"NAVAJOWHITE","","",null,null],[7,"NAVY","","",null,null],[7,"OLDLACE","","",null,null],[7,"OLIVE","","",null,null],[7,"OLIVEDRAB","","",null,null],[7,"ORANGE","","",null,null],[7,"ORANGERED","","",null,null],[7,"ORCHID","","",null,null],[7,"PALEGOLDENROD","","",null,null],[7,"PALEGREEN","","",null,null],[7,"PALEVIOLETRED","","",null,null],[7,"PAPAYAWHIP","","",null,null],[7,"PEACHPUFF","","",null,null],[7,"PERU","","",null,null],[7,"PINK","","",null,null],[7,"PLUM","","",null,null],[7,"POWDERBLUE","","",null,null],[7,"PURPLE","","",null,null],[7,"RED","","",null,null],[7,"ROSYBROWN","","",null,null],[7,"ROYALBLUE","","",null,null],[7,"SADDLEBROWN","","",null,null],[7,"SALMON","","",null,null],[7,"SANDYBROWN","","",null,null],[7,"SEAGREEN","","",null,null],[7,"SEASHELL","","",null,null],[7,"SIENNA","","",null,null],[7,"SILVER","","",null,null],[7,"SKYBLUE","","",null,null],[7,"SLATEBLUE","","",null,null],[7,"SLATEGRAY","","",null,null],[7,"SNOW","","",null,null],[7,"SPRINGGREEN","","",null,null],[7,"STEELBLUE","","",null,null],[7,"TAN","","",null,null],[7,"TEAL","","",null,null],[7,"THISTLE","","",null,null],[7,"TOMATO","","",null,null],[7,"TURQUOISE","","",null,null],[7,"VIOLET","","",null,null],[7,"WHEAT","","",null,null],[7,"WHITE","","",null,null],[7,"WHITESMOKE","","",null,null],[7,"YELLOW","","",null,null],[7,"YELLOWGREEN","","",null,null],[8,"Color","","A `Color` is any object that can be converted to a length-4 array of f32s.",null,null],[10,"to_rgba","","Converts this object to a length-4 array of floats.",108,null],[0,"graphics","lux","All of 2d graphics related functionality.",null,null],[11,"is_supported","glium::index","Returns true if the backend supports this type of primitives.",109,{"inputs":[{"name":"primitivetype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","glium::backend::glutin_backend","",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"glutinfacade"}}],[11,"get_context","","",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"rc"}}],[11,"next","","",111,{"inputs":[{"name":"polleventsiter"}],"output":{"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"waiteventsiter"}],"output":{"name":"option"}}],[11,"deref","","",113,{"inputs":[{"name":"winref"}],"output":{"name":"window"}}],[11,"poll_events","","Reads all events received by the window.",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"polleventsiter"}}],[11,"wait_events","","Reads all events received by the window.",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"waiteventsiter"}}],[11,"get_window","","Returns the underlying window, or `None` if glium uses a headless context.",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"option"}}],[11,"draw","","Start drawing on the backbuffer.",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"frame"}}],[11,"new","glium::context","Builds a new context.",114,{"inputs":[{"name":"context"},{"name":"b"},{"name":"bool"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",114,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",114,{"inputs":[{"name":"context"},{"name":"b"}],"output":{"name":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",114,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",114,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",114,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",114,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",114,{"inputs":[{"name":"context"},{"name":"version"}],"output":{"name":"bool"}}],[11,"get_opengl_version_string","","Returns a string containing this GL version or release number used by this context.",114,{"inputs":[{"name":"context"}],"output":{"name":"str"}}],[11,"get_opengl_vendor_string","","Returns a string containing the company responsible for this GL implementation.",114,{"inputs":[{"name":"context"}],"output":{"name":"str"}}],[11,"get_opengl_renderer_string","","Returns a string containing the name of the GL renderer used by this context.",114,{"inputs":[{"name":"context"}],"output":{"name":"str"}}],[11,"is_debug","","Returns true if the context is in debug mode.",114,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_forward_compatible","","Returns true if the context is in \"forward-compatible\" mode.",114,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_opengl_profile","","Returns this context's OpenGL profile if available.",114,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot\nresult in a crash.",114,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",114,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",114,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_release_behavior","","Returns the behavior when the current OpenGL context is changed.",114,{"inputs":[{"name":"context"}],"output":{"name":"releasebehavior"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",114,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",114,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",114,null],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",114,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",114,{"inputs":[{"name":"context"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another\ncomponent needs to directly manipulate OpenGL state.",114,{"inputs":[{"name":"context"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",114,null],[11,"synchronize","","DEPRECATED. Renamed `finish`.",114,null],[11,"finish","","Calls `glFinish()`. This waits until all the previously issued commands have finished\nbeing executed.",114,null],[11,"flush","","Calls `glFlush()`. This starts executing the commands that you have issued if it is not\nyet the case.",114,null],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will\nbe able to see that string.",114,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions`\nit is a no-op and returns `Ok`.",114,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","glium::backend::glutin_backend","",110,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"context"}}],[11,"build_glium_debug","glutin::window","",20,{"inputs":[{"name":"windowbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"build_glium_unchecked_debug","","",20,{"inputs":[{"name":"windowbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",20,{"inputs":[{"name":"windowbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[11,"build_glium_debug","glutin::headless","",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"build_glium_unchecked_debug","","",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",18,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[11,"swap_buffers","glium::backend::glutin_backend","",115,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"result"}}],[11,"get_proc_address","","",115,null],[11,"get_framebuffer_dimensions","","",115,null],[11,"is_current","","",115,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",115,null],[11,"new","","Builds a new backend from the builder.",115,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"get_window","","",115,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"window"}}],[11,"poll_events","","",115,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",115,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"waiteventsiterator"}}],[11,"rebuild","","",115,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","","",116,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"result"}}],[11,"get_proc_address","","",116,null],[11,"get_framebuffer_dimensions","","",116,null],[11,"is_current","","",116,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",116,null],[11,"new","","Builds a new backend from the builder.",116,{"inputs":[{"name":"glutinheadlessbackend"},{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","alloc::rc","",117,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"get_proc_address","","",117,null],[11,"get_framebuffer_dimensions","","",117,null],[11,"is_current","","",117,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_current","","",117,null],[11,"get_context","","",117,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"clone","glium::buffer::alloc","",118,{"inputs":[{"name":"readerror"}],"output":{"name":"readerror"}}],[11,"fmt","","",118,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",118,{"inputs":[{"name":"readerror"}],"output":{"name":"str"}}],[11,"clone","","",119,{"inputs":[{"name":"copyerror"}],"output":{"name":"copyerror"}}],[11,"fmt","","",119,{"inputs":[{"name":"copyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"copyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",119,{"inputs":[{"name":"copyerror"}],"output":{"name":"str"}}],[11,"new","","Builds a new buffer containing the given data. The size of the buffer is equal to the\nsize of the data.",120,{"inputs":[{"name":"alloc"},{"name":"f"},{"name":"d"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty","","Builds a new empty buffer of the given size.",120,{"inputs":[{"name":"alloc"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",120,{"inputs":[{"name":"alloc"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the total size in bytes of this buffer.",120,{"inputs":[{"name":"alloc"}],"output":{"name":"usize"}}],[11,"uses_persistent_mapping","","Returns true if the buffer is persistently mapped in memory.",120,{"inputs":[{"name":"alloc"}],"output":{"name":"bool"}}],[11,"set_type","","Changes the type of the buffer. Returns `Err` if this is forbidden.",120,{"inputs":[{"name":"alloc"},{"name":"buffertype"}],"output":{"name":"result"}}],[11,"prepare_for_vertex_attrib_array","","Calls `glMemoryBarrier(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT)` if necessary.",120,null],[11,"prepare_for_element_array","","Calls `glMemoryBarrier(ELEMENT_ARRAY_BARRIER_BIT)` if necessary.",120,null],[11,"bind_to_element_array","","Binds the buffer to `GL_ELEMENT_ARRAY_BUFFER` regardless of the current vertex array object.",120,null],[11,"prepare_and_bind_for_pixel_pack","","Makes sure that the buffer is binded to the `GL_PIXEL_PACK_BUFFER` and calls\n`glMemoryBarrier(GL_PIXEL_BUFFER_BARRIER_BIT)` if necessary.",120,null],[11,"unbind_pixel_pack","","Makes sure that nothing is binded to `GL_PIXEL_PACK_BUFFER`.",120,null],[11,"prepare_and_bind_for_pixel_unpack","","Makes sure that the buffer is binded to the `GL_PIXEL_UNPACK_BUFFER` and calls\n`glMemoryBarrier(GL_PIXEL_BUFFER_BARRIER_BIT)` if necessary.",120,null],[11,"unbind_pixel_unpack","","Makes sure that nothing is binded to `GL_PIXEL_UNPACK_BUFFER`.",120,null],[11,"prepare_and_bind_for_query","","Makes sure that the buffer is binded to the `GL_QUERY_BUFFER` and calls\n`glMemoryBarrier(GL_PIXEL_BUFFER_BARRIER_BIT)` if necessary.",120,null],[11,"unbind_query","","Makes sure that nothing is binded to `GL_QUERY_BUFFER`.",120,null],[11,"prepare_and_bind_for_draw_indirect","","Makes sure that the buffer is binded to the `GL_DRAW_INDIRECT_BUFFER` and calls\n`glMemoryBarrier(GL_COMMAND_BARRIER_BIT)` if necessary.",120,null],[11,"prepare_and_bind_for_dispatch_indirect","","Makes sure that the buffer is binded to the `GL_DISPATCH_INDIRECT_BUFFER` and calls\n`glMemoryBarrier(GL_COMMAND_BARRIER_BIT)` if necessary.",120,null],[11,"prepare_and_bind_for_uniform","","Makes sure that the buffer is binded to the indexed `GL_UNIFORM_BUFFER` point and calls\n`glMemoryBarrier(GL_UNIFORM_BARRIER_BIT)` if necessary.",120,null],[11,"prepare_and_bind_for_shared_storage","","Makes sure that the buffer is binded to the indexed `GL_SHARED_STORAGE_BUFFER` point and calls\n`glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT)` if necessary.",120,null],[11,"bind_to_transform_feedback","","Binds the buffer to `GL_TRANSFORM_FEEDBACk_BUFFER` regardless of the current transform\nfeedback object.",120,null],[11,"upload","","Uploads data in the buffer.",120,null],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",120,null],[11,"map","","Returns a read and write mapping in memory of the content of the buffer.",120,{"inputs":[{"name":"alloc"},{"name":"range"}],"output":{"name":"mapping"}}],[11,"map_read","","Returns a read-only mapping in memory of the content of the buffer.",120,{"inputs":[{"name":"alloc"},{"name":"range"}],"output":{"name":"readmapping"}}],[11,"map_write","","Returns a write-only mapping in memory of the content of the buffer.",120,{"inputs":[{"name":"alloc"},{"name":"range"}],"output":{"name":"writemapping"}}],[11,"read","","Reads the content of the buffer.",120,{"inputs":[{"name":"alloc"},{"name":"range"}],"output":{"name":"result"}}],[11,"copy_to","","Copies data from this buffer to another one.",120,{"inputs":[{"name":"alloc"},{"name":"range"},{"name":"alloc"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"alloc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",120,null],[11,"get_id","","",120,{"inputs":[{"name":"alloc"}],"output":{"name":"u32"}}],[11,"drop","","",121,null],[11,"deref","","",122,{"inputs":[{"name":"mapping"}],"output":{"name":"d"}}],[11,"deref_mut","","",122,{"inputs":[{"name":"mapping"}],"output":{"name":"d"}}],[11,"deref","","",123,{"inputs":[{"name":"readmapping"}],"output":{"name":"d"}}],[11,"write","","Writes the whole content.",124,null],[11,"len","","Returns the length of the mapping.",124,{"inputs":[{"name":"writemapping"}],"output":{"name":"usize"}}],[11,"set","","Changes an element of the mapping.",124,null],[11,"new","glium::buffer::fences","Initialization.",125,{"inputs":[{"name":"fences"}],"output":{"name":"fences"}}],[11,"inserter","","Creates an `Inserter` that allows inserting a fence in the list for the given range.",125,{"inputs":[{"name":"fences"},{"name":"range"}],"output":{"name":"inserter"}}],[11,"wait","","Waits until the given range is accessible.",125,null],[11,"clean","","Cleans up all fences in the container. Must be called or you'll get a panic.",125,null],[11,"insert","","Inserts a new fence.",126,null],[11,"new","glium::buffer::view","Builds a new buffer containing the given data. The size of the buffer is equal to the size\nof the data.",127,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"t"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",127,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"bool"}}],[11,"write","","Uploads some data in this buffer.",127,null],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",127,null],[11,"read","","Reads the content of the buffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"writemapping"}}],[11,"copy_to","","Copies the content of the buffer to another buffer.",127,{"inputs":[{"name":"buffer"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",127,{"inputs":[{"name":"buffer"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"slice_custom_mut","","Same as `slice_custom` but returns a mutable slice.",127,{"inputs":[{"name":"buffer"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",127,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",127,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in this buffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",127,{"inputs":[{"name":"buffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",127,{"inputs":[{"name":"buffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",127,{"inputs":[{"name":"buffer"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",127,null],[11,"get_offset_bytes","","",127,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",127,{"inputs":[{"name":"buffer"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",127,null],[11,"prepare_for_element_array","","",127,null],[11,"bind_to_element_array","","",127,null],[11,"prepare_and_bind_for_pixel_pack","","",127,null],[11,"unbind_pixel_pack","","",127,null],[11,"prepare_and_bind_for_pixel_unpack","","",127,null],[11,"unbind_pixel_unpack","","",127,null],[11,"prepare_and_bind_for_query","","",127,null],[11,"unbind_query","","",127,null],[11,"prepare_and_bind_for_draw_indirect","","",127,null],[11,"prepare_and_bind_for_dispatch_indirect","","",127,null],[11,"prepare_and_bind_for_uniform","","",127,null],[11,"prepare_and_bind_for_shared_storage","","",127,null],[11,"bind_to_transform_feedback","","",127,null],[11,"clone","","",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"rc"}}],[11,"write","","Uploads some data in this buffer.",128,null],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",128,null],[11,"read","","Reads the content of the buffer.",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",128,{"inputs":[{"name":"bufferslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",128,{"inputs":[{"name":"bufferslice"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",128,{"inputs":[{"name":"bufferslice"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"bufferslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",128,{"inputs":[{"name":"bufferslice"},{"name":"buffermutslice"}],"output":{"name":"bufferslice"}}],[11,"from","","",128,{"inputs":[{"name":"bufferslice"},{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",128,{"inputs":[{"name":"bufferslice"},{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"add_fence","","",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"option"}}],[11,"get_offset_bytes","","",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",128,{"inputs":[{"name":"bufferslice"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",128,null],[11,"prepare_for_element_array","","",128,null],[11,"bind_to_element_array","","",128,null],[11,"prepare_and_bind_for_pixel_pack","","",128,null],[11,"unbind_pixel_pack","","",128,null],[11,"prepare_and_bind_for_pixel_unpack","","",128,null],[11,"unbind_pixel_unpack","","",128,null],[11,"prepare_and_bind_for_query","","",128,null],[11,"unbind_query","","",128,null],[11,"prepare_and_bind_for_draw_indirect","","",128,null],[11,"prepare_and_bind_for_dispatch_indirect","","",128,null],[11,"prepare_and_bind_for_uniform","","",128,null],[11,"prepare_and_bind_for_shared_storage","","",128,null],[11,"bind_to_transform_feedback","","",128,null],[11,"get_size","","Returns the size in bytes of this slice.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",129,null],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",129,null],[11,"read","","Reads the content of the buffer.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",129,{"inputs":[{"name":"buffermutslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",129,{"inputs":[{"name":"buffermutslice"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",129,{"inputs":[{"name":"buffermutslice"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"result"}}],[11,"add_fence","","",129,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"option"}}],[11,"fmt","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"buffer"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"bufferanyslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",130,null],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"result"}}],[11,"from","","",130,{"inputs":[{"name":"bufferany"},{"name":"buffer"}],"output":{"name":"bufferany"}}],[11,"drop","","",130,null],[11,"fmt","","",130,{"inputs":[{"name":"bufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_offset_bytes","","",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",130,{"inputs":[{"name":"bufferany"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",130,null],[11,"prepare_for_element_array","","",130,null],[11,"bind_to_element_array","","",130,null],[11,"prepare_and_bind_for_pixel_pack","","",130,null],[11,"unbind_pixel_pack","","",130,null],[11,"prepare_and_bind_for_pixel_unpack","","",130,null],[11,"unbind_pixel_unpack","","",130,null],[11,"prepare_and_bind_for_query","","",130,null],[11,"unbind_query","","",130,null],[11,"prepare_and_bind_for_draw_indirect","","",130,null],[11,"prepare_and_bind_for_dispatch_indirect","","",130,null],[11,"prepare_and_bind_for_uniform","","",130,null],[11,"prepare_and_bind_for_shared_storage","","",130,null],[11,"bind_to_transform_feedback","","",130,null],[11,"clone","","",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"bufferanyslice"}}],[11,"get_size","","Returns the number of bytes in this slice.",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",131,null],[11,"get_context","","Returns the context corresponding to this buffer.",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"rc"}}],[11,"fmt","","",131,{"inputs":[{"name":"bufferanyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_fence","","",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"option"}}],[11,"get_offset_bytes","","",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",131,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",131,null],[11,"prepare_for_element_array","","",131,null],[11,"bind_to_element_array","","",131,null],[11,"prepare_and_bind_for_pixel_pack","","",131,null],[11,"unbind_pixel_pack","","",131,null],[11,"prepare_and_bind_for_pixel_unpack","","",131,null],[11,"unbind_pixel_unpack","","",131,null],[11,"prepare_and_bind_for_query","","",131,null],[11,"unbind_query","","",131,null],[11,"prepare_and_bind_for_draw_indirect","","",131,null],[11,"prepare_and_bind_for_dispatch_indirect","","",131,null],[11,"prepare_and_bind_for_uniform","","",131,null],[11,"prepare_and_bind_for_shared_storage","","",131,null],[11,"bind_to_transform_feedback","","",131,null],[11,"clone","glium::buffer","",132,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"buffercreationerror"}}],[11,"fmt","","",132,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",132,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"str"}}],[11,"eq","","",133,{"inputs":[{"name":"buffermode"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"buffermode"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"buffermode"}],"output":{"name":"buffermode"}}],[11,"fmt","","",133,{"inputs":[{"name":"buffermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",133,{"inputs":[{"name":"buffermode"}],"output":{"name":"buffermode"}}],[11,"eq","","",134,{"inputs":[{"name":"buffertype"},{"name":"buffertype"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"buffertype"},{"name":"buffertype"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"buffertype"}],"output":{"name":"buffertype"}}],[11,"fmt","","",134,{"inputs":[{"name":"buffertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","glium::debug","",135,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"fmt","","",135,{"inputs":[{"name":"severity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"severity"}],"output":{"name":"severity"}}],[11,"fmt","","",136,{"inputs":[{"name":"source"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"source"}],"output":{"name":"source"}}],[11,"fmt","","",137,{"inputs":[{"name":"messagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"messagetype"}],"output":{"name":"messagetype"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",138,{"inputs":[{"name":"timestampquery"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",138,{"inputs":[{"name":"timestampquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",138,{"inputs":[{"name":"timestampquery"}],"output":{"name":"u64"}}],[11,"eq","glium::draw_parameters::blend","",139,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"alpha_blending","","Returns a blend effect to add transparent objects over others.",139,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"default","","",139,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"eq","","",140,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"fmt","","",140,{"inputs":[{"name":"blendingfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"blendingfunction"}],"output":{"name":"blendingfunction"}}],[11,"eq","","",141,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"linearblendingfactor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"linearblendingfactor"}],"output":{"name":"linearblendingfactor"}}],[11,"clone","glium::draw_parameters::depth","",142,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"fmt","","",142,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",142,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"eq","","",143,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"fmt","","",143,{"inputs":[{"name":"depthtest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"depthtest"}],"output":{"name":"depthtest"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",143,{"inputs":[{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"depthclamp"},{"name":"depthclamp"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"depthclamp"},{"name":"depthclamp"}],"output":{"name":"bool"}}],[11,"fmt","","",144,{"inputs":[{"name":"depthclamp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"depthclamp"}],"output":{"name":"depthclamp"}}],[11,"to_glenum","glium::draw_parameters::query","",145,{"inputs":[{"name":"querytype"}],"output":{"name":"u32"}}],[11,"fmt","","",146,{"inputs":[{"name":"querycreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"querycreationerror"}],"output":{"name":"querycreationerror"}}],[11,"fmt","","",146,{"inputs":[{"name":"querycreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",146,{"inputs":[{"name":"querycreationerror"}],"output":{"name":"str"}}],[11,"fmt","","",147,{"inputs":[{"name":"tobuffererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"tobuffererror"}],"output":{"name":"tobuffererror"}}],[11,"fmt","","",147,{"inputs":[{"name":"tobuffererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",147,{"inputs":[{"name":"tobuffererror"}],"output":{"name":"str"}}],[11,"new","","Builds a new query. Returns `None` if the backend doesn't support this type.",148,{"inputs":[{"name":"rawquery"},{"name":"f"},{"name":"querytype"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",148,{"inputs":[{"name":"rawquery"}],"output":{"name":"bool"}}],[11,"get_u32","","Returns the value of the query. Blocks until it is available.",148,{"inputs":[{"name":"rawquery"}],"output":{"name":"u32"}}],[11,"write_u32_to_buffer","","Writes the value of the query to a buffer.",148,{"inputs":[{"name":"rawquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_u64","","Returns the value of the query. Blocks until it is available.",148,{"inputs":[{"name":"rawquery"}],"output":{"name":"u64"}}],[11,"get_bool","","Returns the value of the query. Blocks until it is available.",148,{"inputs":[{"name":"rawquery"}],"output":{"name":"bool"}}],[11,"drop","","",148,null],[11,"begin_query","","",148,{"inputs":[{"name":"rawquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",148,null],[11,"end_time_elapsed_query","","",148,null],[11,"end_primitives_generated_query","","",148,null],[11,"end_transform_feedback_primitives_written_query","","",148,null],[11,"begin_conditional_render","","",148,null],[11,"end_conditional_render","","",148,null],[11,"is_unused","","",148,{"inputs":[{"name":"rawquery"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"rawquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",148,{"inputs":[{"name":"rawquery"}],"output":{"name":"u32"}}],[11,"fmt","","",149,{"inputs":[{"name":"samplespassedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",149,{"inputs":[{"name":"samplespassedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",149,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",149,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",149,{"inputs":[{"name":"samplespassedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",149,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",149,{"inputs":[{"name":"samplespassedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",149,null],[11,"end_time_elapsed_query","","",149,null],[11,"end_primitives_generated_query","","",149,null],[11,"end_transform_feedback_primitives_written_query","","",149,null],[11,"begin_conditional_render","","",149,null],[11,"end_conditional_render","","",149,null],[11,"is_unused","","",149,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"timeelapsedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",150,{"inputs":[{"name":"timeelapsedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",150,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",150,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",150,{"inputs":[{"name":"timeelapsedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",150,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",150,{"inputs":[{"name":"timeelapsedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",150,null],[11,"end_time_elapsed_query","","",150,null],[11,"end_primitives_generated_query","","",150,null],[11,"end_transform_feedback_primitives_written_query","","",150,null],[11,"begin_conditional_render","","",150,null],[11,"end_conditional_render","","",150,null],[11,"is_unused","","",150,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"anysamplespassedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",151,{"inputs":[{"name":"anysamplespassedquery"},{"name":"f"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",151,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",151,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",151,{"inputs":[{"name":"anysamplespassedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",151,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",151,{"inputs":[{"name":"anysamplespassedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",151,null],[11,"end_time_elapsed_query","","",151,null],[11,"end_primitives_generated_query","","",151,null],[11,"end_transform_feedback_primitives_written_query","","",151,null],[11,"begin_conditional_render","","",151,null],[11,"end_conditional_render","","",151,null],[11,"is_unused","","",151,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",152,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",152,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",152,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",152,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",152,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",152,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",152,null],[11,"end_time_elapsed_query","","",152,null],[11,"end_primitives_generated_query","","",152,null],[11,"end_transform_feedback_primitives_written_query","","",152,null],[11,"begin_conditional_render","","",152,null],[11,"end_conditional_render","","",152,null],[11,"is_unused","","",152,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",153,null],[11,"end_time_elapsed_query","","",153,null],[11,"end_primitives_generated_query","","",153,null],[11,"end_transform_feedback_primitives_written_query","","",153,null],[11,"begin_conditional_render","","",153,null],[11,"end_conditional_render","","",153,null],[11,"is_unused","","",153,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"bool"}}],[11,"fmt","glium::draw_parameters::stencil","",154,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"default","","",154,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"eq","","",155,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"stenciltest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"stenciltest"}],"output":{"name":"stenciltest"}}],[11,"eq","","",156,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"stenciloperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"stenciloperation"}],"output":{"name":"stenciloperation"}}],[11,"to_glenum","","",156,{"inputs":[{"name":"stenciloperation"}],"output":{"name":"u32"}}],[11,"eq","glium::draw_parameters","",157,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"backfacecullingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"backfacecullingmode"}],"output":{"name":"backfacecullingmode"}}],[11,"eq","","",158,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"polygonmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"polygonmode"}],"output":{"name":"polygonmode"}}],[11,"to_glenum","","",158,{"inputs":[{"name":"polygonmode"}],"output":{"name":"u32"}}],[11,"eq","","",159,{"inputs":[{"name":"smooth"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"smooth"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"smooth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"smooth"}],"output":{"name":"smooth"}}],[11,"to_glenum","","",159,{"inputs":[{"name":"smooth"}],"output":{"name":"u32"}}],[11,"eq","","",160,{"inputs":[{"name":"provokingvertex"},{"name":"provokingvertex"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"provokingvertex"},{"name":"provokingvertex"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"provokingvertex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"provokingvertex"}],"output":{"name":"provokingvertex"}}],[11,"fmt","","",161,{"inputs":[{"name":"drawparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"clone","","",162,{"inputs":[{"name":"conditionalrendering"}],"output":{"name":"conditionalrendering"}}],[11,"fmt","","",162,{"inputs":[{"name":"conditionalrendering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"samplesqueryparam"}],"output":{"name":"samplesqueryparam"}}],[11,"fmt","","",163,{"inputs":[{"name":"samplesqueryparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",163,{"inputs":[{"name":"samplesqueryparam"},{"name":"samplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",163,{"inputs":[{"name":"samplesqueryparam"},{"name":"anysamplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"default","","",161,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"fmt","glium::framebuffer::default_fb","",164,{"inputs":[{"name":"defaultframebufferattachment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"defaultframebufferattachment"}],"output":{"name":"defaultframebufferattachment"}}],[11,"back_left","","Creates a `DefaultFramebuffer` with the back left buffer.",165,{"inputs":[{"name":"defaultframebuffer"},{"name":"f"}],"output":{"name":"defaultframebuffer"}}],[11,"clear","","",165,null],[11,"get_dimensions","","",165,null],[11,"get_depth_buffer_bits","","",165,{"inputs":[{"name":"defaultframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",165,{"inputs":[{"name":"defaultframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",165,{"inputs":[{"name":"defaultframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",165,null],[11,"blit_from_frame","","",165,null],[11,"blit_from_simple_framebuffer","","",165,null],[11,"blit_from_multioutput_framebuffer","","",165,null],[11,"get_attachments","","",165,{"inputs":[{"name":"defaultframebuffer"}],"output":{"name":"option"}}],[11,"fmt","glium::framebuffer::render_buffer","",166,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",166,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",166,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"from","","",166,{"inputs":[{"name":"creationerror"},{"name":"formatnotsupportederror"}],"output":{"name":"creationerror"}}],[11,"new","","Builds a new render buffer.",167,{"inputs":[{"name":"renderbuffer"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",168,null],[11,"get_samples","","Returns the number of samples of the render buffer, or `None` if multisampling isn't\nenabled.",168,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"option"}}],[11,"get_context","","Returns the context used to create this renderbuffer.",168,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"rc"}}],[11,"kind","","Returns the kind of renderbuffer.",168,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"texturekind"}}],[11,"deref","","",167,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",167,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",167,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"u32"}}],[11,"new","","Builds a new render buffer.",169,{"inputs":[{"name":"depthrenderbuffer"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",169,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",169,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",169,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"u32"}}],[11,"new","","Builds a new render buffer.",170,{"inputs":[{"name":"stencilrenderbuffer"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",170,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",170,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",170,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"u32"}}],[11,"new","","Builds a new render buffer.",171,{"inputs":[{"name":"depthstencilrenderbuffer"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",171,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",171,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",171,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"u32"}}],[11,"drop","","",168,null],[11,"get_id","","",168,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"u32"}}],[11,"new","glium::framebuffer","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"}],"output":{"name":"result"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth\nbuffer, but no stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"result"}}],[11,"depth_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"d"}],"output":{"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth\nbuffer, and a stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"depth_and_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"s"}],"output":{"name":"result"}}],[11,"stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"result"}}],[11,"depth_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"d"}],"output":{"name":"result"}}],[11,"clear","","",172,null],[11,"get_dimensions","","",172,null],[11,"get_depth_buffer_bits","","",172,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",172,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",172,{"inputs":[{"name":"simpleframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",172,null],[11,"blit_from_frame","","",172,null],[11,"blit_from_simple_framebuffer","","",172,null],[11,"blit_from_multioutput_framebuffer","","",172,null],[11,"get_attachments","","",172,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",173,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",173,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer, and a stencil buffer.",173,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a stencil buffer, but no depth buffer.",173,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth-stencil buffer.",173,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"name":"result"}}],[11,"clear","","",173,null],[11,"get_dimensions","","",173,null],[11,"get_depth_buffer_bits","","",173,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",173,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",173,{"inputs":[{"name":"multioutputframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",173,null],[11,"blit_from_frame","","",173,null],[11,"blit_from_simple_framebuffer","","",173,null],[11,"blit_from_multioutput_framebuffer","","",173,null],[11,"get_attachments","","",173,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"is_supported","","Returns true if empty framebuffers are supported by the backend.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_layered_supported","","Returns true if layered empty framebuffers are supported by the backend.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_max_supported_width","","Returns the maximum width of empty framebuffers that the backend supports, or `None` if\nempty framebuffers are not supported.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_height","","Returns the maximum height of empty framebuffers that the backend supports, or `None` if\nempty framebuffers are not supported.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_samples","","Returns the maximum number of samples of empty framebuffers that the backend supports,\nor `None` if empty framebuffers are not supported.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_layers","","Returns the maximum number of layers of empty framebuffers that the backend supports,\nor `None` if layered empty framebuffers are not supported.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"new","","Creates a `EmptyFrameBuffer`.",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"option"},{"name":"option"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clear","","",174,null],[11,"get_dimensions","","",174,null],[11,"get_depth_buffer_bits","","",174,{"inputs":[{"name":"emptyframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",174,{"inputs":[{"name":"emptyframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",174,{"inputs":[{"name":"emptyframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",174,null],[11,"blit_from_frame","","",174,null],[11,"blit_from_simple_framebuffer","","",174,null],[11,"blit_from_multioutput_framebuffer","","",174,null],[11,"get_attachments","","",174,{"inputs":[{"name":"emptyframebuffer"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"colorattachment"}],"output":{"name":"colorattachment"}}],[11,"to_color_attachment","","",175,{"inputs":[{"name":"colorattachment"}],"output":{"name":"colorattachment"}}],[11,"clone","","",176,{"inputs":[{"name":"depthattachment"}],"output":{"name":"depthattachment"}}],[11,"to_depth_attachment","","",176,{"inputs":[{"name":"depthattachment"}],"output":{"name":"depthattachment"}}],[11,"clone","","",177,{"inputs":[{"name":"stencilattachment"}],"output":{"name":"stencilattachment"}}],[11,"to_stencil_attachment","","",177,{"inputs":[{"name":"stencilattachment"}],"output":{"name":"stencilattachment"}}],[11,"clone","","",178,{"inputs":[{"name":"depthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","","",178,{"inputs":[{"name":"depthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[11,"clone","glium::index::buffer","",179,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",179,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",179,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",179,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"from","","",179,{"inputs":[{"name":"creationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",180,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",180,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",180,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",180,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",180,null],[11,"empty","","Builds a new empty index buffer.",180,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",180,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",180,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",180,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",180,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",180,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",180,{"inputs":[{"name":"indexbuffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"deref","","",180,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",180,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"indexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"indexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"get_id","glium::index::buffer","",180,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"u32"}}],[11,"from","glium::index","",181,{"inputs":[{"name":"indicessource"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"fmt","glium::index::buffer","",182,{"inputs":[{"name":"indexbufferslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",182,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",182,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",182,{"inputs":[{"name":"indexbufferslice"},{"name":"r"}],"output":{"name":"option"}}],[11,"deref","","",182,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",182,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::index","",181,{"inputs":[{"name":"indicessource"},{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"from","","",181,{"inputs":[{"name":"indicessource"},{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"fmt","glium::index::buffer","",183,{"inputs":[{"name":"indexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",183,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",183,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"indextype"}}],[11,"deref","","",183,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"bufferany"}}],[11,"deref_mut","","",183,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"bufferany"}}],[11,"from","","",183,{"inputs":[{"name":"indexbufferany"},{"name":"indexbuffer"}],"output":{"name":"indexbufferany"}}],[11,"from","glium::index","",181,{"inputs":[{"name":"indicessource"},{"name":"indexbufferany"}],"output":{"name":"indicessource"}}],[11,"clone","glium::index::multidraw","",184,{"inputs":[{"name":"drawcommandnoindices"}],"output":{"name":"drawcommandnoindices"}}],[11,"fmt","","",184,{"inputs":[{"name":"drawcommandnoindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",184,{"inputs":[{"name":"drawcommandnoindices"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",184,{"inputs":[{"name":"drawcommandnoindices"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",185,{"inputs":[{"name":"drawcommandindices"}],"output":{"name":"drawcommandindices"}}],[11,"fmt","","",185,{"inputs":[{"name":"drawcommandindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",185,{"inputs":[{"name":"drawcommandindices"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",185,{"inputs":[{"name":"drawcommandindices"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"empty","","Builds an empty buffer.",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can\nbe passed to the `draw()` function.",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"primitivetype"}],"output":{"name":"indicessource"}}],[11,"deref","","",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",186,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffermutslice"}}],[11,"empty","glium::index::multidraw","Builds an empty buffer.",187,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",187,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",187,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",187,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can\nbe passed to the `draw()` function.",187,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"deref","","",187,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",187,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"drawcommandsindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffermutslice"}}],[11,"clone","glium::index","",181,{"inputs":[{"name":"indicessource"}],"output":{"name":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",181,{"inputs":[{"name":"indicessource"}],"output":{"name":"primitivetype"}}],[11,"eq","","",109,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",109,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",109,{"inputs":[{"name":"primitivetype"}],"output":{"name":"u32"}}],[11,"fmt","","",188,{"inputs":[{"name":"noindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"noindices"}],"output":{"name":"noindices"}}],[11,"from","","",181,{"inputs":[{"name":"indicessource"},{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"from","","",181,{"inputs":[{"name":"indicessource"},{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"eq","","",189,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"fmt","","",189,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",189,{"inputs":[{"name":"indextype"}],"output":{"name":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",189,{"inputs":[{"name":"indextype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"to_glenum","","",189,{"inputs":[{"name":"indextype"}],"output":{"name":"u32"}}],[11,"is_supported","glium::program::compute","Returns true if the backend supports compute shaders.",190,{"inputs":[{"name":"computeshader"},{"name":"c"}],"output":{"name":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",190,{"inputs":[{"name":"computeshader"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",190,{"inputs":[{"name":"computeshader"},{"name":"f"},{"name":"binary"}],"output":{"name":"result"}}],[11,"execute","","Executes the compute shader.",190,null],[11,"execute_indirect","","Executes the compute shader.",190,null],[11,"get_binary","","Returns the program's compiled binary.",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",190,{"inputs":[{"name":"computeshader"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"fmt","","",190,{"inputs":[{"name":"computeshader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"handle"}}],[11,"use_program","","",190,null],[11,"set_uniform","","",190,null],[11,"set_uniform_block_binding","","",190,null],[11,"set_shader_storage_block_binding","","",190,null],[11,"set_subroutine_uniforms_for_stage","","",190,null],[11,"get_uniform","","",190,{"inputs":[{"name":"computeshader"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform_blocks","","",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_data","","",190,{"inputs":[{"name":"computeshader"}],"output":{"name":"subroutinedata"}}],[11,"clone","","",191,{"inputs":[{"name":"computecommand"}],"output":{"name":"computecommand"}}],[11,"fmt","","",191,{"inputs":[{"name":"computecommand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",191,{"inputs":[{"name":"computecommand"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",191,{"inputs":[{"name":"computecommand"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"new","glium::program::program","Builds a new program.",192,{"inputs":[{"name":"program"},{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",192,{"inputs":[{"name":"program"},{"name":"f"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",192,{"inputs":[{"name":"program"}],"output":{"name":"result"}}],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",192,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",192,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",192,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",192,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",192,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat`\nand `stride`.",192,{"inputs":[{"name":"program"},{"name":"cow"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it\ndepends on the vertex/index data passed when drawing.",192,{"inputs":[{"name":"program"}],"output":{"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",192,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",192,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",192,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",192,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",192,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",192,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",192,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",192,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_uniforms","","Returns the subroutine uniforms of this program.",192,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",192,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",192,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",192,{"inputs":[{"name":"program"}],"output":{"name":"handle"}}],[11,"use_program","","",192,null],[11,"set_uniform","","",192,null],[11,"set_uniform_block_binding","","",192,null],[11,"set_shader_storage_block_binding","","",192,null],[11,"set_subroutine_uniforms_for_stage","","",192,null],[11,"get_uniform","","",192,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform_blocks","","",192,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","",192,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_data","","",192,{"inputs":[{"name":"program"}],"output":{"name":"subroutinedata"}}],[11,"from_shaders","glium::program::raw","Builds a new program from a list of shaders.",193,{"inputs":[{"name":"rawprogram"},{"name":"f"},{"name":"i"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_binary","","Creates a program from binary.",193,{"inputs":[{"name":"rawprogram"},{"name":"f"},{"name":"binary"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"result"}}],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",193,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",193,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",193,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat`\nand `stride`.",193,{"inputs":[{"name":"rawprogram"},{"name":"cow"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it\ndepends on the vertex/index data passed when drawing.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",193,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"iter"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_data","","Returns data associated with the programs subroutines.",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"subroutinedata"}}],[11,"dispatch_compute","","Assumes that the program contains a compute shader and executes it.",193,{"inputs":[{"name":"rawprogram"},{"name":"u"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dispatch_compute_indirect","","Assumes that the program contains a compute shader and executes it.",193,{"inputs":[{"name":"rawprogram"},{"name":"u"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"rawprogram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"handle"}}],[11,"use_program","","",193,null],[11,"set_uniform","","",193,null],[11,"set_uniform_block_binding","","",193,null],[11,"set_shader_storage_block_binding","","",193,null],[11,"set_subroutine_uniforms_for_stage","","",193,null],[11,"get_uniform","","",193,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform_blocks","","",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_data","","",193,{"inputs":[{"name":"rawprogram"}],"output":{"name":"subroutinedata"}}],[11,"drop","","",193,null],[11,"clone","glium::program::reflection","",194,{"inputs":[{"name":"uniform"}],"output":{"name":"uniform"}}],[11,"fmt","","",194,{"inputs":[{"name":"uniform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",195,{"inputs":[{"name":"uniformblock"}],"output":{"name":"uniformblock"}}],[11,"fmt","","",195,{"inputs":[{"name":"uniformblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",196,{"inputs":[{"name":"blocklayout"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"blocklayout"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"blocklayout"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",196,{"inputs":[{"name":"blocklayout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",197,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",198,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",198,{"inputs":[{"name":"transformfeedbackbuffer"}],"output":{"name":"transformfeedbackbuffer"}}],[11,"fmt","","",198,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"transformfeedbackvarying"}],"output":{"name":"transformfeedbackvarying"}}],[11,"fmt","","",199,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"transformfeedbackmode"}],"output":{"name":"transformfeedbackmode"}}],[11,"fmt","","",200,{"inputs":[{"name":"transformfeedbackmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",201,{"inputs":[{"name":"outputprimitives"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"outputprimitives"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"outputprimitives"}],"output":{"name":"outputprimitives"}}],[11,"fmt","","",201,{"inputs":[{"name":"outputprimitives"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"subroutinedata"}],"output":{"name":"subroutinedata"}}],[11,"fmt","","",202,{"inputs":[{"name":"subroutinedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"subroutineuniform"}],"output":{"name":"subroutineuniform"}}],[11,"fmt","","",203,{"inputs":[{"name":"subroutineuniform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",204,{"inputs":[{"name":"subroutine"}],"output":{"name":"subroutine"}}],[11,"fmt","","",204,{"inputs":[{"name":"subroutine"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",205,null],[11,"eq","","",205,{"inputs":[{"name":"shaderstage"},{"name":"shaderstage"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"shaderstage"},{"name":"shaderstage"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"shaderstage"}],"output":{"name":"shaderstage"}}],[11,"fmt","","",205,{"inputs":[{"name":"shaderstage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_enum","","Converts the `ShaderStage` to its GLenum equivalent",205,{"inputs":[{"name":"shaderstage"}],"output":{"name":"u32"}}],[11,"get_id","glium::program::shader","",206,{"inputs":[{"name":"shader"}],"output":{"name":"handle"}}],[11,"drop","","",206,null],[11,"new","glium::program::uniforms_storage","Builds a new empty storage.",207,{"inputs":[{"name":"uniformsstorage"}],"output":{"name":"uniformsstorage"}}],[11,"set_uniform_value","","Compares `value` with the value stored in this object. If the values differ, updates\nthe storage and calls `glUniform`.",207,null],[11,"set_uniform_block_binding","","Compares `value` with the value stored in this object. If the values differ, updates\nthe storage and calls `glUniformBlockBinding`.",207,null],[11,"set_shader_storage_block_binding","","Compares `value` with the value stored in this object. If the values differ, updates\nthe storage and calls `glShaderStorageBlockBinding`.",207,null],[11,"set_subroutine_uniforms_for_stage","","Compares `indices` to the value stored in this object. If the values differ,\nupdates the programs subroutine uniform bindings.",207,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",208,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",208,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",208,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",208,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",208,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",208,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",209,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",209,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",209,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",209,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",209,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",209,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",210,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",211,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",212,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",213,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",214,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",215,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","lux","Returns true if the boxed type is the same as `T`",216,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",216,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",216,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",216,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",216,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",216,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",216,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",216,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",216,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",216,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",216,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",216,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",217,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",217,null],[11,"next_back","","",217,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"shl","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",218,null],[11,"shr","","",218,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"add","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",218,null],[11,"sub","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",218,null],[11,"mul","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",218,null],[11,"div","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",218,null],[11,"rem","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",218,null],[11,"not","","",218,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",218,null],[11,"bitor","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",218,null],[11,"bitand","","",218,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",218,null],[11,"clone","std::thread::local","",219,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",219,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",220,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",220,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",221,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",221,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",222,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",222,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",223,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",223,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",223,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",224,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",224,null],[11,"get","","",224,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",225,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",225,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",225,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",225,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",226,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",226,null],[11,"name","","Gets the thread's name.",226,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",226,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",226,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",227,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",227,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",228,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",229,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",230,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",230,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",230,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",230,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",232,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",232,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",229,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",229,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",229,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",229,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",229,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",229,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",229,null],[11,"next","","",232,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",232,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",232,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",232,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",231,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",231,null],[11,"take","","Removes this bucket's key and value from the hashtable.",231,null],[11,"replace","","",231,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",231,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",231,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",231,null],[11,"expect_full","","",233,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",234,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",234,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",235,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",236,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",236,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",237,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",238,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",238,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"len","","",238,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",239,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"len","","",239,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",240,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"len","","",240,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",241,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"len","","",241,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",241,null],[11,"clone","","",235,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",235,null],[11,"clone","std::collections::hash::map","",242,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",243,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",243,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",243,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",243,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",243,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",243,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",243,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",243,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",243,null],[11,"get","","Returns a reference to the value corresponding to the key.",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",243,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",243,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",243,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",244,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",245,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",246,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",243,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",244,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"len","","",244,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",247,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"len","","",247,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",248,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"len","","",248,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",245,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",245,null],[11,"len","","",245,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",246,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"len","","",246,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",249,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"len","","",249,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",250,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",250,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",251,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",251,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",251,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",251,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",251,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",252,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",243,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",243,null],[11,"extend","","",243,null],[11,"clone","","",253,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",253,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"build_hasher","","",253,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",253,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",243,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",243,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",254,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",254,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",254,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",254,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",254,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",254,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",254,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",254,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",254,null],[11,"contains","","Returns `true` if the set contains a value.",254,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",254,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",254,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",254,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",254,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",254,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",254,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",254,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",254,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",254,null],[11,"extend","","",254,null],[11,"default","","",254,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",254,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",255,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",255,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",255,null],[11,"len","","",255,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",256,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"len","","",256,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",257,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"len","","",257,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",258,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",258,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"clone","","",259,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",259,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"clone","","",260,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",260,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",260,null],[11,"clone","","",261,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",261,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"hasher","std::collections::hash::state","",262,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",262,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",262,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",263,null],[11,"default","","",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",263,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",263,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",263,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",263,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",263,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",263,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",263,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",263,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",263,null],[11,"drop","","",264,null],[11,"clone","","",265,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",265,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"next_back","","",265,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",266,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[11,"next_back","","",266,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",267,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"next_back","","",267,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",263,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",268,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",263,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",263,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",263,null],[11,"extend","","",263,null],[11,"clone","collections::linked_list","",269,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",270,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",271,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",271,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",272,null],[11,"iter","","Provides a forward iterator.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",272,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",272,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",272,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",272,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",272,null],[11,"next","","",269,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"next_back","","",269,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",273,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",273,null],[11,"next_back","","",273,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",273,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",273,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",270,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"next_back","","",270,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",272,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",272,null],[11,"extend","","",272,null],[11,"eq","","",272,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",272,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",272,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",272,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",272,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",272,null],[11,"clone","collections::vec_deque","",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",274,null],[11,"default","","",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",274,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",274,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",274,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",274,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",274,null],[11,"iter","","Returns a front-to-back iterator.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",274,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",274,null],[11,"len","","Returns the number of elements in the `VecDeque`.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",274,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",274,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",274,null],[11,"push_back","","Appends an element to the back of a buffer",274,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",274,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",274,null],[11,"retain","","Retains only the elements specified by the predicate.",274,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",274,null],[11,"clone","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"next_back","","",275,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",276,null],[11,"next_back","","",276,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",277,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",277,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"next_back","","",277,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",278,null],[11,"next","","",278,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next_back","","",278,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",274,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",274,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",274,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",274,null],[11,"index","","",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",274,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",274,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",274,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",274,null],[11,"extend","","",274,null],[11,"fmt","","",274,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",279,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",279,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",279,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",279,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",279,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",279,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",279,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",280,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",280,null],[11,"next","","",281,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",281,null],[11,"clone","","",282,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",282,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",282,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",282,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",282,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",282,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",283,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[11,"fmt","","",284,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",284,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",284,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",285,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"len","","",285,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",286,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"len","","",286,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",287,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",287,null],[11,"cmp","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",287,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",288,null],[11,"fmt","","",289,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",289,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",289,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",289,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",290,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",290,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",290,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",287,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",287,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",287,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",287,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",287,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",287,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",287,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",287,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",287,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",288,null],[11,"as_ptr","","Returns the inner pointer to this C string.",288,null],[11,"to_bytes","","Converts this C string to a byte slice.",288,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",288,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",288,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",288,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",287,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",287,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",268,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",288,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",287,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",289,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",289,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",289,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",289,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",291,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",290,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",290,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",290,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",290,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",290,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",288,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",288,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",288,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",288,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",287,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",287,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",288,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",287,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",292,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",292,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",292,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",292,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",292,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",292,null],[11,"from","","",292,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",292,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",292,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",293,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",293,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",293,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",293,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",293,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",293,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",292,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",292,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",292,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",292,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",292,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",292,null],[11,"eq","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",293,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",293,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",293,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",293,null],[11,"fmt","","",293,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",292,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",293,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",293,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",292,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",294,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",296,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",297,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",297,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",297,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",297,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",298,null],[11,"eq","","",298,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",298,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",299,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",299,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",299,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",299,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",299,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",299,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",299,null],[11,"read_to_end","","",299,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",299,null],[11,"flush","","",299,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",299,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",296,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",296,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",296,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",296,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",296,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",296,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",296,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",295,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",295,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",295,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",295,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",295,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",297,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",297,null],[11,"is_dir","","Test whether this file type represents a directory.",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",300,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",301,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",301,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",301,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",301,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",302,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",303,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",303,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",303,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",304,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",304,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",304,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",304,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",304,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",304,null],[11,"fill_buf","","",304,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",304,null],[11,"fmt","","",304,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",304,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",306,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",306,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",306,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",306,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",306,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",306,null],[11,"flush","","",306,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",306,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",306,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",305,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",305,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",291,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",305,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",305,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",307,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",307,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",307,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",307,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",307,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",307,null],[11,"flush","","",307,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",308,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",308,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",308,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",308,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",308,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",308,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",308,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",308,null],[11,"seek","","",308,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",308,null],[11,"fill_buf","","",308,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",308,null],[11,"write","","",308,null],[11,"flush","","",308,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",308,null],[11,"flush","","",308,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",308,null],[11,"flush","","",308,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",291,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",310,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",310,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",291,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",291,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",291,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",291,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",291,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",291,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",291,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",291,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",311,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",291,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",291,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",209,null],[11,"read_to_end","","",209,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",209,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",209,null],[11,"write","","",209,null],[11,"flush","","",209,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",209,null],[11,"write_fmt","","",209,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",209,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",209,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",209,null],[11,"read_until","","",209,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",209,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",268,null],[11,"write_all","","",268,null],[11,"flush","","",268,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",312,null],[11,"get","","",312,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",313,null],[11,"fill_buf","","",313,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",313,null],[11,"read","","",314,null],[11,"write","","",315,null],[11,"flush","","",315,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",316,null],[11,"write","","",317,null],[11,"flush","","",317,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",318,null],[11,"flush","","",318,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",319,null],[11,"flush","","",319,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",319,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",320,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",320,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",320,null],[11,"read_to_end","","",320,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",320,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",320,null],[11,"read","","",321,null],[11,"read_to_end","","",321,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",321,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",321,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",322,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",322,null],[11,"flush","","",322,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",322,null],[11,"write_fmt","","",322,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",323,null],[11,"flush","","",323,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",324,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",324,null],[11,"flush","","",324,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",324,null],[11,"write_fmt","","",324,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",325,null],[11,"flush","","",325,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",326,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",326,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",326,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",326,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",327,null],[11,"flush","","",327,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",328,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",329,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",329,null],[11,"fill_buf","","",329,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",329,null],[11,"read","","",330,null],[11,"next","","",331,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",332,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",333,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",332,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",332,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",332,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",334,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",335,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",336,null],[11,"fmt","","",336,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",336,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",337,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",337,null],[11,"clone","","",337,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",337,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",337,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",338,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",338,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",336,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",338,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",338,null],[11,"partial_cmp","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",339,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",339,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",339,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",339,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",339,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",339,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",339,null],[11,"partial_cmp","","",339,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",339,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",340,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",340,null],[11,"eq","","",340,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",340,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",340,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",340,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",340,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",340,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",341,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",341,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",341,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",342,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",342,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",342,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",342,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",342,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",340,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",341,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",341,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",342,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",342,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",341,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",342,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",341,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",342,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",341,null],[11,"hash","","",342,null],[11,"to_socket_addrs","","",340,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",341,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",342,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",343,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",343,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",343,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",343,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",343,null],[11,"read_to_end","","",343,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",343,null],[11,"flush","","",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",343,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",344,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",344,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",344,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",344,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",344,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",345,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",344,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",346,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",346,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",346,null],[11,"local_addr","","Returns the socket address that this socket was created from.",346,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",346,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",346,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",346,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",346,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",346,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",346,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",336,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",338,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",339,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",341,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",342,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",340,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",347,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",347,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",347,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",347,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",347,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",348,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",348,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",348,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",348,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",349,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",350,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",299,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",299,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",299,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",344,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",346,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",343,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",344,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",346,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",343,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",344,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",346,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",292,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",292,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",293,null],[11,"as_bytes","","",293,null],[11,"mode","std::fs","",297,{"inputs":[{"name":"permissions"}],"output":{"name":"u16"}}],[11,"set_mode","","",297,null],[11,"from_mode","","",297,{"inputs":[{"name":"permissions"},{"name":"u16"}],"output":{"name":"permissions"}}],[11,"mode","","",296,{"inputs":[{"name":"openoptions"},{"name":"u16"}],"output":{"name":"openoptions"}}],[11,"dev","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"ino","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"nlink","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"uid","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"size","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"blocks","","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",298,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",301,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",303,{"inputs":[{"name":"dirbuilder"},{"name":"u16"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",351,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",351,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",351,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",352,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",353,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",354,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",355,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",356,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",354,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",355,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",356,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",227,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",227,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",357,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",357,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",357,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",358,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",358,null],[11,"fmt","","",358,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",358,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",358,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",359,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",360,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",360,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",360,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",360,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",360,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",360,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",360,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",360,null],[11,"fmt","","",361,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",361,null],[11,"cmp","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",361,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",361,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",361,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",361,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",362,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",363,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",362,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",362,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",362,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",362,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",363,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",363,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",363,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",363,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",363,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",362,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",362,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",362,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",362,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",362,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",364,null],[11,"pop","","Truncate `self` to `self.parent()`.",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",364,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",364,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",364,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",364,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",364,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",364,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",364,null],[11,"fmt","","",364,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",365,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",365,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",365,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",365,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",365,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",365,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",365,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",365,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",365,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",365,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",365,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",365,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",365,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",365,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",365,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",365,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",365,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",365,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",365,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",365,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",365,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",365,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",365,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",365,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",365,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",365,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",365,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",365,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",365,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",365,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",365,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",366,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",366,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",365,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",364,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",364,null],[11,"partial_cmp","","",364,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",364,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",367,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",367,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",367,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",367,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",365,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",365,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",365,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",365,null],[11,"partial_cmp","","",365,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",365,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",365,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",293,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",292,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",294,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",364,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",364,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",365,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",364,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",366,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",365,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",366,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",366,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",364,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",367,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",367,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",354,null],[11,"flush","","",354,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",355,null],[11,"read","","",356,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",351,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",351,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",351,null],[11,"env","","Inserts or updates an environment variable mapping.",351,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",351,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",351,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",351,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",351,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",351,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",351,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",351,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",351,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",351,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",351,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",369,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",369,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",369,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",369,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",353,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",353,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",353,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",352,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",352,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",352,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",352,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",352,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",352,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",352,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",370,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",370,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",370,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",370,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",371,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",371,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",371,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",371,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",372,null],[11,"new","std::sync::mpsc::oneshot","",373,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",373,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",373,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",373,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",373,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",373,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",373,null],[11,"drop_port","","",373,null],[11,"can_recv","","",373,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",373,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",373,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",373,null],[11,"eq","std::sync::mpsc::select","",374,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",374,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",375,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",375,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",375,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",376,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",376,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",376,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",376,null],[11,"drop","","",375,null],[11,"drop","","",376,null],[11,"next","","",377,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",378,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",378,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",378,null],[11,"send","","",378,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",378,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",378,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",378,null],[11,"drop_chan","","",378,null],[11,"drop_port","","",378,null],[11,"can_recv","","",378,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",378,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",378,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",378,null],[11,"new","std::sync::mpsc::stream","",379,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",379,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",379,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",379,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",379,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",379,null],[11,"drop_port","","",379,null],[11,"can_recv","","",379,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",379,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",379,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",379,null],[11,"fmt","std::sync::mpsc::sync","",380,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",381,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",381,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",381,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",381,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",381,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",381,null],[11,"drop_chan","","",381,null],[11,"drop_port","","",381,null],[11,"can_recv","","",381,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",381,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",381,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",381,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",382,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",382,null],[11,"pop","","Pops some data from this queue.",382,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",382,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",383,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",383,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",383,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",383,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",383,null],[11,"clone","std::sync::mpsc","",384,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",384,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",384,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",385,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",385,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",385,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",385,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",386,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",386,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",386,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",386,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",387,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",387,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",387,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",388,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",388,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",388,null],[11,"send","","Sends a value on this synchronous channel.",389,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",389,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",389,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",389,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",390,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",390,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",390,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",391,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",392,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",390,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",390,null],[11,"fmt","","",384,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",384,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",384,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",384,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",387,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",387,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",387,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",387,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",385,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",385,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",385,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",386,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",386,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",386,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",393,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",393,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",394,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",395,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",395,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",395,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",395,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",396,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",396,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",396,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",396,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",396,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",396,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",396,null],[11,"drop","","",396,null],[11,"new","","Creates a new condition variable",397,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",397,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",397,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",397,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",397,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",397,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",397,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",397,null],[11,"drop","std::sync::mutex","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",398,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",398,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",398,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",398,null],[11,"deref","","",399,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",399,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",399,null],[11,"new","std::sync::once","Creates a new `Once` value.",400,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",400,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",401,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",401,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",401,null],[11,"fmt","","",401,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",402,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",402,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",402,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",402,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",402,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",402,null],[11,"deref","","",403,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",404,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",404,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",403,null],[11,"drop","","",404,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",405,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",405,null],[11,"release","","Release a resource from this semaphore.",405,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",405,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",406,null],[11,"default","core::sync::atomic","",407,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",408,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",409,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",410,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",411,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",407,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",407,null],[11,"swap","","Stores a value into the bool, returning the old value.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",407,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",408,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",408,null],[11,"swap","","Stores a value into the isize, returning the old value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",408,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",409,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",409,null],[11,"swap","","Stores a value into the usize, returning the old value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",409,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",410,null],[11,"load","","Loads a value from the pointer.",410,null],[11,"store","","Stores a value into the pointer.",410,null],[11,"swap","","Stores a value into the pointer, returning the old value.",410,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",410,null],[11,"fmt","","",409,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",408,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",407,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",410,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",412,null],[11,"fmt","","",412,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",412,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",412,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",412,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",412,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",412,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",412,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",412,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",412,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",412,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",412,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",413,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",414,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",415,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",415,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",413,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",413,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",413,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",413,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",413,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",413,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",414,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",414,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",414,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",414,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",414,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",414,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",415,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",415,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",415,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",416,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",416,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",416,null],[11,"wait","","Waits for a signal on the specified mutex.",416,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",416,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",416,null],[11,"clone","std::sys_common::dwarf::eh","",417,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",418,null],[11,"read","","",418,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",418,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",418,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",419,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",420,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",421,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",421,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",421,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",421,null],[11,"destroy","","Deallocates all resources associated with this mutex.",421,null],[11,"next","std::sys_common::net","",422,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",422,null],[11,"connect","","",423,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",423,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",423,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",423,null],[11,"write","","",423,null],[11,"peer_addr","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",423,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",424,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",425,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",425,null],[11,"send_to","","",425,null],[11,"duplicate","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",425,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",425,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",426,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",426,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",426,null],[11,"get","","",426,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",427,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",427,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",427,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",428,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",428,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",428,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",428,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",429,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",429,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",429,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",429,null],[11,"fmt","","",429,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",430,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",430,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",431,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",431,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",431,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",431,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",431,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",431,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",431,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",431,null],[11,"new","std::sys_common::thread_local","",432,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",432,null],[11,"set","","Sets this TLS key to a new value.",432,null],[11,"destroy","","Deallocates this OS TLS key.",432,null],[11,"new","","Creates a new managed OS TLS key.",433,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",433,null],[11,"set","","See StaticKey::set",433,null],[11,"drop","","",433,null],[11,"clone","std::sys_common::wtf8","",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",434,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",434,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",434,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",434,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",436,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",436,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",435,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",435,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",435,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",435,null],[11,"as_slice","","",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",435,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",435,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",435,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",435,null],[11,"push","","Append a code point at the end of the string.",435,null],[11,"truncate","","Shortens a string to the specified length.",435,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",435,null],[11,"partial_cmp","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",436,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",436,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",436,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",436,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",436,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",437,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",437,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",437,null],[11,"clone","","",438,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",438,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",438,null],[11,"hash","","",434,null],[11,"hash","","",435,null],[11,"hash","","",436,null],[11,"is_ascii","","",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",436,null],[11,"make_ascii_lowercase","","",436,null],[11,"new","std::sys::condvar","",439,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",439,null],[11,"notify_all","","",439,null],[11,"wait","","",439,null],[11,"wait_timeout","","",439,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",439,null],[11,"new","std::sys::fd","",440,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",440,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",440,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",440,null],[11,"write","","",440,null],[11,"set_cloexec","","",440,null],[11,"drop","","",440,null],[11,"clone","std::sys::fs","",441,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",442,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",443,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",443,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",443,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",443,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",444,null],[11,"eq","","",444,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",444,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",444,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",441,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",441,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",441,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",295,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",443,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",443,null],[11,"mode","","",443,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u16"}}],[11,"is_dir","","",444,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",444,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",444,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",444,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",445,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",446,null],[11,"path","","",447,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",447,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",447,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",447,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",447,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",442,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",442,null],[11,"write","","",442,null],[11,"append","","",442,null],[11,"truncate","","",442,null],[11,"create","","",442,null],[11,"mode","","",442,null],[11,"open","","",448,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",448,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",448,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",448,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",448,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",448,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",448,null],[11,"write","","",448,null],[11,"flush","","",448,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",448,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",448,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",448,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",449,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",449,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",449,null],[11,"fmt","","",448,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",450,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",450,null],[11,"unlock","","",450,null],[11,"try_lock","","",450,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",450,null],[11,"uninitialized","","",451,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",451,null],[11,"lock","","",451,null],[11,"try_lock","","",451,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",451,null],[11,"destroy","","",451,null],[11,"new","std::sys::net","",452,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",452,null],[11,"duplicate","","",452,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",452,null],[11,"set_timeout","","",452,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",452,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",452,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",453,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",454,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",455,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",456,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",457,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",458,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",459,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",460,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",461,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",462,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",463,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",464,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",465,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",466,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",467,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",468,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",469,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",470,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",471,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",472,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",473,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",474,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",475,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",476,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",477,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",478,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",479,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",480,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",481,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",482,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",483,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",484,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",485,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",486,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",487,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",488,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",489,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",490,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",491,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",492,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",493,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",494,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",495,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",496,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",497,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",498,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",499,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",500,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",500,null],[11,"fmt","","",501,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",501,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",501,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",502,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",502,null],[11,"len","","",502,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",503,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",503,null],[11,"hash","std::sys::os_str","",504,null],[11,"clone","","",504,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",505,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",504,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",504,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",504,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",504,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",504,null],[11,"from_str","","",505,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",505,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",505,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",505,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",506,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",506,null],[11,"write","","",506,null],[11,"raw","","",506,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",506,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",506,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",507,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",507,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",507,null],[11,"args","","",507,null],[11,"env","","",507,null],[11,"env_remove","","",507,null],[11,"env_clear","","",507,null],[11,"cwd","","",507,null],[11,"fmt","","",508,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",508,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",508,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",508,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",508,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",508,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",508,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",508,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",509,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",509,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",509,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",509,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",509,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",510,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",510,null],[11,"try_read","","",510,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",510,null],[11,"try_write","","",510,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",510,null],[11,"write_unlock","","",510,null],[11,"destroy","","",510,null],[11,"new","std::sys::stack_overflow","",511,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",511,null],[11,"new","std::sys::thread","",512,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",512,null],[11,"set_name","","",512,null],[11,"sleep","","",512,null],[11,"join","","",512,null],[11,"id","","",512,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",512,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",512,null],[11,"fmt","std::sys::time::inner","",513,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",513,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",514,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",513,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",513,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",513,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",513,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",514,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",514,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",514,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",514,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",514,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",514,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",514,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",514,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",515,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",515,null],[11,"new","","",516,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",516,null],[11,"new","","",517,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",517,null],[11,"write","","",517,null],[11,"flush","","",517,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",518,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",519,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",519,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",520,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",520,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",521,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",521,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",521,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",521,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",522,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",522,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",522,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",522,null],[11,"clone","std::rand","",523,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",523,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",523,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",523,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",523,null],[11,"from_seed","","",523,null],[11,"reseed","","",524,null],[11,"clone","","",525,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",525,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",525,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",525,null],[11,"fmt","lux","",526,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",526,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",526,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",526,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",526,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",526,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",526,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",526,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",527,null],[11,"fmt","","",527,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",527,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",527,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",527,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",527,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",528,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",528,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",528,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",528,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",528,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",528,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",528,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",529,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",529,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",529,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",529,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",530,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",530,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",530,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",530,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",530,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",530,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",530,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",530,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",530,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",531,null],[11,"clone","","",531,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",532,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",532,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",532,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",532,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",533,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",533,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",534,null],[11,"deref","","",533,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",533,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",535,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",535,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",535,null],[11,"fmt","core::cmp","",536,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",536,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",536,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",536,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",536,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",536,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",536,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",537,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",537,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",537,null],[11,"finish","","",537,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",537,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",537,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",538,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",538,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",538,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",539,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",539,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",539,null],[11,"next_back","","",539,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",540,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",540,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",540,null],[11,"next_back","","",540,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",541,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",541,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",541,null],[11,"clone","","",542,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",543,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",542,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",542,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",542,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",542,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",542,null],[11,"next_back","","",542,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",544,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",544,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",544,null],[11,"next_back","","",544,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",545,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",545,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",545,null],[11,"next_back","","",545,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",546,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",546,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",546,null],[11,"next_back","","",546,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",547,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",547,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",547,null],[11,"next_back","","",547,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",548,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",548,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",548,null],[11,"nth","","",548,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",548,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",548,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",549,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",549,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",549,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",549,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",549,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",549,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",549,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",549,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",550,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",550,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",550,null],[11,"clone","","",551,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",551,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",551,null],[11,"clone","","",552,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",552,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",552,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",552,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",552,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",552,null],[11,"clone","","",553,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",553,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",553,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",553,null],[11,"clone","","",554,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",554,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",554,null],[11,"clone","","",555,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",555,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",555,null],[11,"next_back","","",555,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",556,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",556,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",556,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",556,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",556,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",556,null],[11,"next_back","","",556,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",557,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",557,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",557,null],[11,"next_back","","",557,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",558,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",559,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",560,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",558,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",558,null],[11,"clone","","",561,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",561,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",561,null],[11,"next_back","","",561,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",558,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",558,null],[11,"next","core::ops","",560,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",560,null],[11,"next_back","","",560,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",559,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",562,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",562,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",562,null],[11,"next_back","","",562,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",563,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",563,null],[11,"next_back","","",563,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",563,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",563,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",563,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",564,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",564,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",564,null],[11,"next_back","","",564,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",564,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",565,null],[11,"eq","","",565,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",565,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",565,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",565,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",565,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",566,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",566,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",566,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",566,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",560,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",560,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",560,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",560,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",559,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",559,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",559,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",559,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",567,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",567,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",567,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",567,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",568,null],[11,"get","","Dereferences the content.",568,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",568,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",568,null],[11,"fmt","","",568,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",569,null],[11,"clone","","",569,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",569,null],[11,"fmt","","",569,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",570,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",571,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",572,null],[11,"fmt","","",572,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",572,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",572,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",572,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",572,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",572,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",572,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",572,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",572,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",572,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",572,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",572,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",572,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",572,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",572,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",572,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",572,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",572,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",572,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",572,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",572,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",573,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",573,null],[11,"next_back","","",573,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",573,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",574,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",574,null],[11,"next_back","","",574,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",575,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",575,null],[11,"next_back","","",575,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",572,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",576,null],[11,"fmt","","",576,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",576,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",576,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",576,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",576,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",576,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",576,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",576,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",576,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",576,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",576,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",576,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",576,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",576,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",576,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",576,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",576,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",576,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",576,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",576,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",576,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",576,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",576,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",576,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",576,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",577,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",577,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",577,null],[11,"next_back","","",577,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",578,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",578,null],[11,"next_back","","",578,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",578,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",579,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",579,null],[11,"next_back","","",579,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",580,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",580,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",580,null],[11,"next_back","","",580,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",576,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",581,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",582,null],[11,"make_place","","",582,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",582,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",209,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",581,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",582,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",209,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",209,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",209,null],[11,"default","","",209,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",209,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",209,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",209,null],[11,"clone","","",209,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",209,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",209,null],[11,"from","","",209,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",209,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",209,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",209,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",209,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",209,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",209,null],[11,"next_back","","",209,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",209,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",209,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",209,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",209,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",209,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",209,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",209,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",117,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",117,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",117,null],[11,"clone","","Makes a clone of the `Rc<T>`.",117,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",117,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",117,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",117,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",583,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",583,null],[11,"clone","","Makes a clone of the `Weak<T>`.",583,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",583,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",583,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",117,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",117,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",366,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",366,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",366,null],[11,"into_owned","","Extracts the owned data.",366,null],[11,"deref","","",366,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",366,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",366,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",366,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",366,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",366,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",366,null],[11,"into_cow","","",366,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",366,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",584,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",585,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",586,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",586,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",586,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",587,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",588,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",268,null],[11,"borrow_mut","","",268,null],[11,"clone","collections::str","",589,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",589,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",589,null],[11,"borrow","collections::string","",294,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",590,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",590,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",590,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",590,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",591,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",592,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",591,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",591,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",591,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",593,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",594,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",595,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",596,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",596,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",597,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",597,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",598,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",598,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",596,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",596,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",596,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",596,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",596,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",599,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",599,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",600,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",600,null],[11,"matching","","",600,null],[11,"use_early_reject","","",601,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",601,null],[11,"matching","","",601,null],[11,"cmp","collections::string","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",214,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",294,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",294,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",294,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",294,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",294,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",294,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",294,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",294,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",294,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",294,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",294,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",294,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",294,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",294,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",294,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",294,null],[11,"push","","Appends the given `char` to the end of this `String`.",294,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",294,null],[11,"truncate","","Shortens this `String` to the specified length.",294,null],[11,"pop","","Removes the last character from the string buffer and returns it.",294,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",294,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",294,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",294,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",294,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",294,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",294,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",294,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",294,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",214,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",214,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",214,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",294,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",294,null],[11,"from_iter","","",294,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",294,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",294,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",294,null],[11,"extend","","",294,null],[11,"extend","","",294,null],[11,"extend","","",294,null],[11,"eq","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",366,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",366,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",366,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",294,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",294,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",294,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",294,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",294,null],[11,"add","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",294,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",294,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",294,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",294,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",294,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",294,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",294,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",294,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",294,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",294,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",602,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",602,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",602,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",294,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",294,null],[11,"from","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",366,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",366,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",294,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",294,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",294,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",294,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",603,null],[11,"next","","",603,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",603,null],[11,"next_back","","",603,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",268,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",268,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",268,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",268,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",268,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",268,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",268,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",268,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",268,null],[11,"as_slice","","Extracts a slice containing the entire vector.",268,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",268,null],[11,"set_len","","Sets the length of a vector.",268,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",268,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",268,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",268,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",268,null],[11,"push","","Appends an element to the back of a collection.",268,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",268,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",268,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",268,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",268,null],[11,"len","","Returns the number of elements in the vector.",268,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",268,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",268,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",268,null],[11,"push_all","","",268,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",268,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",268,null],[11,"clone","","",268,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",268,null],[11,"hash","","",268,null],[11,"index","","",268,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",268,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"deref","","",268,null],[11,"deref_mut","","",268,null],[11,"from_iter","","",268,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",268,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",268,null],[11,"extend","","",268,null],[11,"eq","","",268,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",268,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","collections::borrow","",366,null],[11,"ne","","",366,null],[11,"eq","","",366,null],[11,"ne","","",366,null],[11,"eq","","",366,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",366,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"partial_cmp","","",268,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",268,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",268,null],[11,"default","","",268,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",268,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",268,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",268,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",268,null],[11,"as_mut","","",268,null],[11,"from","","",268,null],[11,"from","","",268,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",366,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",268,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",604,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",604,null],[11,"count","","",604,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",604,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",604,null],[11,"next","","",605,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",605,null],[11,"next_back","","",605,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",605,null],[11,"next","rustc_unicode::char","",606,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",607,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",608,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",609,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",609,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",609,null],[11,"deref","glium::program","",610,{"inputs":[{"name":"compiler_global_lock"}],"output":{"name":"mutex"}}],[11,"fmt","","",611,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",611,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"programcreationerror"}}],[11,"fmt","","",611,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",611,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"str"}}],[11,"fmt","","",612,{"inputs":[{"name":"programchoosercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",612,{"inputs":[{"name":"programchoosercreationerror"}],"output":{"name":"programchoosercreationerror"}}],[11,"fmt","","",612,{"inputs":[{"name":"programchoosercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",612,{"inputs":[{"name":"programchoosercreationerror"}],"output":{"name":"str"}}],[11,"cause","","",612,{"inputs":[{"name":"programchoosercreationerror"}],"output":{"name":"option"}}],[11,"from","","",612,{"inputs":[{"name":"programchoosercreationerror"},{"name":"programcreationerror"}],"output":{"name":"programchoosercreationerror"}}],[11,"fmt","","",613,{"inputs":[{"name":"getbinaryerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",613,{"inputs":[{"name":"getbinaryerror"}],"output":{"name":"getbinaryerror"}}],[11,"fmt","","",613,{"inputs":[{"name":"getbinaryerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",613,{"inputs":[{"name":"getbinaryerror"}],"output":{"name":"str"}}],[11,"from","","",614,{"inputs":[{"name":"programcreationinput"},{"name":"sourcecode"}],"output":{"name":"programcreationinput"}}],[11,"from","","",614,{"inputs":[{"name":"programcreationinput"},{"name":"binary"}],"output":{"name":"programcreationinput"}}],[11,"fmt","glium::uniforms::buffer","",615,{"inputs":[{"name":"uniformbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",616,{"inputs":[{"name":"typelessuniformbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Uploads data in the uniforms buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",615,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"deref","","",615,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",615,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"uniformbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"uniformbuffer"}],"output":{"name":"buffermutslice"}}],[11,"eq","glium::uniforms::sampler","",617,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"ne","","",617,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"hash","","",617,null],[11,"clone","","",617,{"inputs":[{"name":"samplerwrapfunction"}],"output":{"name":"samplerwrapfunction"}}],[11,"fmt","","",617,{"inputs":[{"name":"samplerwrapfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",617,{"inputs":[{"name":"samplerwrapfunction"}],"output":{"name":"u32"}}],[11,"eq","","",618,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",618,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",618,null],[11,"clone","","",618,{"inputs":[{"name":"magnifysamplerfilter"}],"output":{"name":"magnifysamplerfilter"}}],[11,"fmt","","",618,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",618,{"inputs":[{"name":"magnifysamplerfilter"}],"output":{"name":"u32"}}],[11,"eq","","",619,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",619,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",619,null],[11,"clone","","",619,{"inputs":[{"name":"minifysamplerfilter"}],"output":{"name":"minifysamplerfilter"}}],[11,"fmt","","",619,{"inputs":[{"name":"minifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",619,{"inputs":[{"name":"minifysamplerfilter"}],"output":{"name":"u32"}}],[11,"eq","","",620,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",620,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"hash","","",620,null],[11,"fmt","","",620,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Sampler` with default parameters.",620,{"inputs":[{"name":"sampler"},{"name":"t"}],"output":{"name":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",620,{"inputs":[{"name":"sampler"},{"name":"samplerwrapfunction"}],"output":{"name":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",620,{"inputs":[{"name":"sampler"},{"name":"minifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",620,{"inputs":[{"name":"sampler"},{"name":"magnifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",620,{"inputs":[{"name":"sampler"},{"name":"u16"}],"output":{"name":"sampler"}}],[11,"clone","","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"sampler"}}],[11,"eq","","",621,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",621,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"hash","","",621,null],[11,"clone","","",621,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"fmt","","",621,{"inputs":[{"name":"samplerbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",621,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"clone","glium::uniforms::uniforms","",622,{"inputs":[{"name":"emptyuniforms"}],"output":{"name":"emptyuniforms"}}],[11,"fmt","","",622,{"inputs":[{"name":"emptyuniforms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_values","","",622,null],[11,"new","","Builds a new storage with a value.",623,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"t"}],"output":{"name":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",623,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"u"}],"output":{"name":"uniformsstorage"}}],[11,"visit_values","","",623,null],[11,"eq","glium::uniforms::value","",624,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"ne","","",624,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"fmt","","",624,{"inputs":[{"name":"uniformtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",624,{"inputs":[{"name":"uniformtype"}],"output":{"name":"uniformtype"}}],[11,"clone","","",625,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",625,{"inputs":[{"name":"uniformvalue"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"fmt","glium::uniforms","",626,{"inputs":[{"name":"layoutmismatcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",626,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"layoutmismatcherror"}}],[11,"description","","",626,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"str"}}],[11,"cause","","",626,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"option"}}],[11,"fmt","","",626,{"inputs":[{"name":"layoutmismatcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","glium::vertex::buffer","",627,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",627,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",627,{"inputs":[{"name":"creationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",627,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",627,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",627,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"fmt","","",628,{"inputs":[{"name":"vertexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",629,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"result"}}],[11,"new","","Builds a new vertex buffer.",628,null],[11,"dynamic","","Builds a new vertex buffer.",628,null],[11,"persistent","","Builds a new vertex buffer.",628,null],[11,"immutable","","Builds a new vertex buffer.",628,null],[11,"empty","","Builds an empty vertex buffer.",628,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",628,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",628,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",628,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",628,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",628,null],[11,"slice","","Accesses a slice of the buffer.",628,{"inputs":[{"name":"vertexbuffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",628,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"cow"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",628,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead.\nDiscard the type information and turn the vertex buffer into a `VertexBufferAny`.",628,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",628,{"inputs":[{"name":"vertexbuffer"},{"name":"buffer"}],"output":{"name":"vertexbuffer"}}],[11,"deref","","",628,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",628,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"vertexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",129,{"inputs":[{"name":"buffermutslice"},{"name":"vertexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"deref","glium::vertex::buffer","",629,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",629,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer::view","",128,{"inputs":[{"name":"bufferslice"},{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"into_vertices_source","glium::vertex::buffer","",629,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"verticessource"}}],[11,"fmt","","",630,{"inputs":[{"name":"vertexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",630,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",630,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",630,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"cow"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",630,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",630,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"result"}}],[11,"from","","",630,{"inputs":[{"name":"vertexbufferany"},{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",630,{"inputs":[{"name":"vertexbufferany"},{"name":"buffer"}],"output":{"name":"vertexbufferany"}}],[11,"clone","","",631,{"inputs":[{"name":"instancingnotsupported"}],"output":{"name":"instancingnotsupported"}}],[11,"fmt","","",631,{"inputs":[{"name":"instancingnotsupported"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","glium::vertex::format","",632,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",632,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",632,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",632,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",632,{"inputs":[{"name":"attributetype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",632,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",632,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[11,"fmt","glium::vertex::transform_feedback","",633,{"inputs":[{"name":"transformfeedbacksession"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",634,{"inputs":[{"name":"transformfeedbacksessioncreationerror"}],"output":{"name":"transformfeedbacksessioncreationerror"}}],[11,"fmt","","",634,{"inputs":[{"name":"transformfeedbacksessioncreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",634,{"inputs":[{"name":"transformfeedbacksessioncreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",634,{"inputs":[{"name":"transformfeedbacksessioncreationerror"}],"output":{"name":"str"}}],[11,"new","","Builds a new transform feedback session.",633,{"inputs":[{"name":"transformfeedbacksession"},{"name":"f"},{"name":"program"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"bind","","",633,null],[11,"unbind","","",633,null],[11,"ensure_buffer_out_of_transform_feedback","","",633,null],[11,"drop","","",633,null],[11,"clone","glium::vertex","",635,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",635,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",636,{"inputs":[{"name":"emptyvertexattributes"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",637,{"inputs":[{"name":"emptyinstanceattributes"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",638,{"inputs":[{"name":"perinstance"}],"output":{"name":"verticessource"}}],[11,"new","glium::texture::bindless","Takes ownership of the given texture and makes it resident.",639,{"inputs":[{"name":"residenttexture"},{"name":"textureany"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",639,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"get_width","glium::texture::any","Returns the width of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"kind","","Returns the kind of texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"texturekind"}}],[11,"dimensions","","Returns the dimensions of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"dimensions"}}],[11,"get_array_size","","Returns the array size of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture if it is a multisampling texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"first_layer","","Returns a structure that represents the first layer of the texture. All textures have a\nfirst layer.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"textureanylayer"}}],[11,"layer","","Returns a structure that represents a specific layer of the texture.",640,{"inputs":[{"name":"textureany"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",640,{"inputs":[{"name":"textureany"}],"output":{"name":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of the texture.",640,{"inputs":[{"name":"textureany"}],"output":{"name":"textureanymipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",640,{"inputs":[{"name":"textureany"},{"name":"u32"}],"output":{"name":"option"}}],[11,"deref","glium::texture::bindless","",639,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"deref_mut","","",639,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"drop","","",639,null],[11,"clone","","",641,{"inputs":[{"name":"texturehandle"}],"output":{"name":"texturehandle"}}],[11,"new","","Builds a new handle.",641,{"inputs":[{"name":"texturehandle"},{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":{"name":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",641,null],[11,"as_uniform_value","","",641,{"inputs":[{"name":"texturehandle"}],"output":{"name":"uniformvalue"}}],[11,"matches","","",641,{"inputs":[{"name":"texturehandle"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",641,{"inputs":[{"name":"texturehandle"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",642,{"inputs":[{"name":"bindlesstexturesnotsupportederror"}],"output":{"name":"bindlesstexturesnotsupportederror"}}],[11,"fmt","","",642,{"inputs":[{"name":"bindlesstexturesnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","glium::texture::buffer_texture","",643,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",643,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",643,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",643,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"str"}}],[11,"fmt","","",644,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",644,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",644,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",644,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",644,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"from","","",644,{"inputs":[{"name":"creationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",644,{"inputs":[{"name":"creationerror"},{"name":"texturecreationerror"}],"output":{"name":"creationerror"}}],[11,"eq","","",645,{"inputs":[{"name":"buffertexturetype"},{"name":"buffertexturetype"}],"output":{"name":"bool"}}],[11,"ne","","",645,{"inputs":[{"name":"buffertexturetype"},{"name":"buffertexturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",645,{"inputs":[{"name":"buffertexturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",645,{"inputs":[{"name":"buffertexturetype"}],"output":{"name":"buffertexturetype"}}],[11,"new","","Builds a new texture buffer from data.",646,null],[11,"dynamic","","Builds a new texture buffer from data.",646,null],[11,"persistent","","Builds a new texture buffer from data.",646,null],[11,"immutable","","Builds a new texture buffer from data.",646,null],[11,"empty","","Builds a new empty buffer buffer.",646,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty buffer buffer.",646,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty buffer buffer.",646,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty buffer buffer.",646,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"from_buffer","","Builds a new buffer texture by taking ownership of a buffer.",646,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"buffer"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"deref","","",646,{"inputs":[{"name":"buffertexture"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",646,{"inputs":[{"name":"buffertexture"}],"output":{"name":"buffer"}}],[11,"drop","","",646,null],[11,"as_buffer_texture_ref","","Builds a `BufferTextureRef`.",646,{"inputs":[{"name":"buffertexture"}],"output":{"name":"buffertextureref"}}],[11,"as_uniform_value","","",646,{"inputs":[{"name":"buffertexture"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",647,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"buffertextureref"}}],[11,"get_texture_type","","Return the type of the texture.",647,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"buffertexturetype"}}],[11,"get_texture_id","","",647,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"u32"}}],[11,"get_context","","",647,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"rc"}}],[11,"get_bind_point","","",647,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"u32"}}],[11,"bind_to_current","","",647,{"inputs":[{"name":"buffertextureref"},{"name":"commandcontext"}],"output":{"name":"u32"}}],[11,"new_empty","glium::texture::pixel_buffer","Builds a new buffer with an uninitialized content.",648,{"inputs":[{"name":"pixelbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",648,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"result"}}],[11,"deref","","",648,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",648,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"buffer"}}],[11,"get_id","","",648,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"u32"}}],[11,"eq","glium::texture::any","",649,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",649,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"fmt","","",649,{"inputs":[{"name":"dimensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",649,{"inputs":[{"name":"dimensions"}],"output":{"name":"dimensions"}}],[11,"get_texture_id","","",640,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"get_context","","",640,{"inputs":[{"name":"textureany"}],"output":{"name":"rc"}}],[11,"get_bind_point","","",640,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"bind_to_current","","",640,{"inputs":[{"name":"textureany"},{"name":"commandcontext"}],"output":{"name":"u32"}}],[11,"get_id","","",640,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"fmt","","",640,{"inputs":[{"name":"textureany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",640,null],[11,"clone","","",650,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"textureanylayer"}}],[11,"get_texture","","Returns the texture.",650,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"textureany"}}],[11,"get_samples","","Returns the number of samples of the texture.",650,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"option"}}],[11,"get_layer","","Returns the layer of the texture.",650,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of this layer of the texture.",650,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"textureanylayermipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of this layer of the texture.",650,{"inputs":[{"name":"textureanylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"get_width","","Returns the width of the mipmap.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the mipmap.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the mipmap.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the texture.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Returns a structure that represents the first layer of this mipmap of the texture. All\ntextures have a first layer.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureanylayermipmap"}}],[11,"layer","","Returns a structure that represents a specific layer of this mipmap of the texture.",651,{"inputs":[{"name":"textureanymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"raw_upload_from_pixel_buffer","","Uploads data to the texture from a buffer.",651,null],[11,"raw_upload_from_pixel_buffer_inverted","","Uploads data to the texture from a buffer. The R, G and B components are flipped.",651,null],[11,"upload_texture","","",651,null],[11,"download_compressed_data","","",651,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"clone","","",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"textureanylayermipmap"}}],[11,"get_texture","","Returns the texture.",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"u32"}}],[11,"get_width","","Returns the width of this texture slice.",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",652,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"option"}}],[11,"into_image","","Turns this into an image.",652,{"inputs":[{"name":"textureanylayermipmap"},{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"textureanyimage"}}],[11,"get_texture","","Returns the texture.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"u32"}}],[11,"get_cubemap_layer","","Returns the cubemap layer of this image, or `None` if the texture is not a cubemap.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"option"}}],[11,"get_width","","Returns the width of this texture slice.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",653,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"option"}}],[11,"raw_read","","Reads the content of the image.",653,{"inputs":[{"name":"textureanyimage"},{"name":"rect"}],"output":{"name":"t"}}],[11,"raw_read_to_pixel_buffer","","Reads the content of the image to a pixel buffer.",653,null],[11,"raw_clear_buffer","","Clears the content of the texture to a specific value.",653,null],[11,"fmt","glium::texture::get_format","",654,{"inputs":[{"name":"getformaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",654,{"inputs":[{"name":"getformaterror"}],"output":{"name":"getformaterror"}}],[11,"fmt","","",654,{"inputs":[{"name":"getformaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",654,{"inputs":[{"name":"getformaterror"}],"output":{"name":"str"}}],[11,"eq","","",655,{"inputs":[{"name":"internalformat"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"ne","","",655,{"inputs":[{"name":"internalformat"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"fmt","","",655,{"inputs":[{"name":"internalformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",655,{"inputs":[{"name":"internalformat"}],"output":{"name":"internalformat"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",655,{"inputs":[{"name":"internalformat"}],"output":{"name":"usize"}}],[11,"eq","","",656,{"inputs":[{"name":"internalformattype"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[11,"ne","","",656,{"inputs":[{"name":"internalformattype"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[11,"fmt","","",656,{"inputs":[{"name":"internalformattype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",656,{"inputs":[{"name":"internalformattype"}],"output":{"name":"internalformattype"}}],[11,"get_id","glium::texture::texture1d","",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",657,{"inputs":[{"name":"texture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",657,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1d"}}],[11,"width","","Returns the width of that image.",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",657,{"inputs":[{"name":"texture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",657,{"inputs":[{"name":"texture1d"}],"output":{"name":"texture1dmipmap"}}],[11,"clone","","",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1dmipmap"}}],[11,"deref","","",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1d"}}],[11,"get_level","","Returns the texture level.",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",658,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_texture1d","",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",659,null],[11,"with_format","","Builds a new texture with a specific format.",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1d"}}],[11,"width","","Returns the width of that image.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",659,{"inputs":[{"name":"compressedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",659,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"clone","","",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"deref","","",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",660,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_texture1d","",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1d"}}],[11,"width","","Returns the width of that image.",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",661,{"inputs":[{"name":"srgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",661,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"clone","","",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"deref","","",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",662,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_texture1d","",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",663,null],[11,"with_format","","Builds a new texture with a specific format.",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"width","","Returns the width of that image.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",663,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",663,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"deref","","",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",664,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_texture1d","",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",665,{"inputs":[{"name":"integraltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1d"}}],[11,"width","","Returns the width of that image.",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",665,{"inputs":[{"name":"integraltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",665,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"clone","","",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"deref","","",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",666,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture1d","",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1d"}}],[11,"width","","Returns the width of that image.",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",667,{"inputs":[{"name":"unsignedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",667,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"clone","","",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"deref","","",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",668,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture1d","",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",669,{"inputs":[{"name":"depthtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1d"}}],[11,"width","","Returns the width of that image.",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",669,{"inputs":[{"name":"depthtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",669,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"clone","","",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"deref","","",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",670,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_texture1d","",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1d"}}],[11,"width","","Returns the width of that image.",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",671,{"inputs":[{"name":"stenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",671,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"clone","","",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"deref","","",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",672,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture1d","",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1d"}}],[11,"width","","Returns the width of that image.",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",673,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",673,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"clone","","",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"deref","","",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",674,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::texture2d","",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",675,{"inputs":[{"name":"texture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",675,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2d"}}],[11,"width","","Returns the width of that image.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",675,null],[11,"as_surface","","Starts drawing on the texture.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",675,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",675,{"inputs":[{"name":"texture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",675,{"inputs":[{"name":"texture2d"}],"output":{"name":"texture2dmipmap"}}],[11,"clone","","",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2dmipmap"}}],[11,"deref","","",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",676,null],[11,"write","","Uploads some data in the texture level.",676,null],[11,"get_texture","","Returns the corresponding texture.",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2d"}}],[11,"get_level","","Returns the texture level.",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",676,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_texture2d","",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",677,null],[11,"with_format","","Builds a new texture with a specific format.",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2d"}}],[11,"width","","Returns the width of that image.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",677,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",677,null],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",677,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",677,{"inputs":[{"name":"compressedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",677,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"clone","","",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"deref","","",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",678,null],[11,"write","","Uploads some data in the texture level.",678,null],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",678,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",678,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_texture2d","",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2d"}}],[11,"width","","Returns the width of that image.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",679,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",679,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",679,{"inputs":[{"name":"srgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",679,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"clone","","",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"deref","","",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",680,null],[11,"write","","Uploads some data in the texture level.",680,null],[11,"get_texture","","Returns the corresponding texture.",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",680,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_texture2d","",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",681,null],[11,"with_format","","Builds a new texture with a specific format.",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"width","","Returns the width of that image.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",681,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",681,null],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",681,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",681,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",681,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"deref","","",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",682,null],[11,"write","","Uploads some data in the texture level.",682,null],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",682,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",682,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_texture2d","",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",683,{"inputs":[{"name":"integraltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2d"}}],[11,"width","","Returns the width of that image.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",683,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",683,{"inputs":[{"name":"integraltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",683,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"clone","","",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"deref","","",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",684,null],[11,"get_texture","","Returns the corresponding texture.",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",684,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture2d","",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2d"}}],[11,"width","","Returns the width of that image.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",685,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",685,{"inputs":[{"name":"unsignedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",685,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"clone","","",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"deref","","",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",686,null],[11,"get_texture","","Returns the corresponding texture.",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",686,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture2d","",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",687,{"inputs":[{"name":"depthtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2d"}}],[11,"width","","Returns the width of that image.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",687,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",687,{"inputs":[{"name":"depthtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",687,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"clone","","",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"deref","","",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",688,null],[11,"get_texture","","Returns the corresponding texture.",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",688,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_texture2d","",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2d"}}],[11,"width","","Returns the width of that image.",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",689,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",689,{"inputs":[{"name":"stenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",689,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"clone","","",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"deref","","",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",690,null],[11,"get_texture","","Returns the corresponding texture.",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",690,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture2d","",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2d"}}],[11,"width","","Returns the width of that image.",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",691,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",691,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",691,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"clone","","",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"deref","","",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",692,null],[11,"get_texture","","Returns the corresponding texture.",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",692,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::texture2d_multisample","",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",693,{"inputs":[{"name":"texture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",693,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",693,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",693,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",693,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisample"}}],[11,"width","","Returns the width of that image.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",693,null],[11,"as_surface","","Starts drawing on the texture.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",693,{"inputs":[{"name":"texture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",693,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"clone","","",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"deref","","",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",694,null],[11,"get_texture","","Returns the corresponding texture.",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",694,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::integral_texture2d_multisample","",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",695,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",695,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",695,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",695,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",695,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",695,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",695,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",695,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"deref","","",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",696,null],[11,"get_texture","","Returns the corresponding texture.",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",696,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::srgb_texture2d_multisample","",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",697,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",697,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",697,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",697,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",697,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",697,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",697,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",697,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"deref","","",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",698,null],[11,"get_texture","","Returns the corresponding texture.",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",698,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture2d_multisample","",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",699,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",699,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",699,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"deref","","",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",700,null],[11,"get_texture","","Returns the corresponding texture.",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",700,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture2d_multisample","",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",701,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",701,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",701,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",701,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",701,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",701,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",701,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",701,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"deref","","",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",702,null],[11,"get_texture","","Returns the corresponding texture.",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",702,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_texture2d_multisample","",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",703,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",703,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",703,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",703,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",703,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",703,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",703,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",703,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"deref","","",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",704,null],[11,"get_texture","","Returns the corresponding texture.",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",704,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture2d_multisample","",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",705,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",705,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"deref","","",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",706,null],[11,"get_texture","","Returns the corresponding texture.",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",706,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::texture3d","",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",707,{"inputs":[{"name":"texture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",707,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture3d"}}],[11,"width","","Returns the width of that image.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",707,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",707,{"inputs":[{"name":"texture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",707,{"inputs":[{"name":"texture3d"}],"output":{"name":"texture3dmipmap"}}],[11,"clone","","",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3dmipmap"}}],[11,"deref","","",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",708,null],[11,"get_texture","","Returns the corresponding texture.",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3d"}}],[11,"get_level","","Returns the texture level.",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",708,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_texture3d","",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",709,null],[11,"with_format","","Builds a new texture with a specific format.",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture3d"}}],[11,"width","","Returns the width of that image.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",709,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",709,{"inputs":[{"name":"compressedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",709,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"clone","","",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"deref","","",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",710,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",710,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_texture3d","",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture3d"}}],[11,"width","","Returns the width of that image.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",711,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",711,{"inputs":[{"name":"srgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",711,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"clone","","",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"deref","","",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",712,null],[11,"get_texture","","Returns the corresponding texture.",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",712,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_texture3d","",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",713,null],[11,"with_format","","Builds a new texture with a specific format.",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"width","","Returns the width of that image.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",713,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",713,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",713,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"deref","","",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",714,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",714,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_texture3d","",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",715,{"inputs":[{"name":"integraltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture3d"}}],[11,"width","","Returns the width of that image.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",715,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",715,{"inputs":[{"name":"integraltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",715,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"clone","","",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"deref","","",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",716,null],[11,"get_texture","","Returns the corresponding texture.",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",716,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture3d","",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture3d"}}],[11,"width","","Returns the width of that image.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",717,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",717,{"inputs":[{"name":"unsignedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",717,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"clone","","",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"deref","","",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",718,null],[11,"get_texture","","Returns the corresponding texture.",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",718,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture3d","",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",719,{"inputs":[{"name":"depthtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture3d"}}],[11,"width","","Returns the width of that image.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",719,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",719,{"inputs":[{"name":"depthtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",719,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"clone","","",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"deref","","",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",720,null],[11,"get_texture","","Returns the corresponding texture.",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",720,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture3d","",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture3d"}}],[11,"width","","Returns the width of that image.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",721,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",721,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",721,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"clone","","",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"deref","","",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",722,null],[11,"get_texture","","Returns the corresponding texture.",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",722,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::texture1d_array","",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",723,{"inputs":[{"name":"texture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",723,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1darray"}}],[11,"width","","Returns the width of that image.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"texture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",723,{"inputs":[{"name":"texture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",723,{"inputs":[{"name":"texture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",723,{"inputs":[{"name":"texture1darray"}],"output":{"name":"texture1darraymipmap"}}],[11,"clone","","",724,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraylayer"}}],[11,"width","","Returns the width of that image.",724,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",724,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",724,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",724,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",724,{"inputs":[{"name":"texture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",724,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"clone","","",725,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darraymipmap"}}],[11,"deref","","",725,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",725,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",725,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darray"}}],[11,"get_level","","Returns the texture level.",725,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",725,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",725,{"inputs":[{"name":"texture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",726,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",726,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",726,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",726,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_texture1d_array","",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1darray"}}],[11,"width","","Returns the width of that image.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",727,{"inputs":[{"name":"compressedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",727,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"clone","","",728,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",728,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",728,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",728,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",728,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",728,{"inputs":[{"name":"compressedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",728,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"clone","","",729,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"deref","","",729,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",729,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",729,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",729,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",729,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",729,{"inputs":[{"name":"compressedtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",730,{"inputs":[{"name":"compressedtexture1darraylayermipmap"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",730,{"inputs":[{"name":"compressedtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",730,{"inputs":[{"name":"compressedtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_texture1d_array","",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1darray"}}],[11,"width","","Returns the width of that image.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",731,{"inputs":[{"name":"srgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",731,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"clone","","",732,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",732,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",732,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",732,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",732,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",732,{"inputs":[{"name":"srgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",732,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"clone","","",733,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"deref","","",733,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",733,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",733,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",733,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",733,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",733,{"inputs":[{"name":"srgbtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",734,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",734,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",734,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",734,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_texture1d_array","",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"width","","Returns the width of that image.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",735,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",736,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"clone","","",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"deref","","",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",738,{"inputs":[{"name":"compressedsrgbtexture1darraylayermipmap"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",738,{"inputs":[{"name":"compressedsrgbtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",738,{"inputs":[{"name":"compressedsrgbtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_texture1d_array","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1darray"}}],[11,"width","","Returns the width of that image.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"clone","","",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",740,{"inputs":[{"name":"integraltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"clone","","",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"deref","","",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",741,{"inputs":[{"name":"integraltexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",742,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",742,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",742,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",742,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture1d_array","",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1darray"}}],[11,"width","","Returns the width of that image.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",743,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",743,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"clone","","",744,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",744,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",744,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",744,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",744,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",744,{"inputs":[{"name":"unsignedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",744,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"clone","","",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"deref","","",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",745,{"inputs":[{"name":"unsignedtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",746,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",746,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",746,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",746,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture1d_array","",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1darray"}}],[11,"width","","Returns the width of that image.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",747,{"inputs":[{"name":"depthtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",747,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"clone","","",748,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",748,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",748,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",748,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",748,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",748,{"inputs":[{"name":"depthtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",748,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"clone","","",749,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"deref","","",749,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",749,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",749,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",749,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",749,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",749,{"inputs":[{"name":"depthtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",750,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",750,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",750,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",750,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_texture1d_array","",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1darray"}}],[11,"width","","Returns the width of that image.",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",751,{"inputs":[{"name":"stenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",751,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"clone","","",752,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",752,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",752,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",752,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",752,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",752,{"inputs":[{"name":"stenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",752,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"clone","","",753,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"deref","","",753,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",753,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",753,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",753,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",753,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",753,{"inputs":[{"name":"stenciltexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",754,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",754,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",754,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",754,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture1d_array","",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"width","","Returns the width of that image.",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",755,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",756,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"clone","","",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"deref","","",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",757,{"inputs":[{"name":"depthstenciltexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",758,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",758,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",758,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",758,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::texture2d_array","",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",759,{"inputs":[{"name":"texture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",759,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2darray"}}],[11,"width","","Returns the width of that image.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",759,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"texture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",759,{"inputs":[{"name":"texture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",759,{"inputs":[{"name":"texture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",759,{"inputs":[{"name":"texture2darray"}],"output":{"name":"texture2darraymipmap"}}],[11,"clone","","",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraylayer"}}],[11,"width","","Returns the width of that image.",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",760,null],[11,"get_texture","","Returns the corresponding texture.",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",760,{"inputs":[{"name":"texture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",760,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"clone","","",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darraymipmap"}}],[11,"deref","","",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",761,null],[11,"get_texture","","Returns the corresponding texture.",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darray"}}],[11,"get_level","","Returns the texture level.",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",761,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",761,{"inputs":[{"name":"texture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",762,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",762,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",762,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",762,null],[11,"into","","",762,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",762,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_texture2d_array","",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2darray"}}],[11,"width","","Returns the width of that image.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",763,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",763,{"inputs":[{"name":"compressedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",763,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"clone","","",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",764,null],[11,"get_texture","","Returns the corresponding texture.",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",764,{"inputs":[{"name":"compressedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",764,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"clone","","",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"deref","","",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",765,null],[11,"get_texture","","Returns the corresponding texture.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",765,{"inputs":[{"name":"compressedtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",766,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",766,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",766,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",766,null],[11,"into","","",766,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_texture2d_array","",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2darray"}}],[11,"width","","Returns the width of that image.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",767,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",767,{"inputs":[{"name":"srgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",767,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"clone","","",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",768,null],[11,"get_texture","","Returns the corresponding texture.",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",768,{"inputs":[{"name":"srgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",768,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"clone","","",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"deref","","",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",769,null],[11,"get_texture","","Returns the corresponding texture.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",769,{"inputs":[{"name":"srgbtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",770,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",770,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",770,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",770,null],[11,"into","","",770,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",770,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_texture2d_array","",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"width","","Returns the width of that image.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",771,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",771,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",772,null],[11,"get_texture","","Returns the corresponding texture.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",772,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"clone","","",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"deref","","",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",773,null],[11,"get_texture","","Returns the corresponding texture.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",773,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",774,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",774,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",774,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",774,null],[11,"into","","",774,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_texture2d_array","",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2darray"}}],[11,"width","","Returns the width of that image.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",775,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",775,{"inputs":[{"name":"integraltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",775,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"clone","","",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",776,null],[11,"get_texture","","Returns the corresponding texture.",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",776,{"inputs":[{"name":"integraltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",776,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"clone","","",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"deref","","",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",777,null],[11,"get_texture","","Returns the corresponding texture.",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",777,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",777,{"inputs":[{"name":"integraltexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",778,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",778,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",778,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",778,null],[11,"into","","",778,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",778,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture2d_array","",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2darray"}}],[11,"width","","Returns the width of that image.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",779,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",779,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",779,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"clone","","",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",780,null],[11,"get_texture","","Returns the corresponding texture.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",780,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"clone","","",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"deref","","",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",781,null],[11,"get_texture","","Returns the corresponding texture.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",781,{"inputs":[{"name":"unsignedtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",782,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",782,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",782,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",782,null],[11,"into","","",782,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",782,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture2d_array","",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2darray"}}],[11,"width","","Returns the width of that image.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",783,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",783,{"inputs":[{"name":"depthtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",783,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"clone","","",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",784,null],[11,"get_texture","","Returns the corresponding texture.",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",784,{"inputs":[{"name":"depthtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",784,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"clone","","",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"deref","","",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",785,null],[11,"get_texture","","Returns the corresponding texture.",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",785,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",785,{"inputs":[{"name":"depthtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",786,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",786,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",786,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",786,null],[11,"into","","",786,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",786,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_texture2d_array","",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2darray"}}],[11,"width","","Returns the width of that image.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",787,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",787,{"inputs":[{"name":"stenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",787,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"clone","","",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",788,null],[11,"get_texture","","Returns the corresponding texture.",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",788,{"inputs":[{"name":"stenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",788,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"clone","","",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"deref","","",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",789,null],[11,"get_texture","","Returns the corresponding texture.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",789,{"inputs":[{"name":"stenciltexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",790,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",790,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",790,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",790,null],[11,"into","","",790,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",790,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture2d_array","",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"width","","Returns the width of that image.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",791,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",791,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",792,null],[11,"get_texture","","Returns the corresponding texture.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",792,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"clone","","",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"deref","","",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",793,null],[11,"get_texture","","Returns the corresponding texture.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",793,{"inputs":[{"name":"depthstenciltexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",794,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",794,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",794,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",794,null],[11,"into","","",794,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",794,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::texture2d_multisample_array","",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",795,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",795,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",796,null],[11,"get_texture","","Returns the corresponding texture.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",796,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"clone","","",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"deref","","",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",797,null],[11,"get_texture","","Returns the corresponding texture.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",797,{"inputs":[{"name":"texture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",798,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",798,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",798,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",798,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",798,null],[11,"into","","",798,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",798,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::srgb_texture2d_multisample_array","",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",799,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",799,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",800,null],[11,"get_texture","","Returns the corresponding texture.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",800,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"deref","","",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",801,null],[11,"get_texture","","Returns the corresponding texture.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",801,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",802,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",802,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",802,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",802,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",802,null],[11,"into","","",802,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",802,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::integral_texture2d_multisample_array","",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",803,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",803,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",804,null],[11,"get_texture","","Returns the corresponding texture.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",804,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"deref","","",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",805,null],[11,"get_texture","","Returns the corresponding texture.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",805,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",806,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",806,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",806,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",806,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",806,null],[11,"into","","",806,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",806,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_texture2d_multisample_array","",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",807,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",807,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",808,null],[11,"get_texture","","Returns the corresponding texture.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",808,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"deref","","",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",809,null],[11,"get_texture","","Returns the corresponding texture.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",809,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",810,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",810,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",810,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",810,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",810,null],[11,"into","","",810,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",810,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_texture2d_multisample_array","",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",811,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",811,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",812,null],[11,"get_texture","","Returns the corresponding texture.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",812,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"deref","","",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",813,null],[11,"get_texture","","Returns the corresponding texture.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",813,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",814,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",814,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",814,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",814,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",814,null],[11,"into","","",814,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",814,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_texture2d_multisample_array","",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",815,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",815,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",816,null],[11,"get_texture","","Returns the corresponding texture.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",816,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",817,null],[11,"get_texture","","Returns the corresponding texture.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",817,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",818,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",818,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",818,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",818,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",818,null],[11,"into","","",818,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",818,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_texture2d_multisample_array","",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",819,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",819,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",820,null],[11,"get_texture","","Returns the corresponding texture.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",820,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",821,null],[11,"get_texture","","Returns the corresponding texture.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",821,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",822,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",822,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",822,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",822,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",822,null],[11,"into","","",822,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",822,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::cubemap","",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",823,{"inputs":[{"name":"cubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",823,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",823,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",823,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",823,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemap"}}],[11,"width","","Returns the width of that image.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",823,{"inputs":[{"name":"cubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",823,{"inputs":[{"name":"cubemap"}],"output":{"name":"cubemapmipmap"}}],[11,"clone","","",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"cubemapmipmap"}}],[11,"deref","","",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"cubemap"}}],[11,"get_level","","Returns the texture level.",824,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",824,{"inputs":[{"name":"cubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"cubemapimage"}}],[11,"clone","","",825,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"cubemapimage"}}],[11,"width","","Returns the width of that image.",825,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",825,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",825,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",825,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",825,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_cubemap","",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",826,{"inputs":[{"name":"compressedcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",826,{"inputs":[{"name":"compressedcubemap"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",826,{"inputs":[{"name":"compressedcubemap"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemap"}}],[11,"width","","Returns the width of that image.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",826,{"inputs":[{"name":"compressedcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",826,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"clone","","",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"deref","","",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"compressedcubemap"}}],[11,"get_level","","Returns the texture level.",827,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",827,{"inputs":[{"name":"compressedcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"compressedcubemapimage"}}],[11,"clone","","",828,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"compressedcubemapimage"}}],[11,"width","","Returns the width of that image.",828,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",828,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",828,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",828,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_cubemap","",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",829,{"inputs":[{"name":"srgbcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",829,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",829,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",829,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",829,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemap"}}],[11,"width","","Returns the width of that image.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",829,{"inputs":[{"name":"srgbcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",829,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"clone","","",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"deref","","",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"srgbcubemap"}}],[11,"get_level","","Returns the texture level.",830,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",830,{"inputs":[{"name":"srgbcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"srgbcubemapimage"}}],[11,"clone","","",831,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"srgbcubemapimage"}}],[11,"width","","Returns the width of that image.",831,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",831,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",831,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",831,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",831,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_cubemap","",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",832,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",832,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",832,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"width","","Returns the width of that image.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",832,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",832,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"clone","","",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"deref","","",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"get_level","","Returns the texture level.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",833,{"inputs":[{"name":"compressedsrgbcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"clone","","",834,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"width","","Returns the width of that image.",834,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",834,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",834,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",834,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_cubemap","",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",835,{"inputs":[{"name":"integralcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",835,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",835,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",835,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",835,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemap"}}],[11,"width","","Returns the width of that image.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",835,{"inputs":[{"name":"integralcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",835,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"integralcubemapmipmap"}}],[11,"clone","","",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"integralcubemapmipmap"}}],[11,"deref","","",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"integralcubemap"}}],[11,"get_level","","Returns the texture level.",836,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",836,{"inputs":[{"name":"integralcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"integralcubemapimage"}}],[11,"clone","","",837,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"integralcubemapimage"}}],[11,"width","","Returns the width of that image.",837,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",837,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",837,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",837,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",837,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_cubemap","",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",838,{"inputs":[{"name":"unsignedcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",838,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",838,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",838,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",838,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemap"}}],[11,"width","","Returns the width of that image.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",838,{"inputs":[{"name":"unsignedcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",838,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"clone","","",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"deref","","",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"unsignedcubemap"}}],[11,"get_level","","Returns the texture level.",839,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",839,{"inputs":[{"name":"unsignedcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemapimage"}}],[11,"clone","","",840,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"unsignedcubemapimage"}}],[11,"width","","Returns the width of that image.",840,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",840,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",840,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",840,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",840,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_cubemap","",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",841,{"inputs":[{"name":"depthcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",841,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",841,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",841,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",841,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemap"}}],[11,"width","","Returns the width of that image.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",841,{"inputs":[{"name":"depthcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",841,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"depthcubemapmipmap"}}],[11,"clone","","",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"depthcubemapmipmap"}}],[11,"deref","","",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"depthcubemap"}}],[11,"get_level","","Returns the texture level.",842,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",842,{"inputs":[{"name":"depthcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"depthcubemapimage"}}],[11,"clone","","",843,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"depthcubemapimage"}}],[11,"width","","Returns the width of that image.",843,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",843,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",843,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",843,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",843,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_cubemap","",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",844,{"inputs":[{"name":"stencilcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",844,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",844,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",844,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",844,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemap"}}],[11,"width","","Returns the width of that image.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",844,{"inputs":[{"name":"stencilcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",844,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"clone","","",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"deref","","",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"stencilcubemap"}}],[11,"get_level","","Returns the texture level.",845,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",845,{"inputs":[{"name":"stencilcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"stencilcubemapimage"}}],[11,"clone","","",846,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"stencilcubemapimage"}}],[11,"width","","Returns the width of that image.",846,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",846,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",846,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",846,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",846,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_cubemap","",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"fmt","","",847,{"inputs":[{"name":"depthstencilcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",847,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",847,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",847,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",847,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemap"}}],[11,"width","","Returns the width of that image.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",847,{"inputs":[{"name":"depthstencilcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",847,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"clone","","",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"deref","","",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"depthstencilcubemap"}}],[11,"get_level","","Returns the texture level.",848,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",848,{"inputs":[{"name":"depthstencilcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"clone","","",849,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"width","","Returns the width of that image.",849,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",849,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",849,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",849,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",849,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"depthstencilattachment"}}],[11,"get_id","glium::texture::cubemap_array","",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",850,{"inputs":[{"name":"cubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",850,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",850,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",850,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",850,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemaparray"}}],[11,"width","","Returns the width of that image.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"cubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",850,{"inputs":[{"name":"cubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",850,{"inputs":[{"name":"cubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",850,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"cubemaparraymipmap"}}],[11,"clone","","",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"cubemaparraylayer"}}],[11,"width","","Returns the width of that image.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"cubemaparray"}}],[11,"get_layer","","Returns the layer index.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",851,{"inputs":[{"name":"cubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",851,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"clone","","",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"cubemaparraymipmap"}}],[11,"deref","","",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"cubemaparray"}}],[11,"get_level","","Returns the texture level.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",852,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",852,{"inputs":[{"name":"cubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",853,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",853,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",853,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",853,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",853,{"inputs":[{"name":"cubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"cubemaparrayimage"}}],[11,"clone","","",854,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"cubemaparrayimage"}}],[11,"width","","Returns the width of that image.",854,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",854,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",854,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",854,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",854,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_cubemap_array","",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",855,{"inputs":[{"name":"compressedcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",855,{"inputs":[{"name":"compressedcubemaparray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",855,{"inputs":[{"name":"compressedcubemaparray"},{"name":"f"},{"name":"compressedformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemaparray"}}],[11,"width","","Returns the width of that image.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",855,{"inputs":[{"name":"compressedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",855,{"inputs":[{"name":"compressedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",855,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"clone","","",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",856,{"inputs":[{"name":"compressedcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",856,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"clone","","",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"deref","","",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_level","","Returns the texture level.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",857,{"inputs":[{"name":"compressedcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",858,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",858,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",858,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",858,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",858,{"inputs":[{"name":"compressedcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"clone","","",859,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",859,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",859,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",859,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",859,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::srgb_cubemap_array","",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"srgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemaparray"}}],[11,"width","","Returns the width of that image.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",860,{"inputs":[{"name":"srgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",860,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"clone","","",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",861,{"inputs":[{"name":"srgbcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",861,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"clone","","",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"deref","","",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",862,{"inputs":[{"name":"srgbcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",863,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",863,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",863,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",863,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",863,{"inputs":[{"name":"srgbcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"clone","","",864,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",864,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",864,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",864,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",864,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",864,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::compressed_srgb_cubemap_array","",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",865,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"width","","Returns the width of that image.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",865,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"clone","","",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",866,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"clone","","",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"deref","","",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",867,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",868,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",868,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",868,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",868,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",868,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"clone","","",869,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",869,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",869,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",869,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",869,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"get_id","glium::texture::integral_cubemap_array","",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemaparray"}}],[11,"width","","Returns the width of that image.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",870,{"inputs":[{"name":"integralcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",870,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"clone","","",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"integralcubemaparray"}}],[11,"get_layer","","Returns the layer index.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",871,{"inputs":[{"name":"integralcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",871,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"clone","","",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"deref","","",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"integralcubemaparray"}}],[11,"get_level","","Returns the texture level.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",872,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",872,{"inputs":[{"name":"integralcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",873,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",873,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",873,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",873,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",873,{"inputs":[{"name":"integralcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"clone","","",874,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",874,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",874,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",874,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",874,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",874,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::unsigned_cubemap_array","",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemaparray"}}],[11,"width","","Returns the width of that image.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",875,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",875,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"clone","","",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",876,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"clone","","",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"deref","","",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_level","","Returns the texture level.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",877,{"inputs":[{"name":"unsignedcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",878,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",878,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",878,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",878,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",878,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"clone","","",879,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",879,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",879,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",879,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",879,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",879,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"colorattachment"}}],[11,"get_id","glium::texture::depth_cubemap_array","",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",620,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemaparray"}}],[11,"width","","Returns the width of that image.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",880,{"inputs":[{"name":"depthcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",880,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"clone","","",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"depthcubemaparray"}}],[11,"get_layer","","Returns the layer index.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",881,{"inputs":[{"name":"depthcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",881,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"clone","","",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"deref","","",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"depthcubemaparray"}}],[11,"get_level","","Returns the texture level.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",882,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",882,{"inputs":[{"name":"depthcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",883,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",883,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",883,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",883,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",883,{"inputs":[{"name":"depthcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"clone","","",884,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",884,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",884,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",884,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",884,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",884,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"depthattachment"}}],[11,"get_id","glium::texture::stencil_cubemap_array","",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemaparray"}}],[11,"width","","Returns the width of that image.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",885,{"inputs":[{"name":"stencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",885,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"clone","","",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",886,{"inputs":[{"name":"stencilcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",886,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"clone","","",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"deref","","",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",887,{"inputs":[{"name":"stencilcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",888,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",888,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",888,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",888,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",888,{"inputs":[{"name":"stencilcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"clone","","",889,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",889,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",889,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",889,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",889,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",889,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"stencilattachment"}}],[11,"get_id","glium::texture::depth_stencil_cubemap_array","",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"fmt","","",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"width","","Returns the width of that image.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",890,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"clone","","",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",891,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"clone","","",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"deref","","",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",892,{"inputs":[{"name":"depthstencilcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",893,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",893,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",893,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",893,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",893,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"clone","","",894,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",894,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",894,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",894,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",894,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",894,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"depthstencilattachment"}}],[11,"hash","glium::texture","",895,null],[11,"eq","","",895,{"inputs":[{"name":"cubelayer"},{"name":"cubelayer"}],"output":{"name":"bool"}}],[11,"ne","","",895,{"inputs":[{"name":"cubelayer"},{"name":"cubelayer"}],"output":{"name":"bool"}}],[11,"fmt","","",895,{"inputs":[{"name":"cubelayer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",895,{"inputs":[{"name":"cubelayer"}],"output":{"name":"cubelayer"}}],[11,"get_layer_index","","In some situations whole cubemaps can be binded at once. If this is the case, each layer\nof the cubemap has a specific index.",895,{"inputs":[{"name":"cubelayer"}],"output":{"name":"usize"}}],[11,"hash","","",896,null],[11,"eq","","",896,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"ne","","",896,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"fmt","","",896,{"inputs":[{"name":"texturekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",896,{"inputs":[{"name":"texturekind"}],"output":{"name":"texturekind"}}],[11,"eq","","",897,{"inputs":[{"name":"mipmapsoption"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",897,{"inputs":[{"name":"mipmapsoption"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"clone","","",897,{"inputs":[{"name":"mipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"fmt","","",897,{"inputs":[{"name":"mipmapsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",897,{"inputs":[{"name":"mipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"eq","","",898,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",898,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"clone","","",898,{"inputs":[{"name":"compressedmipmapsoption"}],"output":{"name":"compressedmipmapsoption"}}],[11,"fmt","","",898,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw","collections::vec","",268,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage1d"}}],[11,"into_raw","glium::texture","",899,{"inputs":[{"name":"rawimage1d"}],"output":{"name":"rawimage1d"}}],[11,"from_raw","collections::vec","",268,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"from_raw_rgba","glium::texture","",900,null],[11,"from_raw_rgba_reversed","","",900,null],[11,"from_vec_raw1d","","Transforms a Vec<RawImage1d> into a RawImage2d",900,{"inputs":[{"name":"rawimage2d"},{"name":"vec"}],"output":{"name":"rawimage2d"}}],[11,"into_raw","collections::vec","",268,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage2d"}}],[11,"into_raw","glium::texture","",900,{"inputs":[{"name":"rawimage2d"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","collections::vec","",268,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"from_raw","glium::texture","",900,{"inputs":[{"name":"rawimage2d"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rawimage2d"}}],[11,"from_vec_raw2d","","Transforms a Vec<RawImage2d> into a RawImage3d",901,{"inputs":[{"name":"rawimage3d"},{"name":"vec"}],"output":{"name":"rawimage3d"}}],[11,"into_raw","collections::vec","",268,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage3d"}}],[11,"into_raw","glium::texture","",901,{"inputs":[{"name":"rawimage3d"}],"output":{"name":"rawimage3d"}}],[11,"from_raw","collections::vec","",268,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"eq","glium::texture","",902,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",902,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"clone","","",902,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",902,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",902,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",902,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"str"}}],[11,"from","","",902,{"inputs":[{"name":"texturecreationerror"},{"name":"formatnotsupportederror"}],"output":{"name":"texturecreationerror"}}],[11,"clone","glium::context::capabilities","",903,{"inputs":[{"name":"profile"}],"output":{"name":"profile"}}],[11,"fmt","","",903,{"inputs":[{"name":"profile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",904,{"inputs":[{"name":"capabilities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",905,{"inputs":[{"name":"formatinfos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",906,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"ne","","",906,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",906,{"inputs":[{"name":"releasebehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",906,{"inputs":[{"name":"releasebehavior"}],"output":{"name":"releasebehavior"}}],[11,"clone","glium::context::extensions","",907,{"inputs":[{"name":"extensionslist"}],"output":{"name":"extensionslist"}}],[11,"fmt","","",907,{"inputs":[{"name":"extensionslist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","glium::context::state","",908,{"inputs":[{"name":"textureunitstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",908,{"inputs":[{"name":"textureunitstate"}],"output":{"name":"textureunitstate"}}],[11,"fmt","","",909,{"inputs":[{"name":"indexedbufferstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",909,{"inputs":[{"name":"indexedbufferstate"}],"output":{"name":"indexedbufferstate"}}],[11,"default","","",910,{"inputs":[{"name":"glstate"}],"output":{"name":"glstate"}}],[11,"default","","",908,{"inputs":[{"name":"textureunitstate"}],"output":{"name":"textureunitstate"}}],[11,"default","","",909,{"inputs":[{"name":"indexedbufferstate"}],"output":{"name":"indexedbufferstate"}}],[11,"set_report_debug_output_errors","glium::context","",114,null],[11,"make_current","","",114,{"inputs":[{"name":"context"}],"output":{"name":"commandcontext"}}],[11,"capabilities","","",114,{"inputs":[{"name":"context"}],"output":{"name":"capabilities"}}],[11,"get_version","","",114,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_extensions","","",114,{"inputs":[{"name":"context"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",114,{"inputs":[{"name":"context"}],"output":{"name":"capabilities"}}],[11,"drop","","",114,null],[11,"get_version","","",911,{"inputs":[{"name":"commandcontext"}],"output":{"name":"version"}}],[11,"get_extensions","","",911,{"inputs":[{"name":"commandcontext"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",911,{"inputs":[{"name":"commandcontext"}],"output":{"name":"capabilities"}}],[11,"default","","",912,{"inputs":[{"name":"debugcallbackbehavior"}],"output":{"name":"debugcallbackbehavior"}}],[11,"clone","glium::fbo","",913,{"inputs":[{"name":"framebufferattachments"}],"output":{"name":"framebufferattachments"}}],[11,"clone","","",914,{"inputs":[{"name":"regularattachment"}],"output":{"name":"regularattachment"}}],[11,"kind","","Returns the kind of attachment (float, integral, unsigned, depth, stencil, depthstencil).",914,{"inputs":[{"name":"regularattachment"}],"output":{"name":"texturekind"}}],[11,"clone","","",915,{"inputs":[{"name":"layeredattachment"}],"output":{"name":"layeredattachment"}}],[11,"clone","","",916,{"inputs":[{"name":"depthstencilattachments"}],"output":{"name":"depthstencilattachments"}}],[11,"clone","","",917,{"inputs":[{"name":"framebufferspecificattachments"}],"output":{"name":"framebufferspecificattachments"}}],[11,"validate","","After building a `FramebufferAttachments` struct, you must use this function\nto \"compile\" the attachments and make sure that they are valid together.",913,{"inputs":[{"name":"framebufferattachments"},{"name":"c"}],"output":{"name":"result"}}],[11,"clone","","",918,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"validatedattachments"}}],[11,"is_layered","","Returns `true` if the framebuffer is layered.",918,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"bool"}}],[11,"get_dimensions","","Returns the dimensions that the framebuffer will have if you use these attachments.",918,null],[11,"get_depth_buffer_bits","","Returns the number of bits of precision of the depth buffer, or `None` if there is no\ndepth buffer. Also works for depth-stencil buffers.",918,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","Returns the number of bits of precision of the stencil buffer, or `None` if there is no\nstencil buffer. Also works for depth-stencil buffers.",918,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"option"}}],[11,"eq","","",919,{"inputs":[{"name":"validationerror"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"ne","","",919,{"inputs":[{"name":"validationerror"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",919,{"inputs":[{"name":"validationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",919,{"inputs":[{"name":"validationerror"}],"output":{"name":"validationerror"}}],[11,"fmt","","",919,{"inputs":[{"name":"validationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",919,{"inputs":[{"name":"validationerror"}],"output":{"name":"str"}}],[11,"eq","","",920,{"inputs":[{"name":"rawattachments"},{"name":"rawattachments"}],"output":{"name":"bool"}}],[11,"ne","","",920,{"inputs":[{"name":"rawattachments"},{"name":"rawattachments"}],"output":{"name":"bool"}}],[11,"clone","","",920,{"inputs":[{"name":"rawattachments"}],"output":{"name":"rawattachments"}}],[11,"hash","","",920,null],[11,"eq","","",921,{"inputs":[{"name":"rawattachment"},{"name":"rawattachment"}],"output":{"name":"bool"}}],[11,"ne","","",921,{"inputs":[{"name":"rawattachment"},{"name":"rawattachment"}],"output":{"name":"bool"}}],[11,"clone","","",921,{"inputs":[{"name":"rawattachment"}],"output":{"name":"rawattachment"}}],[11,"hash","","",921,null],[11,"clone","","",922,{"inputs":[{"name":"clearbufferdata"}],"output":{"name":"clearbufferdata"}}],[11,"fmt","","",922,{"inputs":[{"name":"clearbufferdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",922,null],[11,"from","","",922,null],[11,"from","","",922,null],[11,"new","","Initializes the container.",923,{"inputs":[{"name":"framebufferscontainer"}],"output":{"name":"framebufferscontainer"}}],[11,"purge_all","","Destroys all framebuffer objects. This is used when using a new context for example.",923,null],[11,"purge_texture","","Destroys all framebuffer objects that contain a precise texture.",923,null],[11,"purge_renderbuffer","","Destroys all framebuffer objects that contain a precise renderbuffer.",923,null],[11,"cleanup","","Destroys all framebuffer objects.",923,null],[11,"get_framebuffer_for_drawing","","",923,{"inputs":[{"name":"framebufferscontainer"},{"name":"commandcontext"},{"name":"option"}],"output":{"name":"u32"}}],[11,"bind_default_framebuffer_for_reading","","Binds the default framebuffer to `GL_READ_FRAMEBUFFER` or `GL_FRAMEBUFFER` so that it\nbecomes the target of `glReadPixels`, `glCopyTexImage2D`, etc.",923,null],[11,"bind_framebuffer_for_reading","","Binds a framebuffer to `GL_READ_FRAMEBUFFER` or `GL_FRAMEBUFFER` so that it becomes the\ntarget of `glReadPixels`, `glCopyTexImage2D`, etc.",923,null],[11,"clear_buffer","","Calls `glClearBuffer` on a framebuffer that contains the attachment.",923,null],[11,"drop","","",923,null],[11,"get_id","","",924,{"inputs":[{"name":"framebufferobject"}],"output":{"name":"u32"}}],[11,"fmt","glium::image_format","",925,{"inputs":[{"name":"formatnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",925,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"formatnotsupportederror"}}],[11,"fmt","","",925,{"inputs":[{"name":"formatnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",925,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"str"}}],[11,"fmt","","",926,{"inputs":[{"name":"textureformatrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",926,{"inputs":[{"name":"textureformatrequest"}],"output":{"name":"textureformatrequest"}}],[11,"eq","","",927,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"ne","","",927,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"clone","","",927,{"inputs":[{"name":"clientformat"}],"output":{"name":"clientformat"}}],[11,"fmt","","",927,{"inputs":[{"name":"clientformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",927,{"inputs":[{"name":"clientformat"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",927,{"inputs":[{"name":"clientformat"}],"output":{"name":"u8"}}],[11,"eq","","",928,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"ne","","",928,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"hash","","",928,null],[11,"clone","","",928,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"uncompressedfloatformat"}}],[11,"fmt","","",928,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",928,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",928,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",928,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",928,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",929,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",929,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"hash","","",929,null],[11,"clone","","",929,{"inputs":[{"name":"srgbformat"}],"output":{"name":"srgbformat"}}],[11,"fmt","","",929,{"inputs":[{"name":"srgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",929,{"inputs":[{"name":"srgbformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",929,{"inputs":[{"name":"srgbformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",929,{"inputs":[{"name":"srgbformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",929,{"inputs":[{"name":"srgbformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",930,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"ne","","",930,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"hash","","",930,null],[11,"clone","","",930,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"uncompressedintformat"}}],[11,"fmt","","",930,{"inputs":[{"name":"uncompressedintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",930,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",930,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",930,{"inputs":[{"name":"uncompressedintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",930,{"inputs":[{"name":"uncompressedintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",931,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"ne","","",931,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"hash","","",931,null],[11,"clone","","",931,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"uncompresseduintformat"}}],[11,"fmt","","",931,{"inputs":[{"name":"uncompresseduintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",931,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",931,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",931,{"inputs":[{"name":"uncompresseduintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",931,{"inputs":[{"name":"uncompresseduintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",932,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"ne","","",932,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"hash","","",932,null],[11,"clone","","",932,{"inputs":[{"name":"compressedformat"}],"output":{"name":"compressedformat"}}],[11,"fmt","","",932,{"inputs":[{"name":"compressedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",932,{"inputs":[{"name":"compressedformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",932,{"inputs":[{"name":"compressedformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",932,{"inputs":[{"name":"compressedformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",933,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",933,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"hash","","",933,null],[11,"clone","","",933,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"compressedsrgbformat"}}],[11,"fmt","","",933,{"inputs":[{"name":"compressedsrgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",933,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",933,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",933,{"inputs":[{"name":"compressedsrgbformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",934,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"ne","","",934,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"hash","","",934,null],[11,"clone","","",934,{"inputs":[{"name":"depthformat"}],"output":{"name":"depthformat"}}],[11,"fmt","","",934,{"inputs":[{"name":"depthformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",934,{"inputs":[{"name":"depthformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",934,{"inputs":[{"name":"depthformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",934,{"inputs":[{"name":"depthformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",935,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",935,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"hash","","",935,null],[11,"clone","","",935,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"depthstencilformat"}}],[11,"fmt","","",935,{"inputs":[{"name":"depthstencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",935,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",935,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",935,{"inputs":[{"name":"depthstencilformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",936,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",936,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"hash","","",936,null],[11,"clone","","",936,{"inputs":[{"name":"stencilformat"}],"output":{"name":"stencilformat"}}],[11,"fmt","","",936,{"inputs":[{"name":"stencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",936,{"inputs":[{"name":"stencilformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",936,{"inputs":[{"name":"stencilformat"}],"output":{"name":"textureformat"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",936,{"inputs":[{"name":"stencilformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",936,{"inputs":[{"name":"stencilformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",937,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"ne","","",937,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"hash","","",937,null],[11,"clone","","",937,{"inputs":[{"name":"textureformat"}],"output":{"name":"textureformat"}}],[11,"fmt","","",937,{"inputs":[{"name":"textureformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",937,{"inputs":[{"name":"textureformat"}],"output":{"name":"vec"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",937,{"inputs":[{"name":"textureformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",937,{"inputs":[{"name":"textureformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_renderable","","Returns true if the format is color-renderable, depth-renderable, depth-stencil-renderable\nor stencil-renderable.",937,{"inputs":[{"name":"textureformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"to_glenum","","",937,{"inputs":[{"name":"textureformat"}],"output":{"name":"u32"}}],[11,"eq","","",938,{"inputs":[{"name":"clientformatany"},{"name":"clientformatany"}],"output":{"name":"bool"}}],[11,"ne","","",938,{"inputs":[{"name":"clientformatany"},{"name":"clientformatany"}],"output":{"name":"bool"}}],[11,"clone","","",938,{"inputs":[{"name":"clientformatany"}],"output":{"name":"clientformatany"}}],[11,"fmt","","",938,{"inputs":[{"name":"clientformatany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_compressed","","Checks if this format is a compressed format.",938,{"inputs":[{"name":"clientformatany"}],"output":{"name":"bool"}}],[11,"get_buffer_size","","Gets the size in bytes of the buffer required to store a uncompressed image\nof the specified dimensions on this format.",938,{"inputs":[{"name":"clientformatany"},{"name":"u32"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"usize"}}],[11,"get_num_components","","",938,{"inputs":[{"name":"clientformatany"}],"output":{"name":"u8"}}],[11,"eq","","",939,{"inputs":[{"name":"requesttype"},{"name":"requesttype"}],"output":{"name":"bool"}}],[11,"ne","","",939,{"inputs":[{"name":"requesttype"},{"name":"requesttype"}],"output":{"name":"bool"}}],[11,"fmt","","",939,{"inputs":[{"name":"requesttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",939,{"inputs":[{"name":"requesttype"}],"output":{"name":"requesttype"}}],[11,"get_client_format","","Returns the client format of the data that will be put in the texture.",939,{"inputs":[{"name":"requesttype"}],"output":{"name":"option"}}],[11,"from","glium::ops::read","",940,{"inputs":[{"name":"source"},{"name":"regularattachment"}],"output":{"name":"source"}}],[11,"from","","",941,{"inputs":[{"name":"destination"},{"name":"vec"}],"output":{"name":"destination"}}],[11,"from","","",941,{"inputs":[{"name":"destination"},{"name":"pixelbuffer"}],"output":{"name":"destination"}}],[11,"fmt","","",942,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",942,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",942,{"inputs":[{"name":"readerror"}],"output":{"name":"str"}}],[11,"new","glium::sampler_object","Builds a new sampler object.",943,{"inputs":[{"name":"samplerobject"},{"name":"commandcontext"},{"name":"samplerbehavior"}],"output":{"name":"samplerobject"}}],[11,"destroy","","",943,null],[11,"get_id","","",943,{"inputs":[{"name":"samplerobject"}],"output":{"name":"u32"}}],[11,"drop","","",943,null],[11,"fmt","glium::sync","",944,{"inputs":[{"name":"syncnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",944,{"inputs":[{"name":"syncnotsupportederror"}],"output":{"name":"syncnotsupportederror"}}],[11,"new","","Builds a new `SyncFence` that is injected in the server.",945,{"inputs":[{"name":"syncfence"},{"name":"f"}],"output":{"name":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",945,null],[11,"drop","","",945,null],[11,"into_sync_fence","","Turns the prototype into a real fence.",946,{"inputs":[{"name":"linearsyncfence"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"drop","","",946,null],[11,"new","glium::utils::bitsfield","",947,{"inputs":[{"name":"bitsfield"}],"output":{"name":"bitsfield"}}],[11,"set_used","","",947,null],[11,"set_unused","","",947,null],[11,"is_used","","",947,{"inputs":[{"name":"bitsfield"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"get_unused","","",947,{"inputs":[{"name":"bitsfield"}],"output":{"name":"option"}}],[11,"start","core::ops","",566,{"inputs":[{"name":"rangefull"}],"output":{"name":"option"}}],[11,"end","","",566,{"inputs":[{"name":"rangefull"}],"output":{"name":"option"}}],[11,"start","","",559,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",559,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"start","","",567,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"end","","",567,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",560,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",560,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"eq","glium::version","",948,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",948,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",948,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"fmt","","",948,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",949,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",949,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",949,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",949,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",948,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[11,"new","glium::vertex_array_object","Builds a new `VertexAttributesSystem`.",950,{"inputs":[{"name":"vertexattributessystem"}],"output":{"name":"vertexattributessystem"}}],[11,"start","","Starts the process of binding vertex attributes.",950,{"inputs":[{"name":"vertexattributessystem"},{"name":"commandcontext"},{"name":"program"},{"name":"option"},{"name":"bool"}],"output":{"name":"binder"}}],[11,"purge_buffer","","This function *must* be called whenever you destroy a buffer so that the system can\npurge its VAOs cache.",950,null],[11,"purge_program","","This function *must* be called whenever you destroy a program so that the system can\npurge its VAOs cache.",950,null],[11,"purge_all","","Purges the VAOs cache.",950,null],[11,"cleanup","","Purges the VAOs cache. Contrary to `purge_all`, this function expects the system to be\ndestroyed soon.",950,null],[11,"hijack_current_element_array_buffer","","Tells the VAOs system that the currently binded element array buffer will change.",950,null],[11,"add","","Adds a buffer to bind as a source of vertices.",951,{"inputs":[{"name":"binder"},{"name":"bufferanyslice"},{"name":"cow"},{"name":"option"}],"output":{"name":"binder"}}],[11,"bind","","Finish binding the vertex attributes.",951,{"inputs":[{"name":"binder"}],"output":{"name":"option"}}],[11,"drop","","",952,null],[11,"get_id","","",952,{"inputs":[{"name":"vertexarrayobject"}],"output":{"name":"u32"}}],[11,"is_loaded","glium::gl","Returns `true` if the function has been successfully loaded.",953,{"inputs":[{"name":"fnptr"}],"output":{"name":"bool"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",954,{"inputs":[{"name":"gl"},{"name":"f"}],"output":{"name":"gl"}}],[11,"Accum","","",954,null],[11,"ActiveShaderProgram","","",954,null],[11,"ActiveTexture","","",954,null],[11,"AlphaFunc","","",954,null],[11,"AreTexturesResident","","",954,null],[11,"ArrayElement","","",954,null],[11,"AttachObjectARB","","",954,null],[11,"AttachShader","","",954,null],[11,"Begin","","",954,null],[11,"BeginConditionalRender","","",954,null],[11,"BeginConditionalRenderNV","","",954,null],[11,"BeginQuery","","",954,null],[11,"BeginQueryARB","","",954,null],[11,"BeginQueryIndexed","","",954,null],[11,"BeginTransformFeedback","","",954,null],[11,"BeginTransformFeedbackEXT","","",954,null],[11,"BindAttribLocation","","",954,null],[11,"BindAttribLocationARB","","",954,null],[11,"BindBuffer","","",954,null],[11,"BindBufferARB","","",954,null],[11,"BindBufferBase","","",954,null],[11,"BindBufferBaseEXT","","",954,null],[11,"BindBufferOffsetEXT","","",954,null],[11,"BindBufferRange","","",954,null],[11,"BindBufferRangeEXT","","",954,null],[11,"BindBuffersBase","","",954,null],[11,"BindBuffersRange","","",954,null],[11,"BindFragDataLocation","","",954,null],[11,"BindFragDataLocationEXT","","",954,null],[11,"BindFragDataLocationIndexed","","",954,null],[11,"BindFramebuffer","","",954,null],[11,"BindFramebufferEXT","","",954,null],[11,"BindImageTexture","","",954,null],[11,"BindImageTextures","","",954,null],[11,"BindMultiTextureEXT","","",954,null],[11,"BindProgramPipeline","","",954,null],[11,"BindRenderbuffer","","",954,null],[11,"BindRenderbufferEXT","","",954,null],[11,"BindSampler","","",954,null],[11,"BindSamplers","","",954,null],[11,"BindTexture","","",954,null],[11,"BindTextureUnit","","",954,null],[11,"BindTextures","","",954,null],[11,"BindTransformFeedback","","",954,null],[11,"BindVertexArray","","",954,null],[11,"BindVertexArrayAPPLE","","",954,null],[11,"BindVertexBuffer","","",954,null],[11,"BindVertexBuffers","","",954,null],[11,"Bitmap","","",954,null],[11,"BlendColor","","",954,null],[11,"BlendEquation","","",954,null],[11,"BlendEquationSeparate","","",954,null],[11,"BlendEquationSeparatei","","",954,null],[11,"BlendEquationi","","",954,null],[11,"BlendFunc","","",954,null],[11,"BlendFuncSeparate","","",954,null],[11,"BlendFuncSeparatei","","",954,null],[11,"BlendFunci","","",954,null],[11,"BlitFramebuffer","","",954,null],[11,"BlitFramebufferEXT","","",954,null],[11,"BlitNamedFramebuffer","","",954,null],[11,"BufferData","","",954,null],[11,"BufferDataARB","","",954,null],[11,"BufferStorage","","",954,null],[11,"BufferSubData","","",954,null],[11,"BufferSubDataARB","","",954,null],[11,"CallList","","",954,null],[11,"CallLists","","",954,null],[11,"CheckFramebufferStatus","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CheckFramebufferStatusEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CheckNamedFramebufferStatus","","",954,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CheckNamedFramebufferStatusEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"ClampColor","","",954,null],[11,"Clear","","",954,null],[11,"ClearAccum","","",954,null],[11,"ClearBufferData","","",954,null],[11,"ClearBufferSubData","","",954,null],[11,"ClearBufferfi","","",954,null],[11,"ClearBufferfv","","",954,null],[11,"ClearBufferiv","","",954,null],[11,"ClearBufferuiv","","",954,null],[11,"ClearColor","","",954,null],[11,"ClearColorIiEXT","","",954,null],[11,"ClearColorIuiEXT","","",954,null],[11,"ClearDepth","","",954,null],[11,"ClearDepthf","","",954,null],[11,"ClearIndex","","",954,null],[11,"ClearNamedBufferData","","",954,null],[11,"ClearNamedBufferDataEXT","","",954,null],[11,"ClearNamedBufferSubData","","",954,null],[11,"ClearNamedBufferSubDataEXT","","",954,null],[11,"ClearNamedFramebufferfi","","",954,null],[11,"ClearNamedFramebufferfv","","",954,null],[11,"ClearNamedFramebufferiv","","",954,null],[11,"ClearNamedFramebufferuiv","","",954,null],[11,"ClearStencil","","",954,null],[11,"ClearTexImage","","",954,null],[11,"ClearTexSubImage","","",954,null],[11,"ClientActiveTexture","","",954,null],[11,"ClientAttribDefaultEXT","","",954,null],[11,"ClientWaitSync","","",954,null],[11,"ClipControl","","",954,null],[11,"ClipPlane","","",954,null],[11,"Color3b","","",954,null],[11,"Color3bv","","",954,null],[11,"Color3d","","",954,null],[11,"Color3dv","","",954,null],[11,"Color3f","","",954,null],[11,"Color3fv","","",954,null],[11,"Color3i","","",954,null],[11,"Color3iv","","",954,null],[11,"Color3s","","",954,null],[11,"Color3sv","","",954,null],[11,"Color3ub","","",954,null],[11,"Color3ubv","","",954,null],[11,"Color3ui","","",954,null],[11,"Color3uiv","","",954,null],[11,"Color3us","","",954,null],[11,"Color3usv","","",954,null],[11,"Color4b","","",954,null],[11,"Color4bv","","",954,null],[11,"Color4d","","",954,null],[11,"Color4dv","","",954,null],[11,"Color4f","","",954,null],[11,"Color4fv","","",954,null],[11,"Color4i","","",954,null],[11,"Color4iv","","",954,null],[11,"Color4s","","",954,null],[11,"Color4sv","","",954,null],[11,"Color4ub","","",954,null],[11,"Color4ubv","","",954,null],[11,"Color4ui","","",954,null],[11,"Color4uiv","","",954,null],[11,"Color4us","","",954,null],[11,"Color4usv","","",954,null],[11,"ColorMask","","",954,null],[11,"ColorMaski","","",954,null],[11,"ColorMaterial","","",954,null],[11,"ColorP3ui","","",954,null],[11,"ColorP3uiv","","",954,null],[11,"ColorP4ui","","",954,null],[11,"ColorP4uiv","","",954,null],[11,"ColorPointer","","",954,null],[11,"CompileShader","","",954,null],[11,"CompileShaderARB","","",954,null],[11,"CompressedMultiTexImage1DEXT","","",954,null],[11,"CompressedMultiTexImage2DEXT","","",954,null],[11,"CompressedMultiTexImage3DEXT","","",954,null],[11,"CompressedMultiTexSubImage1DEXT","","",954,null],[11,"CompressedMultiTexSubImage2DEXT","","",954,null],[11,"CompressedMultiTexSubImage3DEXT","","",954,null],[11,"CompressedTexImage1D","","",954,null],[11,"CompressedTexImage2D","","",954,null],[11,"CompressedTexImage3D","","",954,null],[11,"CompressedTexSubImage1D","","",954,null],[11,"CompressedTexSubImage2D","","",954,null],[11,"CompressedTexSubImage3D","","",954,null],[11,"CompressedTextureImage1DEXT","","",954,null],[11,"CompressedTextureImage2DEXT","","",954,null],[11,"CompressedTextureImage3DEXT","","",954,null],[11,"CompressedTextureSubImage1D","","",954,null],[11,"CompressedTextureSubImage1DEXT","","",954,null],[11,"CompressedTextureSubImage2D","","",954,null],[11,"CompressedTextureSubImage2DEXT","","",954,null],[11,"CompressedTextureSubImage3D","","",954,null],[11,"CompressedTextureSubImage3DEXT","","",954,null],[11,"CopyBufferSubData","","",954,null],[11,"CopyImageSubData","","",954,null],[11,"CopyMultiTexImage1DEXT","","",954,null],[11,"CopyMultiTexImage2DEXT","","",954,null],[11,"CopyMultiTexSubImage1DEXT","","",954,null],[11,"CopyMultiTexSubImage2DEXT","","",954,null],[11,"CopyMultiTexSubImage3DEXT","","",954,null],[11,"CopyNamedBufferSubData","","",954,null],[11,"CopyPixels","","",954,null],[11,"CopyTexImage1D","","",954,null],[11,"CopyTexImage2D","","",954,null],[11,"CopyTexSubImage1D","","",954,null],[11,"CopyTexSubImage2D","","",954,null],[11,"CopyTexSubImage3D","","",954,null],[11,"CopyTextureImage1DEXT","","",954,null],[11,"CopyTextureImage2DEXT","","",954,null],[11,"CopyTextureSubImage1D","","",954,null],[11,"CopyTextureSubImage1DEXT","","",954,null],[11,"CopyTextureSubImage2D","","",954,null],[11,"CopyTextureSubImage2DEXT","","",954,null],[11,"CopyTextureSubImage3D","","",954,null],[11,"CopyTextureSubImage3DEXT","","",954,null],[11,"CreateBuffers","","",954,null],[11,"CreateFramebuffers","","",954,null],[11,"CreateProgram","","",954,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"CreateProgramObjectARB","","",954,null],[11,"CreateProgramPipelines","","",954,null],[11,"CreateQueries","","",954,null],[11,"CreateRenderbuffers","","",954,null],[11,"CreateSamplers","","",954,null],[11,"CreateShader","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CreateShaderObjectARB","","",954,null],[11,"CreateShaderProgramv","","",954,null],[11,"CreateTextures","","",954,null],[11,"CreateTransformFeedbacks","","",954,null],[11,"CreateVertexArrays","","",954,null],[11,"CullFace","","",954,null],[11,"DebugMessageCallback","","",954,null],[11,"DebugMessageCallbackARB","","",954,null],[11,"DebugMessageControl","","",954,null],[11,"DebugMessageControlARB","","",954,null],[11,"DebugMessageInsert","","",954,null],[11,"DebugMessageInsertARB","","",954,null],[11,"DeleteBuffers","","",954,null],[11,"DeleteBuffersARB","","",954,null],[11,"DeleteFramebuffers","","",954,null],[11,"DeleteFramebuffersEXT","","",954,null],[11,"DeleteLists","","",954,null],[11,"DeleteObjectARB","","",954,null],[11,"DeleteProgram","","",954,null],[11,"DeleteProgramPipelines","","",954,null],[11,"DeleteQueries","","",954,null],[11,"DeleteQueriesARB","","",954,null],[11,"DeleteRenderbuffers","","",954,null],[11,"DeleteRenderbuffersEXT","","",954,null],[11,"DeleteSamplers","","",954,null],[11,"DeleteShader","","",954,null],[11,"DeleteSync","","",954,null],[11,"DeleteTextures","","",954,null],[11,"DeleteTransformFeedbacks","","",954,null],[11,"DeleteVertexArrays","","",954,null],[11,"DeleteVertexArraysAPPLE","","",954,null],[11,"DepthFunc","","",954,null],[11,"DepthMask","","",954,null],[11,"DepthRange","","",954,null],[11,"DepthRangeArrayv","","",954,null],[11,"DepthRangeIndexed","","",954,null],[11,"DepthRangef","","",954,null],[11,"DetachObjectARB","","",954,null],[11,"DetachShader","","",954,null],[11,"Disable","","",954,null],[11,"DisableClientState","","",954,null],[11,"DisableClientStateIndexedEXT","","",954,null],[11,"DisableClientStateiEXT","","",954,null],[11,"DisableIndexedEXT","","",954,null],[11,"DisableVertexArrayAttrib","","",954,null],[11,"DisableVertexArrayAttribEXT","","",954,null],[11,"DisableVertexArrayEXT","","",954,null],[11,"DisableVertexAttribArray","","",954,null],[11,"DisableVertexAttribArrayARB","","",954,null],[11,"Disablei","","",954,null],[11,"DispatchCompute","","",954,null],[11,"DispatchComputeIndirect","","",954,null],[11,"DrawArrays","","",954,null],[11,"DrawArraysIndirect","","",954,null],[11,"DrawArraysInstanced","","",954,null],[11,"DrawArraysInstancedBaseInstance","","",954,null],[11,"DrawBuffer","","",954,null],[11,"DrawBuffers","","",954,null],[11,"DrawBuffersARB","","",954,null],[11,"DrawBuffersATI","","",954,null],[11,"DrawElements","","",954,null],[11,"DrawElementsBaseVertex","","",954,null],[11,"DrawElementsIndirect","","",954,null],[11,"DrawElementsInstanced","","",954,null],[11,"DrawElementsInstancedBaseInstance","","",954,null],[11,"DrawElementsInstancedBaseVertex","","",954,null],[11,"DrawElementsInstancedBaseVertexBaseInstance","","",954,null],[11,"DrawPixels","","",954,null],[11,"DrawRangeElements","","",954,null],[11,"DrawRangeElementsBaseVertex","","",954,null],[11,"DrawTransformFeedback","","",954,null],[11,"DrawTransformFeedbackInstanced","","",954,null],[11,"DrawTransformFeedbackStream","","",954,null],[11,"DrawTransformFeedbackStreamInstanced","","",954,null],[11,"EdgeFlag","","",954,null],[11,"EdgeFlagPointer","","",954,null],[11,"EdgeFlagv","","",954,null],[11,"Enable","","",954,null],[11,"EnableClientState","","",954,null],[11,"EnableClientStateIndexedEXT","","",954,null],[11,"EnableClientStateiEXT","","",954,null],[11,"EnableIndexedEXT","","",954,null],[11,"EnableVertexArrayAttrib","","",954,null],[11,"EnableVertexArrayAttribEXT","","",954,null],[11,"EnableVertexArrayEXT","","",954,null],[11,"EnableVertexAttribArray","","",954,null],[11,"EnableVertexAttribArrayARB","","",954,null],[11,"Enablei","","",954,null],[11,"End","","",954,null],[11,"EndConditionalRender","","",954,null],[11,"EndConditionalRenderNV","","",954,null],[11,"EndList","","",954,null],[11,"EndQuery","","",954,null],[11,"EndQueryARB","","",954,null],[11,"EndQueryIndexed","","",954,null],[11,"EndTransformFeedback","","",954,null],[11,"EndTransformFeedbackEXT","","",954,null],[11,"EvalCoord1d","","",954,null],[11,"EvalCoord1dv","","",954,null],[11,"EvalCoord1f","","",954,null],[11,"EvalCoord1fv","","",954,null],[11,"EvalCoord2d","","",954,null],[11,"EvalCoord2dv","","",954,null],[11,"EvalCoord2f","","",954,null],[11,"EvalCoord2fv","","",954,null],[11,"EvalMesh1","","",954,null],[11,"EvalMesh2","","",954,null],[11,"EvalPoint1","","",954,null],[11,"EvalPoint2","","",954,null],[11,"FeedbackBuffer","","",954,null],[11,"FenceSync","","",954,null],[11,"Finish","","",954,null],[11,"Flush","","",954,null],[11,"FlushMappedBufferRange","","",954,null],[11,"FlushMappedNamedBufferRange","","",954,null],[11,"FlushMappedNamedBufferRangeEXT","","",954,null],[11,"FogCoordPointer","","",954,null],[11,"FogCoordd","","",954,null],[11,"FogCoorddv","","",954,null],[11,"FogCoordf","","",954,null],[11,"FogCoordfv","","",954,null],[11,"Fogf","","",954,null],[11,"Fogfv","","",954,null],[11,"Fogi","","",954,null],[11,"Fogiv","","",954,null],[11,"FramebufferDrawBufferEXT","","",954,null],[11,"FramebufferDrawBuffersEXT","","",954,null],[11,"FramebufferParameteri","","",954,null],[11,"FramebufferReadBufferEXT","","",954,null],[11,"FramebufferRenderbuffer","","",954,null],[11,"FramebufferRenderbufferEXT","","",954,null],[11,"FramebufferTexture","","",954,null],[11,"FramebufferTexture1D","","",954,null],[11,"FramebufferTexture1DEXT","","",954,null],[11,"FramebufferTexture2D","","",954,null],[11,"FramebufferTexture2DEXT","","",954,null],[11,"FramebufferTexture3D","","",954,null],[11,"FramebufferTexture3DEXT","","",954,null],[11,"FramebufferTextureARB","","",954,null],[11,"FramebufferTextureFaceARB","","",954,null],[11,"FramebufferTextureLayer","","",954,null],[11,"FramebufferTextureLayerARB","","",954,null],[11,"FramebufferTextureLayerEXT","","",954,null],[11,"FrontFace","","",954,null],[11,"Frustum","","",954,null],[11,"GenBuffers","","",954,null],[11,"GenBuffersARB","","",954,null],[11,"GenFramebuffers","","",954,null],[11,"GenFramebuffersEXT","","",954,null],[11,"GenLists","","",954,{"inputs":[{"name":"gl"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"GenProgramPipelines","","",954,null],[11,"GenQueries","","",954,null],[11,"GenQueriesARB","","",954,null],[11,"GenRenderbuffers","","",954,null],[11,"GenRenderbuffersEXT","","",954,null],[11,"GenSamplers","","",954,null],[11,"GenTextures","","",954,null],[11,"GenTransformFeedbacks","","",954,null],[11,"GenVertexArrays","","",954,null],[11,"GenVertexArraysAPPLE","","",954,null],[11,"GenerateMipmap","","",954,null],[11,"GenerateMipmapEXT","","",954,null],[11,"GenerateMultiTexMipmapEXT","","",954,null],[11,"GenerateTextureMipmap","","",954,null],[11,"GenerateTextureMipmapEXT","","",954,null],[11,"GetActiveAtomicCounterBufferiv","","",954,null],[11,"GetActiveAttrib","","",954,null],[11,"GetActiveAttribARB","","",954,null],[11,"GetActiveSubroutineName","","",954,null],[11,"GetActiveSubroutineUniformName","","",954,null],[11,"GetActiveSubroutineUniformiv","","",954,null],[11,"GetActiveUniform","","",954,null],[11,"GetActiveUniformARB","","",954,null],[11,"GetActiveUniformBlockName","","",954,null],[11,"GetActiveUniformBlockiv","","",954,null],[11,"GetActiveUniformName","","",954,null],[11,"GetActiveUniformsiv","","",954,null],[11,"GetAttachedObjectsARB","","",954,null],[11,"GetAttachedShaders","","",954,null],[11,"GetAttribLocation","","",954,null],[11,"GetAttribLocationARB","","",954,null],[11,"GetBooleanIndexedvEXT","","",954,null],[11,"GetBooleani_v","","",954,null],[11,"GetBooleanv","","",954,null],[11,"GetBufferParameteri64v","","",954,null],[11,"GetBufferParameteriv","","",954,null],[11,"GetBufferParameterivARB","","",954,null],[11,"GetBufferPointerv","","",954,null],[11,"GetBufferPointervARB","","",954,null],[11,"GetBufferSubData","","",954,null],[11,"GetBufferSubDataARB","","",954,null],[11,"GetClipPlane","","",954,null],[11,"GetCompressedMultiTexImageEXT","","",954,null],[11,"GetCompressedTexImage","","",954,null],[11,"GetCompressedTextureImage","","",954,null],[11,"GetCompressedTextureImageEXT","","",954,null],[11,"GetCompressedTextureSubImage","","",954,null],[11,"GetDebugMessageLog","","",954,null],[11,"GetDebugMessageLogARB","","",954,null],[11,"GetDoubleIndexedvEXT","","",954,null],[11,"GetDoublei_v","","",954,null],[11,"GetDoublei_vEXT","","",954,null],[11,"GetDoublev","","",954,null],[11,"GetError","","",954,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetFloatIndexedvEXT","","",954,null],[11,"GetFloati_v","","",954,null],[11,"GetFloati_vEXT","","",954,null],[11,"GetFloatv","","",954,null],[11,"GetFragDataIndex","","",954,null],[11,"GetFragDataLocation","","",954,null],[11,"GetFragDataLocationEXT","","",954,null],[11,"GetFramebufferAttachmentParameteriv","","",954,null],[11,"GetFramebufferAttachmentParameterivEXT","","",954,null],[11,"GetFramebufferParameteriv","","",954,null],[11,"GetFramebufferParameterivEXT","","",954,null],[11,"GetGraphicsResetStatus","","",954,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetGraphicsResetStatusARB","","",954,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetGraphicsResetStatusKHR","","",954,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetHandleARB","","",954,null],[11,"GetImageHandleARB","","",954,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"i32"},{"name":"u8"},{"name":"i32"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"GetInfoLogARB","","",954,null],[11,"GetInteger64i_v","","",954,null],[11,"GetInteger64v","","",954,null],[11,"GetIntegerIndexedvEXT","","",954,null],[11,"GetIntegeri_v","","",954,null],[11,"GetIntegerv","","",954,null],[11,"GetInternalformati64v","","",954,null],[11,"GetInternalformativ","","",954,null],[11,"GetLightfv","","",954,null],[11,"GetLightiv","","",954,null],[11,"GetMapdv","","",954,null],[11,"GetMapfv","","",954,null],[11,"GetMapiv","","",954,null],[11,"GetMaterialfv","","",954,null],[11,"GetMaterialiv","","",954,null],[11,"GetMultiTexEnvfvEXT","","",954,null],[11,"GetMultiTexEnvivEXT","","",954,null],[11,"GetMultiTexGendvEXT","","",954,null],[11,"GetMultiTexGenfvEXT","","",954,null],[11,"GetMultiTexGenivEXT","","",954,null],[11,"GetMultiTexImageEXT","","",954,null],[11,"GetMultiTexLevelParameterfvEXT","","",954,null],[11,"GetMultiTexLevelParameterivEXT","","",954,null],[11,"GetMultiTexParameterIivEXT","","",954,null],[11,"GetMultiTexParameterIuivEXT","","",954,null],[11,"GetMultiTexParameterfvEXT","","",954,null],[11,"GetMultiTexParameterivEXT","","",954,null],[11,"GetMultisamplefv","","",954,null],[11,"GetNamedBufferParameteri64v","","",954,null],[11,"GetNamedBufferParameteriv","","",954,null],[11,"GetNamedBufferParameterivEXT","","",954,null],[11,"GetNamedBufferPointerv","","",954,null],[11,"GetNamedBufferPointervEXT","","",954,null],[11,"GetNamedBufferSubData","","",954,null],[11,"GetNamedBufferSubDataEXT","","",954,null],[11,"GetNamedFramebufferAttachmentParameteriv","","",954,null],[11,"GetNamedFramebufferAttachmentParameterivEXT","","",954,null],[11,"GetNamedFramebufferParameteriv","","",954,null],[11,"GetNamedFramebufferParameterivEXT","","",954,null],[11,"GetNamedProgramLocalParameterIivEXT","","",954,null],[11,"GetNamedProgramLocalParameterIuivEXT","","",954,null],[11,"GetNamedProgramLocalParameterdvEXT","","",954,null],[11,"GetNamedProgramLocalParameterfvEXT","","",954,null],[11,"GetNamedProgramStringEXT","","",954,null],[11,"GetNamedProgramivEXT","","",954,null],[11,"GetNamedRenderbufferParameteriv","","",954,null],[11,"GetNamedRenderbufferParameterivEXT","","",954,null],[11,"GetObjectLabel","","",954,null],[11,"GetObjectParameterfvARB","","",954,null],[11,"GetObjectParameterivARB","","",954,null],[11,"GetObjectPtrLabel","","",954,null],[11,"GetPixelMapfv","","",954,null],[11,"GetPixelMapuiv","","",954,null],[11,"GetPixelMapusv","","",954,null],[11,"GetPointerIndexedvEXT","","",954,null],[11,"GetPointeri_vEXT","","",954,null],[11,"GetPointerv","","",954,null],[11,"GetPolygonStipple","","",954,null],[11,"GetProgramBinary","","",954,null],[11,"GetProgramInfoLog","","",954,null],[11,"GetProgramInterfaceiv","","",954,null],[11,"GetProgramPipelineInfoLog","","",954,null],[11,"GetProgramPipelineiv","","",954,null],[11,"GetProgramResourceIndex","","",954,null],[11,"GetProgramResourceLocation","","",954,null],[11,"GetProgramResourceLocationIndex","","",954,null],[11,"GetProgramResourceName","","",954,null],[11,"GetProgramResourceiv","","",954,null],[11,"GetProgramStageiv","","",954,null],[11,"GetProgramiv","","",954,null],[11,"GetQueryBufferObjecti64v","","",954,null],[11,"GetQueryBufferObjectiv","","",954,null],[11,"GetQueryBufferObjectui64v","","",954,null],[11,"GetQueryBufferObjectuiv","","",954,null],[11,"GetQueryIndexediv","","",954,null],[11,"GetQueryObjecti64v","","",954,null],[11,"GetQueryObjectiv","","",954,null],[11,"GetQueryObjectivARB","","",954,null],[11,"GetQueryObjectui64v","","",954,null],[11,"GetQueryObjectuiv","","",954,null],[11,"GetQueryObjectuivARB","","",954,null],[11,"GetQueryiv","","",954,null],[11,"GetQueryivARB","","",954,null],[11,"GetRenderbufferParameteriv","","",954,null],[11,"GetRenderbufferParameterivEXT","","",954,null],[11,"GetSamplerParameterIiv","","",954,null],[11,"GetSamplerParameterIuiv","","",954,null],[11,"GetSamplerParameterfv","","",954,null],[11,"GetSamplerParameteriv","","",954,null],[11,"GetShaderInfoLog","","",954,null],[11,"GetShaderPrecisionFormat","","",954,null],[11,"GetShaderSource","","",954,null],[11,"GetShaderSourceARB","","",954,null],[11,"GetShaderiv","","",954,null],[11,"GetString","","",954,null],[11,"GetStringi","","",954,null],[11,"GetSubroutineIndex","","",954,null],[11,"GetSubroutineUniformLocation","","",954,null],[11,"GetSynciv","","",954,null],[11,"GetTexEnvfv","","",954,null],[11,"GetTexEnviv","","",954,null],[11,"GetTexGendv","","",954,null],[11,"GetTexGenfv","","",954,null],[11,"GetTexGeniv","","",954,null],[11,"GetTexImage","","",954,null],[11,"GetTexLevelParameterfv","","",954,null],[11,"GetTexLevelParameteriv","","",954,null],[11,"GetTexParameterIiv","","",954,null],[11,"GetTexParameterIivEXT","","",954,null],[11,"GetTexParameterIuiv","","",954,null],[11,"GetTexParameterIuivEXT","","",954,null],[11,"GetTexParameterfv","","",954,null],[11,"GetTexParameteriv","","",954,null],[11,"GetTextureHandleARB","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"GetTextureImage","","",954,null],[11,"GetTextureImageEXT","","",954,null],[11,"GetTextureLevelParameterfv","","",954,null],[11,"GetTextureLevelParameterfvEXT","","",954,null],[11,"GetTextureLevelParameteriv","","",954,null],[11,"GetTextureLevelParameterivEXT","","",954,null],[11,"GetTextureParameterIiv","","",954,null],[11,"GetTextureParameterIivEXT","","",954,null],[11,"GetTextureParameterIuiv","","",954,null],[11,"GetTextureParameterIuivEXT","","",954,null],[11,"GetTextureParameterfv","","",954,null],[11,"GetTextureParameterfvEXT","","",954,null],[11,"GetTextureParameteriv","","",954,null],[11,"GetTextureParameterivEXT","","",954,null],[11,"GetTextureSamplerHandleARB","","",954,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"GetTextureSubImage","","",954,null],[11,"GetTransformFeedbackVarying","","",954,null],[11,"GetTransformFeedbackVaryingEXT","","",954,null],[11,"GetTransformFeedbacki64_v","","",954,null],[11,"GetTransformFeedbacki_v","","",954,null],[11,"GetTransformFeedbackiv","","",954,null],[11,"GetUniformBlockIndex","","",954,null],[11,"GetUniformIndices","","",954,null],[11,"GetUniformLocation","","",954,null],[11,"GetUniformLocationARB","","",954,null],[11,"GetUniformSubroutineuiv","","",954,null],[11,"GetUniformdv","","",954,null],[11,"GetUniformfv","","",954,null],[11,"GetUniformfvARB","","",954,null],[11,"GetUniformi64vARB","","",954,null],[11,"GetUniformiv","","",954,null],[11,"GetUniformivARB","","",954,null],[11,"GetUniformui64vARB","","",954,null],[11,"GetUniformuiv","","",954,null],[11,"GetUniformuivEXT","","",954,null],[11,"GetVertexArrayIndexed64iv","","",954,null],[11,"GetVertexArrayIndexediv","","",954,null],[11,"GetVertexArrayIntegeri_vEXT","","",954,null],[11,"GetVertexArrayIntegervEXT","","",954,null],[11,"GetVertexArrayPointeri_vEXT","","",954,null],[11,"GetVertexArrayPointervEXT","","",954,null],[11,"GetVertexArrayiv","","",954,null],[11,"GetVertexAttribIiv","","",954,null],[11,"GetVertexAttribIuiv","","",954,null],[11,"GetVertexAttribLdv","","",954,null],[11,"GetVertexAttribLi64vNV","","",954,null],[11,"GetVertexAttribLui64vARB","","",954,null],[11,"GetVertexAttribLui64vNV","","",954,null],[11,"GetVertexAttribPointerv","","",954,null],[11,"GetVertexAttribPointervARB","","",954,null],[11,"GetVertexAttribdv","","",954,null],[11,"GetVertexAttribdvARB","","",954,null],[11,"GetVertexAttribfv","","",954,null],[11,"GetVertexAttribfvARB","","",954,null],[11,"GetVertexAttribiv","","",954,null],[11,"GetVertexAttribivARB","","",954,null],[11,"GetnColorTable","","",954,null],[11,"GetnColorTableARB","","",954,null],[11,"GetnCompressedTexImage","","",954,null],[11,"GetnCompressedTexImageARB","","",954,null],[11,"GetnConvolutionFilter","","",954,null],[11,"GetnConvolutionFilterARB","","",954,null],[11,"GetnHistogram","","",954,null],[11,"GetnHistogramARB","","",954,null],[11,"GetnMapdv","","",954,null],[11,"GetnMapdvARB","","",954,null],[11,"GetnMapfv","","",954,null],[11,"GetnMapfvARB","","",954,null],[11,"GetnMapiv","","",954,null],[11,"GetnMapivARB","","",954,null],[11,"GetnMinmax","","",954,null],[11,"GetnMinmaxARB","","",954,null],[11,"GetnPixelMapfv","","",954,null],[11,"GetnPixelMapfvARB","","",954,null],[11,"GetnPixelMapuiv","","",954,null],[11,"GetnPixelMapuivARB","","",954,null],[11,"GetnPixelMapusv","","",954,null],[11,"GetnPixelMapusvARB","","",954,null],[11,"GetnPolygonStipple","","",954,null],[11,"GetnPolygonStippleARB","","",954,null],[11,"GetnSeparableFilter","","",954,null],[11,"GetnSeparableFilterARB","","",954,null],[11,"GetnTexImage","","",954,null],[11,"GetnTexImageARB","","",954,null],[11,"GetnUniformdv","","",954,null],[11,"GetnUniformdvARB","","",954,null],[11,"GetnUniformfv","","",954,null],[11,"GetnUniformfvARB","","",954,null],[11,"GetnUniformfvKHR","","",954,null],[11,"GetnUniformi64vARB","","",954,null],[11,"GetnUniformiv","","",954,null],[11,"GetnUniformivARB","","",954,null],[11,"GetnUniformivKHR","","",954,null],[11,"GetnUniformui64vARB","","",954,null],[11,"GetnUniformuiv","","",954,null],[11,"GetnUniformuivARB","","",954,null],[11,"GetnUniformuivKHR","","",954,null],[11,"Hint","","",954,null],[11,"IndexMask","","",954,null],[11,"IndexPointer","","",954,null],[11,"Indexd","","",954,null],[11,"Indexdv","","",954,null],[11,"Indexf","","",954,null],[11,"Indexfv","","",954,null],[11,"Indexi","","",954,null],[11,"Indexiv","","",954,null],[11,"Indexs","","",954,null],[11,"Indexsv","","",954,null],[11,"Indexub","","",954,null],[11,"Indexubv","","",954,null],[11,"InitNames","","",954,null],[11,"InsertEventMarkerEXT","","",954,null],[11,"InterleavedArrays","","",954,null],[11,"InvalidateBufferData","","",954,null],[11,"InvalidateBufferSubData","","",954,null],[11,"InvalidateFramebuffer","","",954,null],[11,"InvalidateNamedFramebufferData","","",954,null],[11,"InvalidateNamedFramebufferSubData","","",954,null],[11,"InvalidateSubFramebuffer","","",954,null],[11,"InvalidateTexImage","","",954,null],[11,"InvalidateTexSubImage","","",954,null],[11,"IsBuffer","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsBufferARB","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsEnabled","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsEnabledIndexedEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsEnabledi","","",954,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsFramebuffer","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsFramebufferEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsImageHandleResidentARB","","",954,{"inputs":[{"name":"gl"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"IsList","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsProgram","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsProgramPipeline","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsQuery","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsQueryARB","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsRenderbuffer","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsRenderbufferEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsSampler","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsShader","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsSync","","",954,null],[11,"IsTexture","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsTextureHandleResidentARB","","",954,{"inputs":[{"name":"gl"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"IsTransformFeedback","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsVertexArray","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsVertexArrayAPPLE","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"LightModelf","","",954,null],[11,"LightModelfv","","",954,null],[11,"LightModeli","","",954,null],[11,"LightModeliv","","",954,null],[11,"Lightf","","",954,null],[11,"Lightfv","","",954,null],[11,"Lighti","","",954,null],[11,"Lightiv","","",954,null],[11,"LineStipple","","",954,null],[11,"LineWidth","","",954,null],[11,"LinkProgram","","",954,null],[11,"LinkProgramARB","","",954,null],[11,"ListBase","","",954,null],[11,"LoadIdentity","","",954,null],[11,"LoadMatrixd","","",954,null],[11,"LoadMatrixf","","",954,null],[11,"LoadName","","",954,null],[11,"LoadTransposeMatrixd","","",954,null],[11,"LoadTransposeMatrixf","","",954,null],[11,"LogicOp","","",954,null],[11,"MakeImageHandleNonResidentARB","","",954,null],[11,"MakeImageHandleResidentARB","","",954,null],[11,"MakeTextureHandleNonResidentARB","","",954,null],[11,"MakeTextureHandleResidentARB","","",954,null],[11,"Map1d","","",954,null],[11,"Map1f","","",954,null],[11,"Map2d","","",954,null],[11,"Map2f","","",954,null],[11,"MapBuffer","","",954,null],[11,"MapBufferARB","","",954,null],[11,"MapBufferRange","","",954,null],[11,"MapGrid1d","","",954,null],[11,"MapGrid1f","","",954,null],[11,"MapGrid2d","","",954,null],[11,"MapGrid2f","","",954,null],[11,"MapNamedBuffer","","",954,null],[11,"MapNamedBufferEXT","","",954,null],[11,"MapNamedBufferRange","","",954,null],[11,"MapNamedBufferRangeEXT","","",954,null],[11,"Materialf","","",954,null],[11,"Materialfv","","",954,null],[11,"Materiali","","",954,null],[11,"Materialiv","","",954,null],[11,"MatrixFrustumEXT","","",954,null],[11,"MatrixLoadIdentityEXT","","",954,null],[11,"MatrixLoadTransposedEXT","","",954,null],[11,"MatrixLoadTransposefEXT","","",954,null],[11,"MatrixLoaddEXT","","",954,null],[11,"MatrixLoadfEXT","","",954,null],[11,"MatrixMode","","",954,null],[11,"MatrixMultTransposedEXT","","",954,null],[11,"MatrixMultTransposefEXT","","",954,null],[11,"MatrixMultdEXT","","",954,null],[11,"MatrixMultfEXT","","",954,null],[11,"MatrixOrthoEXT","","",954,null],[11,"MatrixPopEXT","","",954,null],[11,"MatrixPushEXT","","",954,null],[11,"MatrixRotatedEXT","","",954,null],[11,"MatrixRotatefEXT","","",954,null],[11,"MatrixScaledEXT","","",954,null],[11,"MatrixScalefEXT","","",954,null],[11,"MatrixTranslatedEXT","","",954,null],[11,"MatrixTranslatefEXT","","",954,null],[11,"MemoryBarrier","","",954,null],[11,"MemoryBarrierByRegion","","",954,null],[11,"MinSampleShading","","",954,null],[11,"MultMatrixd","","",954,null],[11,"MultMatrixf","","",954,null],[11,"MultTransposeMatrixd","","",954,null],[11,"MultTransposeMatrixf","","",954,null],[11,"MultiDrawArrays","","",954,null],[11,"MultiDrawArraysIndirect","","",954,null],[11,"MultiDrawElements","","",954,null],[11,"MultiDrawElementsBaseVertex","","",954,null],[11,"MultiDrawElementsIndirect","","",954,null],[11,"MultiTexBufferEXT","","",954,null],[11,"MultiTexCoord1d","","",954,null],[11,"MultiTexCoord1dv","","",954,null],[11,"MultiTexCoord1f","","",954,null],[11,"MultiTexCoord1fv","","",954,null],[11,"MultiTexCoord1i","","",954,null],[11,"MultiTexCoord1iv","","",954,null],[11,"MultiTexCoord1s","","",954,null],[11,"MultiTexCoord1sv","","",954,null],[11,"MultiTexCoord2d","","",954,null],[11,"MultiTexCoord2dv","","",954,null],[11,"MultiTexCoord2f","","",954,null],[11,"MultiTexCoord2fv","","",954,null],[11,"MultiTexCoord2i","","",954,null],[11,"MultiTexCoord2iv","","",954,null],[11,"MultiTexCoord2s","","",954,null],[11,"MultiTexCoord2sv","","",954,null],[11,"MultiTexCoord3d","","",954,null],[11,"MultiTexCoord3dv","","",954,null],[11,"MultiTexCoord3f","","",954,null],[11,"MultiTexCoord3fv","","",954,null],[11,"MultiTexCoord3i","","",954,null],[11,"MultiTexCoord3iv","","",954,null],[11,"MultiTexCoord3s","","",954,null],[11,"MultiTexCoord3sv","","",954,null],[11,"MultiTexCoord4d","","",954,null],[11,"MultiTexCoord4dv","","",954,null],[11,"MultiTexCoord4f","","",954,null],[11,"MultiTexCoord4fv","","",954,null],[11,"MultiTexCoord4i","","",954,null],[11,"MultiTexCoord4iv","","",954,null],[11,"MultiTexCoord4s","","",954,null],[11,"MultiTexCoord4sv","","",954,null],[11,"MultiTexCoordP1ui","","",954,null],[11,"MultiTexCoordP1uiv","","",954,null],[11,"MultiTexCoordP2ui","","",954,null],[11,"MultiTexCoordP2uiv","","",954,null],[11,"MultiTexCoordP3ui","","",954,null],[11,"MultiTexCoordP3uiv","","",954,null],[11,"MultiTexCoordP4ui","","",954,null],[11,"MultiTexCoordP4uiv","","",954,null],[11,"MultiTexCoordPointerEXT","","",954,null],[11,"MultiTexEnvfEXT","","",954,null],[11,"MultiTexEnvfvEXT","","",954,null],[11,"MultiTexEnviEXT","","",954,null],[11,"MultiTexEnvivEXT","","",954,null],[11,"MultiTexGendEXT","","",954,null],[11,"MultiTexGendvEXT","","",954,null],[11,"MultiTexGenfEXT","","",954,null],[11,"MultiTexGenfvEXT","","",954,null],[11,"MultiTexGeniEXT","","",954,null],[11,"MultiTexGenivEXT","","",954,null],[11,"MultiTexImage1DEXT","","",954,null],[11,"MultiTexImage2DEXT","","",954,null],[11,"MultiTexImage3DEXT","","",954,null],[11,"MultiTexParameterIivEXT","","",954,null],[11,"MultiTexParameterIuivEXT","","",954,null],[11,"MultiTexParameterfEXT","","",954,null],[11,"MultiTexParameterfvEXT","","",954,null],[11,"MultiTexParameteriEXT","","",954,null],[11,"MultiTexParameterivEXT","","",954,null],[11,"MultiTexRenderbufferEXT","","",954,null],[11,"MultiTexSubImage1DEXT","","",954,null],[11,"MultiTexSubImage2DEXT","","",954,null],[11,"MultiTexSubImage3DEXT","","",954,null],[11,"NamedBufferData","","",954,null],[11,"NamedBufferDataEXT","","",954,null],[11,"NamedBufferStorage","","",954,null],[11,"NamedBufferStorageEXT","","",954,null],[11,"NamedBufferSubData","","",954,null],[11,"NamedBufferSubDataEXT","","",954,null],[11,"NamedCopyBufferSubDataEXT","","",954,null],[11,"NamedFramebufferDrawBuffer","","",954,null],[11,"NamedFramebufferDrawBuffers","","",954,null],[11,"NamedFramebufferParameteri","","",954,null],[11,"NamedFramebufferParameteriEXT","","",954,null],[11,"NamedFramebufferReadBuffer","","",954,null],[11,"NamedFramebufferRenderbuffer","","",954,null],[11,"NamedFramebufferRenderbufferEXT","","",954,null],[11,"NamedFramebufferTexture","","",954,null],[11,"NamedFramebufferTexture1DEXT","","",954,null],[11,"NamedFramebufferTexture2DEXT","","",954,null],[11,"NamedFramebufferTexture3DEXT","","",954,null],[11,"NamedFramebufferTextureEXT","","",954,null],[11,"NamedFramebufferTextureFaceEXT","","",954,null],[11,"NamedFramebufferTextureLayer","","",954,null],[11,"NamedFramebufferTextureLayerEXT","","",954,null],[11,"NamedProgramLocalParameter4dEXT","","",954,null],[11,"NamedProgramLocalParameter4dvEXT","","",954,null],[11,"NamedProgramLocalParameter4fEXT","","",954,null],[11,"NamedProgramLocalParameter4fvEXT","","",954,null],[11,"NamedProgramLocalParameterI4iEXT","","",954,null],[11,"NamedProgramLocalParameterI4ivEXT","","",954,null],[11,"NamedProgramLocalParameterI4uiEXT","","",954,null],[11,"NamedProgramLocalParameterI4uivEXT","","",954,null],[11,"NamedProgramLocalParameters4fvEXT","","",954,null],[11,"NamedProgramLocalParametersI4ivEXT","","",954,null],[11,"NamedProgramLocalParametersI4uivEXT","","",954,null],[11,"NamedProgramStringEXT","","",954,null],[11,"NamedRenderbufferStorage","","",954,null],[11,"NamedRenderbufferStorageEXT","","",954,null],[11,"NamedRenderbufferStorageMultisample","","",954,null],[11,"NamedRenderbufferStorageMultisampleCoverageEXT","","",954,null],[11,"NamedRenderbufferStorageMultisampleEXT","","",954,null],[11,"NewList","","",954,null],[11,"Normal3b","","",954,null],[11,"Normal3bv","","",954,null],[11,"Normal3d","","",954,null],[11,"Normal3dv","","",954,null],[11,"Normal3f","","",954,null],[11,"Normal3fv","","",954,null],[11,"Normal3i","","",954,null],[11,"Normal3iv","","",954,null],[11,"Normal3s","","",954,null],[11,"Normal3sv","","",954,null],[11,"NormalP3ui","","",954,null],[11,"NormalP3uiv","","",954,null],[11,"NormalPointer","","",954,null],[11,"ObjectLabel","","",954,null],[11,"ObjectPtrLabel","","",954,null],[11,"Ortho","","",954,null],[11,"PassThrough","","",954,null],[11,"PatchParameterfv","","",954,null],[11,"PatchParameteri","","",954,null],[11,"PauseTransformFeedback","","",954,null],[11,"PixelMapfv","","",954,null],[11,"PixelMapuiv","","",954,null],[11,"PixelMapusv","","",954,null],[11,"PixelStoref","","",954,null],[11,"PixelStorei","","",954,null],[11,"PixelTransferf","","",954,null],[11,"PixelTransferi","","",954,null],[11,"PixelZoom","","",954,null],[11,"PointParameterf","","",954,null],[11,"PointParameterfv","","",954,null],[11,"PointParameteri","","",954,null],[11,"PointParameteriv","","",954,null],[11,"PointSize","","",954,null],[11,"PolygonMode","","",954,null],[11,"PolygonOffset","","",954,null],[11,"PolygonStipple","","",954,null],[11,"PopAttrib","","",954,null],[11,"PopClientAttrib","","",954,null],[11,"PopDebugGroup","","",954,null],[11,"PopGroupMarkerEXT","","",954,null],[11,"PopMatrix","","",954,null],[11,"PopName","","",954,null],[11,"PrimitiveBoundingBoxARB","","",954,null],[11,"PrimitiveRestartIndex","","",954,null],[11,"PrioritizeTextures","","",954,null],[11,"ProgramBinary","","",954,null],[11,"ProgramParameteri","","",954,null],[11,"ProgramParameteriARB","","",954,null],[11,"ProgramUniform1d","","",954,null],[11,"ProgramUniform1dEXT","","",954,null],[11,"ProgramUniform1dv","","",954,null],[11,"ProgramUniform1dvEXT","","",954,null],[11,"ProgramUniform1f","","",954,null],[11,"ProgramUniform1fEXT","","",954,null],[11,"ProgramUniform1fv","","",954,null],[11,"ProgramUniform1fvEXT","","",954,null],[11,"ProgramUniform1i","","",954,null],[11,"ProgramUniform1i64ARB","","",954,null],[11,"ProgramUniform1i64vARB","","",954,null],[11,"ProgramUniform1iEXT","","",954,null],[11,"ProgramUniform1iv","","",954,null],[11,"ProgramUniform1ivEXT","","",954,null],[11,"ProgramUniform1ui","","",954,null],[11,"ProgramUniform1ui64ARB","","",954,null],[11,"ProgramUniform1ui64vARB","","",954,null],[11,"ProgramUniform1uiEXT","","",954,null],[11,"ProgramUniform1uiv","","",954,null],[11,"ProgramUniform1uivEXT","","",954,null],[11,"ProgramUniform2d","","",954,null],[11,"ProgramUniform2dEXT","","",954,null],[11,"ProgramUniform2dv","","",954,null],[11,"ProgramUniform2dvEXT","","",954,null],[11,"ProgramUniform2f","","",954,null],[11,"ProgramUniform2fEXT","","",954,null],[11,"ProgramUniform2fv","","",954,null],[11,"ProgramUniform2fvEXT","","",954,null],[11,"ProgramUniform2i","","",954,null],[11,"ProgramUniform2i64ARB","","",954,null],[11,"ProgramUniform2i64vARB","","",954,null],[11,"ProgramUniform2iEXT","","",954,null],[11,"ProgramUniform2iv","","",954,null],[11,"ProgramUniform2ivEXT","","",954,null],[11,"ProgramUniform2ui","","",954,null],[11,"ProgramUniform2ui64ARB","","",954,null],[11,"ProgramUniform2ui64vARB","","",954,null],[11,"ProgramUniform2uiEXT","","",954,null],[11,"ProgramUniform2uiv","","",954,null],[11,"ProgramUniform2uivEXT","","",954,null],[11,"ProgramUniform3d","","",954,null],[11,"ProgramUniform3dEXT","","",954,null],[11,"ProgramUniform3dv","","",954,null],[11,"ProgramUniform3dvEXT","","",954,null],[11,"ProgramUniform3f","","",954,null],[11,"ProgramUniform3fEXT","","",954,null],[11,"ProgramUniform3fv","","",954,null],[11,"ProgramUniform3fvEXT","","",954,null],[11,"ProgramUniform3i","","",954,null],[11,"ProgramUniform3i64ARB","","",954,null],[11,"ProgramUniform3i64vARB","","",954,null],[11,"ProgramUniform3iEXT","","",954,null],[11,"ProgramUniform3iv","","",954,null],[11,"ProgramUniform3ivEXT","","",954,null],[11,"ProgramUniform3ui","","",954,null],[11,"ProgramUniform3ui64ARB","","",954,null],[11,"ProgramUniform3ui64vARB","","",954,null],[11,"ProgramUniform3uiEXT","","",954,null],[11,"ProgramUniform3uiv","","",954,null],[11,"ProgramUniform3uivEXT","","",954,null],[11,"ProgramUniform4d","","",954,null],[11,"ProgramUniform4dEXT","","",954,null],[11,"ProgramUniform4dv","","",954,null],[11,"ProgramUniform4dvEXT","","",954,null],[11,"ProgramUniform4f","","",954,null],[11,"ProgramUniform4fEXT","","",954,null],[11,"ProgramUniform4fv","","",954,null],[11,"ProgramUniform4fvEXT","","",954,null],[11,"ProgramUniform4i","","",954,null],[11,"ProgramUniform4i64ARB","","",954,null],[11,"ProgramUniform4i64vARB","","",954,null],[11,"ProgramUniform4iEXT","","",954,null],[11,"ProgramUniform4iv","","",954,null],[11,"ProgramUniform4ivEXT","","",954,null],[11,"ProgramUniform4ui","","",954,null],[11,"ProgramUniform4ui64ARB","","",954,null],[11,"ProgramUniform4ui64vARB","","",954,null],[11,"ProgramUniform4uiEXT","","",954,null],[11,"ProgramUniform4uiv","","",954,null],[11,"ProgramUniform4uivEXT","","",954,null],[11,"ProgramUniformHandleui64ARB","","",954,null],[11,"ProgramUniformHandleui64vARB","","",954,null],[11,"ProgramUniformMatrix2dv","","",954,null],[11,"ProgramUniformMatrix2dvEXT","","",954,null],[11,"ProgramUniformMatrix2fv","","",954,null],[11,"ProgramUniformMatrix2fvEXT","","",954,null],[11,"ProgramUniformMatrix2x3dv","","",954,null],[11,"ProgramUniformMatrix2x3dvEXT","","",954,null],[11,"ProgramUniformMatrix2x3fv","","",954,null],[11,"ProgramUniformMatrix2x3fvEXT","","",954,null],[11,"ProgramUniformMatrix2x4dv","","",954,null],[11,"ProgramUniformMatrix2x4dvEXT","","",954,null],[11,"ProgramUniformMatrix2x4fv","","",954,null],[11,"ProgramUniformMatrix2x4fvEXT","","",954,null],[11,"ProgramUniformMatrix3dv","","",954,null],[11,"ProgramUniformMatrix3dvEXT","","",954,null],[11,"ProgramUniformMatrix3fv","","",954,null],[11,"ProgramUniformMatrix3fvEXT","","",954,null],[11,"ProgramUniformMatrix3x2dv","","",954,null],[11,"ProgramUniformMatrix3x2dvEXT","","",954,null],[11,"ProgramUniformMatrix3x2fv","","",954,null],[11,"ProgramUniformMatrix3x2fvEXT","","",954,null],[11,"ProgramUniformMatrix3x4dv","","",954,null],[11,"ProgramUniformMatrix3x4dvEXT","","",954,null],[11,"ProgramUniformMatrix3x4fv","","",954,null],[11,"ProgramUniformMatrix3x4fvEXT","","",954,null],[11,"ProgramUniformMatrix4dv","","",954,null],[11,"ProgramUniformMatrix4dvEXT","","",954,null],[11,"ProgramUniformMatrix4fv","","",954,null],[11,"ProgramUniformMatrix4fvEXT","","",954,null],[11,"ProgramUniformMatrix4x2dv","","",954,null],[11,"ProgramUniformMatrix4x2dvEXT","","",954,null],[11,"ProgramUniformMatrix4x2fv","","",954,null],[11,"ProgramUniformMatrix4x2fvEXT","","",954,null],[11,"ProgramUniformMatrix4x3dv","","",954,null],[11,"ProgramUniformMatrix4x3dvEXT","","",954,null],[11,"ProgramUniformMatrix4x3fv","","",954,null],[11,"ProgramUniformMatrix4x3fvEXT","","",954,null],[11,"ProvokingVertex","","",954,null],[11,"ProvokingVertexEXT","","",954,null],[11,"PushAttrib","","",954,null],[11,"PushClientAttrib","","",954,null],[11,"PushClientAttribDefaultEXT","","",954,null],[11,"PushDebugGroup","","",954,null],[11,"PushGroupMarkerEXT","","",954,null],[11,"PushMatrix","","",954,null],[11,"PushName","","",954,null],[11,"QueryCounter","","",954,null],[11,"RasterPos2d","","",954,null],[11,"RasterPos2dv","","",954,null],[11,"RasterPos2f","","",954,null],[11,"RasterPos2fv","","",954,null],[11,"RasterPos2i","","",954,null],[11,"RasterPos2iv","","",954,null],[11,"RasterPos2s","","",954,null],[11,"RasterPos2sv","","",954,null],[11,"RasterPos3d","","",954,null],[11,"RasterPos3dv","","",954,null],[11,"RasterPos3f","","",954,null],[11,"RasterPos3fv","","",954,null],[11,"RasterPos3i","","",954,null],[11,"RasterPos3iv","","",954,null],[11,"RasterPos3s","","",954,null],[11,"RasterPos3sv","","",954,null],[11,"RasterPos4d","","",954,null],[11,"RasterPos4dv","","",954,null],[11,"RasterPos4f","","",954,null],[11,"RasterPos4fv","","",954,null],[11,"RasterPos4i","","",954,null],[11,"RasterPos4iv","","",954,null],[11,"RasterPos4s","","",954,null],[11,"RasterPos4sv","","",954,null],[11,"ReadBuffer","","",954,null],[11,"ReadPixels","","",954,null],[11,"ReadnPixels","","",954,null],[11,"ReadnPixelsARB","","",954,null],[11,"ReadnPixelsKHR","","",954,null],[11,"Rectd","","",954,null],[11,"Rectdv","","",954,null],[11,"Rectf","","",954,null],[11,"Rectfv","","",954,null],[11,"Recti","","",954,null],[11,"Rectiv","","",954,null],[11,"Rects","","",954,null],[11,"Rectsv","","",954,null],[11,"ReleaseShaderCompiler","","",954,null],[11,"RenderMode","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"RenderbufferStorage","","",954,null],[11,"RenderbufferStorageEXT","","",954,null],[11,"RenderbufferStorageMultisample","","",954,null],[11,"RenderbufferStorageMultisampleEXT","","",954,null],[11,"ResumeTransformFeedback","","",954,null],[11,"Rotated","","",954,null],[11,"Rotatef","","",954,null],[11,"SampleCoverage","","",954,null],[11,"SampleMaski","","",954,null],[11,"SamplerParameterIiv","","",954,null],[11,"SamplerParameterIuiv","","",954,null],[11,"SamplerParameterf","","",954,null],[11,"SamplerParameterfv","","",954,null],[11,"SamplerParameteri","","",954,null],[11,"SamplerParameteriv","","",954,null],[11,"Scaled","","",954,null],[11,"Scalef","","",954,null],[11,"Scissor","","",954,null],[11,"ScissorArrayv","","",954,null],[11,"ScissorIndexed","","",954,null],[11,"ScissorIndexedv","","",954,null],[11,"SecondaryColor3b","","",954,null],[11,"SecondaryColor3bv","","",954,null],[11,"SecondaryColor3d","","",954,null],[11,"SecondaryColor3dv","","",954,null],[11,"SecondaryColor3f","","",954,null],[11,"SecondaryColor3fv","","",954,null],[11,"SecondaryColor3i","","",954,null],[11,"SecondaryColor3iv","","",954,null],[11,"SecondaryColor3s","","",954,null],[11,"SecondaryColor3sv","","",954,null],[11,"SecondaryColor3ub","","",954,null],[11,"SecondaryColor3ubv","","",954,null],[11,"SecondaryColor3ui","","",954,null],[11,"SecondaryColor3uiv","","",954,null],[11,"SecondaryColor3us","","",954,null],[11,"SecondaryColor3usv","","",954,null],[11,"SecondaryColorP3ui","","",954,null],[11,"SecondaryColorP3uiv","","",954,null],[11,"SecondaryColorPointer","","",954,null],[11,"SelectBuffer","","",954,null],[11,"ShadeModel","","",954,null],[11,"ShaderBinary","","",954,null],[11,"ShaderSource","","",954,null],[11,"ShaderSourceARB","","",954,null],[11,"ShaderStorageBlockBinding","","",954,null],[11,"StencilFunc","","",954,null],[11,"StencilFuncSeparate","","",954,null],[11,"StencilMask","","",954,null],[11,"StencilMaskSeparate","","",954,null],[11,"StencilOp","","",954,null],[11,"StencilOpSeparate","","",954,null],[11,"StringMarkerGREMEDY","","",954,null],[11,"TexBuffer","","",954,null],[11,"TexBufferARB","","",954,null],[11,"TexBufferEXT","","",954,null],[11,"TexBufferRange","","",954,null],[11,"TexCoord1d","","",954,null],[11,"TexCoord1dv","","",954,null],[11,"TexCoord1f","","",954,null],[11,"TexCoord1fv","","",954,null],[11,"TexCoord1i","","",954,null],[11,"TexCoord1iv","","",954,null],[11,"TexCoord1s","","",954,null],[11,"TexCoord1sv","","",954,null],[11,"TexCoord2d","","",954,null],[11,"TexCoord2dv","","",954,null],[11,"TexCoord2f","","",954,null],[11,"TexCoord2fv","","",954,null],[11,"TexCoord2i","","",954,null],[11,"TexCoord2iv","","",954,null],[11,"TexCoord2s","","",954,null],[11,"TexCoord2sv","","",954,null],[11,"TexCoord3d","","",954,null],[11,"TexCoord3dv","","",954,null],[11,"TexCoord3f","","",954,null],[11,"TexCoord3fv","","",954,null],[11,"TexCoord3i","","",954,null],[11,"TexCoord3iv","","",954,null],[11,"TexCoord3s","","",954,null],[11,"TexCoord3sv","","",954,null],[11,"TexCoord4d","","",954,null],[11,"TexCoord4dv","","",954,null],[11,"TexCoord4f","","",954,null],[11,"TexCoord4fv","","",954,null],[11,"TexCoord4i","","",954,null],[11,"TexCoord4iv","","",954,null],[11,"TexCoord4s","","",954,null],[11,"TexCoord4sv","","",954,null],[11,"TexCoordP1ui","","",954,null],[11,"TexCoordP1uiv","","",954,null],[11,"TexCoordP2ui","","",954,null],[11,"TexCoordP2uiv","","",954,null],[11,"TexCoordP3ui","","",954,null],[11,"TexCoordP3uiv","","",954,null],[11,"TexCoordP4ui","","",954,null],[11,"TexCoordP4uiv","","",954,null],[11,"TexCoordPointer","","",954,null],[11,"TexEnvf","","",954,null],[11,"TexEnvfv","","",954,null],[11,"TexEnvi","","",954,null],[11,"TexEnviv","","",954,null],[11,"TexGend","","",954,null],[11,"TexGendv","","",954,null],[11,"TexGenf","","",954,null],[11,"TexGenfv","","",954,null],[11,"TexGeni","","",954,null],[11,"TexGeniv","","",954,null],[11,"TexImage1D","","",954,null],[11,"TexImage2D","","",954,null],[11,"TexImage2DMultisample","","",954,null],[11,"TexImage3D","","",954,null],[11,"TexImage3DMultisample","","",954,null],[11,"TexParameterIiv","","",954,null],[11,"TexParameterIivEXT","","",954,null],[11,"TexParameterIuiv","","",954,null],[11,"TexParameterIuivEXT","","",954,null],[11,"TexParameterf","","",954,null],[11,"TexParameterfv","","",954,null],[11,"TexParameteri","","",954,null],[11,"TexParameteriv","","",954,null],[11,"TexStorage1D","","",954,null],[11,"TexStorage2D","","",954,null],[11,"TexStorage2DMultisample","","",954,null],[11,"TexStorage3D","","",954,null],[11,"TexStorage3DMultisample","","",954,null],[11,"TexSubImage1D","","",954,null],[11,"TexSubImage2D","","",954,null],[11,"TexSubImage3D","","",954,null],[11,"TextureBarrier","","",954,null],[11,"TextureBuffer","","",954,null],[11,"TextureBufferEXT","","",954,null],[11,"TextureBufferRange","","",954,null],[11,"TextureBufferRangeEXT","","",954,null],[11,"TextureImage1DEXT","","",954,null],[11,"TextureImage2DEXT","","",954,null],[11,"TextureImage3DEXT","","",954,null],[11,"TexturePageCommitmentEXT","","",954,null],[11,"TextureParameterIiv","","",954,null],[11,"TextureParameterIivEXT","","",954,null],[11,"TextureParameterIuiv","","",954,null],[11,"TextureParameterIuivEXT","","",954,null],[11,"TextureParameterf","","",954,null],[11,"TextureParameterfEXT","","",954,null],[11,"TextureParameterfv","","",954,null],[11,"TextureParameterfvEXT","","",954,null],[11,"TextureParameteri","","",954,null],[11,"TextureParameteriEXT","","",954,null],[11,"TextureParameteriv","","",954,null],[11,"TextureParameterivEXT","","",954,null],[11,"TextureRenderbufferEXT","","",954,null],[11,"TextureStorage1D","","",954,null],[11,"TextureStorage1DEXT","","",954,null],[11,"TextureStorage2D","","",954,null],[11,"TextureStorage2DEXT","","",954,null],[11,"TextureStorage2DMultisample","","",954,null],[11,"TextureStorage2DMultisampleEXT","","",954,null],[11,"TextureStorage3D","","",954,null],[11,"TextureStorage3DEXT","","",954,null],[11,"TextureStorage3DMultisample","","",954,null],[11,"TextureStorage3DMultisampleEXT","","",954,null],[11,"TextureSubImage1D","","",954,null],[11,"TextureSubImage1DEXT","","",954,null],[11,"TextureSubImage2D","","",954,null],[11,"TextureSubImage2DEXT","","",954,null],[11,"TextureSubImage3D","","",954,null],[11,"TextureSubImage3DEXT","","",954,null],[11,"TextureView","","",954,null],[11,"TransformFeedbackBufferBase","","",954,null],[11,"TransformFeedbackBufferRange","","",954,null],[11,"TransformFeedbackVaryings","","",954,null],[11,"TransformFeedbackVaryingsEXT","","",954,null],[11,"Translated","","",954,null],[11,"Translatef","","",954,null],[11,"Uniform1d","","",954,null],[11,"Uniform1dv","","",954,null],[11,"Uniform1f","","",954,null],[11,"Uniform1fARB","","",954,null],[11,"Uniform1fv","","",954,null],[11,"Uniform1fvARB","","",954,null],[11,"Uniform1i","","",954,null],[11,"Uniform1i64ARB","","",954,null],[11,"Uniform1i64vARB","","",954,null],[11,"Uniform1iARB","","",954,null],[11,"Uniform1iv","","",954,null],[11,"Uniform1ivARB","","",954,null],[11,"Uniform1ui","","",954,null],[11,"Uniform1ui64ARB","","",954,null],[11,"Uniform1ui64vARB","","",954,null],[11,"Uniform1uiEXT","","",954,null],[11,"Uniform1uiv","","",954,null],[11,"Uniform1uivEXT","","",954,null],[11,"Uniform2d","","",954,null],[11,"Uniform2dv","","",954,null],[11,"Uniform2f","","",954,null],[11,"Uniform2fARB","","",954,null],[11,"Uniform2fv","","",954,null],[11,"Uniform2fvARB","","",954,null],[11,"Uniform2i","","",954,null],[11,"Uniform2i64ARB","","",954,null],[11,"Uniform2i64vARB","","",954,null],[11,"Uniform2iARB","","",954,null],[11,"Uniform2iv","","",954,null],[11,"Uniform2ivARB","","",954,null],[11,"Uniform2ui","","",954,null],[11,"Uniform2ui64ARB","","",954,null],[11,"Uniform2ui64vARB","","",954,null],[11,"Uniform2uiEXT","","",954,null],[11,"Uniform2uiv","","",954,null],[11,"Uniform2uivEXT","","",954,null],[11,"Uniform3d","","",954,null],[11,"Uniform3dv","","",954,null],[11,"Uniform3f","","",954,null],[11,"Uniform3fARB","","",954,null],[11,"Uniform3fv","","",954,null],[11,"Uniform3fvARB","","",954,null],[11,"Uniform3i","","",954,null],[11,"Uniform3i64ARB","","",954,null],[11,"Uniform3i64vARB","","",954,null],[11,"Uniform3iARB","","",954,null],[11,"Uniform3iv","","",954,null],[11,"Uniform3ivARB","","",954,null],[11,"Uniform3ui","","",954,null],[11,"Uniform3ui64ARB","","",954,null],[11,"Uniform3ui64vARB","","",954,null],[11,"Uniform3uiEXT","","",954,null],[11,"Uniform3uiv","","",954,null],[11,"Uniform3uivEXT","","",954,null],[11,"Uniform4d","","",954,null],[11,"Uniform4dv","","",954,null],[11,"Uniform4f","","",954,null],[11,"Uniform4fARB","","",954,null],[11,"Uniform4fv","","",954,null],[11,"Uniform4fvARB","","",954,null],[11,"Uniform4i","","",954,null],[11,"Uniform4i64ARB","","",954,null],[11,"Uniform4i64vARB","","",954,null],[11,"Uniform4iARB","","",954,null],[11,"Uniform4iv","","",954,null],[11,"Uniform4ivARB","","",954,null],[11,"Uniform4ui","","",954,null],[11,"Uniform4ui64ARB","","",954,null],[11,"Uniform4ui64vARB","","",954,null],[11,"Uniform4uiEXT","","",954,null],[11,"Uniform4uiv","","",954,null],[11,"Uniform4uivEXT","","",954,null],[11,"UniformBlockBinding","","",954,null],[11,"UniformHandleui64ARB","","",954,null],[11,"UniformHandleui64vARB","","",954,null],[11,"UniformMatrix2dv","","",954,null],[11,"UniformMatrix2fv","","",954,null],[11,"UniformMatrix2fvARB","","",954,null],[11,"UniformMatrix2x3dv","","",954,null],[11,"UniformMatrix2x3fv","","",954,null],[11,"UniformMatrix2x4dv","","",954,null],[11,"UniformMatrix2x4fv","","",954,null],[11,"UniformMatrix3dv","","",954,null],[11,"UniformMatrix3fv","","",954,null],[11,"UniformMatrix3fvARB","","",954,null],[11,"UniformMatrix3x2dv","","",954,null],[11,"UniformMatrix3x2fv","","",954,null],[11,"UniformMatrix3x4dv","","",954,null],[11,"UniformMatrix3x4fv","","",954,null],[11,"UniformMatrix4dv","","",954,null],[11,"UniformMatrix4fv","","",954,null],[11,"UniformMatrix4fvARB","","",954,null],[11,"UniformMatrix4x2dv","","",954,null],[11,"UniformMatrix4x2fv","","",954,null],[11,"UniformMatrix4x3dv","","",954,null],[11,"UniformMatrix4x3fv","","",954,null],[11,"UniformSubroutinesuiv","","",954,null],[11,"UnmapBuffer","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UnmapBufferARB","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UnmapNamedBuffer","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UnmapNamedBufferEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UseProgram","","",954,null],[11,"UseProgramObjectARB","","",954,null],[11,"UseProgramStages","","",954,null],[11,"ValidateProgram","","",954,null],[11,"ValidateProgramARB","","",954,null],[11,"ValidateProgramPipeline","","",954,null],[11,"Vertex2d","","",954,null],[11,"Vertex2dv","","",954,null],[11,"Vertex2f","","",954,null],[11,"Vertex2fv","","",954,null],[11,"Vertex2i","","",954,null],[11,"Vertex2iv","","",954,null],[11,"Vertex2s","","",954,null],[11,"Vertex2sv","","",954,null],[11,"Vertex3d","","",954,null],[11,"Vertex3dv","","",954,null],[11,"Vertex3f","","",954,null],[11,"Vertex3fv","","",954,null],[11,"Vertex3i","","",954,null],[11,"Vertex3iv","","",954,null],[11,"Vertex3s","","",954,null],[11,"Vertex3sv","","",954,null],[11,"Vertex4d","","",954,null],[11,"Vertex4dv","","",954,null],[11,"Vertex4f","","",954,null],[11,"Vertex4fv","","",954,null],[11,"Vertex4i","","",954,null],[11,"Vertex4iv","","",954,null],[11,"Vertex4s","","",954,null],[11,"Vertex4sv","","",954,null],[11,"VertexArrayAttribBinding","","",954,null],[11,"VertexArrayAttribFormat","","",954,null],[11,"VertexArrayAttribIFormat","","",954,null],[11,"VertexArrayAttribLFormat","","",954,null],[11,"VertexArrayBindVertexBufferEXT","","",954,null],[11,"VertexArrayBindingDivisor","","",954,null],[11,"VertexArrayColorOffsetEXT","","",954,null],[11,"VertexArrayEdgeFlagOffsetEXT","","",954,null],[11,"VertexArrayElementBuffer","","",954,null],[11,"VertexArrayFogCoordOffsetEXT","","",954,null],[11,"VertexArrayIndexOffsetEXT","","",954,null],[11,"VertexArrayMultiTexCoordOffsetEXT","","",954,null],[11,"VertexArrayNormalOffsetEXT","","",954,null],[11,"VertexArraySecondaryColorOffsetEXT","","",954,null],[11,"VertexArrayTexCoordOffsetEXT","","",954,null],[11,"VertexArrayVertexAttribBindingEXT","","",954,null],[11,"VertexArrayVertexAttribDivisorEXT","","",954,null],[11,"VertexArrayVertexAttribFormatEXT","","",954,null],[11,"VertexArrayVertexAttribIFormatEXT","","",954,null],[11,"VertexArrayVertexAttribIOffsetEXT","","",954,null],[11,"VertexArrayVertexAttribLFormatEXT","","",954,null],[11,"VertexArrayVertexAttribLOffsetEXT","","",954,null],[11,"VertexArrayVertexAttribOffsetEXT","","",954,null],[11,"VertexArrayVertexBindingDivisorEXT","","",954,null],[11,"VertexArrayVertexBuffer","","",954,null],[11,"VertexArrayVertexBuffers","","",954,null],[11,"VertexArrayVertexOffsetEXT","","",954,null],[11,"VertexAttrib1d","","",954,null],[11,"VertexAttrib1dARB","","",954,null],[11,"VertexAttrib1dv","","",954,null],[11,"VertexAttrib1dvARB","","",954,null],[11,"VertexAttrib1f","","",954,null],[11,"VertexAttrib1fARB","","",954,null],[11,"VertexAttrib1fv","","",954,null],[11,"VertexAttrib1fvARB","","",954,null],[11,"VertexAttrib1s","","",954,null],[11,"VertexAttrib1sARB","","",954,null],[11,"VertexAttrib1sv","","",954,null],[11,"VertexAttrib1svARB","","",954,null],[11,"VertexAttrib2d","","",954,null],[11,"VertexAttrib2dARB","","",954,null],[11,"VertexAttrib2dv","","",954,null],[11,"VertexAttrib2dvARB","","",954,null],[11,"VertexAttrib2f","","",954,null],[11,"VertexAttrib2fARB","","",954,null],[11,"VertexAttrib2fv","","",954,null],[11,"VertexAttrib2fvARB","","",954,null],[11,"VertexAttrib2s","","",954,null],[11,"VertexAttrib2sARB","","",954,null],[11,"VertexAttrib2sv","","",954,null],[11,"VertexAttrib2svARB","","",954,null],[11,"VertexAttrib3d","","",954,null],[11,"VertexAttrib3dARB","","",954,null],[11,"VertexAttrib3dv","","",954,null],[11,"VertexAttrib3dvARB","","",954,null],[11,"VertexAttrib3f","","",954,null],[11,"VertexAttrib3fARB","","",954,null],[11,"VertexAttrib3fv","","",954,null],[11,"VertexAttrib3fvARB","","",954,null],[11,"VertexAttrib3s","","",954,null],[11,"VertexAttrib3sARB","","",954,null],[11,"VertexAttrib3sv","","",954,null],[11,"VertexAttrib3svARB","","",954,null],[11,"VertexAttrib4Nbv","","",954,null],[11,"VertexAttrib4NbvARB","","",954,null],[11,"VertexAttrib4Niv","","",954,null],[11,"VertexAttrib4NivARB","","",954,null],[11,"VertexAttrib4Nsv","","",954,null],[11,"VertexAttrib4NsvARB","","",954,null],[11,"VertexAttrib4Nub","","",954,null],[11,"VertexAttrib4NubARB","","",954,null],[11,"VertexAttrib4Nubv","","",954,null],[11,"VertexAttrib4NubvARB","","",954,null],[11,"VertexAttrib4Nuiv","","",954,null],[11,"VertexAttrib4NuivARB","","",954,null],[11,"VertexAttrib4Nusv","","",954,null],[11,"VertexAttrib4NusvARB","","",954,null],[11,"VertexAttrib4bv","","",954,null],[11,"VertexAttrib4bvARB","","",954,null],[11,"VertexAttrib4d","","",954,null],[11,"VertexAttrib4dARB","","",954,null],[11,"VertexAttrib4dv","","",954,null],[11,"VertexAttrib4dvARB","","",954,null],[11,"VertexAttrib4f","","",954,null],[11,"VertexAttrib4fARB","","",954,null],[11,"VertexAttrib4fv","","",954,null],[11,"VertexAttrib4fvARB","","",954,null],[11,"VertexAttrib4iv","","",954,null],[11,"VertexAttrib4ivARB","","",954,null],[11,"VertexAttrib4s","","",954,null],[11,"VertexAttrib4sARB","","",954,null],[11,"VertexAttrib4sv","","",954,null],[11,"VertexAttrib4svARB","","",954,null],[11,"VertexAttrib4ubv","","",954,null],[11,"VertexAttrib4ubvARB","","",954,null],[11,"VertexAttrib4uiv","","",954,null],[11,"VertexAttrib4uivARB","","",954,null],[11,"VertexAttrib4usv","","",954,null],[11,"VertexAttrib4usvARB","","",954,null],[11,"VertexAttribBinding","","",954,null],[11,"VertexAttribDivisor","","",954,null],[11,"VertexAttribFormat","","",954,null],[11,"VertexAttribI1i","","",954,null],[11,"VertexAttribI1iv","","",954,null],[11,"VertexAttribI1ui","","",954,null],[11,"VertexAttribI1uiv","","",954,null],[11,"VertexAttribI2i","","",954,null],[11,"VertexAttribI2iv","","",954,null],[11,"VertexAttribI2ui","","",954,null],[11,"VertexAttribI2uiv","","",954,null],[11,"VertexAttribI3i","","",954,null],[11,"VertexAttribI3iv","","",954,null],[11,"VertexAttribI3ui","","",954,null],[11,"VertexAttribI3uiv","","",954,null],[11,"VertexAttribI4bv","","",954,null],[11,"VertexAttribI4i","","",954,null],[11,"VertexAttribI4iv","","",954,null],[11,"VertexAttribI4sv","","",954,null],[11,"VertexAttribI4ubv","","",954,null],[11,"VertexAttribI4ui","","",954,null],[11,"VertexAttribI4uiv","","",954,null],[11,"VertexAttribI4usv","","",954,null],[11,"VertexAttribIFormat","","",954,null],[11,"VertexAttribIPointer","","",954,null],[11,"VertexAttribL1d","","",954,null],[11,"VertexAttribL1dv","","",954,null],[11,"VertexAttribL1i64NV","","",954,null],[11,"VertexAttribL1i64vNV","","",954,null],[11,"VertexAttribL1ui64ARB","","",954,null],[11,"VertexAttribL1ui64NV","","",954,null],[11,"VertexAttribL1ui64vARB","","",954,null],[11,"VertexAttribL1ui64vNV","","",954,null],[11,"VertexAttribL2d","","",954,null],[11,"VertexAttribL2dv","","",954,null],[11,"VertexAttribL2i64NV","","",954,null],[11,"VertexAttribL2i64vNV","","",954,null],[11,"VertexAttribL2ui64NV","","",954,null],[11,"VertexAttribL2ui64vNV","","",954,null],[11,"VertexAttribL3d","","",954,null],[11,"VertexAttribL3dv","","",954,null],[11,"VertexAttribL3i64NV","","",954,null],[11,"VertexAttribL3i64vNV","","",954,null],[11,"VertexAttribL3ui64NV","","",954,null],[11,"VertexAttribL3ui64vNV","","",954,null],[11,"VertexAttribL4d","","",954,null],[11,"VertexAttribL4dv","","",954,null],[11,"VertexAttribL4i64NV","","",954,null],[11,"VertexAttribL4i64vNV","","",954,null],[11,"VertexAttribL4ui64NV","","",954,null],[11,"VertexAttribL4ui64vNV","","",954,null],[11,"VertexAttribLFormat","","",954,null],[11,"VertexAttribLFormatNV","","",954,null],[11,"VertexAttribLPointer","","",954,null],[11,"VertexAttribP1ui","","",954,null],[11,"VertexAttribP1uiv","","",954,null],[11,"VertexAttribP2ui","","",954,null],[11,"VertexAttribP2uiv","","",954,null],[11,"VertexAttribP3ui","","",954,null],[11,"VertexAttribP3uiv","","",954,null],[11,"VertexAttribP4ui","","",954,null],[11,"VertexAttribP4uiv","","",954,null],[11,"VertexAttribPointer","","",954,null],[11,"VertexAttribPointerARB","","",954,null],[11,"VertexBindingDivisor","","",954,null],[11,"VertexP2ui","","",954,null],[11,"VertexP2uiv","","",954,null],[11,"VertexP3ui","","",954,null],[11,"VertexP3uiv","","",954,null],[11,"VertexP4ui","","",954,null],[11,"VertexP4uiv","","",954,null],[11,"VertexPointer","","",954,null],[11,"Viewport","","",954,null],[11,"ViewportArrayv","","",954,null],[11,"ViewportIndexedf","","",954,null],[11,"ViewportIndexedfv","","",954,null],[11,"WaitSync","","",954,null],[11,"WindowPos2d","","",954,null],[11,"WindowPos2dv","","",954,null],[11,"WindowPos2f","","",954,null],[11,"WindowPos2fv","","",954,null],[11,"WindowPos2i","","",954,null],[11,"WindowPos2iv","","",954,null],[11,"WindowPos2s","","",954,null],[11,"WindowPos2sv","","",954,null],[11,"WindowPos3d","","",954,null],[11,"WindowPos3dv","","",954,null],[11,"WindowPos3f","","",954,null],[11,"WindowPos3fv","","",954,null],[11,"WindowPos3i","","",954,null],[11,"WindowPos3iv","","",954,null],[11,"WindowPos3s","","",954,null],[11,"WindowPos3sv","","",954,null],[11,"BeginQueryEXT","","",954,null],[11,"BindVertexArrayOES","","",954,null],[11,"BlendBarrier","","",954,null],[11,"BufferStorageEXT","","",954,null],[11,"ClientWaitSyncAPPLE","","",954,null],[11,"CopyBufferSubDataNV","","",954,null],[11,"DebugMessageCallbackKHR","","",954,null],[11,"DebugMessageControlKHR","","",954,null],[11,"DebugMessageInsertKHR","","",954,null],[11,"DeleteQueriesEXT","","",954,null],[11,"DeleteSyncAPPLE","","",954,null],[11,"DeleteVertexArraysOES","","",954,null],[11,"DrawElementsBaseVertexOES","","",954,null],[11,"DrawElementsInstancedBaseVertexOES","","",954,null],[11,"DrawRangeElementsBaseVertexOES","","",954,null],[11,"EndQueryEXT","","",954,null],[11,"FenceSyncAPPLE","","",954,null],[11,"FramebufferTexture2DMultisampleEXT","","",954,null],[11,"GenQueriesEXT","","",954,null],[11,"GenVertexArraysOES","","",954,null],[11,"GetDebugMessageLogKHR","","",954,null],[11,"GetGraphicsResetStatusEXT","","",954,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetInteger64vAPPLE","","",954,null],[11,"GetInternalformatSampleivNV","","",954,null],[11,"GetObjectLabelKHR","","",954,null],[11,"GetObjectPtrLabelKHR","","",954,null],[11,"GetPointervKHR","","",954,null],[11,"GetQueryObjecti64vEXT","","",954,null],[11,"GetQueryObjectivEXT","","",954,null],[11,"GetQueryObjectui64vEXT","","",954,null],[11,"GetQueryObjectuivEXT","","",954,null],[11,"GetQueryivEXT","","",954,null],[11,"GetSyncivAPPLE","","",954,null],[11,"GetnUniformfvEXT","","",954,null],[11,"GetnUniformivEXT","","",954,null],[11,"IsQueryEXT","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsSyncAPPLE","","",954,null],[11,"IsVertexArrayOES","","",954,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"MultiDrawArraysIndirectEXT","","",954,null],[11,"MultiDrawElementsBaseVertexOES","","",954,null],[11,"MultiDrawElementsIndirectEXT","","",954,null],[11,"ObjectLabelKHR","","",954,null],[11,"ObjectPtrLabelKHR","","",954,null],[11,"PopDebugGroupKHR","","",954,null],[11,"PrimitiveBoundingBox","","",954,null],[11,"PrimitiveBoundingBoxEXT","","",954,null],[11,"PrimitiveBoundingBoxOES","","",954,null],[11,"PushDebugGroupKHR","","",954,null],[11,"QueryCounterEXT","","",954,null],[11,"ReadnPixelsEXT","","",954,null],[11,"RenderbufferStorageMultisampleANGLE","","",954,null],[11,"RenderbufferStorageMultisampleAPPLE","","",954,null],[11,"RenderbufferStorageMultisampleNV","","",954,null],[11,"ResolveMultisampleFramebufferAPPLE","","",954,null],[11,"TexBufferOES","","",954,null],[11,"TexBufferRangeOES","","",954,null],[11,"WaitSyncAPPLE","","",954,null],[11,"hash","glium","",955,null],[11,"fmt","","",955,{"inputs":[{"name":"handle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",955,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",955,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",955,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"fmt","","",956,{"inputs":[{"name":"rawuniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",956,{"inputs":[{"name":"rawuniformvalue"}],"output":{"name":"rawuniformvalue"}}],[11,"eq","","",957,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",957,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"default","","",957,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",957,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"fmt","","",957,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",958,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"ne","","",958,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"default","","",958,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"clone","","",958,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"fmt","","",958,{"inputs":[{"name":"blittarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",959,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",959,{"inputs":[{"name":"drawerror"}],"output":{"name":"drawerror"}}],[11,"description","","",959,{"inputs":[{"name":"drawerror"}],"output":{"name":"str"}}],[11,"cause","","",959,{"inputs":[{"name":"drawerror"}],"output":{"name":"option"}}],[11,"fmt","","",959,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",960,{"inputs":[{"name":"swapbufferserror"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"ne","","",960,{"inputs":[{"name":"swapbufferserror"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"clone","","",960,{"inputs":[{"name":"swapbufferserror"}],"output":{"name":"swapbufferserror"}}],[11,"fmt","","",960,{"inputs":[{"name":"swapbufferserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",960,{"inputs":[{"name":"swapbufferserror"}],"output":{"name":"str"}}],[11,"fmt","","",960,{"inputs":[{"name":"swapbufferserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",961,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",961,{"inputs":[{"name":"frame"}],"output":{"name":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",961,{"inputs":[{"name":"frame"}],"output":{"name":"result"}}],[11,"clear","","",961,null],[11,"get_dimensions","","",961,null],[11,"get_depth_buffer_bits","","",961,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",961,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"draw","","",961,{"inputs":[{"name":"frame"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",961,null],[11,"blit_from_frame","","",961,null],[11,"blit_from_simple_framebuffer","","",961,null],[11,"blit_from_multioutput_framebuffer","","",961,null],[11,"get_attachments","","",961,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"drop","","",961,null],[11,"eq","","",962,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",962,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",962,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",962,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"gliumcreationerror"}}],[11,"fmt","","",962,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",962,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"str"}}],[11,"cause","","",962,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"option"}}],[11,"from","","",962,{"inputs":[{"name":"gliumcreationerror"},{"name":"t"}],"output":{"name":"gliumcreationerror"}}],[4,"PrimitiveType","lux::graphics","List of available primitives.",null,null],[13,"Points","","Each vertex is an invidiual point.",109,null],[13,"LinesList","","Vertices are grouped by chunks of two vertices. Each chunk represents a line.",109,null],[13,"LinesListAdjacency","","Vertices are grouped by chunks of four vertices. The second and third vertices of each\nchunk represents the line.",109,null],[13,"LineStrip","","Each vertex (except the last one) forms a line with the next vertex.",109,null],[13,"LineStripAdjacency","","Similar to `LineStrip`, but with an additional vertex at the beginning and at the end\nthat represent the vertices adjacent to the first and last ones.",109,null],[13,"LineLoop","","Each vertex forms a line with the next vertex. The last vertex form a line with the first\none.",109,null],[13,"TrianglesList","","Vertices are grouped by chunks of three vertices. Each chunk represents a triangle.",109,null],[13,"TrianglesListAdjacency","","Vertices are grouped by chunks of six vertices. The first, third and fifth vertices\nrepresent a triangle.",109,null],[13,"TriangleStrip","","Each vertex (except the first one and the last one) forms a triangle with the previous\nand the next vertices.",109,null],[13,"TriangleStripAdjacency","","Each even vertex forms a triangle with vertices `n+2` and `n+4`.",109,null],[13,"TriangleFan","","Starting at the second vertex, each vertex forms a triangle with the next and the first\nvertices.",109,null],[13,"Patches","","Vertices are grouped by chunks of `vertices_per_patch` vertices.",109,null],[12,"vertices_per_patch","lux::graphics::PrimitiveType","",109,null],[3,"Rectangle","lux::graphics","A Rectangle that can be drawn to the screen.",null,null],[3,"Ellipse","","An ellipse that can be drawn to the screen.",null,null],[3,"ContainedSprite","","A sprite that can be drawn to the screen.",null,null],[3,"ColorVertex","","A colored vertex.",null,null],[12,"pos","","The position in screen space.",963,null],[12,"color","","The color in [r, g, b, a].",963,null],[3,"TexVertex","","A textured vertex.",null,null],[12,"pos","","The position in screen space",964,null],[12,"tex_coords","","The texture cooordinates [x, y] where x and y\nare in the range `0.0` to `1.0`.",964,null],[3,"Sprite","","A ref-counted reference to a texture on the GPU.",null,null],[3,"Texture","","An owned texture on the hardware.",null,null],[3,"DrawableTexture","","A texture that can be drawn to like a regular canvas.",null,null],[3,"UniformSpriteSheet","","A uniform sprite sheet is a sprite sheet that is broken up into\na grid of equally sized sub-sprites.",null,null],[12,"sprite","","The sprite that this sprite sheet indexes into",965,null],[3,"NonUniformSpriteSheet","","A uniform sprite sheet is a sprite sheet that has parts of the original\nsprite broken up into chunks that are associated to a Key.",null,null],[12,"sprite","","The sprite that this sprite sheet indexes into",966,null],[12,"mapping","","The mapping from a key to a subsprite",966,null],[4,"StencilType","","When modifying a stencil or clearing the stencil buffer,\noperations require a StencilType.",null,null],[13,"Deny","","Blacklists pixels on the screen when drawing.",967,null],[13,"Allow","","Whitelists pixels on the screen when drawing.",967,null],[8,"Canvas","","Canvas is the main trait for drawing in Lux.  It supports all operations\nthat paint to the screen or to a buffer.",null,null],[10,"size","","Returns the size of the canvas as a pair of (width, height).",968,null],[11,"size_i","","Returns the size of the canvas in integer form.",968,null],[11,"width","","Returns the width of the canvas.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"height","","Returns the height of the canvas.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"width_i","","Returns the width of the canvas in integer form.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"i32"}}],[11,"height_i","","Returns the height of the canvas in integer form.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"i32"}}],[11,"clear","","Clears the canvas with a solid color.",968,{"inputs":[{"name":"canvas"},{"name":"c"}],"output":null}],[11,"with_scissor","","Evaluates the function with a canvas that will only draw into the\nprovided rectangle.",968,{"inputs":[{"name":"canvas"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"r"}}],[11,"draw_to_stencil","","Executes a drawing function where all drawing is done on the\nstencil buffer.",968,{"inputs":[{"name":"canvas"},{"name":"stenciltype"},{"name":"s"}],"output":{"name":"r"}}],[11,"clear_stencil","","Clears the stencil buffer allowing all draws to go though.",968,{"inputs":[{"name":"canvas"},{"name":"stenciltype"}],"output":null}],[11,"rect","","Returns a rectangle with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"square","","Returns a square with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"ellipse","","Returns an ellipse with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"circle","","Returns an circle with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"draw_point","","Draws a 1-pixel colored point to the screen at a position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"c"}],"output":null}],[11,"draw_points","","Draws a sequence of colored points with the size of 1 pixel.",968,null],[11,"draw_line","","Draws a single line from `start` to `end` with a\nthickness of `line_size`.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":null}],[11,"draw_lines","","Draws a series of lines from each point to the next with a thickness\nof `line_size`.",968,{"inputs":[{"name":"canvas"},{"name":"i"},{"name":"float"}],"output":null}],[11,"draw_arc","","Draws an arc centered at `pos` from `angle1` to `angle_2` with a\nthickness of `line_size`.",968,null],[11,"sprite","","Draws a sprite  to the screen.",968,{"inputs":[{"name":"canvas"},{"name":"sprite"},{"name":"float"},{"name":"float"}],"output":{"name":"containedsprite"}}],[8,"PrimitiveCanvas","","A Primitive canvas is a trait that is implemented by objects that\ncan have draw commands issued to them.",null,null],[10,"clear","","Clears the canvas with a color.",969,{"inputs":[{"name":"primitivecanvas"},{"name":"c"}],"output":null}],[10,"clear_stencil","","Clears the stencil buffer.",969,{"inputs":[{"name":"primitivecanvas"},{"name":"i32"}],"output":null}],[10,"draw_colored","","Draws the verteces to the canvas. This function uses caching to\nbatch draw calls that are similar.",969,null],[10,"draw_colored_now","","Draws colored vertices to the canvas with no thought given to the\ncached draw commands.",969,null],[10,"draw_colored_no_batch","","Immediately draws colored vertices to the canvas.",969,null],[10,"draw_tex","","Same as `draw_colored` but for textured vertices.",969,null],[10,"draw_textured_now","","Same as `draw_colored_now` but for textured vertices.",969,null],[10,"draw_tex_no_batch","","Same as `draw_colored_no_batch` but for textured vertices.",969,null],[10,"flush_draw","","Flush all stored draw calls to the screen.",969,{"inputs":[{"name":"primitivecanvas"}],"output":{"name":"luxresult"}}],[8,"IntoSprite","","Implemented by any object that can be converted into a Sprite.",null,null],[10,"into_sprite","","Attempts to convert itself into a sprite.",970,{"inputs":[{"name":"intosprite"},{"name":"d"}],"output":{"name":"luxresult"}}],[8,"TextureLoader","","TextureLoader is implemented on any object that can load textures.",null,null],[10,"load_texture_file","","Attempts to load a texture from a path.",971,{"inputs":[{"name":"textureloader"},{"name":"p"}],"output":{"name":"result"}}],[10,"texture_from_image","","Attempts to load a texture from a `DynamicImage` from the `image` crate.",971,{"inputs":[{"name":"textureloader"},{"name":"dynamicimage"}],"output":{"name":"result"}}],[0,"interactive","lux","Functionality for dealing with events, querying, and  modifying\nthe window.",null,null],[3,"EventIterator","lux::interactive","An iterator for windowing events.",null,null],[4,"Event","","An even coming from an Interactive object.",null,null],[13,"MouseMoved","","The mouse moved to this position.",972,null],[13,"MouseWheel","","The mouse wheel moved by this delta.",972,null],[13,"MouseDown","","This mouse button was pushed down.",972,null],[13,"MouseUp","","This mouse button was released.",972,null],[13,"KeyPressed","","This key was pressed.",972,null],[13,"KeyReleased","","This key was released.",972,null],[13,"WindowResized","","The window was resized to this size.",972,null],[13,"WindowMoved","","The window was moved to this position on the screen.",972,null],[13,"FileDropped","","A file has been dragged-and-dropped into the screen.",972,null],[4,"MouseButton","","A handy enumeration for the buttons on a mouse.",null,null],[13,"Left","","The left mouse button.",973,null],[13,"Right","","The right mouse button.",973,null],[13,"Middle","","The middle mouse button.",973,null],[13,"Other","","Any other unnamed mouse button.",973,null],[0,"keycodes","","A keycode is a platform independent way to refer to\nkeys on the keyboard.",null,null],[4,"VirtualKeyCode","lux::interactive::keycodes","",null,null],[13,"Key1","","The '1' key over the letters.",17,null],[13,"Key2","","The '2' key over the letters.",17,null],[13,"Key3","","The '3' key over the letters.",17,null],[13,"Key4","","The '4' key over the letters.",17,null],[13,"Key5","","The '5' key over the letters.",17,null],[13,"Key6","","The '6' key over the letters.",17,null],[13,"Key7","","The '7' key over the letters.",17,null],[13,"Key8","","The '8' key over the letters.",17,null],[13,"Key9","","The '9' key over the letters.",17,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",17,null],[13,"A","","",17,null],[13,"B","","",17,null],[13,"C","","",17,null],[13,"D","","",17,null],[13,"E","","",17,null],[13,"F","","",17,null],[13,"G","","",17,null],[13,"H","","",17,null],[13,"I","","",17,null],[13,"J","","",17,null],[13,"K","","",17,null],[13,"L","","",17,null],[13,"M","","",17,null],[13,"N","","",17,null],[13,"O","","",17,null],[13,"P","","",17,null],[13,"Q","","",17,null],[13,"R","","",17,null],[13,"S","","",17,null],[13,"T","","",17,null],[13,"U","","",17,null],[13,"V","","",17,null],[13,"W","","",17,null],[13,"X","","",17,null],[13,"Y","","",17,null],[13,"Z","","",17,null],[13,"Escape","","The Escape key, next to F1.",17,null],[13,"F1","","",17,null],[13,"F2","","",17,null],[13,"F3","","",17,null],[13,"F4","","",17,null],[13,"F5","","",17,null],[13,"F6","","",17,null],[13,"F7","","",17,null],[13,"F8","","",17,null],[13,"F9","","",17,null],[13,"F10","","",17,null],[13,"F11","","",17,null],[13,"F12","","",17,null],[13,"F13","","",17,null],[13,"F14","","",17,null],[13,"F15","","",17,null],[13,"Snapshot","","Print Screen/SysRq.",17,null],[13,"Scroll","","Scroll Lock.",17,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",17,null],[13,"Insert","","`Insert`, next to Backspace.",17,null],[13,"Home","","",17,null],[13,"Delete","","",17,null],[13,"End","","",17,null],[13,"PageDown","","",17,null],[13,"PageUp","","",17,null],[13,"Left","","",17,null],[13,"Up","","",17,null],[13,"Right","","",17,null],[13,"Down","","",17,null],[13,"Back","","The Backspace key, right over Enter.",17,null],[13,"Return","","The Enter key.",17,null],[13,"Space","","The space bar.",17,null],[13,"Numlock","","",17,null],[13,"Numpad0","","",17,null],[13,"Numpad1","","",17,null],[13,"Numpad2","","",17,null],[13,"Numpad3","","",17,null],[13,"Numpad4","","",17,null],[13,"Numpad5","","",17,null],[13,"Numpad6","","",17,null],[13,"Numpad7","","",17,null],[13,"Numpad8","","",17,null],[13,"Numpad9","","",17,null],[13,"AbntC1","","",17,null],[13,"AbntC2","","",17,null],[13,"Add","","",17,null],[13,"Apostrophe","","",17,null],[13,"Apps","","",17,null],[13,"At","","",17,null],[13,"Ax","","",17,null],[13,"Backslash","","",17,null],[13,"Calculator","","",17,null],[13,"Capital","","",17,null],[13,"Colon","","",17,null],[13,"Comma","","",17,null],[13,"Convert","","",17,null],[13,"Decimal","","",17,null],[13,"Divide","","",17,null],[13,"Equals","","",17,null],[13,"Grave","","",17,null],[13,"Kana","","",17,null],[13,"Kanji","","",17,null],[13,"LAlt","","",17,null],[13,"LBracket","","",17,null],[13,"LControl","","",17,null],[13,"LMenu","","",17,null],[13,"LShift","","",17,null],[13,"LWin","","",17,null],[13,"Mail","","",17,null],[13,"MediaSelect","","",17,null],[13,"MediaStop","","",17,null],[13,"Minus","","",17,null],[13,"Multiply","","",17,null],[13,"Mute","","",17,null],[13,"MyComputer","","",17,null],[13,"NextTrack","","",17,null],[13,"NoConvert","","",17,null],[13,"NumpadComma","","",17,null],[13,"NumpadEnter","","",17,null],[13,"NumpadEquals","","",17,null],[13,"OEM102","","",17,null],[13,"Period","","",17,null],[13,"PlayPause","","",17,null],[13,"Power","","",17,null],[13,"PrevTrack","","",17,null],[13,"RAlt","","",17,null],[13,"RBracket","","",17,null],[13,"RControl","","",17,null],[13,"RMenu","","",17,null],[13,"RShift","","",17,null],[13,"RWin","","",17,null],[13,"Semicolon","","",17,null],[13,"Slash","","",17,null],[13,"Sleep","","",17,null],[13,"Stop","","",17,null],[13,"Subtract","","",17,null],[13,"Sysrq","","",17,null],[13,"Tab","","",17,null],[13,"Underline","","",17,null],[13,"Unlabeled","","",17,null],[13,"VolumeDown","","",17,null],[13,"VolumeUp","","",17,null],[13,"Wake","","",17,null],[13,"WebBack","","",17,null],[13,"WebFavorites","","",17,null],[13,"WebForward","","",17,null],[13,"WebHome","","",17,null],[13,"WebRefresh","","",17,null],[13,"WebSearch","","",17,null],[13,"WebStop","","",17,null],[13,"Yen","","",17,null],[8,"Interactive","lux::interactive","A trait for objects that are interactive to the user.\nThe only known impelementation for this trait is the glutin Window.",null,null],[10,"is_open","","Returns true if the window is not yet closed.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"was_open","","Returns true if the window wasn't closed the last time that input was\npolled.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"title","","Returns the title of the object.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"str"}}],[10,"set_title","","Sets the title of the object.  If the object is a window,\nthis title will be used to decorate the window.",974,{"inputs":[{"name":"interactive"},{"name":"str"}],"output":null}],[10,"set_size","","Sets the size of the window if possible.",974,{"inputs":[{"name":"interactive"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_size_u","","Returns the size of the window as an unsigned integer.",974,null],[11,"get_size","","Returns the size of the window.",974,null],[11,"width","","Returns the width of the window.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"height","","Returns the height of the window.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"width_u","","Returns the width of the window as an unsigned integer.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[11,"height_u","","Returns the height of the window as an unsigned integer.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[10,"is_focused","","Returns true if the operating system has given this object focus.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"is_mouse_down","","Returns true if any mouse button is down.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"mouse_pos","","Returns the current position of the mouse.",974,null],[10,"mouse_pos_i","","Returns the current position of the mouse in integer units.",974,null],[11,"mouse_x","","Returns the x coordinate of the mouse.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_x_i","","Returns the x coordinate of the mouse in integer units.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[11,"mouse_y","","Returns the y coordinate of the mouse.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_y_i","","Returns the y coordinate of the mouse in integer units.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[10,"is_key_pressed","","Returns true if a given key is currently being pressed.",974,{"inputs":[{"name":"interactive"},{"name":"k"}],"output":{"name":"bool"}}],[10,"events","","Consumes all unseen events and returns them in an iterator.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"eventiterator"}}],[8,"AbstractKey","","A conversion trait for representing the different ways that a key\ncan be represented.",null,null],[10,"to_key","","Converts an abstract key into a set of concrete key implementations.",975,null],[0,"window","lux","The main window and the frames that are generated by the window.",null,null],[3,"Window","lux::window","A 1 to 1 correlation with a window shown on your desktop.",null,null],[3,"Frame","","A frame is a render target that can be drawn on.",null,null],[3,"WindowOptions","","A set of options that can be applied to a window",null,null],[12,"dimensions","","The size of the window in pixels.",976,null],[12,"title","","The title displayed on the top of the window.",976,null],[12,"vsync","","If Vsync is enabled",976,null],[12,"multisampling","","The number of multisampling passes. Must be a power of 2.",976,null],[12,"transparent","","True if the window should be transparent.",976,null],[12,"decorations","","True if the window should have no border or title-bar.",976,null],[0,"modifiers","lux","Many contexts can be modified and chained together in a logical way.",null,null],[8,"Colored","lux::modifiers","A trait representing objects that can be colored with\nseperate fill colors and stroke colors.",null,null],[10,"get_color","","Returns the current color.",977,null],[10,"color","","Sets the color.",977,{"inputs":[{"name":"colored"},{"name":"c"}],"output":{"name":"self"}}],[11,"with_color","","Executes a closure with the given color, then resets it to what it was before.",977,{"inputs":[{"name":"colored"},{"name":"c"},{"name":"f"}],"output":null}],[8,"Transform","","A trait for objects that can be \"transformed\".  Transformations\ninclude scaling, translation, shearing, rotating, and general\npurpose matrix application.",null,null],[10,"current_matrix","","Return a reference to the current matrix.",978,null],[10,"current_matrix_mut","","Return a mutible reference to the current matrix.",978,null],[11,"apply_matrix","","Multiplies the current matrix against another.\n`self = self * other`.",978,null],[11,"translate","","Applies a translation transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"scale","","Applies a scaling transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"shear","","Applies a shearing transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate","","Applies a rotation transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate_around","","Combines rotation with translation to effectively\nrotate around a given point.",978,null],[11,"with_matrix","","Used when you want to make several successive calls to transformations\non a single stacked matrix.",978,{"inputs":[{"name":"transform"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotation","","Similar to `with_matrix` but with a rotation applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_translate","","Similar to `with_matrix` but with a translation applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_scale","","Similar to `with_matrix` but with a scale applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_shear","","Similar to `with_matrix` but with a shear applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotate_around","","Similar to `with_matrix` but with rotate_around applied\nfor the duration of the closure.",978,null],[0,"game","lux","A game loop implementation using Lux for windowing and graphics.",null,null],[3,"GameRunner","lux::game","A struct that wraps a `Game` and a `Window` and implementes a game loop.",null,null],[12,"window","","The window being used to run the game.",979,null],[12,"game","","The wrapped game.",979,null],[3,"Loader","","A struct that stores closures which load assets and prepare the game for\nrunning.",null,null],[8,"Game","","A trait that represents basic game functionality.",null,null],[10,"update","","The update portion of the game loop.",980,{"inputs":[{"name":"game"},{"name":"f32"},{"name":"window"},{"name":"eventiterator"}],"output":{"name":"luxresult"}}],[10,"render","","The render portion of the game loop.",980,{"inputs":[{"name":"game"},{"name":"f32"},{"name":"window"},{"name":"frame"}],"output":{"name":"luxresult"}}],[11,"clear_color","","The color that is used to clear the screen before each frame.",980,{"inputs":[{"name":"game"}],"output":{"name":"option"}}],[11,"show_fps","","If running in a GameRunner, this function can be overridden to\ndisplay a running FPS counter that shows how time is being spent\nin the game.",980,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"bool"}}],[11,"should_close","","For custom game-closing logic this function can be overridden to\nconditionally return true.",980,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"bool"}}],[11,"on_close","","Called once before terminating the window.",980,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"luxresult"}}],[11,"updates_per_s","","Returs the amount of updates you want to have run in one wall-clock\nsecond.",980,{"inputs":[{"name":"game"}],"output":{"name":"f64"}}],[11,"s_per_update","","Returns the amount of (fractional) seconds that you want an individual\nupdate to take.",980,{"inputs":[{"name":"game"}],"output":{"name":"f64"}}],[11,"run_until_end","","Starts this game and runs it until the game is over.",980,{"inputs":[{"name":"game"}],"output":{"name":"luxresult"}}],[11,"load","","All asset loading and window preparation code can be done here.",980,{"inputs":[{"name":"game"},{"name":"loader"}],"output":null}],[11,"draw_loading_screen","","Draws the loading screen that shows progress when the game is loading.",980,null],[0,"prelude","lux","A collection of common traits, structs and functions that are\nrecommended for average Lux usage.",null,null],[3,"Window","lux::prelude","A 1 to 1 correlation with a window shown on your desktop.",null,null],[3,"Frame","","A frame is a render target that can be drawn on.",null,null],[3,"EventIterator","","An iterator for windowing events.",null,null],[4,"LuxError","","Any error that Lux might run into.",null,null],[13,"WindowError","","An error that can occur when creating a window.",0,null],[13,"OpenGlError","","An error that can occur when creating an opengl context.",0,null],[13,"ImageError","","An error related to image decoding.",0,null],[13,"ShaderError","","An error that can occur when compiling or linking shaders.",0,null],[13,"IoError","","An error that can occur when required I/O fails.",0,null],[13,"FontNotLoaded","","An error that can occur when attempting to use a font that hasn't\nbeen loaded yet.",0,null],[13,"DrawError","","An error that was produced while submitting a draw call",0,null],[13,"TextureCreationError","","An error occured while creating a texture",0,null],[13,"IndexBufferCreationError","","An error creating an index buffer occured",0,null],[13,"VertexBufferCreationError","","An error creating an vertex buffer occured",0,null],[5,"rgb","","Constructs a color from R, G, and B components.",null,null],[5,"rgba","","Constructs a color from R, G, B, and A components.",null,null],[5,"hsv","","Constructs a color from Hue, Saturation and Value components.",null,null],[5,"hsva","","Same as `hsv` but with an alpha component.",null,null],[6,"LuxResult","","A result returning either a value or a lux-generated error.",null,null],[8,"Color","","A `Color` is any object that can be converted to a length-4 array of f32s.",null,null],[10,"to_rgba","","Converts this object to a length-4 array of floats.",108,null],[8,"Canvas","","Canvas is the main trait for drawing in Lux.  It supports all operations\nthat paint to the screen or to a buffer.",null,null],[10,"size","","Returns the size of the canvas as a pair of (width, height).",968,null],[11,"size_i","","Returns the size of the canvas in integer form.",968,null],[11,"width","","Returns the width of the canvas.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"height","","Returns the height of the canvas.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"width_i","","Returns the width of the canvas in integer form.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"i32"}}],[11,"height_i","","Returns the height of the canvas in integer form.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"i32"}}],[11,"clear","","Clears the canvas with a solid color.",968,{"inputs":[{"name":"canvas"},{"name":"c"}],"output":null}],[11,"with_scissor","","Evaluates the function with a canvas that will only draw into the\nprovided rectangle.",968,{"inputs":[{"name":"canvas"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"r"}}],[11,"draw_to_stencil","","Executes a drawing function where all drawing is done on the\nstencil buffer.",968,{"inputs":[{"name":"canvas"},{"name":"stenciltype"},{"name":"s"}],"output":{"name":"r"}}],[11,"clear_stencil","","Clears the stencil buffer allowing all draws to go though.",968,{"inputs":[{"name":"canvas"},{"name":"stenciltype"}],"output":null}],[11,"rect","","Returns a rectangle with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"square","","Returns a square with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"ellipse","","Returns an ellipse with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"circle","","Returns an circle with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"draw_point","","Draws a 1-pixel colored point to the screen at a position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"c"}],"output":null}],[11,"draw_points","","Draws a sequence of colored points with the size of 1 pixel.",968,null],[11,"draw_line","","Draws a single line from `start` to `end` with a\nthickness of `line_size`.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":null}],[11,"draw_lines","","Draws a series of lines from each point to the next with a thickness\nof `line_size`.",968,{"inputs":[{"name":"canvas"},{"name":"i"},{"name":"float"}],"output":null}],[11,"draw_arc","","Draws an arc centered at `pos` from `angle1` to `angle_2` with a\nthickness of `line_size`.",968,null],[11,"sprite","","Draws a sprite  to the screen.",968,{"inputs":[{"name":"canvas"},{"name":"sprite"},{"name":"float"},{"name":"float"}],"output":{"name":"containedsprite"}}],[8,"IntoSprite","","Implemented by any object that can be converted into a Sprite.",null,null],[10,"into_sprite","","Attempts to convert itself into a sprite.",970,{"inputs":[{"name":"intosprite"},{"name":"d"}],"output":{"name":"luxresult"}}],[8,"Interactive","","A trait for objects that are interactive to the user.\nThe only known impelementation for this trait is the glutin Window.",null,null],[10,"is_open","","Returns true if the window is not yet closed.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"was_open","","Returns true if the window wasn't closed the last time that input was\npolled.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"title","","Returns the title of the object.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"str"}}],[10,"set_title","","Sets the title of the object.  If the object is a window,\nthis title will be used to decorate the window.",974,{"inputs":[{"name":"interactive"},{"name":"str"}],"output":null}],[10,"set_size","","Sets the size of the window if possible.",974,{"inputs":[{"name":"interactive"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_size_u","","Returns the size of the window as an unsigned integer.",974,null],[11,"get_size","","Returns the size of the window.",974,null],[11,"width","","Returns the width of the window.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"height","","Returns the height of the window.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"width_u","","Returns the width of the window as an unsigned integer.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[11,"height_u","","Returns the height of the window as an unsigned integer.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[10,"is_focused","","Returns true if the operating system has given this object focus.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"is_mouse_down","","Returns true if any mouse button is down.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"mouse_pos","","Returns the current position of the mouse.",974,null],[10,"mouse_pos_i","","Returns the current position of the mouse in integer units.",974,null],[11,"mouse_x","","Returns the x coordinate of the mouse.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_x_i","","Returns the x coordinate of the mouse in integer units.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[11,"mouse_y","","Returns the y coordinate of the mouse.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_y_i","","Returns the y coordinate of the mouse in integer units.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[10,"is_key_pressed","","Returns true if a given key is currently being pressed.",974,{"inputs":[{"name":"interactive"},{"name":"k"}],"output":{"name":"bool"}}],[10,"events","","Consumes all unseen events and returns them in an iterator.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"eventiterator"}}],[8,"Colored","","A trait representing objects that can be colored with\nseperate fill colors and stroke colors.",null,null],[10,"get_color","","Returns the current color.",977,null],[10,"color","","Sets the color.",977,{"inputs":[{"name":"colored"},{"name":"c"}],"output":{"name":"self"}}],[11,"with_color","","Executes a closure with the given color, then resets it to what it was before.",977,{"inputs":[{"name":"colored"},{"name":"c"},{"name":"f"}],"output":null}],[8,"Transform","","A trait for objects that can be \"transformed\".  Transformations\ninclude scaling, translation, shearing, rotating, and general\npurpose matrix application.",null,null],[10,"current_matrix","","Return a reference to the current matrix.",978,null],[10,"current_matrix_mut","","Return a mutible reference to the current matrix.",978,null],[11,"apply_matrix","","Multiplies the current matrix against another.\n`self = self * other`.",978,null],[11,"translate","","Applies a translation transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"scale","","Applies a scaling transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"shear","","Applies a shearing transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate","","Applies a rotation transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate_around","","Combines rotation with translation to effectively\nrotate around a given point.",978,null],[11,"with_matrix","","Used when you want to make several successive calls to transformations\non a single stacked matrix.",978,{"inputs":[{"name":"transform"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotation","","Similar to `with_matrix` but with a rotation applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_translate","","Similar to `with_matrix` but with a translation applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_scale","","Similar to `with_matrix` but with a scale applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_shear","","Similar to `with_matrix` but with a shear applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotate_around","","Similar to `with_matrix` but with rotate_around applied\nfor the duration of the closure.",978,null],[8,"TextureLoader","","TextureLoader is implemented on any object that can load textures.",null,null],[10,"load_texture_file","","Attempts to load a texture from a path.",971,{"inputs":[{"name":"textureloader"},{"name":"p"}],"output":{"name":"result"}}],[10,"texture_from_image","","Attempts to load a texture from a `DynamicImage` from the `image` crate.",971,{"inputs":[{"name":"textureloader"},{"name":"dynamicimage"}],"output":{"name":"result"}}],[6,"LuxResult","lux","A result returning either a value or a lux-generated error.",null,null],[11,"get_size","lux::interactive","Returns the size of the window.",974,null],[11,"width","","Returns the width of the window.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"height","","Returns the height of the window.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"width_u","","Returns the width of the window as an unsigned integer.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[11,"height_u","","Returns the height of the window as an unsigned integer.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[11,"mouse_x","","Returns the x coordinate of the mouse.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_x_i","","Returns the x coordinate of the mouse in integer units.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[11,"mouse_y","","Returns the y coordinate of the mouse.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_y_i","","Returns the y coordinate of the mouse in integer units.",974,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[11,"clone","","",972,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"eq","","",972,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",972,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",972,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",973,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"hash","","",973,null],[11,"eq","","",973,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",973,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"fmt","","",973,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_empty","","Returns true if this event iterator contains no events",981,{"inputs":[{"name":"eventiterator"}],"output":{"name":"bool"}}],[11,"from_deque","","Constructs an `EventIterator` from a `VecDeque`.",981,{"inputs":[{"name":"eventiterator"},{"name":"vecdeque"}],"output":{"name":"eventiterator"}}],[11,"into_deque","","Convertes this `EventIterator` back into a `VecDeque`.",981,{"inputs":[{"name":"eventiterator"}],"output":{"name":"vecdeque"}}],[11,"as_ref","","Returns an iterator over the events contained inside without\nremoving them.",981,{"inputs":[{"name":"eventiterator"}],"output":{"name":"iter"}}],[11,"as_mut","","Returns a mutable iterator over the events contained\ninside without removing them.",981,{"inputs":[{"name":"eventiterator"}],"output":{"name":"itermut"}}],[11,"next","","",981,{"inputs":[{"name":"eventiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",981,null],[11,"next_back","","",981,{"inputs":[{"name":"eventiterator"}],"output":{"name":"option"}}],[11,"size_i","lux::graphics","Returns the size of the canvas in integer form.",968,null],[11,"width","","Returns the width of the canvas.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"height","","Returns the height of the canvas.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"width_i","","Returns the width of the canvas in integer form.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"i32"}}],[11,"height_i","","Returns the height of the canvas in integer form.",968,{"inputs":[{"name":"canvas"}],"output":{"name":"i32"}}],[11,"clear","","Clears the canvas with a solid color.",968,{"inputs":[{"name":"canvas"},{"name":"c"}],"output":null}],[11,"with_scissor","","Evaluates the function with a canvas that will only draw into the\nprovided rectangle.",968,{"inputs":[{"name":"canvas"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"r"}}],[11,"draw_to_stencil","","Executes a drawing function where all drawing is done on the\nstencil buffer.",968,{"inputs":[{"name":"canvas"},{"name":"stenciltype"},{"name":"s"}],"output":{"name":"r"}}],[11,"clear_stencil","","Clears the stencil buffer allowing all draws to go though.",968,{"inputs":[{"name":"canvas"},{"name":"stenciltype"}],"output":null}],[11,"rect","","Returns a rectangle with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"square","","Returns a square with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"ellipse","","Returns an ellipse with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"circle","","Returns an circle with the given dimensions and position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"draw_point","","Draws a 1-pixel colored point to the screen at a position.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"c"}],"output":null}],[11,"draw_points","","Draws a sequence of colored points with the size of 1 pixel.",968,null],[11,"draw_line","","Draws a single line from `start` to `end` with a\nthickness of `line_size`.",968,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":null}],[11,"draw_lines","","Draws a series of lines from each point to the next with a thickness\nof `line_size`.",968,{"inputs":[{"name":"canvas"},{"name":"i"},{"name":"float"}],"output":null}],[11,"draw_arc","","Draws an arc centered at `pos` from `angle1` to `angle_2` with a\nthickness of `line_size`.",968,null],[11,"sprite","","Draws a sprite  to the screen.",968,{"inputs":[{"name":"canvas"},{"name":"sprite"},{"name":"float"},{"name":"float"}],"output":{"name":"containedsprite"}}],[11,"segments","","Sets the number of segments that are used to approximate a circle.",982,{"inputs":[{"name":"ellipse"},{"name":"u16"}],"output":{"name":"self"}}],[11,"line_length","","Instead of",982,{"inputs":[{"name":"ellipse"},{"name":"u16"}],"output":{"name":"self"}}],[11,"current_matrix","","",983,null],[11,"current_matrix_mut","","",983,null],[11,"current_matrix","","",982,null],[11,"current_matrix_mut","","",982,null],[11,"current_matrix","","",984,null],[11,"current_matrix_mut","","",984,null],[11,"get_color","","",982,null],[11,"color","","",982,{"inputs":[{"name":"ellipse"},{"name":"a"}],"output":{"name":"self"}}],[11,"get_color","","",983,null],[11,"color","","",983,{"inputs":[{"name":"rectangle"},{"name":"a"}],"output":{"name":"self"}}],[11,"get_color","","",984,null],[11,"color","","",984,{"inputs":[{"name":"containedsprite"},{"name":"a"}],"output":{"name":"self"}}],[11,"fill","","Fills in the ellipse with a solid color.",982,{"inputs":[{"name":"ellipse"}],"output":null}],[11,"size","","Sets the side of the sprite when drawn to the screen.",984,{"inputs":[{"name":"containedsprite"},{"name":"float"},{"name":"float"}],"output":{"name":"containedsprite"}}],[11,"draw","","Draws the sprite to the screen.",984,{"inputs":[{"name":"containedsprite"}],"output":null}],[11,"fill","","Fills the rectangle with a solid color.",983,{"inputs":[{"name":"rectangle"}],"output":null}],[11,"stroke","","Draws a border around the rectangle.",983,{"inputs":[{"name":"rectangle"}],"output":null}],[11,"fill_and_stroke","","Both fills and strokes the rectangle.",983,{"inputs":[{"name":"rectangle"}],"output":null}],[11,"border","","Sets the size of the border.  The border is drawn using the\n`stroke()` function.",983,{"inputs":[{"name":"rectangle"},{"name":"float"},{"name":"a"}],"output":{"name":"rectangle"}}],[11,"apply_matrix","lux::modifiers","Multiplies the current matrix against another.\n`self = self * other`.",978,null],[11,"translate","","Applies a translation transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"scale","","Applies a scaling transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"shear","","Applies a shearing transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate","","Applies a rotation transformation to the matrix.",978,{"inputs":[{"name":"transform"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate_around","","Combines rotation with translation to effectively\nrotate around a given point.",978,null],[11,"with_matrix","","Used when you want to make several successive calls to transformations\non a single stacked matrix.",978,{"inputs":[{"name":"transform"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotation","","Similar to `with_matrix` but with a rotation applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_translate","","Similar to `with_matrix` but with a translation applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_scale","","Similar to `with_matrix` but with a scale applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_shear","","Similar to `with_matrix` but with a shear applied\nfor the duration of the closure.",978,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotate_around","","Similar to `with_matrix` but with rotate_around applied\nfor the duration of the closure.",978,null],[11,"with_color","","Executes a closure with the given color, then resets it to what it was before.",977,{"inputs":[{"name":"colored"},{"name":"c"},{"name":"f"}],"output":null}],[11,"clone","lux::graphics","",963,{"inputs":[{"name":"colorvertex"}],"output":{"name":"colorvertex"}}],[11,"fmt","","",963,{"inputs":[{"name":"colorvertex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_bindings","","",963,{"inputs":[{"name":"colorvertex"}],"output":{"name":"vertexformat"}}],[11,"clone","","",964,{"inputs":[{"name":"texvertex"}],"output":{"name":"texvertex"}}],[11,"fmt","","",964,{"inputs":[{"name":"texvertex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"build_bindings","","",964,{"inputs":[{"name":"texvertex"}],"output":{"name":"vertexformat"}}],[11,"eq","lux::window","",976,{"inputs":[{"name":"windowoptions"},{"name":"windowoptions"}],"output":{"name":"bool"}}],[11,"ne","","",976,{"inputs":[{"name":"windowoptions"},{"name":"windowoptions"}],"output":{"name":"bool"}}],[11,"clone","","",976,{"inputs":[{"name":"windowoptions"}],"output":{"name":"windowoptions"}}],[11,"drop","","",985,{"inputs":[{"name":"frame"}],"output":null}],[11,"default","","",976,{"inputs":[{"name":"windowoptions"}],"output":{"name":"windowoptions"}}],[11,"new","","Creates a new lux Window with the provided window settings.",986,{"inputs":[{"name":"window"},{"name":"windowoptions"}],"output":{"name":"luxresult"}}],[11,"new_with_defaults","","Constructs a new window with the default settings.",986,{"inputs":[{"name":"window"}],"output":{"name":"luxresult"}}],[11,"change_options","","Executes a closure that can modify the window settings.",986,{"inputs":[{"name":"window"},{"name":"f"}],"output":{"name":"luxresult"}}],[11,"restock_events","","Add the events from an iterator of events back to the internal event queue.",986,{"inputs":[{"name":"window"},{"name":"i"}],"output":null}],[11,"process_events","","Query the underlying window system for events and add them to the\nthe interal event queue.",986,{"inputs":[{"name":"window"}],"output":null}],[11,"cleared_frame","","Produce a frame that has been cleared with a color.",986,{"inputs":[{"name":"window"},{"name":"c"}],"output":{"name":"frame"}}],[11,"frame","","Produce a frame that has not been cleared.",986,{"inputs":[{"name":"window"}],"output":{"name":"frame"}}],[11,"size","","",985,null],[11,"is_open","","",986,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"was_open","","",986,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"title","","",986,{"inputs":[{"name":"window"}],"output":{"name":"str"}}],[11,"set_title","","",986,{"inputs":[{"name":"window"},{"name":"str"}],"output":null}],[11,"set_size","","",986,{"inputs":[{"name":"window"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"get_size_u","","",986,null],[11,"get_size","","",986,null],[11,"is_focused","","",986,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"mouse_pos_i","","",986,null],[11,"mouse_pos","","",986,null],[11,"is_mouse_down","","",986,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"events","","",986,{"inputs":[{"name":"window"}],"output":{"name":"eventiterator"}}],[11,"is_key_pressed","","",986,{"inputs":[{"name":"window"},{"name":"k"}],"output":{"name":"bool"}}],[11,"current_matrix_mut","","",985,null],[11,"current_matrix","","",985,null],[11,"get_color","","",985,null],[11,"color","","",985,{"inputs":[{"name":"frame"},{"name":"c"}],"output":{"name":"frame"}}],[11,"fmt","lux::graphics","",987,{"inputs":[{"name":"sprite"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",987,{"inputs":[{"name":"sprite"}],"output":{"name":"sprite"}}],[11,"fmt","","",965,{"inputs":[{"name":"uniformspritesheet"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",965,{"inputs":[{"name":"uniformspritesheet"}],"output":{"name":"uniformspritesheet"}}],[11,"fmt","","",966,{"inputs":[{"name":"nonuniformspritesheet"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",966,{"inputs":[{"name":"nonuniformspritesheet"}],"output":{"name":"nonuniformspritesheet"}}],[11,"into_sprite","","",987,{"inputs":[{"name":"sprite"},{"name":"d"}],"output":{"name":"luxresult"}}],[11,"empty","","Creates an empty texture with a given width and height.",988,{"inputs":[{"name":"texture"},{"name":"d"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"into_sprite","","Converts this texture into a `Sprite`.",988,{"inputs":[{"name":"texture"}],"output":{"name":"sprite"}}],[11,"as_drawable","","Returns a reference to this texture with a drawable context.",988,{"inputs":[{"name":"texture"},{"name":"d"}],"output":{"name":"drawabletexture"}}],[11,"get_color","","",989,null],[11,"color","","",989,{"inputs":[{"name":"drawabletexture"},{"name":"c"}],"output":{"name":"drawabletexture"}}],[11,"current_matrix","","",989,null],[11,"current_matrix_mut","","",989,null],[11,"size","","",989,null],[11,"drop","","",989,{"inputs":[{"name":"drawabletexture"}],"output":null}],[11,"size","","Returns the size of this sprite.",987,null],[11,"width","","Returns the width of this sprite.",987,{"inputs":[{"name":"sprite"}],"output":{"name":"f32"}}],[11,"height","","Returns the height of this sprite.",987,{"inputs":[{"name":"sprite"}],"output":{"name":"f32"}}],[11,"ideal_size","","Returns the size of this sprite given the size of the image in pixels\nthat this sprite was loaded from.",987,null],[11,"sub_sprite","","Returns a new sprite located offset from this sprite with a specified size.",987,null],[11,"original_sprite","","Returns a sprite that contains the entire texture that the sprite\nwas loaded from.",987,{"inputs":[{"name":"sprite"}],"output":{"name":"sprite"}}],[11,"bounds","","Returns a an array containing the positions of",987,null],[11,"texture","","Returns a clone of the reference counted texture that this\nsprite was loaded from.",987,{"inputs":[{"name":"sprite"}],"output":{"name":"rc"}}],[11,"texture_ref","","Returns a reference to the texture that this sprite wasa loaded from.",987,{"inputs":[{"name":"sprite"}],"output":{"name":"texture2d"}}],[11,"as_uniform_sprite_sheet","","Returns a new uniform sprite sheet using this sprite as its base.",987,{"inputs":[{"name":"sprite"},{"name":"u32"},{"name":"u32"}],"output":{"name":"uniformspritesheet"}}],[11,"as_nonuniform_sprite_sheet","","Returns a new nonuniform sprite sheet using this sprite as its base.",987,{"inputs":[{"name":"sprite"}],"output":{"name":"nonuniformspritesheet"}}],[11,"num_divs","","Returns the number of divisions made in the x and y direction.",965,null],[11,"get","","Gets the sprite that is in the (x, y) position in the grid\ndefined by this sprite sheet.",965,{"inputs":[{"name":"uniformspritesheet"},{"name":"u32"},{"name":"u32"}],"output":{"name":"sprite"}}],[11,"get_opt","","Same as `get` but returns None instead of failing if\nthe sprite is out of bounds.",965,{"inputs":[{"name":"uniformspritesheet"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"associate","","Associates a key with a sprite location.",966,null],[11,"get","","Gets the sprite that is associated with a key.",966,{"inputs":[{"name":"nonuniformspritesheet"},{"name":"q"}],"output":{"name":"sprite"}}],[11,"get_opt","","Same as `get` but returns None instead of failing if the key\ndoesn't associate to anything.",966,{"inputs":[{"name":"nonuniformspritesheet"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear_color","lux::game","The color that is used to clear the screen before each frame.",980,{"inputs":[{"name":"game"}],"output":{"name":"option"}}],[11,"show_fps","","If running in a GameRunner, this function can be overridden to\ndisplay a running FPS counter that shows how time is being spent\nin the game.",980,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"bool"}}],[11,"should_close","","For custom game-closing logic this function can be overridden to\nconditionally return true.",980,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"bool"}}],[11,"on_close","","Called once before terminating the window.",980,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"luxresult"}}],[11,"updates_per_s","","Returs the amount of updates you want to have run in one wall-clock\nsecond.",980,{"inputs":[{"name":"game"}],"output":{"name":"f64"}}],[11,"s_per_update","","Returns the amount of (fractional) seconds that you want an individual\nupdate to take.",980,{"inputs":[{"name":"game"}],"output":{"name":"f64"}}],[11,"run_until_end","","Starts this game and runs it until the game is over.",980,{"inputs":[{"name":"game"}],"output":{"name":"luxresult"}}],[11,"load","","All asset loading and window preparation code can be done here.",980,{"inputs":[{"name":"game"},{"name":"loader"}],"output":null}],[11,"draw_loading_screen","","Draws the loading screen that shows progress when the game is loading.",980,null],[11,"do_async","","Performs part of a job asynchronously and then applies the result\nof that loading to the game.",990,{"inputs":[{"name":"loader"},{"name":"s"},{"name":"fl"},{"name":"fa"}],"output":null}],[11,"do_sync","","Performs a job without an asynchronous component.",990,{"inputs":[{"name":"loader"},{"name":"s"},{"name":"f"}],"output":null}],[11,"new","","Constructs a new GameRunner wrapping a game.",979,{"inputs":[{"name":"gamerunner"},{"name":"g"}],"output":{"name":"luxresult"}}],[11,"step","","Moves the game forward one \"step\".",979,{"inputs":[{"name":"gamerunner"}],"output":{"name":"luxresult"}}],[11,"run_until_end","","Runs the game until the game is terminated.",979,{"inputs":[{"name":"gamerunner"}],"output":{"name":"luxresult"}}],[11,"reset_lag","","Resets the stored lag.",979,{"inputs":[{"name":"gamerunner"}],"output":null}],[11,"do_load","","Execute the game loading closures that would be\ngenerated by `Game::load`.",979,{"inputs":[{"name":"gamerunner"}],"output":{"name":"luxresult"}}],[11,"clone","lux::graphics","",967,{"inputs":[{"name":"stenciltype"}],"output":{"name":"stenciltype"}}],[11,"inverse","","Returns the opposite of this stencil type.",967,{"inputs":[{"name":"stenciltype"}],"output":{"name":"stenciltype"}}]],"paths":[[4,"LuxError"],[3,"MonitorId"],[3,"PlatformSpecificHeadlessBuilderAttributes"],[3,"HeadlessContext"],[3,"WindowDelegate"],[3,"PlatformSpecificWindowBuilderAttributes"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"Window"],[3,"IdRef"],[4,"Event"],[4,"TouchPhase"],[3,"Touch"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[3,"HeadlessRendererBuilder"],[3,"HeadlessContext"],[3,"WindowBuilder"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[4,"MouseCursor"],[4,"CursorState"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"WindowAttributes"],[3,"GlAttributes"],[4,"NativeMonitorId"],[4,"DynamicImage"],[3,"Quad"],[3,"NeuQuant"],[3,"BiLevel"],[4,"FilterType"],[3,"WebpDecoder"],[3,"BoolReader"],[3,"MacroBlock"],[3,"Frame"],[3,"Segment"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[4,"ColorType"],[4,"ImageError"],[3,"DirEntry"],[3,"ICODecoder"],[3,"JPEGEncoder"],[3,"Component"],[4,"JPEGState"],[3,"JPEGDecoder"],[3,"HuffTable"],[3,"HuffDecoder"],[3,"Decoder"],[3,"Encoder"],[4,"Tag"],[4,"Type"],[4,"Value"],[3,"Entry"],[4,"ByteOrder"],[3,"LZWReader"],[3,"SmartReader"],[4,"PhotometricInterpretation"],[4,"CompressionMethod"],[4,"PlanarConfiguration"],[4,"Predictor"],[3,"TIFFDecoder"],[3,"Header"],[3,"ColorMap"],[3,"TGADecoder"],[4,"ImageType"],[4,"BMPHeaderType"],[4,"Format16Bit"],[4,"FormatFullBytes"],[3,"RowIterator"],[3,"RLEInsnIterator"],[3,"BMPDecoder"],[4,"ImageFormat"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"Pixels"],[3,"PixelsMut"],[3,"EnumeratePixels"],[3,"EnumeratePixelsMut"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"Color"],[4,"PrimitiveType"],[3,"GlutinFacade"],[3,"PollEventsIter"],[3,"WaitEventsIter"],[3,"WinRef"],[3,"Context"],[3,"GlutinWindowBackend"],[3,"GlutinHeadlessBackend"],[3,"Rc"],[4,"ReadError"],[4,"CopyError"],[3,"Alloc"],[4,"MappingImpl"],[3,"Mapping"],[3,"ReadMapping"],[3,"WriteMapping"],[3,"Fences"],[3,"Inserter"],[3,"Buffer"],[3,"BufferSlice"],[3,"BufferMutSlice"],[3,"BufferAny"],[3,"BufferAnySlice"],[4,"BufferCreationError"],[4,"BufferMode"],[4,"BufferType"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[3,"Blend"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[3,"Depth"],[4,"DepthTest"],[4,"DepthClamp"],[4,"QueryType"],[4,"QueryCreationError"],[4,"ToBufferError"],[3,"RawQuery"],[3,"SamplesPassedQuery"],[3,"TimeElapsedQuery"],[3,"AnySamplesPassedQuery"],[3,"PrimitivesGeneratedQuery"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[3,"Stencil"],[4,"StencilTest"],[4,"StencilOperation"],[4,"BackfaceCullingMode"],[4,"PolygonMode"],[4,"Smooth"],[4,"ProvokingVertex"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"SamplesQueryParam"],[4,"DefaultFramebufferAttachment"],[3,"DefaultFramebuffer"],[4,"CreationError"],[3,"RenderBuffer"],[3,"RenderBufferAny"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[3,"EmptyFrameBuffer"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[4,"CreationError"],[3,"IndexBuffer"],[4,"IndicesSource"],[3,"IndexBufferSlice"],[3,"IndexBufferAny"],[3,"DrawCommandNoIndices"],[3,"DrawCommandIndices"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DrawCommandsIndicesBuffer"],[3,"NoIndices"],[4,"IndexType"],[3,"ComputeShader"],[3,"ComputeCommand"],[3,"Program"],[3,"RawProgram"],[3,"Uniform"],[3,"UniformBlock"],[4,"BlockLayout"],[3,"Attribute"],[3,"TransformFeedbackBuffer"],[3,"TransformFeedbackVarying"],[4,"TransformFeedbackMode"],[4,"OutputPrimitives"],[3,"SubroutineData"],[3,"SubroutineUniform"],[3,"Subroutine"],[4,"ShaderStage"],[3,"Shader"],[3,"UniformsStorage"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"COMPILER_GLOBAL_LOCK"],[4,"ProgramCreationError"],[4,"ProgramChooserCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"UniformBuffer"],[3,"TypelessUniformBuffer"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[3,"Sampler"],[3,"SamplerBehavior"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[4,"UniformType"],[4,"UniformValue"],[4,"LayoutMismatchError"],[4,"CreationError"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"InstancingNotSupported"],[4,"AttributeType"],[3,"TransformFeedbackSession"],[4,"TransformFeedbackSessionCreationError"],[4,"VerticesSource"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[3,"PerInstance"],[3,"ResidentTexture"],[3,"TextureAny"],[3,"TextureHandle"],[3,"BindlessTexturesNotSupportedError"],[4,"TextureCreationError"],[4,"CreationError"],[4,"BufferTextureType"],[3,"BufferTexture"],[3,"BufferTextureRef"],[3,"PixelBuffer"],[4,"Dimensions"],[3,"TextureAnyLayer"],[3,"TextureAnyMipmap"],[3,"TextureAnyLayerMipmap"],[3,"TextureAnyImage"],[4,"GetFormatError"],[4,"InternalFormat"],[4,"InternalFormatType"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"Texture1dArrayLayerMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"CompressedTexture1dArrayLayerMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"SrgbTexture1dArrayLayerMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArrayLayerMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"IntegralTexture1dArrayLayerMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"UnsignedTexture1dArrayLayerMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"DepthTexture1dArrayLayerMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"StencilTexture1dArrayLayerMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArrayLayerMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"Texture2dArrayLayerMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"CompressedTexture2dArrayLayerMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"SrgbTexture2dArrayLayerMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArrayLayerMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"IntegralTexture2dArrayLayerMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"UnsignedTexture2dArrayLayerMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"DepthTexture2dArrayLayerMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"StencilTexture2dArrayLayerMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArrayLayerMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayLayer"],[3,"Texture2dMultisampleArrayMipmap"],[3,"Texture2dMultisampleArrayLayerMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayLayer"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArrayLayerMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayLayer"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayLayer"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayLayer"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArrayLayerMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayLayer"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArrayLayerMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayLayer"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap"],[3,"Cubemap"],[3,"CubemapMipmap"],[3,"CubemapImage"],[3,"CompressedCubemap"],[3,"CompressedCubemapMipmap"],[3,"CompressedCubemapImage"],[3,"SrgbCubemap"],[3,"SrgbCubemapMipmap"],[3,"SrgbCubemapImage"],[3,"CompressedSrgbCubemap"],[3,"CompressedSrgbCubemapMipmap"],[3,"CompressedSrgbCubemapImage"],[3,"IntegralCubemap"],[3,"IntegralCubemapMipmap"],[3,"IntegralCubemapImage"],[3,"UnsignedCubemap"],[3,"UnsignedCubemapMipmap"],[3,"UnsignedCubemapImage"],[3,"DepthCubemap"],[3,"DepthCubemapMipmap"],[3,"DepthCubemapImage"],[3,"StencilCubemap"],[3,"StencilCubemapMipmap"],[3,"StencilCubemapImage"],[3,"DepthStencilCubemap"],[3,"DepthStencilCubemapMipmap"],[3,"DepthStencilCubemapImage"],[3,"CubemapArray"],[3,"CubemapArrayLayer"],[3,"CubemapArrayMipmap"],[3,"CubemapArrayLayerMipmap"],[3,"CubemapArrayImage"],[3,"CompressedCubemapArray"],[3,"CompressedCubemapArrayLayer"],[3,"CompressedCubemapArrayMipmap"],[3,"CompressedCubemapArrayLayerMipmap"],[3,"CompressedCubemapArrayImage"],[3,"SrgbCubemapArray"],[3,"SrgbCubemapArrayLayer"],[3,"SrgbCubemapArrayMipmap"],[3,"SrgbCubemapArrayLayerMipmap"],[3,"SrgbCubemapArrayImage"],[3,"CompressedSrgbCubemapArray"],[3,"CompressedSrgbCubemapArrayLayer"],[3,"CompressedSrgbCubemapArrayMipmap"],[3,"CompressedSrgbCubemapArrayLayerMipmap"],[3,"CompressedSrgbCubemapArrayImage"],[3,"IntegralCubemapArray"],[3,"IntegralCubemapArrayLayer"],[3,"IntegralCubemapArrayMipmap"],[3,"IntegralCubemapArrayLayerMipmap"],[3,"IntegralCubemapArrayImage"],[3,"UnsignedCubemapArray"],[3,"UnsignedCubemapArrayLayer"],[3,"UnsignedCubemapArrayMipmap"],[3,"UnsignedCubemapArrayLayerMipmap"],[3,"UnsignedCubemapArrayImage"],[3,"DepthCubemapArray"],[3,"DepthCubemapArrayLayer"],[3,"DepthCubemapArrayMipmap"],[3,"DepthCubemapArrayLayerMipmap"],[3,"DepthCubemapArrayImage"],[3,"StencilCubemapArray"],[3,"StencilCubemapArrayLayer"],[3,"StencilCubemapArrayMipmap"],[3,"StencilCubemapArrayLayerMipmap"],[3,"StencilCubemapArrayImage"],[3,"DepthStencilCubemapArray"],[3,"DepthStencilCubemapArrayLayer"],[3,"DepthStencilCubemapArrayMipmap"],[3,"DepthStencilCubemapArrayLayerMipmap"],[3,"DepthStencilCubemapArrayImage"],[4,"CubeLayer"],[4,"TextureKind"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"TextureCreationError"],[4,"Profile"],[3,"Capabilities"],[3,"FormatInfos"],[4,"ReleaseBehavior"],[3,"ExtensionsList"],[3,"TextureUnitState"],[3,"IndexedBufferState"],[3,"GlState"],[3,"CommandContext"],[4,"DebugCallbackBehavior"],[4,"FramebufferAttachments"],[4,"RegularAttachment"],[3,"LayeredAttachment"],[4,"DepthStencilAttachments"],[3,"FramebufferSpecificAttachments"],[3,"ValidatedAttachments"],[4,"ValidationError"],[3,"RawAttachments"],[4,"RawAttachment"],[4,"ClearBufferData"],[3,"FramebuffersContainer"],[3,"FrameBufferObject"],[3,"FormatNotSupportedError"],[4,"TextureFormatRequest"],[4,"ClientFormat"],[4,"UncompressedFloatFormat"],[4,"SrgbFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"CompressedSrgbFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"TextureFormat"],[4,"ClientFormatAny"],[4,"RequestType"],[4,"Source"],[4,"Destination"],[4,"ReadError"],[3,"SamplerObject"],[3,"SyncNotSupportedError"],[3,"SyncFence"],[3,"LinearSyncFence"],[3,"Bitsfield"],[3,"Version"],[4,"Api"],[3,"VertexAttributesSystem"],[3,"Binder"],[3,"VertexArrayObject"],[3,"FnPtr"],[3,"Gl"],[4,"Handle"],[4,"RawUniformValue"],[3,"Rect"],[3,"BlitTarget"],[4,"DrawError"],[4,"SwapBuffersError"],[3,"Frame"],[4,"GliumCreationError"],[3,"ColorVertex"],[3,"TexVertex"],[3,"UniformSpriteSheet"],[3,"NonUniformSpriteSheet"],[4,"StencilType"],[8,"Canvas"],[8,"PrimitiveCanvas"],[8,"IntoSprite"],[8,"TextureLoader"],[4,"Event"],[4,"MouseButton"],[8,"Interactive"],[8,"AbstractKey"],[3,"WindowOptions"],[8,"Colored"],[8,"Transform"],[3,"GameRunner"],[8,"Game"],[3,"EventIterator"],[3,"Ellipse"],[3,"Rectangle"],[3,"ContainedSprite"],[3,"Frame"],[3,"Window"],[3,"Sprite"],[3,"Texture"],[3,"DrawableTexture"],[3,"Loader"]]};
searchIndex['test_runner'] = {"items":[],"paths":[]};
searchIndex['image'] = {"items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[4,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",7,null],[13,"JPEG","","An Image in JPEG Format",7,null],[13,"GIF","","An Image in GIF Format",7,null],[13,"WEBP","","An Image in WEBP Format",7,null],[13,"PPM","","An Image in PPM Format",7,null],[13,"TIFF","","An Image in TIFF Format",7,null],[13,"TGA","","An Image in TGA Format",7,null],[13,"BMP","","An Image in BMP Format",7,null],[13,"ICO","","An Image in ICO Format",7,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",8,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",8,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",8,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",8,null],[5,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\nSee \"Kohonen neural networks for optimal colour quantization\"\nin \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\nfor a discussion of the algorithm.\nSee also  http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data",9,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",9,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",9,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",9,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",6,null],[13,"Triangle","","Linear Filter",6,null],[13,"CatmullRom","","Cubic Filter",6,null],[13,"Gaussian","","Gaussian Filter",6,null],[13,"Lanczos3","","Lanczos with window 3",6,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions.\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Public only because of Rust bug:\nhttps://github.com/rust-lang/rust/issues/18241\nFunctions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image.\nThis function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying\nFloyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",10,null],[10,"index_of","","Returns the index of the closed match of `color`\nin the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":{"name":"usize"}}],[10,"map_color","","Maps `color` to the closest color in the color map.",10,{"inputs":[{"name":"colormap"},{"name":"color"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[11,"index_of","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",11,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",9,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":null}],[11,"clone","image","",6,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",12,{"inputs":[{"name":"webpdecoder"},{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",12,null],[11,"read_image","","",12,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",13,null],[12,"height","","The height of the luma plane",13,null],[12,"ybuf","","The luma plane of the frame",13,null],[12,"keyframe","","Indicates whether this frame is a keyframe",13,null],[12,"for_display","","Indicates whether this frame is intended for display",13,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",13,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"clone","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",13,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",14,{"inputs":[{"name":"vp8decoder"},{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",14,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[11,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",15,{"inputs":[{"name":"ppmencoder"},{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",15,null],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream ```r```",16,{"inputs":[{"name":"pngdecoder"},{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",16,null],[11,"read_image","","",16,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to ```w```",17,{"inputs":[{"name":"pngencoder"},{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",17,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",18,{"inputs":[{"name":"icodecoder"},{"name":"r"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",18,null],[11,"read_image","","",18,{"inputs":[{"name":"icodecoder"}],"output":{"name":"imageresult"}}],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[3,"Component","","A representation of a JPEG component",null,null],[12,"id","","The Component's identifier",19,null],[12,"h","","Horizontal sampling factor",19,null],[12,"v","","Vertical sampling factor",19,null],[12,"tq","","The quantization table selector",19,null],[12,"dc_table","","Index to the Huffman DC Table",19,null],[12,"ac_table","","Index to the AC Huffman Table",19,null],[12,"dc_pred","","The dc prediction of the component",19,null],[11,"new","","Create a new encoder that writes its output to ```w```",20,{"inputs":[{"name":"jpegencoder"},{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",20,null],[11,"clone","","",19,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",21,{"inputs":[{"name":"jpegdecoder"},{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",21,null],[11,"read_image","","",21,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"imageresult"}}],[0,"gif","image","Decoding of GIF Images",null,null],[11,"from_rgba","gif::common","Creates a frame from pixels in RGBA format.",22,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",22,null],[11,"clone","","",23,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",23,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",23,{"inputs":[{"name":"disposalmethod"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",24,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",24,{"inputs":[{"name":"block"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"fmt","","",25,{"inputs":[{"name":"extension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",25,{"inputs":[{"name":"extension"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",22,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","gif::reader::decoder","",26,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"decodingerror"},{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"extensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"set_param","","",27,null],[11,"fmt","","",28,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"u16value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"bytevalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"streamingdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",32,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",32,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",32,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"fmt","gif::reader","",33,{"inputs":[{"name":"coloroutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"set_param","","",33,null],[11,"fmt","","",34,{"inputs":[{"name":"memorylimit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",34,null],[11,"new","","Creates a new decoder builder",35,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",35,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer.",36,null],[11,"buffer_size","","Output buffer size",36,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",36,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",36,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",36,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"width","","Width of the image",36,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",36,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",36,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"set_param","gif::encoder","",37,null],[11,"new_control_ext","","Constructor for control extension data.",38,{"inputs":[{"name":"extensiondata"},{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"write","","",39,null],[11,"flush","","",39,{"inputs":[{"name":"blockwriter"}],"output":{"name":"result"}}],[11,"drop","","",39,null],[11,"new","","Creates a new encoder.",40,null],[11,"write_global_palette","","Writes the global color palette.",40,null],[11,"write_frame","","Writes a frame to the image.",40,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",40,{"inputs":[{"name":"encoder"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",40,null],[11,"drop","","",40,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",22,null],[12,"dispose","","Disposal method.",22,null],[12,"transparent","","Transparent index (if available).",22,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",22,null],[12,"top","","Offset from the top border of the canvas.",22,null],[12,"left","","Offset from the left border of the canvas.",22,null],[12,"width","","Width of the frame.",22,null],[12,"height","","Height of the frame.",22,null],[12,"interlaced","","True if the image is interlaced.",22,null],[12,"palette","","Frame local color palette if available.",22,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",22,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam ```r```",41,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",41,null],[11,"read_image","","",41,{"inputs":[{"name":"decoder"}],"output":{"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",42,{"inputs":[{"name":"encoder"},{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",42,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",43,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",43,{"inputs":[{"name":"tiffdecoder"},{"name":"r"}],"output":{"name":"imageresult"}}],[11,"init","","Initializes the decoder.",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",43,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",43,null],[11,"read_image","","",43,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",44,{"inputs":[{"name":"tgadecoder"},{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",44,null],[11,"read_image","","",44,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"imageresult"}}],[0,"bmp","image","Decoding of BMP Images",null,null],[3,"BMPDecoder","image::bmp","A bmp decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream ```r```",45,{"inputs":[{"name":"bmpdecoder"},{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"colortype","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"row_len","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"read_scanline","","",45,null],[11,"read_image","","",45,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"imageresult"}}],[11,"fmt","image","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"imageerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"imageerror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"from","","",5,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",7,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",46,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",47,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",48,{"inputs":[{"name":"subimage"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",48,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",48,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",48,null],[11,"bounds","","",48,null],[11,"get_pixel","","",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"put_pixel","","",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"get_pixel_mut","","",48,{"inputs":[{"name":"subimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"clone","","",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",8,{"inputs":[{"name":"dynamicimage"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image.\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",8,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",8,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",8,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",8,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",8,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",8,null],[11,"bounds","","",8,null],[11,"get_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",8,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"rgb"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"rgb"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"rgb"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"luma"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"luma"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"luma"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"luma"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"rgba"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"rgba"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"rgba"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"lumaa"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"lumaa"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"lumaa"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",49,null],[11,"width","","The width of this image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",49,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",49,null],[11,"deref_mut","","",49,null],[11,"index","","",49,null],[11,"index_mut","","",49,null],[11,"clone","","",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",49,null],[11,"bounds","","",49,null],[11,"get_pixel","","",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",49,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"convert","","",49,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",50,{"inputs":[{"name":"frames"},{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",51,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",51,{"inputs":[{"name":"frame"},{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",51,{"inputs":[{"name":"frame"},{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",51,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",51,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",51,{"inputs":[{"name":"frame"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",51,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",51,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",50,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into ```buf``` and returns the row index",52,null],[10,"read_image","","Decodes the entire image and return it as a Vector",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",52,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",53,null],[10,"dimensions","","The width and height of this image.",53,null],[11,"width","","The width of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",53,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[10,"put_pixel","","Put a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",54,null],[10,"channel_count","","Returns the number of channels of this pixel type.",54,{"inputs":[{"name":"pixel"}],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",54,null],[10,"channels_mut","","Returns the components as a mutable slice",54,null],[10,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",54,{"inputs":[{"name":"pixel"}],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",54,{"inputs":[{"name":"pixel"}],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value",54,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.",54,{"inputs":[{"name":"pixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"},{"name":"subpixel"}],"output":{"name":"self"}}],[10,"from_slice","","Returns a view into a slice.",54,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",54,null],[10,"to_rgb","","Convert this pixel to RGB",54,{"inputs":[{"name":"pixel"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",54,{"inputs":[{"name":"pixel"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",54,{"inputs":[{"name":"pixel"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",54,{"inputs":[{"name":"pixel"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function ```f``` to each channel of this pixel.",54,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function ```f``` to each channel of this pixel.",54,{"inputs":[{"name":"pixel"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel.",54,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function ```f``` to each channel except the alpha channel.\nApply the function ```g``` to the alpha channel. Works in-place.",54,{"inputs":[{"name":"pixel"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",54,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",54,{"inputs":[{"name":"pixel"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",54,{"inputs":[{"name":"pixel"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",54,{"inputs":[{"name":"pixel"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",55,{"inputs":[{"name":"convertbuffer"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"is_animated","","Returns true if the image is animated",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",52,{"inputs":[{"name":"imagedecoder"}],"output":{"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",52,{"inputs":[{"name":"imagedecoder"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imageresult"}}],[11,"width","","The width of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",53,{"inputs":[{"name":"genericimage"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",53,{"inputs":[{"name":"genericimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",56,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[3,"PPMEncoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"Component"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[4,"DisposalMethod"],[4,"Block"],[4,"Extension"],[4,"DecodingError"],[4,"Extensions"],[4,"Decoded"],[4,"State"],[4,"U16Value"],[4,"ByteValue"],[3,"StreamingDecoder"],[4,"ColorOutput"],[3,"MemoryLimit"],[3,"Decoder"],[3,"Reader"],[4,"Repeat"],[4,"ExtensionData"],[3,"BlockWriter"],[3,"Encoder"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPDecoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex['png'] = {"items":[[3,"FrameControl","png","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",0,null],[12,"width","","Width of the following frame",0,null],[12,"height","","Height of the following frame",0,null],[12,"x_offset","","X position at which to render the following frame",0,null],[12,"y_offset","","Y position at which to render the following frame",0,null],[12,"delay_num","","Frame delay fraction numerator",0,null],[12,"delay_den","","Frame delay fraction denominator",0,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",0,null],[12,"blend_op","","Type of frame area rendering for this frame",0,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",1,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",1,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",2,null],[12,"height","","",2,null],[12,"bit_depth","","",2,null],[12,"color_type","","",2,null],[12,"interlaced","","",2,null],[12,"trns","","",2,null],[12,"palette","","",2,null],[12,"frame_control","","",2,null],[12,"animation_control","","",2,null],[3,"Transformations","","# Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"color_type","","",3,null],[12,"bit_depth","","",3,null],[12,"line_size","","",3,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","",null,null],[3,"Writer","","",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",4,null],[13,"RGB","","",4,null],[13,"Indexed","","",4,null],[13,"GrayscaleAlpha","","",4,null],[13,"RGBA","","",4,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",5,null],[13,"Two","","",5,null],[13,"Four","","",5,null],[13,"Eight","","",5,null],[13,"Sixteen","","",5,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",6,null],[13,"Header","","",6,null],[13,"ChunkBegin","","",6,null],[13,"ChunkComplete","","",6,null],[13,"AnimationControl","","",6,null],[13,"FrameControl","","",6,null],[13,"ImageData","","Decoded raw image data.",6,null],[13,"PartialChunk","","",6,null],[13,"ImageEnd","","",6,null],[4,"DecodingError","","",null,null],[13,"IoError","","",7,null],[13,"Format","","",7,null],[13,"InvalidSignature","","",7,null],[13,"CrcMismatch","","",7,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",7,null],[12,"crc_val","","Stored CRC32 value",7,null],[12,"crc_sum","","Calculated CRC32 sum",7,null],[12,"chunk","","",7,null],[13,"Other","png","",7,null],[13,"CorruptFlateStream","","",7,null],[4,"EncodingError","","",null,null],[13,"IoError","","",8,null],[13,"Format","","",8,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set.\nIf it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"save_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",6,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"decodingerror"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"decodingerror"},{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",7,{"inputs":[{"name":"decodingerror"},{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"error"},{"name":"decodingerror"}],"output":{"name":"error"}}],[11,"new","png","Creates a new StreamingDecoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",10,null],[11,"set_param","","",11,{"inputs":[{"name":"transformations"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",3,{"inputs":[{"name":"outputinfo"}],"output":{"name":"usize"}}],[11,"new","","",12,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",12,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"info","","",13,{"inputs":[{"name":"reader"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",13,null],[11,"next_row","","Returns the next processed row of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample\nof the data returned by `Reader::next_row` and Reader::frames`.",13,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame\nthat is decoded using the given input transformations.",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",13,{"inputs":[{"name":"reader"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",8,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"encodingerror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"encodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",8,{"inputs":[{"name":"encodingerror"},{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"error"},{"name":"encodingerror"}],"output":{"name":"error"}}],[11,"new","png","",14,{"inputs":[{"name":"encoder"},{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",14,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"set_param","","",4,{"inputs":[{"name":"colortype"},{"name":"encoder"}],"output":null}],[11,"set_param","","",5,{"inputs":[{"name":"bitdepth"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",15,null],[11,"write_image_data","","Writes the image data.",15,null],[11,"drop","","",15,{"inputs":[{"name":"writer"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",4,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",4,{"inputs":[{"name":"colortype"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",4,{"inputs":[{"name":"colortype"},{"name":"u8"}],"output":{"name":"option"}}],[11,"eq","","",5,{"inputs":[{"name":"bitdepth"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"bitdepth"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"bitdepth"}],"output":{"name":"bitdepth"}}],[11,"fmt","","",5,{"inputs":[{"name":"bitdepth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"bitdepth"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"framecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"animationcontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"animationcontrol"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"info"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"info"}],"output":{"name":"info"}}],[11,"size","","Size of the image",2,null],[11,"is_animated","","Returns true if the image is an APNG image.",2,{"inputs":[{"name":"info"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",2,{"inputs":[{"name":"info"}],"output":{"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",2,{"inputs":[{"name":"info"}],"output":{"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row",2,{"inputs":[{"name":"info"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",2,{"inputs":[{"name":"info"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"hash","","",11,null],[11,"cmp","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"eq","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"transformations"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"transformations"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",11,{"inputs":[{"name":"transformations"},{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"transformations"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"from_iter","","",11,{"inputs":[{"name":"transformations"},{"name":"t"}],"output":{"name":"transformations"}}],[17,"TRANSFORM_IDENTITY","","No transformation",null,null],[17,"TRANSFORM_STRIP_16","","Strip 16-bit samples to 8 bits",null,null],[17,"TRANSFORM_STRIP_ALPHA","","Discard the alpha channel",null,null],[17,"TRANSFORM_PACKING","","Expand 1, 2 and 4-bit samples to bytes",null,null],[17,"TRANSFORM_PACKSWAP","","Change order of packed pixels to LSB first",null,null],[17,"TRANSFORM_EXPAND","","Expand paletted images to RGB, expand grayscale images of\nless than 8-bit depth to 8-bit depth, and expand tRNS chunks\nto alpha channels.",null,null],[17,"TRANSFORM_INVERT_MONO","","Invert monochrome images",null,null],[17,"TRANSFORM_SHIFT","","Normalize pixels to the sBIT depth",null,null],[17,"TRANSFORM_BGR","","Flip RGB to BGR, RGBA to BGRA",null,null],[17,"TRANSFORM_SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",null,null],[17,"TRANSFORM_SWAP_ENDIAN","","Byte-swap 16-bit samples",null,null],[17,"TRANSFORM_INVERT_ALPHA","","Change alpha from opacity to transparency",null,null],[17,"TRANSFORM_STRIP_FILLER","","",null,null],[17,"TRANSFORM_STRIP_FILLER_BEFORE","","",null,null],[17,"TRANSFORM_STRIP_FILLER_AFTER","","",null,null],[17,"TRANSFORM_GRAY_TO_RGB","","",null,null],[17,"TRANSFORM_EXPAND_16","","",null,null],[17,"TRANSFORM_SCALE_16","","",null,null],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",16,{"inputs":[{"name":"parameter"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",17,{"inputs":[{"name":"hasparameters"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",17,{"inputs":[{"name":"hasparameters"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"Error"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex['inflate'] = {"items":[[3,"InflateStream","inflate","",null,null],[11,"new","","",0,{"inputs":[{"name":"inflatestream"}],"output":{"name":"inflatestream"}}],[11,"from_zlib","","",0,{"inputs":[{"name":"inflatestream"}],"output":{"name":"inflatestream"}}],[11,"update","","",0,null]],"paths":[[3,"InflateStream"]]};
searchIndex['glium'] = {"items":[[0,"os","glium::glutin","Contains traits with platform-specific methods in them.",null,null],[0,"macos","glium::glutin::os","",null,null],[8,"WindowExt","glium::glutin::os::macos","Additional methods on `Window` that are specific to MacOS.",null,null],[10,"get_nswindow","","Returns a pointer to the cocoa `NSWindow` that is used by this window.",0,null],[11,"new","glutin","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",1,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",1,null],[11,"show","","Shows the window if it was hidden.",1,null],[11,"hide","","Hides the window if it was visible.",1,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",1,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",1,null],[11,"get_inner_size","","Returns the size in points of the client area of the window.",1,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",1,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",1,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",1,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",1,null],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",1,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",1,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",1,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",1,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",1,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",1,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",1,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",1,null],[11,"get_api","","Returns the API that is currently provided by this window.",1,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",1,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",1,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",1,null],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",1,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",1,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",1,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",1,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"clone","glutin::api::cocoa::monitor","",2,{"inputs":[{"name":"monitorid"}],"output":{"name":"monitorid"}}],[11,"get_name","","",2,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","",2,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","",2,null],[11,"default","glutin::api::cocoa::headless","",3,{"inputs":[{"name":"platformspecificheadlessbuilderattributes"}],"output":{"name":"platformspecificheadlessbuilderattributes"}}],[11,"new","","",4,null],[11,"make_current","","",4,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",4,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",4,null],[11,"swap_buffers","","",4,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",4,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",4,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"drop","glutin::api::cocoa","",5,null],[11,"default","","",6,{"inputs":[{"name":"platformspecificwindowbuilderattributes"}],"output":{"name":"platformspecificwindowbuilderattributes"}}],[11,"clone","","",7,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","",7,null],[11,"next","","",8,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"new","","",10,{"inputs":[{"name":"window"},{"name":"windowattributes"},{"name":"pixelformatrequirements"},{"name":"glattributes"},{"name":"platformspecificwindowbuilderattributes"}],"output":{"name":"result"}}],[11,"set_title","","",10,null],[11,"show","","",10,null],[11,"hide","","",10,null],[11,"get_position","","",10,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","",10,null],[11,"get_inner_size","","",10,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","",10,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","",10,null],[11,"create_window_proxy","","",10,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"poll_events","","",10,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",10,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"platform_display","","",10,null],[11,"platform_window","","",10,null],[11,"set_window_resize_callback","","",10,null],[11,"set_cursor","","",10,null],[11,"set_cursor_state","","",10,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"hidpi_factor","","",10,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","",10,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"make_current","","",10,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",10,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",10,null],[11,"swap_buffers","","",10,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",10,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",10,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"drop","","",11,null],[11,"deref","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"idref"}],"output":{"name":"idref"}}],[11,"fmt","glutin::events","",12,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",13,{"inputs":[{"name":"touchphase"}],"output":{"name":"touchphase"}}],[11,"eq","","",13,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"touchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"touch"}],"output":{"name":"touch"}}],[11,"fmt","","",14,{"inputs":[{"name":"touch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",15,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",16,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"mousescrolldelta"}],"output":{"name":"mousescrolldelta"}}],[11,"fmt","","",17,{"inputs":[{"name":"mousescrolldelta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",18,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","glutin::headless","Initializes a new `HeadlessRendererBuilder` with default values.",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",19,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",19,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",20,null],[11,"get_api","","Returns the API that is currently provided by this window.",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",20,null],[11,"make_current","","",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",20,null],[11,"swap_buffers","","",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",20,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"new","glutin::window","Initializes a new `WindowBuilder` with default values.",21,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",21,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",21,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",21,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",21,{"inputs":[{"name":"windowbuilder"},{"name":"string"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",21,{"inputs":[{"name":"windowbuilder"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",21,{"inputs":[{"name":"windowbuilder"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",21,{"inputs":[{"name":"windowbuilder"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",21,{"inputs":[{"name":"windowbuilder"},{"name":"glprofile"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",21,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",21,{"inputs":[{"name":"windowbuilder"},{"name":"robustness"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",21,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",21,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request.",21,{"inputs":[{"name":"windowbuilder"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",21,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",21,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",21,{"inputs":[{"name":"windowbuilder"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",21,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means \"I don't care\".",21,{"inputs":[{"name":"windowbuilder"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",21,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",21,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",21,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",21,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",21,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"default","glutin","",1,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[11,"make_current","","",1,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",1,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",1,null],[11,"swap_buffers","","",1,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",1,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",1,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"clone","glutin::window","",22,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",22,null],[11,"next","","",23,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next","","",24,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"availablemonitorsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"get_name","","Returns a human-readable name of the monitor.",26,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",26,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",26,null],[11,"get_nswindow","glutin","",1,null],[11,"fmt","","",27,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",27,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",27,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"contexterror"}],"output":{"name":"str"}}],[11,"eq","","",29,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",29,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"glprofile"}],"output":{"name":"glprofile"}}],[11,"fmt","","",30,{"inputs":[{"name":"glprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"glrequest"}],"output":{"name":"glrequest"}}],[11,"fmt","","",31,{"inputs":[{"name":"glrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",31,{"inputs":[{"name":"glrequest"}],"output":{"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"robustness"}],"output":{"name":"robustness"}}],[11,"fmt","","",32,{"inputs":[{"name":"robustness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"releasebehavior"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",33,{"inputs":[{"name":"releasebehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"mousecursor"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",34,{"inputs":[{"name":"mousecursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"cursorstate"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",35,{"inputs":[{"name":"cursorstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",36,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"pixelformatrequirements"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"default","","",37,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",38,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"default","","",38,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"clone","","",39,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",39,{"inputs":[{"name":"glattributes"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"default","","",39,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}],[11,"eq","glutin::native_monitor","",40,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"nativemonitorid"}],"output":{"name":"nativemonitorid"}}],[3,"Window","glium::glutin","Represents an OpenGL context and the Window or environment around it.",null,null],[8,"GlContext","","Trait that describes objects that have access to an OpenGL context.",null,null],[10,"make_current","","Sets the context as the current context.",41,{"inputs":[{"name":"glcontext"}],"output":{"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",41,{"inputs":[{"name":"glcontext"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",41,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",41,{"inputs":[{"name":"glcontext"}],"output":{"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",41,{"inputs":[{"name":"glcontext"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",41,{"inputs":[{"name":"glcontext"}],"output":{"name":"pixelformat"}}],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",27,null],[13,"NotSupported","","TODO: remove this error",27,null],[13,"NoBackendAvailable","","",27,null],[13,"RobustnessNotSupported","","",27,null],[13,"OpenGlVersionNotSupported","","",27,null],[13,"NoAvailablePixelFormat","","",27,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",28,null],[13,"ContextLost","","",28,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",29,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",29,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",29,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",30,null],[13,"Core","","Include all the future-compatible functions and definitions.",30,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",31,null],[13,"Specific","","Request a specific version of a specific API.",31,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`.\nElse if OpenGL ES or WebGL is available, create a context with the\nspecified `opengles_version`.",31,null],[12,"opengl_version","glium::glutin::GlRequest","",31,null],[12,"opengles_version","","",31,null],[7,"GL_CORE","glium::glutin","The minimum core profile GL context. Useful for getting the minimum\nrequired GL version while still running on OSX, which often forbids\nthe compatibility profile features.",null,null],[4,"Robustness","","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands\nand/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your\nshaders.",32,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're\ndoing before using it. See the `GL_KHR_no_error` extension.",32,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem,\nbut if a problem occurs the behavior is implementation-defined. You are just guaranteed not\nto get a crash.",32,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not\nsupported.",32,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a\n\"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a\nway to recreate a context with the same window :-/",32,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not\nsupported.",32,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",33,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",33,null],[4,"MouseCursor","","",null,null],[13,"Default","","The platform-dependent default cursor.",34,null],[13,"Crosshair","","A simple crosshair.",34,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",34,null],[13,"Arrow","","Self explanatory.",34,null],[13,"Move","","Indicates something is to be moved.",34,null],[13,"Text","","Indicates text that may be selected or edited.",34,null],[13,"Wait","","Program busy indicator.",34,null],[13,"Help","","Help indicator (often rendered as a \"?\")",34,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast\nwith \"Wait\" the user may still interact with the program. Often rendered\nas a spinning beach ball, or an arrow with a watch or hourglass.",34,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",34,null],[13,"ContextMenu","","",34,null],[13,"NoneCursor","","",34,null],[13,"Cell","","",34,null],[13,"VerticalText","","",34,null],[13,"Alias","","",34,null],[13,"Copy","","",34,null],[13,"NoDrop","","",34,null],[13,"Grab","","",34,null],[13,"Grabbing","","",34,null],[13,"AllScroll","","",34,null],[13,"ZoomIn","","",34,null],[13,"ZoomOut","","",34,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor\nis used when the movement starts from the south-east corner of the box.",34,null],[13,"NResize","","",34,null],[13,"NeResize","","",34,null],[13,"NwResize","","",34,null],[13,"SResize","","",34,null],[13,"SeResize","","",34,null],[13,"SwResize","","",34,null],[13,"WResize","","",34,null],[13,"EwResize","","",34,null],[13,"NsResize","","",34,null],[13,"NeswResize","","",34,null],[13,"NwseResize","","",34,null],[13,"ColResize","","",34,null],[13,"RowResize","","",34,null],[4,"CursorState","","Describes how glutin handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",35,null],[13,"Hide","","The cursor will be invisible when over the window.",35,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this\nwindow and the window has exclusive access to further events regarding\nthe cursor.",35,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",36,null],[12,"color_bits","","",36,null],[12,"alpha_bits","","",36,null],[12,"depth_bits","","",36,null],[12,"stencil_bits","","",36,null],[12,"stereoscopy","","",36,null],[12,"double_buffer","","",36,null],[12,"multisampling","","",36,null],[12,"srgb","","",36,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be conisdered. If false, only software\nrenderers. `None` means \"don't care\". Default is `Some(true)`.",37,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\".\nThe default is `Some(24)`.",37,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",37,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\".\nThe default is `Some(8)`.",37,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\".\nThe default value is `Some(24)`.",37,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\".\nThe default value is `Some(8)`.",37,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer\nformats. `None` means \"don't care\". The default is `Some(true)`.",37,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers.\n`None` means \"don't care\". Default is `None`.\nA value of `Some(0)` indicates that multisampling must not be enabled.",37,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic\nformats. The default is `false`.",37,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care.\nThe default is `false`.",37,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",37,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be\nused.",38,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",38,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",38,null],[12,"monitor","","If `Some`, the window will be in fullscreen mode with the given monitor.",38,null],[12,"title","","The title of the window in the title bar.",38,null],[12,"visible","","Whether the window should be immediately visible upon creation.",38,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors\nwith alpha values different than `1.0` will produce a transparent window.",38,null],[12,"decorations","","Whether the window should have borders and bars.",38,null],[12,"multitouch","","[iOS only] Enable multitouch, see [UIView#multipleTouchEnabled]\n(https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/occ/instp/UIView/multipleTouchEnabled)",38,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",39,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",39,null],[12,"profile","","OpenGL profile to use.",39,null],[12,"debug","","Whether to enable the `debug` flag of the context.",39,null],[12,"robustness","","How the OpenGL context should detect errors.",39,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the\nscreen refreshes. This is typically used to prevent screen tearing.",39,null],[4,"Event","","",null,null],[13,"Resized","","The size of the window has changed.",12,null],[13,"Moved","","The position of the window has changed.",12,null],[13,"Closed","","The window has been closed.",12,null],[13,"DroppedFile","","A file has been dropped into the window.",12,null],[13,"ReceivedCharacter","","The window received a unicode character.",12,null],[13,"Focused","","The window gained or lost focus.",12,null],[13,"KeyboardInput","","An event from the keyboard has been received.",12,null],[13,"MouseMoved","","The cursor has moved on the window.",12,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",12,null],[13,"MouseInput","","An event from the mouse has been received.",12,null],[13,"TouchpadPressure","","Touchpad pressure event.",12,null],[13,"Awakened","","The event loop was woken up by another thread.",12,null],[13,"Refresh","","The window needs to be redrawn.",12,null],[13,"Suspended","","App has been suspended or resumed.",12,null],[13,"Touch","","Touch event has been received",12,null],[6,"ScanCode","","",null,null],[3,"Touch","","Represents touch event",null,null],[12,"phase","","",14,null],[12,"location","","",14,null],[12,"id","","unique identifier of a finger.",14,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",18,null],[13,"Key2","","The '2' key over the letters.",18,null],[13,"Key3","","The '3' key over the letters.",18,null],[13,"Key4","","The '4' key over the letters.",18,null],[13,"Key5","","The '5' key over the letters.",18,null],[13,"Key6","","The '6' key over the letters.",18,null],[13,"Key7","","The '7' key over the letters.",18,null],[13,"Key8","","The '8' key over the letters.",18,null],[13,"Key9","","The '9' key over the letters.",18,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",18,null],[13,"A","","",18,null],[13,"B","","",18,null],[13,"C","","",18,null],[13,"D","","",18,null],[13,"E","","",18,null],[13,"F","","",18,null],[13,"G","","",18,null],[13,"H","","",18,null],[13,"I","","",18,null],[13,"J","","",18,null],[13,"K","","",18,null],[13,"L","","",18,null],[13,"M","","",18,null],[13,"N","","",18,null],[13,"O","","",18,null],[13,"P","","",18,null],[13,"Q","","",18,null],[13,"R","","",18,null],[13,"S","","",18,null],[13,"T","","",18,null],[13,"U","","",18,null],[13,"V","","",18,null],[13,"W","","",18,null],[13,"X","","",18,null],[13,"Y","","",18,null],[13,"Z","","",18,null],[13,"Escape","","The Escape key, next to F1.",18,null],[13,"F1","","",18,null],[13,"F2","","",18,null],[13,"F3","","",18,null],[13,"F4","","",18,null],[13,"F5","","",18,null],[13,"F6","","",18,null],[13,"F7","","",18,null],[13,"F8","","",18,null],[13,"F9","","",18,null],[13,"F10","","",18,null],[13,"F11","","",18,null],[13,"F12","","",18,null],[13,"F13","","",18,null],[13,"F14","","",18,null],[13,"F15","","",18,null],[13,"Snapshot","","Print Screen/SysRq.",18,null],[13,"Scroll","","Scroll Lock.",18,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",18,null],[13,"Insert","","`Insert`, next to Backspace.",18,null],[13,"Home","","",18,null],[13,"Delete","","",18,null],[13,"End","","",18,null],[13,"PageDown","","",18,null],[13,"PageUp","","",18,null],[13,"Left","","",18,null],[13,"Up","","",18,null],[13,"Right","","",18,null],[13,"Down","","",18,null],[13,"Back","","The Backspace key, right over Enter.",18,null],[13,"Return","","The Enter key.",18,null],[13,"Space","","The space bar.",18,null],[13,"Numlock","","",18,null],[13,"Numpad0","","",18,null],[13,"Numpad1","","",18,null],[13,"Numpad2","","",18,null],[13,"Numpad3","","",18,null],[13,"Numpad4","","",18,null],[13,"Numpad5","","",18,null],[13,"Numpad6","","",18,null],[13,"Numpad7","","",18,null],[13,"Numpad8","","",18,null],[13,"Numpad9","","",18,null],[13,"AbntC1","","",18,null],[13,"AbntC2","","",18,null],[13,"Add","","",18,null],[13,"Apostrophe","","",18,null],[13,"Apps","","",18,null],[13,"At","","",18,null],[13,"Ax","","",18,null],[13,"Backslash","","",18,null],[13,"Calculator","","",18,null],[13,"Capital","","",18,null],[13,"Colon","","",18,null],[13,"Comma","","",18,null],[13,"Convert","","",18,null],[13,"Decimal","","",18,null],[13,"Divide","","",18,null],[13,"Equals","","",18,null],[13,"Grave","","",18,null],[13,"Kana","","",18,null],[13,"Kanji","","",18,null],[13,"LAlt","","",18,null],[13,"LBracket","","",18,null],[13,"LControl","","",18,null],[13,"LMenu","","",18,null],[13,"LShift","","",18,null],[13,"LWin","","",18,null],[13,"Mail","","",18,null],[13,"MediaSelect","","",18,null],[13,"MediaStop","","",18,null],[13,"Minus","","",18,null],[13,"Multiply","","",18,null],[13,"Mute","","",18,null],[13,"MyComputer","","",18,null],[13,"NextTrack","","",18,null],[13,"NoConvert","","",18,null],[13,"NumpadComma","","",18,null],[13,"NumpadEnter","","",18,null],[13,"NumpadEquals","","",18,null],[13,"OEM102","","",18,null],[13,"Period","","",18,null],[13,"PlayPause","","",18,null],[13,"Power","","",18,null],[13,"PrevTrack","","",18,null],[13,"RAlt","","",18,null],[13,"RBracket","","",18,null],[13,"RControl","","",18,null],[13,"RMenu","","",18,null],[13,"RShift","","",18,null],[13,"RWin","","",18,null],[13,"Semicolon","","",18,null],[13,"Slash","","",18,null],[13,"Sleep","","",18,null],[13,"Stop","","",18,null],[13,"Subtract","","",18,null],[13,"Sysrq","","",18,null],[13,"Tab","","",18,null],[13,"Underline","","",18,null],[13,"Unlabeled","","",18,null],[13,"VolumeDown","","",18,null],[13,"VolumeUp","","",18,null],[13,"Wake","","",18,null],[13,"WebBack","","",18,null],[13,"WebFavorites","","",18,null],[13,"WebForward","","",18,null],[13,"WebHome","","",18,null],[13,"WebRefresh","","",18,null],[13,"WebSearch","","",18,null],[13,"WebStop","","",18,null],[13,"Yen","","",18,null],[4,"MouseButton","","",null,null],[13,"Left","","",16,null],[13,"Right","","",16,null],[13,"Middle","","",16,null],[13,"Other","","",16,null],[4,"ElementState","","",null,null],[13,"Pressed","","",15,null],[13,"Released","","",15,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal\nand vertical directions.",17,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and\nvertical direction.",17,null],[4,"TouchPhase","","",null,null],[13,"Started","","",13,null],[13,"Moved","","",13,null],[13,"Ended","","",13,null],[13,"Cancelled","","",13,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",19,null],[12,"opengl","","The OpenGL attributes to build the context with.",19,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",21,null],[12,"opengl","","The attributes to use to create the context.",21,null],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads.",null,null],[3,"PollEventsIterator","","An iterator for the `poll_events` function.",null,null],[3,"WaitEventsIterator","","An iterator for the `wait_events` function.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[5,"get_available_monitors","","Returns the list of all available monitors.",null,{"inputs":[],"output":{"name":"availablemonitorsiter"}}],[5,"get_primary_monitor","","Returns the primary monitor of the system.",null,{"inputs":[],"output":{"name":"monitorid"}}],[4,"NativeMonitorId","","Native platform identifier for a monitor. Different platforms use fundamentally different types\nto represent a monitor ID.",null,null],[13,"Numeric","","Cocoa and X11 use a numeric identifier to represent a monitor.",40,null],[13,"Name","","Win32 uses a Unicode string to represent a monitor.",40,null],[13,"Unavailable","","Other platforms (Android) don't support monitor identification.",40,null],[3,"Blend","glium","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",42,null],[12,"alpha","","The blending function for alpha channels.",42,null],[12,"constant_value","","A constant color that can be used in the blending functions.",42,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel\non the target. Don't forget to set `depth_write` appropriately if you use a depth test.",43,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the\ndepth test.",43,null],[12,"range","","The range of possible Z values in surface coordinates.",43,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",43,null],[3,"IndexBuffer","","A list of indices loaded in the graphics card's memory.",null,null],[3,"VertexBuffer","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"LinearSyncFence","","Prototype for a `SyncFence`.",null,null],[3,"SyncFence","","Provides a way to wait for a server-side operation to be finished.",null,null],[3,"Version","","Describes a version.",null,null],[3,"Rect","","Area of a surface in pixels.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",44,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",44,null],[12,"width","","Width of the area in pixels.",44,null],[12,"height","","Height of the area in pixels.",44,null],[3,"BlitTarget","","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative.",null,null],[12,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",45,null],[12,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",45,null],[12,"width","","Width of the area in pixels. Can be negative.",45,null],[12,"height","","Height of the area in pixels. Can be negative.",45,null],[3,"Frame","","Implementation of `Surface`, targeting the default framebuffer.",null,null],[4,"Profile","","Describes the OpenGL context profile.",null,null],[13,"Core","","The context uses only future-compatible functions and definitions.",46,null],[13,"Compatibility","","The context includes all immediate mode functions and definitions.",46,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",47,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen\nbetween the source and the destination.",47,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen\nbetween the source and the destination.",47,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition\nbetween the source and the destination.",47,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",47,null],[12,"destination","","The factor to apply to the destination pixel.",47,null],[13,"Subtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the source by the destination.",47,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",47,null],[12,"destination","","The factor to apply to the destination pixel.",47,null],[13,"ReverseSubtraction","glium","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the destination by the source.",47,null],[12,"source","glium::BlendingFunction","The factor to apply to the source pixel.",47,null],[12,"destination","","The factor to apply to the destination pixel.",47,null],[4,"LinearBlendingFactor","glium","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always\ngives `0.0`.",48,null],[13,"One","","Multiply the source or destination component by one, which always\ngives you the original value.",48,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value\nin the source.",48,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",48,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value\nin the destination.",48,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",48,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",48,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of\n`SourceAlpha` and `1 - DestinationAlpha`.",48,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",48,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",48,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the\ndestination.",48,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value\nin `Blend::const_value`.",48,null],[13,"OneMinusConstantColor","","Multiply the source or destination compoent by `1.0` minus the corresponding\nvalue in `Blend::const_value`.",48,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",48,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination componet by `1.0` minus the alpha value of\n`Blend::const_value`.",48,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel\non the target.",null,null],[13,"Ignore","","Never replace the target pixel.",49,null],[13,"Overwrite","","Always replace the target pixel.",49,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",49,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",49,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",49,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",49,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",49,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",49,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil\ntest. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference\nvalue (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`),\n`CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",50,null],[13,"AlwaysFail","","The stencil test always fails.",50,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",50,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfLessOrEqual","glium","`(ref & mask) <= (stencil & mask)`",50,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfMore","glium","`(ref & mask) > (stencil & mask)`",50,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfMoreOrEqual","glium","`(ref & mask) >= (stencil & mask)`",50,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfEqual","glium","`(ref & mask) == (stencil & mask)`",50,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfNotEqual","glium","`(ref & mask) != (stencil & mask)`",50,null],[12,"mask","glium::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[4,"StencilOperation","glium","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",51,null],[13,"Zero","","Writes zero in the stencil buffer.",51,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`) in the stencil buffer.",51,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the\nmaximum, don't do anything.",51,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the\nmaximum, wrap to `0`.",51,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`,\ndon't do anything.",51,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`,\nwrap to `-1`.",51,null],[13,"Invert","","Inverts each bit of the value.",51,null],[4,"Api","","Describes an OpenGL-related API.",null,null],[13,"Gl","","Regular OpenGL.",52,null],[13,"GlEs","","OpenGL embedded system.",52,null],[4,"Handle","","Handle to a shader or a program.",null,null],[13,"Id","","A numberic identifier.",53,null],[13,"Handle","","A `GLhandleARB`.",53,null],[4,"DrawError","","Error that can happen while drawing.",null,null],[13,"NoDepthBuffer","","A depth function has been requested but no depth buffer is available.",54,null],[13,"AttributeTypeMismatch","","The type of a vertex attribute in the vertices source doesn't match what the\nprogram requires.",54,null],[13,"AttributeMissing","","One of the attributes required by the program is missing from the vertex format.",54,null],[13,"ViewportTooLarge","","The viewport's dimensions are not supported by the backend.",54,null],[13,"InvalidDepthRange","","The depth range is outside of the `(0, 1)` range.",54,null],[13,"UniformTypeMismatch","","The type of a uniform doesn't match what the program requires.",54,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",54,null],[12,"expected","","The expected type.",54,null],[13,"UniformBufferToValue","glium","Tried to bind a uniform buffer to a single uniform value.",54,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",54,null],[13,"UniformValueToBlock","glium","Tried to bind a single uniform value to a uniform block.",54,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",54,null],[13,"UniformBlockLayoutMismatch","glium","The layout of the content of the uniform buffer does not match the layout of the block.",54,null],[12,"name","glium::DrawError","Name of the block you are trying to bind.",54,null],[12,"err","","The error giving more details about the mismatch.",54,null],[13,"SubroutineUniformToValue","glium","Tried to bind a subroutine uniform like a regular uniform value.",54,null],[12,"name","glium::DrawError","Name of the uniform you are trying to bind.",54,null],[13,"SubroutineUniformMissing","glium","Not all subroutine uniforms of a shader stage were set.",54,null],[12,"stage","glium::DrawError","Shader stage with missing bindings.",54,null],[12,"expected_count","","The expected number of bindings.",54,null],[12,"real_count","","The number of bindings defined by the user.",54,null],[13,"SubroutineNotFound","glium","A non-existant subroutine was referenced.",54,null],[12,"stage","glium::DrawError","The stage the subroutine was searched for.",54,null],[12,"name","","The invalid name of the subroutine.",54,null],[13,"UnsupportedVerticesPerPatch","glium","The number of vertices per patch that has been requested is not supported.",54,null],[13,"TessellationNotSupported","","Trying to use tessellation, but this is not supported by the underlying hardware.",54,null],[13,"TessellationWithoutPatches","","Using a program which contains tessellation shaders, but without submitting patches.",54,null],[13,"SamplersNotSupported","","Trying to use a sampler, but they are not supported by the backend.",54,null],[13,"InstancesCountMismatch","","When you use instancing, all vertices sources must have the same size.",54,null],[13,"VerticesSourcesLengthMismatch","","If you don't use indices, then all vertices sources must have the same size.",54,null],[13,"TransformFeedbackNotSupported","","You requested not to draw primitives, but this is not supported by the backend.",54,null],[13,"WrongQueryOperation","","See the documentation of the `draw_parameters` module for infos.",54,null],[13,"SmoothingNotSupported","","You requested smoothing, but this is not supported by the backend.",54,null],[13,"ProvokingVertexNotSupported","","The requested provoking vertex is not supported by the backend.",54,null],[13,"RasterizerDiscardNotSupported","","Discarding rasterizer output isn't supported by the backend.",54,null],[13,"DepthClampNotSupported","","Depth clamping isn't supported by the backend.",54,null],[13,"BlendingParameterNotSupported","","One of the blending parameters is not supported by the backend.",54,null],[4,"SwapBuffersError","","Error that can happen when swapping buffers.",null,null],[13,"ContextLost","","The OpenGL context has been lost and needs to be recreated. The `Display` and all the\nobjects associated to it (textures, buffers, programs, etc.) need to be recreated from\nscratch.",55,null],[13,"AlreadySwapped","","The buffers have already been swapped.",55,null],[4,"GliumCreationError","","Error that can happen while creating a glium display.",null,null],[13,"BackendCreationError","","An error has happened while creating the backend.",56,null],[13,"IncompatibleOpenGl","","The OpenGL implementation is too old.",56,null],[5,"get_supported_glsl_version","","Given an API version, this function returns the GLSL version that the implementation is\nrequired to support.",null,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[0,"backend","","The `backend` module allows one to link between glium and the OpenGL context..",null,null],[3,"Context","glium::backend","Stores the state and information required for glium to execute commands. Most public glium\nfunctions require passing a `Rc<Context>`.",null,null],[4,"ReleaseBehavior","","Defines what happens when you change the current context.",null,null],[13,"None","","Nothing is done when using another context.",57,null],[13,"Flush","","The commands queue of the current context is flushed.",57,null],[0,"glutin_backend","","Backend implementation for the glutin library",null,null],[3,"GlutinFacade","glium::backend::glutin_backend","Facade implementation for glutin. Wraps both glium and glutin.",null,null],[3,"PollEventsIter","","Iterator for all the events received by the window.",null,null],[3,"WaitEventsIter","","Blocking iterator over all the events received by the window.",null,null],[3,"WinRef","","Borrow of the glutin window.",null,null],[3,"GlutinWindowBackend","","An implementation of the `Backend` trait for a glutin window.",null,null],[3,"GlutinHeadlessBackend","","An implementation of the `Backend` trait for a glutin headless context.",null,null],[11,"clone","","",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"glutinfacade"}}],[11,"get_context","","",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"rc"}}],[11,"next","","",59,{"inputs":[{"name":"polleventsiter"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"waiteventsiter"}],"output":{"name":"option"}}],[11,"deref","","",61,{"inputs":[{"name":"winref"}],"output":{"name":"window"}}],[11,"poll_events","","Reads all events received by the window.",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"polleventsiter"}}],[11,"wait_events","","Reads all events received by the window.",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"waiteventsiter"}}],[11,"get_window","","Returns the underlying window, or `None` if glium uses a headless context.",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"option"}}],[11,"draw","","Start drawing on the backbuffer.",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"frame"}}],[11,"deref","","",58,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"context"}}],[11,"build_glium_debug","glium::glutin","",21,{"inputs":[{"name":"windowbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"build_glium_unchecked_debug","","",21,{"inputs":[{"name":"windowbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",21,{"inputs":[{"name":"windowbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[11,"build_glium_debug","","",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"build_glium_unchecked_debug","","",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",19,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[11,"swap_buffers","glium::backend::glutin_backend","",62,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"result"}}],[11,"get_proc_address","","",62,null],[11,"get_framebuffer_dimensions","","",62,null],[11,"is_current","","",62,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",62,{"inputs":[{"name":"glutinwindowbackend"}],"output":null}],[11,"new","","Builds a new backend from the builder.",62,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"get_window","","",62,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"window"}}],[11,"poll_events","","",62,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",62,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"waiteventsiterator"}}],[11,"rebuild","","",62,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","","",63,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"result"}}],[11,"get_proc_address","","",63,null],[11,"get_framebuffer_dimensions","","",63,null],[11,"is_current","","",63,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",63,{"inputs":[{"name":"glutinheadlessbackend"}],"output":null}],[11,"new","","Builds a new backend from the builder.",63,{"inputs":[{"name":"glutinheadlessbackend"},{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[8,"Backend","glium::backend","Trait for types that can be used as a backend for a glium context.",null,null],[10,"swap_buffers","","Swaps buffers at the end of a frame.",64,{"inputs":[{"name":"backend"}],"output":{"name":"result"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",64,null],[10,"get_framebuffer_dimensions","","Returns the dimensions of the window, or screen, etc.",64,null],[10,"is_current","","Returns true if the OpenGL context is the current one in the thread.",64,{"inputs":[{"name":"backend"}],"output":{"name":"bool"}}],[10,"make_current","","Makes the OpenGL context the current context in the current thread.",64,{"inputs":[{"name":"backend"}],"output":null}],[8,"Facade","","Trait for types that provide a safe access for glium functions.",null,null],[10,"get_context","","Returns an opaque type that contains the OpenGL state, extensions, version, etc.",65,{"inputs":[{"name":"facade"}],"output":{"name":"rc"}}],[11,"swap_buffers","alloc::rc","",66,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"get_proc_address","","",66,null],[11,"get_framebuffer_dimensions","","",66,null],[11,"is_current","","",66,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_current","","",66,{"inputs":[{"name":"rc"}],"output":null}],[11,"get_context","","",66,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[0,"buffer","glium","A buffer is a memory location accessible to the video card.",null,null],[3,"Buffer","glium::buffer","Represents a view of a buffer.",null,null],[3,"BufferAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferAnySlice","","Slice of a `Buffer` without any type info.",null,null],[3,"Mapping","","A mapping of a buffer for reading and writing.",null,null],[3,"WriteMapping","","A mapping of a buffer for write only.",null,null],[3,"ReadMapping","","A mapping of a buffer for reading.",null,null],[3,"Inserter","","Allows inserting a fence in the list.",null,null],[3,"BufferView","","Represents a view of a buffer.",null,null],[3,"BufferViewSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewMutSlice","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAny","","Represents a sub-part of a buffer.",null,null],[3,"BufferViewAnySlice","","Slice of a `Buffer` without any type info.",null,null],[4,"ReadError","","Error that can happen when reading from a buffer.",null,null],[13,"NotSupported","","The backend doesn't support reading from a buffer.",67,null],[13,"ContextLost","","The context has been lost. Reading from the buffer would return garbage data.",67,null],[4,"CopyError","","Error that can happen when copying data between buffers.",null,null],[13,"NotSupported","","The backend doesn't support copying between buffers.",68,null],[4,"BufferCreationError","","Error that can happen when creating a buffer.",null,null],[13,"OutOfMemory","","Not enough memory to create the buffer.",69,null],[13,"BufferTypeNotSupported","","This type of buffer is not supported.",69,null],[4,"BufferMode","","How the buffer is created.",null,null],[13,"Default","","This is the default mode suitable for any usage. Will never be slow, will never be fast\neither.",70,null],[13,"Dynamic","","The mode to use when you modify a buffer multiple times per frame. Simiar to `Default` in\nthat it is suitable for most usages.",70,null],[13,"Persistent","","Optimized for when you modify a buffer exactly once per frame. You can modify it more than\nonce per frame, but if you modify it too often things will slow down.",70,null],[13,"Immutable","","Optimized when you will never touch the content of the buffer.",70,null],[5,"is_buffer_read_supported","","Returns true if reading from a buffer is supported by the backend.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"readerror"}],"output":{"name":"readerror"}}],[11,"fmt","","",67,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",67,{"inputs":[{"name":"readerror"}],"output":{"name":"str"}}],[11,"clone","","",68,{"inputs":[{"name":"copyerror"}],"output":{"name":"copyerror"}}],[11,"fmt","","",68,{"inputs":[{"name":"copyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"copyerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",68,{"inputs":[{"name":"copyerror"}],"output":{"name":"str"}}],[11,"deref","","",71,{"inputs":[{"name":"mapping"}],"output":{"name":"d"}}],[11,"deref_mut","","",71,{"inputs":[{"name":"mapping"}],"output":{"name":"d"}}],[11,"deref","","",72,{"inputs":[{"name":"readmapping"}],"output":{"name":"d"}}],[11,"write","","Writes the whole content.",73,{"inputs":[{"name":"writemapping"},{"name":"d"}],"output":null}],[11,"len","","Returns the length of the mapping.",73,{"inputs":[{"name":"writemapping"}],"output":{"name":"usize"}}],[11,"set","","Changes an element of the mapping.",73,{"inputs":[{"name":"writemapping"},{"name":"usize"},{"name":"d"}],"output":null}],[11,"insert","","Inserts a new fence.",74,{"inputs":[{"name":"inserter"},{"name":"commandcontext"}],"output":null}],[11,"new","","Builds a new buffer containing the given data. The size of the buffer is equal to the size\nof the data.",75,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"t"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",75,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"bool"}}],[11,"write","","Uploads some data in this buffer.",75,{"inputs":[{"name":"buffer"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",75,{"inputs":[{"name":"buffer"}],"output":null}],[11,"read","","Reads the content of the buffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"writemapping"}}],[11,"copy_to","","Copies the content of the buffer to another buffer.",75,{"inputs":[{"name":"buffer"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",75,{"inputs":[{"name":"buffer"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"slice_custom_mut","","Same as `slice_custom` but returns a mutable slice.",75,{"inputs":[{"name":"buffer"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"bufferanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",75,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",75,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in this buffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",75,{"inputs":[{"name":"buffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",75,{"inputs":[{"name":"buffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",75,{"inputs":[{"name":"buffer"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",75,{"inputs":[{"name":"buffer"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"rc"}}],[11,"write","","Uploads some data in this buffer.",76,{"inputs":[{"name":"bufferslice"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",76,{"inputs":[{"name":"bufferslice"}],"output":null}],[11,"read","","Reads the content of the buffer.",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",76,{"inputs":[{"name":"bufferslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",76,{"inputs":[{"name":"bufferslice"},{"name":"f"}],"output":{"name":"bufferslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",76,{"inputs":[{"name":"bufferslice"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",76,{"inputs":[{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"bufferslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",76,{"inputs":[{"name":"bufferslice"},{"name":"buffermutslice"}],"output":{"name":"bufferslice"}}],[11,"from","","",76,{"inputs":[{"name":"bufferslice"},{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",76,{"inputs":[{"name":"bufferslice"},{"name":"buffer"}],"output":{"name":"bufferslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",77,{"inputs":[{"name":"buffermutslice"},{"name":"t"}],"output":null}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",77,{"inputs":[{"name":"buffermutslice"}],"output":null}],[11,"read","","Reads the content of the buffer.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"result"}}],[11,"copy_to","","Copies the content of this slice to another slice.",77,{"inputs":[{"name":"buffermutslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"slice_custom","","Builds a slice that contains an element from inside the buffer.",77,{"inputs":[{"name":"buffermutslice"},{"name":"f"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"bufferanyslice"}}],[11,"len","","Returns the number of elements in this slice.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",77,{"inputs":[{"name":"buffermutslice"},{"name":"r"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",77,{"inputs":[{"name":"buffermutslice"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"buffer"}],"output":{"name":"buffermutslice"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",78,{"inputs":[{"name":"bufferany"}],"output":{"name":"bufferanyslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",78,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",78,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",78,{"inputs":[{"name":"bufferany"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",78,{"inputs":[{"name":"bufferany"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",78,{"inputs":[{"name":"bufferany"}],"output":null}],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",78,{"inputs":[{"name":"bufferany"}],"output":{"name":"result"}}],[11,"from","","",78,{"inputs":[{"name":"bufferany"},{"name":"buffer"}],"output":{"name":"bufferany"}}],[11,"drop","","",78,{"inputs":[{"name":"bufferany"}],"output":null}],[11,"fmt","","",78,{"inputs":[{"name":"bufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"bufferanyslice"}}],[11,"get_size","","Returns the number of bytes in this slice.",79,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",79,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",79,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",79,{"inputs":[{"name":"bufferanyslice"}],"output":null}],[11,"get_context","","Returns the context corresponding to this buffer.",79,{"inputs":[{"name":"bufferanyslice"}],"output":{"name":"rc"}}],[11,"fmt","","",79,{"inputs":[{"name":"bufferanyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Content","","Trait for types of data that can be put inside buffers.",null,null],[16,"Owned","","A type that holds a sized version of the content.",80,null],[10,"read","","Prepares an output buffer, then turns this buffer into an `Owned`.",80,{"inputs":[{"name":"content"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"get_elements_size","","Returns the size of each element.",80,{"inputs":[{"name":"content"}],"output":{"name":"usize"}}],[10,"to_void_ptr","","Produces a pointer to the data.",80,null],[10,"ref_from_ptr","","Builds a pointer to this type from a raw pointer.",80,null],[10,"is_size_suitable","","Returns true if the size is suitable to store a type like this.",80,{"inputs":[{"name":"content"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"buffercreationerror"}}],[11,"fmt","","",69,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",69,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"str"}}],[11,"eq","","",70,{"inputs":[{"name":"buffermode"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"buffermode"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"buffermode"}],"output":{"name":"buffermode"}}],[11,"fmt","","",70,{"inputs":[{"name":"buffermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",70,{"inputs":[{"name":"buffermode"}],"output":{"name":"buffermode"}}],[0,"debug","glium","",null,null],[3,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue.",null,null],[4,"DebugCallbackBehavior","","Describes the behavior that the debug output should have.",null,null],[13,"Ignore","","Don't do anything. This is the default behavior in release.",81,null],[13,"DebugMessageOnError","","Print a message on stdout on error, except in some circumstances like when compiling\nshaders. This is the default behavior in debug mode.",81,null],[13,"PrintAll","","Print every single output received by the driver.",81,null],[13,"Custom","","Use a custom callback.",81,null],[12,"callback","glium::debug::DebugCallbackBehavior","The function to be called.",81,null],[12,"synchronous","","Whether or not it should be called immediately (true) or asynchronously (false).",81,null],[4,"Severity","glium::debug","Severity of a debug message.",null,null],[13,"Notification","","Anything that isn't an error or performance issue.",82,null],[13,"Low","","Redundant state-change performance warning, or unimportant undefined behavior.",82,null],[13,"Medium","","Major performance warnings, shader compilation/linking warnings,\nor the use of deprecated functionality.",82,null],[13,"High","","All OpenGL Errors, shader compilation/linking errors,\nor highly-dangerous undefined behavior.",82,null],[4,"Source","","Source of a debug message.",null,null],[13,"Api","","Calls to the OpenGL API.",83,null],[13,"WindowSystem","","Calls to a window-system API.",83,null],[13,"ShaderCompiler","","A compiler for a shading language.",83,null],[13,"ThirdParty","","An application associated with Openctxt.gl.",83,null],[13,"Application","","Explicitly generated by Glium or the application.",83,null],[13,"OtherSource","","",83,null],[4,"MessageType","","Type of a debug message.",null,null],[13,"Error","","An error, typically from the API",84,null],[13,"DeprecatedBehavior","","Some behavior marked deprecated has been used",84,null],[13,"UndefinedBehavior","","Something has invoked undefined behavior",84,null],[13,"Portability","","Some functionality the user relies upon is not portable",84,null],[13,"Performance","","Code has triggered possible performance issues",84,null],[13,"Marker","","Command stream annotation",84,null],[13,"PushGroup","","Entering a debug group",84,null],[13,"PopGroup","","Leaving a debug group",84,null],[13,"Other","","Any other event",84,null],[6,"DebugCallback","","Represents a callback that can be used for the debug output feature of OpenGL.",null,null],[11,"eq","","",82,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"severity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"severity"}],"output":{"name":"severity"}}],[11,"fmt","","",83,{"inputs":[{"name":"source"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"source"}],"output":{"name":"source"}}],[11,"fmt","","",84,{"inputs":[{"name":"messagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"messagetype"}],"output":{"name":"messagetype"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",85,{"inputs":[{"name":"timestampquery"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",85,{"inputs":[{"name":"timestampquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",85,{"inputs":[{"name":"timestampquery"}],"output":{"name":"u64"}}],[0,"draw_parameters","glium","Describes miscellaneous parameters to be used when drawing.",null,null],[3,"Blend","glium::draw_parameters","Blend effect that the GPU will use for blending.",null,null],[12,"color","","The blending function for color channels.",42,null],[12,"alpha","","The blending function for alpha channels.",42,null],[12,"constant_value","","A constant color that can be used in the blending functions.",42,null],[3,"Depth","","Represents the depth parameters of a draw command.",null,null],[12,"test","","The function that the GPU will use to determine whether to write over an existing pixel\non the target. Don't forget to set `depth_write` appropriately if you use a depth test.",43,null],[12,"write","","Sets whether the GPU will write the depth values on the depth buffer if they pass the\ndepth test.",43,null],[12,"range","","The range of possible Z values in surface coordinates.",43,null],[12,"clamp","","Sets whether the depth values of samples should be clamped to `0.0` and `1.0`.",43,null],[3,"SamplesPassedQuery","","A query that allows you to know the number of samples written to the output during the\ndraw operations where this query was active.",null,null],[3,"TimeElapsedQuery","","A query that allows you to know the number of nanoseconds that have elapsed\nduring the draw operations.",null,null],[3,"PrimitivesGeneratedQuery","","Query that allows you to know the number of primitives generated by the geometry shader.\nWill stay at `0` if you use it without any active geometry shader.",null,null],[3,"AnySamplesPassedQuery","","A query type that allows you to know whether any sample has been written to the output during\nthe operations executed with this query.",null,null],[3,"TransformFeedbackPrimitivesWrittenQuery","","Query that allows you to know the number of primitives generated by transform feedback.",null,null],[3,"Stencil","","Describes the parameters that must be used for the stencil operations when drawing.",null,null],[12,"test_clockwise","","A comparison against the existing value in the stencil buffer.",86,null],[12,"reference_value_clockwise","","Reference value that is used by `stencil_test_clockwise`, `stencil_fail_operation_clockwise`,\n`stencil_pass_depth_fail_operation_clockwise` and `stencil_depth_pass_operation_clockwise`.",86,null],[12,"write_mask_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",86,null],[12,"fail_operation_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",86,null],[12,"pass_depth_fail_operation_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails\nthe depth test.",86,null],[12,"depth_pass_operation_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",86,null],[12,"test_counter_clockwise","","A comparaison against the existing value in the stencil buffer.",86,null],[12,"reference_value_counter_clockwise","","Reference value that is used by `stencil_test_counter_clockwise`,\n`stencil_fail_operation_counter_clockwise`,\n`stencil_pass_depth_fail_operation_counter_clockwise` and\n`stencil_depth_pass_operation_counter_clockwise`.",86,null],[12,"write_mask_counter_clockwise","","Allows specifying a mask when writing data on the stencil buffer.",86,null],[12,"fail_operation_counter_clockwise","","Specifies the operation to do when a fragment fails the stencil test.",86,null],[12,"pass_depth_fail_operation_counter_clockwise","","Specifies the operation to do when a fragment passes the stencil test but fails\nthe depth test.",86,null],[12,"depth_pass_operation_counter_clockwise","","Specifies the operation to do when a fragment passes both the stencil and depth tests.",86,null],[3,"DrawParameters","","Represents the parameters to use when drawing.",null,null],[12,"depth","","How the fragment will interact with the depth buffer.",87,null],[12,"stencil","","How the fragment will interact with the stencil buffer.",87,null],[12,"blend","","The effect that the GPU will use to merge the existing pixel with the pixel that is\nbeing written.",87,null],[12,"color_mask","","Allows you to disable some color components.",87,null],[12,"line_width","","Width in pixels of the lines to draw when drawing lines.",87,null],[12,"point_size","","Diameter in pixels of the points to draw when drawing points.",87,null],[12,"backface_culling","","Whether or not the GPU should filter out some faces.",87,null],[12,"polygon_mode","","How to render polygons. The default value is `Fill`.",87,null],[12,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",87,null],[12,"dithering","","Whether dithering is activated. Default value is `true`.",87,null],[12,"viewport","","The viewport to use when drawing.",87,null],[12,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",87,null],[12,"draw_primitives","","If `false`, the pipeline will stop after the primitives generation stage. The default\nvalue is `true`.",87,null],[12,"samples_passed_query","","If set, each sample (ie. usually each pixel) written to the output adds one to the\ncounter of the `SamplesPassedQuery`.",87,null],[12,"time_elapsed_query","","If set, the time it took for the GPU to execute this draw command is added to the total\nstored inside the `TimeElapsedQuery`.",87,null],[12,"primitives_generated_query","","If set, the number of primitives generated is added to the total stored inside the query.",87,null],[12,"transform_feedback_primitives_written_query","","If set, the number of vertices written by transform feedback.",87,null],[12,"condition","","If set, the commands will only be executed if the specified query contains `true` or\na number different than 0.",87,null],[12,"transform_feedback","","If set, then the generated primitives will be written back to a buffer.",87,null],[12,"smooth","","If set, then the generated primitives will be smoothed.",87,null],[12,"provoking_vertex","","In your vertex shader or geometry shader, you have the possibility to mark some output\nvaryings as `flat`. If this is the case, the value of one of the vertices will be used\nfor the whole primitive. This variable allows you to specify which vertex.",87,null],[12,"primitive_bounding_box","","Hint for the GPU of the bounding box of the geometry.",87,null],[3,"ConditionalRendering","","Condition whether to render or not.",null,null],[12,"query","","The query to use.",88,null],[12,"wait","","If true, the GPU will wait until the query result has been obtained. If false, the GPU\nis free to ignore the query and draw anyway.",88,null],[12,"per_region","","If true, only samples that match those that were written with the query active will\nbe drawn.",88,null],[4,"BlendingFunction","","Function that the GPU will use for blending.",null,null],[13,"AlwaysReplace","","Simply overwrite the destination pixel with the source pixel.",47,null],[13,"Min","","For each individual component (red, green, blue, and alpha), the minimum value is chosen\nbetween the source and the destination.",47,null],[13,"Max","","For each individual component (red, green, blue, and alpha), the maximum value is chosen\nbetween the source and the destination.",47,null],[13,"Addition","","For each individual component (red, green, blue, and alpha), a weighted addition\nbetween the source and the destination.",47,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",47,null],[12,"destination","","The factor to apply to the destination pixel.",47,null],[13,"Subtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the source by the destination.",47,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",47,null],[12,"destination","","The factor to apply to the destination pixel.",47,null],[13,"ReverseSubtraction","glium::draw_parameters","For each individual component (red, green, blue, and alpha), a weighted substraction\nof the destination by the source.",47,null],[12,"source","glium::draw_parameters::BlendingFunction","The factor to apply to the source pixel.",47,null],[12,"destination","","The factor to apply to the destination pixel.",47,null],[4,"LinearBlendingFactor","glium::draw_parameters","Indicates which value to multiply each component with.",null,null],[13,"Zero","","Multiply the source or destination component by zero, which always\ngives `0.0`.",48,null],[13,"One","","Multiply the source or destination component by one, which always\ngives you the original value.",48,null],[13,"SourceColor","","Multiply the source or destination component by its corresponding value\nin the source.",48,null],[13,"OneMinusSourceColor","","Equivalent to `1 - SourceColor`.",48,null],[13,"DestinationColor","","Multiply the source or destination component by its corresponding value\nin the destination.",48,null],[13,"OneMinusDestinationColor","","Equivalent to `1 - DestinationColor`.",48,null],[13,"SourceAlpha","","Multiply the source or destination component by the alpha value of the source.",48,null],[13,"SourceAlphaSaturate","","Multiply the source or destination component by the smallest value of\n`SourceAlpha` and `1 - DestinationAlpha`.",48,null],[13,"OneMinusSourceAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the source.",48,null],[13,"DestinationAlpha","","Multiply the source or destination component by the alpha value of the destination.",48,null],[13,"OneMinusDestinationAlpha","","Multiply the source or destination component by `1.0` minus the alpha value of the\ndestination.",48,null],[13,"ConstantColor","","Multiply the source or destination component by the corresponding value\nin `Blend::const_value`.",48,null],[13,"OneMinusConstantColor","","Multiply the source or destination compoent by `1.0` minus the corresponding\nvalue in `Blend::const_value`.",48,null],[13,"ConstantAlpha","","Multiply the source or destination component by the alpha value of `Blend::const_value`.",48,null],[13,"OneMinusConstantAlpha","","Multiply the source or destination componet by `1.0` minus the alpha value of\n`Blend::const_value`.",48,null],[4,"DepthTest","","The function that the GPU will use to determine whether to write over an existing pixel\non the target.",null,null],[13,"Ignore","","Never replace the target pixel.",49,null],[13,"Overwrite","","Always replace the target pixel.",49,null],[13,"IfEqual","","Replace if the z-value of the source is equal to the destination.",49,null],[13,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",49,null],[13,"IfMore","","Replace if the z-value of the source is more than the destination.",49,null],[13,"IfMoreOrEqual","","Replace if the z-value of the source is more than, or equal to the destination.",49,null],[13,"IfLess","","Replace if the z-value of the source is less than the destination.",49,null],[13,"IfLessOrEqual","","Replace if the z-value of the source is less than, or equal to the destination.",49,null],[4,"DepthClamp","","Specifies whether the depth value of samples should be clamped to `0.0` or `1.0`.",null,null],[13,"NoClamp","","Do not clamp. Samples with values outside of the `[0.0, 1.0]` range will be discarded.",89,null],[13,"Clamp","","Clamp the depth values. All samples will always be drawn.",89,null],[13,"ClampNear","","Depth values inferior to `0.0` will be clamped to `0.0`.",89,null],[13,"ClampFar","","Depth values superior to `1.0` will be clamped to `1.0`.",89,null],[4,"QueryCreationError","","Error that can happen when creating a query object.",null,null],[13,"NotSupported","","The given query type is not supported.",90,null],[4,"StencilTest","","Specifies which comparison the GPU will do to determine whether a sample passes the stencil\ntest. The general equation is `(ref & mask) CMP (stencil & mask)`, where `ref` is the reference\nvalue (`stencil_reference_value_clockwise` or `stencil_reference_value_counter_clockwise`),\n`CMP` is the comparison chosen, and `stencil` is the current value in the stencil buffer.",null,null],[13,"AlwaysPass","","The stencil test always passes.",50,null],[13,"AlwaysFail","","The stencil test always fails.",50,null],[13,"IfLess","","`(ref & mask) < (stencil & mask)`",50,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfLessOrEqual","glium::draw_parameters","`(ref & mask) <= (stencil & mask)`",50,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfMore","glium::draw_parameters","`(ref & mask) > (stencil & mask)`",50,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfMoreOrEqual","glium::draw_parameters","`(ref & mask) >= (stencil & mask)`",50,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfEqual","glium::draw_parameters","`(ref & mask) == (stencil & mask)`",50,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[13,"IfNotEqual","glium::draw_parameters","`(ref & mask) != (stencil & mask)`",50,null],[12,"mask","glium::draw_parameters::StencilTest","The mask that is and'ed with the reference value and stencil buffer.",50,null],[4,"StencilOperation","glium::draw_parameters","Specificies which operation the GPU will do depending on the result of the stencil test.",null,null],[13,"Keep","","Keeps the value currently in the stencil buffer.",51,null],[13,"Zero","","Writes zero in the stencil buffer.",51,null],[13,"Replace","","Writes the reference value (`stencil_reference_value_clockwise` or\n`stencil_reference_value_counter_clockwise`) in the stencil buffer.",51,null],[13,"Increment","","Increments the value currently in the stencil buffer. If the value is the\nmaximum, don't do anything.",51,null],[13,"IncrementWrap","","Increments the value currently in the stencil buffer. If the value is the\nmaximum, wrap to `0`.",51,null],[13,"Decrement","","Decrements the value currently in the stencil buffer. If the value is `0`,\ndon't do anything.",51,null],[13,"DecrementWrap","","Decrements the value currently in the stencil buffer. If the value is `0`,\nwrap to `-1`.",51,null],[13,"Invert","","Inverts each bit of the value.",51,null],[4,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling\nis purely an optimization. If you don't know what this does, just use `CullingDisabled`.",null,null],[13,"CullingDisabled","","All triangles are always drawn.",91,null],[13,"CullCounterClockwise","","Triangles whose vertices are counterclockwise won't be drawn.",91,null],[13,"CullClockwise","","Triangles whose vertices are clockwise won't be drawn.",91,null],[4,"PolygonMode","","Defines how the device should render polygons.",null,null],[13,"Point","","Only draw a single point at each vertex.",92,null],[13,"Line","","Only draw a line in the boundaries of each polygon.",92,null],[13,"Fill","","Fill the content of the polygon. This is the default mode.",92,null],[4,"Smooth","","Specifies a hint for the smoothing.",null,null],[13,"Fastest","","The most efficient option should be chosen.",93,null],[13,"Nicest","","The most correct, or highest quality, option should be chosen.",93,null],[13,"DontCare","","No preference.",93,null],[4,"ProvokingVertex","","The vertex to use for flat shading.",null,null],[13,"LastVertex","","Use the last vertex of each primitive.",94,null],[13,"FirstVertex","","Use the first vertex of each primitive.",94,null],[4,"SamplesQueryParam","","The query to use for samples counting.",null,null],[13,"SamplesPassedQuery","","A `SamplesPassedQuery`.",95,null],[13,"AnySamplesPassedQuery","","A `AnySamplesPassedQuery`.",95,null],[5,"validate","","DEPRECATED. Checks parameters and returns an error if something is wrong.",null,{"inputs":[{"name":"context"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"eq","glium","",42,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"blend"},{"name":"blend"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"blend"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"alpha_blending","","Returns a blend effect to add transparent objects over others.",42,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"default","","",42,{"inputs":[{"name":"blend"}],"output":{"name":"blend"}}],[11,"eq","","",47,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"blendingfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"blendingfunction"}],"output":{"name":"blendingfunction"}}],[11,"eq","","",48,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"linearblendingfactor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"linearblendingfactor"}],"output":{"name":"linearblendingfactor"}}],[11,"clone","","",43,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"fmt","","",43,{"inputs":[{"name":"depth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[{"name":"depth"}],"output":{"name":"depth"}}],[11,"eq","","",49,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"depthtest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"depthtest"}],"output":{"name":"depthtest"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",49,{"inputs":[{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"eq","glium::draw_parameters","",89,{"inputs":[{"name":"depthclamp"},{"name":"depthclamp"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"depthclamp"},{"name":"depthclamp"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"depthclamp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"depthclamp"}],"output":{"name":"depthclamp"}}],[11,"fmt","","",90,{"inputs":[{"name":"querycreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"querycreationerror"}],"output":{"name":"querycreationerror"}}],[11,"fmt","","",90,{"inputs":[{"name":"querycreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",90,{"inputs":[{"name":"querycreationerror"}],"output":{"name":"str"}}],[11,"fmt","","",96,{"inputs":[{"name":"samplespassedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",96,{"inputs":[{"name":"samplespassedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",96,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",96,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",96,{"inputs":[{"name":"samplespassedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",96,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"gluint"}}],[11,"fmt","","",97,{"inputs":[{"name":"timeelapsedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",97,{"inputs":[{"name":"timeelapsedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",97,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",97,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",97,{"inputs":[{"name":"timeelapsedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",97,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"gluint"}}],[11,"fmt","","",98,{"inputs":[{"name":"anysamplespassedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",98,{"inputs":[{"name":"anysamplespassedquery"},{"name":"f"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",98,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",98,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",98,{"inputs":[{"name":"anysamplespassedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",98,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"gluint"}}],[11,"fmt","","",99,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",99,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",99,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",99,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",99,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",99,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"gluint"}}],[11,"fmt","","",100,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",100,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",100,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",100,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"u32"}}],[11,"to_buffer_u32","","Writes the result of the query to a buffer when it is available.",100,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"bufferslice"}],"output":{"name":"result"}}],[11,"get_id","","",100,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"gluint"}}],[11,"fmt","","",86,{"inputs":[{"name":"stencil"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"default","","",86,{"inputs":[{"name":"stencil"}],"output":{"name":"stencil"}}],[11,"eq","glium","",50,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"stenciltest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"stenciltest"}],"output":{"name":"stenciltest"}}],[11,"eq","","",51,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"stenciloperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"stenciloperation"}],"output":{"name":"stenciloperation"}}],[11,"eq","glium::draw_parameters","",91,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"backfacecullingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"backfacecullingmode"}],"output":{"name":"backfacecullingmode"}}],[11,"eq","","",92,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"polygonmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"polygonmode"}],"output":{"name":"polygonmode"}}],[11,"eq","","",93,{"inputs":[{"name":"smooth"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"smooth"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"smooth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"smooth"}],"output":{"name":"smooth"}}],[11,"eq","","",94,{"inputs":[{"name":"provokingvertex"},{"name":"provokingvertex"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"provokingvertex"},{"name":"provokingvertex"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"provokingvertex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"provokingvertex"}],"output":{"name":"provokingvertex"}}],[11,"fmt","","",87,{"inputs":[{"name":"drawparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"clone","","",88,{"inputs":[{"name":"conditionalrendering"}],"output":{"name":"conditionalrendering"}}],[11,"fmt","","",88,{"inputs":[{"name":"conditionalrendering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"samplesqueryparam"}],"output":{"name":"samplesqueryparam"}}],[11,"fmt","","",95,{"inputs":[{"name":"samplesqueryparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",95,{"inputs":[{"name":"samplesqueryparam"},{"name":"samplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",95,{"inputs":[{"name":"samplesqueryparam"},{"name":"anysamplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"default","","",87,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[0,"framebuffer","glium","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on.",null,null],[3,"DefaultFramebuffer","glium::framebuffer","A framebuffer which has only one color attachment.",null,null],[3,"RenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"RenderBufferAny","","A RenderBuffer of indeterminate type.",null,null],[3,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target.",null,null],[3,"SimpleFrameBuffer","","A framebuffer which has only one color attachment.",null,null],[3,"MultiOutputFrameBuffer","","This struct is useless for the moment.",null,null],[3,"EmptyFrameBuffer","","A framebuffer with no attachment at all.",null,null],[4,"DefaultFramebufferAttachment","","One of the color attachments on the default framebuffer.",null,null],[13,"BackLeft","","The backbuffer for the left eye. Equivalent to the backbuffer if stereoscopy is disabled.",101,null],[13,"BackRight","","The backbuffer for the right eye. May not be present.",101,null],[13,"FrontLeft","","The frontbuffer for the left eye. Equivalent to the frontbuffer if stereoscopy is disabled.\nMay not be accessible.",101,null],[13,"FrontRight","","The frontbuffer for the right eye. May not be present or accessible.",101,null],[4,"RenderBufferCreationError","","Error while creating a render buffer.",null,null],[13,"FormatNotSupported","","The requested format is not supported.",102,null],[4,"ValidationError","","An error that can happen while validating attachments.",null,null],[13,"EmptyFramebufferObjectsNotSupported","","You requested an empty framebuffer object, but they are not supported.",103,null],[13,"EmptyFramebufferUnsupportedDimensions","","The requested characteristics of an empty framebuffer object are out of range.",103,null],[13,"DimensionsMismatchNotSupported","","The backend doesn't support attachments with various dimensions.",103,null],[13,"SamplesCountMismatch","","All attachments must have the same number of samples.",103,null],[13,"TooManyColorAttachments","","Backends only support a certain number of color attachments.",103,null],[12,"maximum","glium::framebuffer::ValidationError","Maximum number of attachments.",103,null],[12,"obtained","","Number of attachments that were given.",103,null],[4,"ColorAttachment","glium::framebuffer","Describes an attachment for a color buffer.",null,null],[13,"Texture","","A texture.",104,null],[13,"RenderBuffer","","A render buffer.",104,null],[4,"DepthAttachment","","Describes an attachment for a depth buffer.",null,null],[13,"Texture","","A texture.",105,null],[13,"RenderBuffer","","A render buffer.",105,null],[4,"StencilAttachment","","Describes an attachment for a stencil buffer.",null,null],[13,"Texture","","A texture.",106,null],[13,"RenderBuffer","","A render buffer.",106,null],[4,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer.",null,null],[13,"Texture","","A texture.",107,null],[13,"RenderBuffer","","A render buffer.",107,null],[5,"is_dimensions_mismatch_supported","","Returns true if the backend supports attachments with varying dimensions.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"defaultframebufferattachment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"defaultframebufferattachment"}],"output":{"name":"defaultframebufferattachment"}}],[11,"back_left","","Creates a `DefaultFramebuffer` with the back left buffer.",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"f"}],"output":{"name":"defaultframebuffer"}}],[11,"clear","","",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",108,null],[11,"get_depth_buffer_bits","","",108,{"inputs":[{"name":"defaultframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",108,{"inputs":[{"name":"defaultframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",108,{"inputs":[{"name":"defaultframebuffer"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"fmt","","",102,{"inputs":[{"name":"renderbuffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"renderbuffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",102,{"inputs":[{"name":"renderbuffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",102,{"inputs":[{"name":"renderbuffercreationerror"}],"output":{"name":"str"}}],[11,"from","","",102,{"inputs":[{"name":"renderbuffercreationerror"},{"name":"formatnotsupportederror"}],"output":{"name":"creationerror"}}],[11,"new","","Builds a new render buffer.",109,{"inputs":[{"name":"renderbuffer"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",109,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",109,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",109,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"gluint"}}],[11,"new","","Builds a new render buffer.",110,{"inputs":[{"name":"depthrenderbuffer"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",110,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",110,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",110,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"gluint"}}],[11,"new","","Builds a new render buffer.",111,{"inputs":[{"name":"stencilrenderbuffer"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",111,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",111,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",111,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"gluint"}}],[11,"new","","Builds a new render buffer.",112,{"inputs":[{"name":"depthstencilrenderbuffer"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"deref","","",112,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",112,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"get_id","","",112,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"gluint"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",113,null],[11,"get_samples","","Returns the number of samples of the render buffer, or `None` if multisampling isn't\nenabled.",113,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"option"}}],[11,"get_context","","Returns the context used to create this renderbuffer.",113,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"rc"}}],[11,"kind","","Returns the kind of renderbuffer.",113,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"texturekind"}}],[11,"drop","","",113,{"inputs":[{"name":"renderbufferany"}],"output":null}],[11,"get_id","","",113,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"gluint"}}],[8,"ToColorAttachment","","Trait for objects that can be used as color attachments.",null,null],[10,"to_color_attachment","","Builds the `ColorAttachment`.",114,{"inputs":[{"name":"tocolorattachment"}],"output":{"name":"colorattachment"}}],[8,"ToDepthAttachment","","Trait for objects that can be used as depth attachments.",null,null],[10,"to_depth_attachment","","Builds the `DepthAttachment`.",115,{"inputs":[{"name":"todepthattachment"}],"output":{"name":"depthattachment"}}],[8,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments.",null,null],[10,"to_stencil_attachment","","Builds the `StencilAttachment`.",116,{"inputs":[{"name":"tostencilattachment"}],"output":{"name":"stencilattachment"}}],[8,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments.",null,null],[10,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",117,{"inputs":[{"name":"todepthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[11,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"}],"output":{"name":"result"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth\nbuffer, but no stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"result"}}],[11,"depth_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"d"}],"output":{"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth\nbuffer, and a stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"depth_and_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"s"}],"output":{"name":"result"}}],[11,"stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"result"}}],[11,"depth_stencil_only","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"d"}],"output":{"name":"result"}}],[11,"clear","","",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",118,null],[11,"get_depth_buffer_bits","","",118,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",118,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",118,{"inputs":[{"name":"simpleframebuffer"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"name":"result"}}],[11,"with_depth_and_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer, and a stencil buffer.",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"d"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a stencil buffer, but no depth buffer.",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_depth_stencil_buffer","","Creates a `MultiOutputFrameBuffer` with a depth-stencil buffer.",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"f"},{"name":"i"},{"name":"d"}],"output":{"name":"result"}}],[11,"clear","","",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",119,null],[11,"get_depth_buffer_bits","","",119,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",119,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",119,{"inputs":[{"name":"multioutputframebuffer"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"is_supported","","Returns true if empty framebuffers are supported by the backend.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_layered_supported","","Returns true if layered empty framebuffers are supported by the backend.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_max_supported_width","","Returns the maximum width of empty framebuffers that the backend supports, or `None` if\nempty framebuffers are not supported.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_height","","Returns the maximum height of empty framebuffers that the backend supports, or `None` if\nempty framebuffers are not supported.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_samples","","Returns the maximum number of samples of empty framebuffers that the backend supports,\nor `None` if empty framebuffers are not supported.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"get_max_supported_layers","","Returns the maximum number of layers of empty framebuffers that the backend supports,\nor `None` if layered empty framebuffers are not supported.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"c"}],"output":{"name":"option"}}],[11,"new","","Creates a `EmptyFrameBuffer`.",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"option"},{"name":"option"},{"name":"bool"}],"output":{"name":"result"}}],[11,"clear","","",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",120,null],[11,"get_depth_buffer_bits","","",120,{"inputs":[{"name":"emptyframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",120,{"inputs":[{"name":"emptyframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",120,{"inputs":[{"name":"emptyframebuffer"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"clone","","",104,{"inputs":[{"name":"colorattachment"}],"output":{"name":"colorattachment"}}],[11,"to_color_attachment","","",104,{"inputs":[{"name":"colorattachment"}],"output":{"name":"colorattachment"}}],[11,"clone","","",105,{"inputs":[{"name":"depthattachment"}],"output":{"name":"depthattachment"}}],[11,"to_depth_attachment","","",105,{"inputs":[{"name":"depthattachment"}],"output":{"name":"depthattachment"}}],[11,"clone","","",106,{"inputs":[{"name":"stencilattachment"}],"output":{"name":"stencilattachment"}}],[11,"to_stencil_attachment","","",106,{"inputs":[{"name":"stencilattachment"}],"output":{"name":"stencilattachment"}}],[11,"clone","","",107,{"inputs":[{"name":"depthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[11,"to_depth_stencil_attachment","","",107,{"inputs":[{"name":"depthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[0,"index","glium","In order to draw, you need to provide a way for the video card to know how to link primitives\ntogether.",null,null],[3,"IndexBuffer","glium::index","A list of indices loaded in the graphics card's memory.",null,null],[3,"IndexBufferSlice","","Slice of an `IndexBuffer`.",null,null],[3,"IndexBufferAny","","An `IndexBuffer` without any type information.",null,null],[3,"DrawCommandsNoIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandNoIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of vertices to draw.",121,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",121,null],[12,"first_index","","First vertex to draw in the vertices source.",121,null],[12,"base_instance","","Numero of the first instance to draw.",121,null],[3,"DrawCommandsIndicesBuffer","","A buffer containing a list of draw commands.",null,null],[3,"DrawCommandIndices","","Represents an element in a list of draw commands.",null,null],[12,"count","","Number of indices to use in the index buffer.",122,null],[12,"instance_count","","Number of instances to draw. If it's `0`, nothing will be drawn.",122,null],[12,"first_index","","First index to draw in the index buffer.",122,null],[12,"base_vertex","","Value to add to each index.",122,null],[12,"base_instance","","Numero of the first instance to draw.",122,null],[3,"NoIndices","","Marker that can be used as an indices source when you don't need indices.",null,null],[4,"BufferCreationError","","Error that can happen while creating an index buffer.",null,null],[13,"IndexTypeNotSupported","","The type of index is not supported by the backend.",123,null],[13,"PrimitiveTypeNotSupported","","The type of primitives is not supported by the backend.",123,null],[13,"BufferCreationError","","An error happened while creating the buffer.",123,null],[4,"IndicesSource","","Describes a source of indices used for drawing.",null,null],[13,"IndexBuffer","","A buffer uploaded in video memory.",124,null],[12,"buffer","glium::index::IndicesSource","The buffer.",124,null],[12,"data_type","","Type of indices in the buffer.",124,null],[12,"primitives","","Type of primitives contained in the vertex source.",124,null],[13,"MultidrawArray","glium::index","Use a multidraw indirect buffer without indices.",124,null],[12,"buffer","glium::index::IndicesSource","The buffer.",124,null],[12,"primitives","","Type of primitives contained in the vertex source.",124,null],[13,"MultidrawElement","glium::index","Use a multidraw indirect buffer with indices.",124,null],[12,"commands","glium::index::IndicesSource","The buffer of the commands.",124,null],[12,"indices","","The buffer of the indices.",124,null],[12,"data_type","","Type of indices in the buffer.",124,null],[12,"primitives","","Type of primitives contained in the vertex source.",124,null],[13,"NoIndices","glium::index","Don't use indices. Assemble primitives by using the order in which the vertices are in\nthe vertices source.",124,null],[12,"primitives","glium::index::IndicesSource","Type of primitives contained in the vertex source.",124,null],[4,"PrimitiveType","glium::index","List of available primitives.",null,null],[13,"Points","","Each vertex is an invidiual point.",125,null],[13,"LinesList","","Vertices are grouped by chunks of two vertices. Each chunk represents a line.",125,null],[13,"LinesListAdjacency","","Vertices are grouped by chunks of four vertices. The second and third vertices of each\nchunk represents the line.",125,null],[13,"LineStrip","","Each vertex (except the last one) forms a line with the next vertex.",125,null],[13,"LineStripAdjacency","","Similar to `LineStrip`, but with an additional vertex at the beginning and at the end\nthat represent the vertices adjacent to the first and last ones.",125,null],[13,"LineLoop","","Each vertex forms a line with the next vertex. The last vertex form a line with the first\none.",125,null],[13,"TrianglesList","","Vertices are grouped by chunks of three vertices. Each chunk represents a triangle.",125,null],[13,"TrianglesListAdjacency","","Vertices are grouped by chunks of six vertices. The first, third and fifth vertices\nrepresent a triangle.",125,null],[13,"TriangleStrip","","Each vertex (except the first one and the last one) forms a triangle with the previous\nand the next vertices.",125,null],[13,"TriangleStripAdjacency","","Each even vertex forms a triangle with vertices `n+2` and `n+4`.",125,null],[13,"TriangleFan","","Starting at the second vertex, each vertex forms a triangle with the next and the first\nvertices.",125,null],[13,"Patches","","Vertices are grouped by chunks of `vertices_per_patch` vertices.",125,null],[12,"vertices_per_patch","glium::index::PrimitiveType","Number of vertices per patch.",125,null],[4,"IndexType","glium::index","Type of the indices in an index source.",null,null],[13,"U8","","u8",126,null],[13,"U16","","u16",126,null],[13,"U32","","u32",126,null],[11,"clone","","",123,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",123,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",123,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"str"}}],[11,"cause","","",123,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"option"}}],[11,"from","","",123,{"inputs":[{"name":"buffercreationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","glium","",127,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",127,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",127,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",127,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",127,null],[11,"empty","","Builds a new empty index buffer.",127,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",127,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",127,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",127,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",127,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",127,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",127,{"inputs":[{"name":"indexbuffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"deref","","",127,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",127,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"indexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"indexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"get_id","glium","",127,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"gluint"}}],[11,"from","glium::index","",124,{"inputs":[{"name":"indicessource"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"fmt","","",128,{"inputs":[{"name":"indexbufferslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",128,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",128,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",128,{"inputs":[{"name":"indexbufferslice"},{"name":"r"}],"output":{"name":"option"}}],[11,"deref","","",128,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",128,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"indexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::index","",124,{"inputs":[{"name":"indicessource"},{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"from","","",124,{"inputs":[{"name":"indicessource"},{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"fmt","","",129,{"inputs":[{"name":"indexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",129,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",129,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"indextype"}}],[11,"deref","","",129,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"bufferany"}}],[11,"deref_mut","","",129,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"bufferany"}}],[11,"from","","",129,{"inputs":[{"name":"indexbufferany"},{"name":"indexbuffer"}],"output":{"name":"indexbufferany"}}],[11,"from","","",124,{"inputs":[{"name":"indicessource"},{"name":"indexbufferany"}],"output":{"name":"indicessource"}}],[11,"clone","","",121,{"inputs":[{"name":"drawcommandnoindices"}],"output":{"name":"drawcommandnoindices"}}],[11,"fmt","","",121,{"inputs":[{"name":"drawcommandnoindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",121,{"inputs":[{"name":"drawcommandnoindices"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",121,{"inputs":[{"name":"drawcommandnoindices"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",122,{"inputs":[{"name":"drawcommandindices"}],"output":{"name":"drawcommandindices"}}],[11,"fmt","","",122,{"inputs":[{"name":"drawcommandindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",122,{"inputs":[{"name":"drawcommandindices"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",122,{"inputs":[{"name":"drawcommandindices"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"empty","","Builds an empty buffer.",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can\nbe passed to the `draw()` function.",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"primitivetype"}],"output":{"name":"indicessource"}}],[11,"deref","","",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",130,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"buffermutslice"}}],[11,"empty","glium::index","Builds an empty buffer.",131,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",131,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",131,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",131,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can\nbe passed to the `draw()` function.",131,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"deref","","",131,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",131,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"drawcommandsindicesbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"drawcommandsindicesbuffer"}],"output":{"name":"buffermutslice"}}],[8,"Index","glium::index","An index from the index buffer.",null,null],[10,"get_type","","Returns the `IndexType` corresponding to this type.",132,{"inputs":[{"name":"index"}],"output":{"name":"indextype"}}],[11,"is_supported","","Returns true if this type of index is supported by the backend.",132,{"inputs":[{"name":"index"},{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"indicessource"}],"output":{"name":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",124,{"inputs":[{"name":"indicessource"}],"output":{"name":"primitivetype"}}],[11,"eq","","",125,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",125,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_supported","","Returns true if the backend supports this type of primitives.",125,{"inputs":[{"name":"primitivetype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"noindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"noindices"}],"output":{"name":"noindices"}}],[11,"from","","",124,{"inputs":[{"name":"indicessource"},{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"from","","",124,{"inputs":[{"name":"indicessource"},{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"eq","","",126,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"fmt","","",126,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",126,{"inputs":[{"name":"indextype"}],"output":{"name":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",126,{"inputs":[{"name":"indextype"},{"name":"c"}],"output":{"name":"bool"}}],[0,"pixel_buffer","glium","DEPRECATED. Moved to the `texture` module.",null,null],[0,"program","","",null,null],[3,"ComputeShader","glium::program","A combination of compute shaders linked together.",null,null],[3,"ComputeCommand","","Represents a compute shader command waiting to be dispatched.",null,null],[12,"num_groups_x","","Number of X groups.",134,null],[12,"num_groups_y","","Number of Y groups.",134,null],[12,"num_groups_z","","Number of Z groups.",134,null],[3,"Program","","A combination of shaders linked together.",null,null],[3,"Uniform","","Information about a uniform (except its name).",null,null],[12,"location","","The location of the uniform.",135,null],[12,"ty","","Type of the uniform.",135,null],[12,"size","","If it is an array, the number of elements.",135,null],[3,"UniformBlock","","Information about a uniform block (except its name).",null,null],[12,"id","","Indentifier of the block.",136,null],[12,"initial_binding","","Initial bind point of the block.",136,null],[12,"size","","Size in bytes of the data in the block.",136,null],[12,"layout","","Layout of the block.",136,null],[3,"Attribute","","Information about an attribute of a program (except its name).",null,null],[12,"location","","The index of the uniform.",137,null],[12,"ty","","Type of the attribute.",137,null],[12,"size","","Number of elements of the attribute.",137,null],[3,"TransformFeedbackVarying","","Describes a varying that is being output with transform feedback.",null,null],[12,"name","","Name of the variable.",138,null],[12,"offset","","Number of bytes between the start of the first element and the start of this one.",138,null],[12,"size","","Size in bytes of this value.",138,null],[12,"ty","","Type of the value.",138,null],[3,"TransformFeedbackBuffer","","Describes the layout of a buffer that can receive transform feedback output.",null,null],[12,"id","","Slot of this buffer.",139,null],[12,"elements","","List of elements inside the buffer.",139,null],[12,"stride","","Size in bytes between two consecutive elements.",139,null],[3,"SubroutineData","","Contains all subroutine data of a program.",null,null],[12,"location_counts","","Number of subroutine uniform locations per shader stage.\nThis is *not* equal to the number of subroutine uniforms per stage,\nbecause users can use `#layout(location=...)`.",140,null],[12,"subroutine_uniforms","","The list of all subroutine uniforms of the program stored in a structured way to enable fast lookups.\nA subroutine uniform is uniquely defined by a name and a shader stage.",140,null],[3,"SubroutineUniform","","Information about a Subroutine Uniform (except name)",null,null],[12,"index","","The index of the subroutine uniform.\nNeeded to query information from the OpenGL backend.",141,null],[12,"location","","The location of the uniform.\nThis is used to bind subroutines to this subroutine uniform.",141,null],[12,"size","","If the uniform is an array, the size of the array.",141,null],[12,"compatible_subroutines","","A list of subroutines that can potentially be used with this uniform.",141,null],[3,"SourceCode","","Represents the source code of a program.",null,null],[12,"vertex_shader","","Source code of the vertex shader.",142,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",142,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",142,null],[12,"geometry_shader","","Source code of the optional geometry shader.",142,null],[12,"fragment_shader","","Source code of the fragment shader.",142,null],[3,"Binary","","Represents the compiled binary data of a program.",null,null],[12,"format","","An implementation-defined format.",143,null],[12,"content","","The binary data.",143,null],[4,"BlockLayout","","Layout of a shader storage buffer or a uniform buffer.",null,null],[13,"Struct","","Multiple elements, each having a name.",144,null],[12,"members","glium::program::BlockLayout","The list of elements, with `name`/`layout` pairs.",144,null],[13,"BasicType","glium::program","A basic element.",144,null],[12,"ty","glium::program::BlockLayout","Type of data.",144,null],[12,"offset_in_buffer","","Offset of this element in bytes from the start of the buffer.",144,null],[13,"Array","glium::program","A fixed-size array.",144,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",144,null],[12,"length","","Number of elements in the array.",144,null],[13,"DynamicSizedArray","glium::program","An array whose size isn't known at compile-time. Can only be used as the last element of\na buffer.",144,null],[12,"content","glium::program::BlockLayout","Type of data of each element.",144,null],[4,"OutputPrimitives","glium::program","Type of primitives that is being output by transform feedback.",null,null],[13,"Points","","Points.",145,null],[13,"Lines","","Lines.",145,null],[13,"Triangles","","Triangles.",145,null],[13,"Quads","","Quads.",145,null],[4,"TransformFeedbackMode","","Type of transform feedback. Only used with the legacy interface.",null,null],[13,"Interleaved","","Each value is interleaved in the same buffer.",146,null],[13,"Separate","","Each value will go in a separate buffer.",146,null],[4,"ShaderStage","","The different stages of the program pipeline.",null,null],[13,"Vertex","","",147,null],[13,"Fragment","","",147,null],[13,"TessellationControl","","",147,null],[13,"TessellationEvaluation","","",147,null],[13,"Geometry","","",147,null],[4,"ProgramCreationError","","Error that can be triggered when creating a `Program`.",null,null],[13,"CompilationError","","Error while compiling one of the shaders.",148,null],[13,"LinkingError","","Error while linking the program.",148,null],[13,"ShaderTypeNotSupported","","One of the requested shader types is not supported by the backend.",148,null],[13,"CompilationNotSupported","","The OpenGL implementation doesn't provide a compiler.",148,null],[13,"TransformFeedbackNotSupported","","You have requested transform feedback varyings, but transform feedback is not supported\nby the backend.",148,null],[13,"PointSizeNotSupported","","You have requested point size setting from the shader, but it's not\nsupported by the backend.",148,null],[13,"BinaryHeaderError","","The glium-specific binary header was not found or is corrupt.",148,null],[4,"ProgramChooserCreationError","","Error type that is returned by the `program!` macro.",null,null],[13,"NoVersion","","No available version has been found.",149,null],[13,"ProgramCreationError","","A version has been found but it triggered the given error.",149,null],[4,"GetBinaryError","","Error while retreiving the binary representation of a program.",null,null],[13,"NotSupported","","The backend doesn't support binary.",150,null],[13,"NoFormats","","The backend does not supply any binary formats.",150,null],[4,"ProgramCreationInput","","Input when creating a program.",null,null],[13,"SourceCode","","Use GLSL source code.",151,null],[12,"vertex_shader","glium::program::ProgramCreationInput","Source code of the vertex shader.",151,null],[12,"tessellation_control_shader","","Source code of the optional tessellation control shader.",151,null],[12,"tessellation_evaluation_shader","","Source code of the optional tessellation evaluation shader.",151,null],[12,"geometry_shader","","Source code of the optional geometry shader.",151,null],[12,"fragment_shader","","Source code of the fragment shader.",151,null],[12,"transform_feedback_varyings","","The list of variables and mode to use for transform feedback.",151,null],[12,"outputs_srgb","","Whether the fragment shader outputs colors in `sRGB` or `RGB`. This is false by default,\nmeaning that the program outputs `RGB`.",151,null],[12,"uses_point_size","","Whether the shader uses point size.",151,null],[13,"Binary","glium::program","Use a precompiled binary.",151,null],[12,"data","glium::program::ProgramCreationInput","The data.",151,null],[12,"outputs_srgb","","See `SourceCode::outputs_srgb`.",151,null],[12,"uses_point_size","","Whether the shader uses point size.",151,null],[5,"is_geometry_shader_supported","glium::program","Returns true if the backend supports geometry shaders.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_tessellation_shader_supported","","Returns true if the backend supports tessellation shaders.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_binary_supported","","Returns true if the backend supports creating and retreiving binary format.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_subroutine_supported","","Returns true if the backend supports shader subroutines.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported","","Returns true if the backend supports compute shaders.",152,{"inputs":[{"name":"computeshader"},{"name":"c"}],"output":{"name":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",152,{"inputs":[{"name":"computeshader"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",152,{"inputs":[{"name":"computeshader"},{"name":"f"},{"name":"binary"}],"output":{"name":"result"}}],[11,"execute","","Executes the compute shader.",152,{"inputs":[{"name":"computeshader"},{"name":"u"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"execute_indirect","","Executes the compute shader.",152,{"inputs":[{"name":"computeshader"},{"name":"u"},{"name":"bufferslice"}],"output":null}],[11,"get_binary","","Returns the program's compiled binary.",152,{"inputs":[{"name":"computeshader"}],"output":{"name":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",152,{"inputs":[{"name":"computeshader"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",152,{"inputs":[{"name":"computeshader"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",152,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",152,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"fmt","","",152,{"inputs":[{"name":"computeshader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",152,{"inputs":[{"name":"computeshader"}],"output":{"name":"handle"}}],[11,"clone","","",134,{"inputs":[{"name":"computecommand"}],"output":{"name":"computecommand"}}],[11,"fmt","","",134,{"inputs":[{"name":"computecommand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",134,{"inputs":[{"name":"computecommand"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",134,{"inputs":[{"name":"computecommand"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"new","glium","Builds a new program.",153,{"inputs":[{"name":"program"},{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",153,{"inputs":[{"name":"program"},{"name":"f"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",153,{"inputs":[{"name":"program"}],"output":{"name":"result"}}],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",153,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",153,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",153,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",153,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",153,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat`\nand `stride`.",153,{"inputs":[{"name":"program"},{"name":"vertexformat"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it\ndepends on the vertex/index data passed when drawing.",153,{"inputs":[{"name":"program"}],"output":{"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",153,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"has_tessellation_control_shader","","Returns true if the program contains a tessellation control stage.",153,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"has_tessellation_evaluation_shader","","Returns true if the program contains a tessellation evaluation stage.",153,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"has_geometry_shader","","Returns true if the program contains a geometry shader.",153,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",153,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",153,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",153,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",153,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_subroutine_uniforms","","Returns the subroutine uniforms of this program.",153,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",153,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_id","","",153,{"inputs":[{"name":"program"}],"output":{"name":"handle"}}],[11,"clone","glium::program","",135,{"inputs":[{"name":"uniform"}],"output":{"name":"uniform"}}],[11,"fmt","","",135,{"inputs":[{"name":"uniform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"uniformblock"}],"output":{"name":"uniformblock"}}],[11,"fmt","","",136,{"inputs":[{"name":"uniformblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"blocklayout"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"blocklayout"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"blocklayout"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",144,{"inputs":[{"name":"blocklayout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",137,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"transformfeedbackbuffer"}],"output":{"name":"transformfeedbackbuffer"}}],[11,"fmt","","",139,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"transformfeedbackvarying"}],"output":{"name":"transformfeedbackvarying"}}],[11,"fmt","","",138,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"transformfeedbackmode"}],"output":{"name":"transformfeedbackmode"}}],[11,"fmt","","",146,{"inputs":[{"name":"transformfeedbackmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"outputprimitives"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"outputprimitives"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"outputprimitives"}],"output":{"name":"outputprimitives"}}],[11,"fmt","","",145,{"inputs":[{"name":"outputprimitives"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"subroutinedata"}],"output":{"name":"subroutinedata"}}],[11,"fmt","","",140,{"inputs":[{"name":"subroutinedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"subroutineuniform"}],"output":{"name":"subroutineuniform"}}],[11,"fmt","","",141,{"inputs":[{"name":"subroutineuniform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"eq","","",147,{"inputs":[{"name":"shaderstage"},{"name":"shaderstage"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"shaderstage"},{"name":"shaderstage"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"shaderstage"}],"output":{"name":"shaderstage"}}],[11,"fmt","","",147,{"inputs":[{"name":"shaderstage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_enum","","Converts the `ShaderStage` to its GLenum equivalent",147,{"inputs":[{"name":"shaderstage"}],"output":{"name":"glenum"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",154,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",154,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",154,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",154,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",154,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",154,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",155,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",155,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",155,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",155,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",155,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",155,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",156,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",157,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",158,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",159,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",160,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",161,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","glium","Returns true if the boxed type is the same as `T`",162,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",162,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",162,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",162,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",162,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",162,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",162,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",162,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",162,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",162,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",162,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",162,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",163,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"next_back","","",163,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"shl","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",164,null],[11,"shr","","",164,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"add","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",164,null],[11,"sub","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",164,null],[11,"mul","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",164,null],[11,"div","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",164,null],[11,"rem","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",164,null],[11,"not","","",164,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",164,null],[11,"bitor","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",164,null],[11,"bitand","","",164,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",164,null],[11,"clone","std::thread::local","",165,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",165,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",166,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",166,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",167,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",167,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",168,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",168,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",169,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",169,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",169,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",170,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",170,null],[11,"get","","",170,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",171,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",171,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",171,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",171,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",172,null],[11,"name","","Gets the thread's name.",172,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",172,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",172,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",173,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",173,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",174,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",175,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",176,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",176,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",176,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",178,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",178,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",175,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",175,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",175,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",175,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",175,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",175,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",175,null],[11,"next","","",178,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",178,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",178,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",178,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",177,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",177,null],[11,"take","","Removes this bucket's key and value from the hashtable.",177,null],[11,"replace","","",177,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",177,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",177,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",177,null],[11,"expect_full","","",179,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",180,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",180,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",181,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",182,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",182,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",183,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",184,null],[11,"len","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",185,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",185,null],[11,"len","","",185,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",186,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",186,null],[11,"len","","",186,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",187,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"len","","",187,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",187,null],[11,"clone","","",181,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",181,null],[11,"clone","std::collections::hash::map","",188,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",189,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",189,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",189,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",189,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",189,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",189,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",189,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",189,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",189,null],[11,"get","","Returns a reference to the value corresponding to the key.",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",189,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",189,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",190,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",191,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",192,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",189,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",190,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",190,null],[11,"len","","",190,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",193,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",193,null],[11,"len","","",193,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",194,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",194,null],[11,"len","","",194,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",191,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",191,null],[11,"len","","",191,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",192,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",192,null],[11,"len","","",192,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",195,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",195,null],[11,"len","","",195,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",196,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",196,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",197,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",197,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",197,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",197,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",197,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",198,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",189,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"clone","","",199,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",199,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"build_hasher","","",199,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",199,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",189,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",189,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",200,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",200,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",200,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",200,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",200,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",200,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",200,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",200,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",200,null],[11,"contains","","Returns `true` if the set contains a value.",200,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",200,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",200,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",200,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",200,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",200,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",200,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",200,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",200,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",200,null],[11,"extend","","",200,null],[11,"default","","",200,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",200,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",201,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",201,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"len","","",201,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",202,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",202,null],[11,"len","","",202,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",203,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"len","","",203,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",204,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",204,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",204,null],[11,"clone","","",205,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",205,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",205,null],[11,"clone","","",206,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",206,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",206,null],[11,"clone","","",207,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",207,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",207,null],[11,"hasher","std::collections::hash::state","",208,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",208,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",208,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",209,null],[11,"default","","",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",209,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",209,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",209,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",209,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",209,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",209,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",209,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",209,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",209,null],[11,"drop","","",210,null],[11,"clone","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",211,null],[11,"next_back","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",212,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",212,null],[11,"next_back","","",212,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",213,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",213,null],[11,"next_back","","",213,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",209,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",214,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",209,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",209,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",209,null],[11,"extend","","",209,null],[11,"clone","collections::linked_list","",215,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",216,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",217,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",217,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",218,null],[11,"iter","","Provides a forward iterator.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",218,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",218,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",218,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",218,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",218,null],[11,"next","","",215,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",215,null],[11,"next_back","","",215,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",219,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",219,null],[11,"next_back","","",219,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",219,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",219,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",216,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",216,null],[11,"next_back","","",216,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",218,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",218,null],[11,"extend","","",218,null],[11,"eq","","",218,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",218,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",218,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",218,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",218,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",218,null],[11,"clone","collections::vec_deque","",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",220,null],[11,"default","","",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",220,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",220,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",220,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",220,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",220,null],[11,"iter","","Returns a front-to-back iterator.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",220,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",220,null],[11,"len","","Returns the number of elements in the `VecDeque`.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",220,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",220,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",220,null],[11,"push_back","","Appends an element to the back of a buffer",220,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",220,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",220,null],[11,"retain","","Retains only the elements specified by the predicate.",220,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",220,null],[11,"clone","","",221,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",221,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"next_back","","",221,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",222,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"next_back","","",222,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",223,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",223,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",223,null],[11,"next_back","","",223,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",224,null],[11,"next","","",224,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",224,null],[11,"next_back","","",224,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",220,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",220,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",220,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",220,null],[11,"index","","",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",220,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",220,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",220,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",220,null],[11,"extend","","",220,null],[11,"fmt","","",220,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",225,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",225,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",225,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",225,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",225,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",225,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",225,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",226,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"next","","",227,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"clone","","",228,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",228,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",228,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",228,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",229,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"fmt","","",230,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",230,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",231,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"len","","",231,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",232,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"len","","",232,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",233,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",233,null],[11,"cmp","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",234,null],[11,"fmt","","",235,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",235,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",236,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",233,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",233,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",233,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",233,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",233,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",233,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",233,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",233,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",233,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",234,null],[11,"as_ptr","","Returns the inner pointer to this C string.",234,null],[11,"to_bytes","","Converts this C string to a byte slice.",234,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",234,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",234,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",234,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",233,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",233,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",214,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",234,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",233,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",235,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",235,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",235,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",235,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",237,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",236,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",236,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",236,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",236,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",236,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",234,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",234,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",234,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",234,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",233,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",233,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",234,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",233,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",238,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",238,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",238,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",238,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",238,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",238,null],[11,"from","","",238,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",238,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",238,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",239,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",239,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",239,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",239,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",239,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",239,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",238,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",238,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",238,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",238,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",238,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",238,null],[11,"eq","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",239,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",239,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",239,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",239,null],[11,"fmt","","",239,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",238,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",239,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",239,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",238,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",240,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",242,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",243,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",243,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",243,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",243,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",244,null],[11,"eq","","",244,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",244,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",245,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",245,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",245,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",245,null],[11,"read_to_end","","",245,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",245,null],[11,"flush","","",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",245,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",242,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",242,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",242,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",242,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",242,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",242,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",242,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",241,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",241,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",241,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",241,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",241,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",243,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",243,null],[11,"is_dir","","Test whether this file type represents a directory.",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",246,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",247,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",247,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",247,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",247,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",248,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",249,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",249,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",249,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",250,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",250,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",250,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",250,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",250,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",250,null],[11,"fill_buf","","",250,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",250,null],[11,"fmt","","",250,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",250,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",251,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",252,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",252,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",252,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",252,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",252,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",252,null],[11,"flush","","",252,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",252,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",252,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",252,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",251,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",251,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",237,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",251,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",251,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",253,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",253,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",253,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",253,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",253,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",253,null],[11,"flush","","",253,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",253,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",254,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",254,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",254,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",254,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",254,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",254,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",254,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",254,null],[11,"seek","","",254,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",254,null],[11,"fill_buf","","",254,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",254,null],[11,"write","","",254,null],[11,"flush","","",254,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",254,null],[11,"flush","","",254,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",254,null],[11,"flush","","",254,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",237,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",255,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",256,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",256,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",256,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",256,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",237,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",237,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",237,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",237,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",237,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",237,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",237,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",237,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",257,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",237,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",237,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",237,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",155,null],[11,"read_to_end","","",155,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",155,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",155,null],[11,"write","","",155,null],[11,"flush","","",155,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",155,null],[11,"write_fmt","","",155,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",155,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",155,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",155,null],[11,"read_until","","",155,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",155,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",214,null],[11,"write_all","","",214,null],[11,"flush","","",214,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",258,null],[11,"get","","",258,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",259,null],[11,"fill_buf","","",259,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",259,null],[11,"read","","",260,null],[11,"write","","",261,null],[11,"flush","","",261,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",262,null],[11,"write","","",263,null],[11,"flush","","",263,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",264,null],[11,"flush","","",264,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",265,null],[11,"flush","","",265,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",265,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",266,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",266,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",266,null],[11,"read_to_end","","",266,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",266,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",266,null],[11,"read","","",267,null],[11,"read_to_end","","",267,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",267,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",267,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",268,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",268,null],[11,"flush","","",268,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",268,null],[11,"write_fmt","","",268,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",269,null],[11,"flush","","",269,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",270,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",270,null],[11,"flush","","",270,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",270,null],[11,"write_fmt","","",270,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",271,null],[11,"flush","","",271,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",272,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",272,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",272,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",273,null],[11,"flush","","",273,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",274,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",275,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",275,null],[11,"fill_buf","","",275,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",275,null],[11,"read","","",276,null],[11,"next","","",277,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",278,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",279,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",278,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",278,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",278,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",280,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",281,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",282,null],[11,"fmt","","",282,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",282,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",282,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",283,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",283,null],[11,"clone","","",283,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",283,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",283,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",284,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",284,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",282,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",284,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",284,null],[11,"partial_cmp","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",285,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",285,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",285,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",285,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",285,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",285,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",285,null],[11,"partial_cmp","","",285,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",285,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",286,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",286,null],[11,"eq","","",286,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",286,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",286,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",286,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",286,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",286,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",287,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",287,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",287,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",288,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",288,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",288,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",288,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",288,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",286,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",287,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",288,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",287,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",288,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",287,null],[11,"hash","","",288,null],[11,"to_socket_addrs","","",286,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",287,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",288,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",289,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",289,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",289,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",289,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",289,null],[11,"read_to_end","","",289,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",289,null],[11,"flush","","",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",290,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",290,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",290,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",290,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",290,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",291,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",290,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",292,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",292,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",292,null],[11,"local_addr","","Returns the socket address that this socket was created from.",292,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",292,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",292,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",292,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",292,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",292,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",282,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",284,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",285,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",287,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",288,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",286,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",293,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",293,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",293,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",293,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",294,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",294,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",294,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",295,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",296,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",245,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",245,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",245,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",290,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",292,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",289,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",290,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",292,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",289,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",290,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",292,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",238,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",238,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",239,null],[11,"as_bytes","","",239,null],[11,"mode","std::fs","",243,{"inputs":[{"name":"permissions"}],"output":{"name":"u16"}}],[11,"set_mode","","",243,null],[11,"from_mode","","",243,{"inputs":[{"name":"permissions"},{"name":"u16"}],"output":{"name":"permissions"}}],[11,"mode","","",242,{"inputs":[{"name":"openoptions"},{"name":"u16"}],"output":{"name":"openoptions"}}],[11,"dev","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"ino","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"nlink","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"uid","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"size","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"blocks","","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",244,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",247,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",249,{"inputs":[{"name":"dirbuilder"},{"name":"u16"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",297,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",297,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",297,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",298,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",299,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",300,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",301,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",302,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",300,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",301,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",302,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",173,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",173,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",303,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",303,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",303,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",304,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",304,null],[11,"fmt","","",304,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",304,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",304,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",305,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",305,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",306,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",306,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",306,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",306,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",306,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",306,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",306,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",306,null],[11,"fmt","","",307,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",307,null],[11,"cmp","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",307,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",307,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",307,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",307,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",308,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",309,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",308,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",308,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",308,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",308,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",309,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",309,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",309,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",309,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",309,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",308,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",308,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",308,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",308,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",308,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",310,null],[11,"pop","","Truncate `self` to `self.parent()`.",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",310,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",310,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",310,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",310,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",310,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",310,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",310,null],[11,"fmt","","",310,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",311,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",311,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",311,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",311,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",311,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",311,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",311,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",311,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",311,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",311,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",311,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",311,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",311,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",311,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",311,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",311,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",311,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",311,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",311,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",311,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",311,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",311,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",311,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",311,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",311,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",311,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",311,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",311,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",311,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",311,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",311,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",312,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",312,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",311,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",310,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",310,null],[11,"partial_cmp","","",310,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",310,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",313,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",313,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",313,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",311,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",311,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",311,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",311,null],[11,"partial_cmp","","",311,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",311,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",311,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",239,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",238,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",240,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",310,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",310,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",311,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",310,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",312,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",311,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",312,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",312,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",310,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",313,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",313,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",300,null],[11,"flush","","",300,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",301,null],[11,"read","","",302,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",297,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",297,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",297,null],[11,"env","","Inserts or updates an environment variable mapping.",297,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",297,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",297,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",297,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",297,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",297,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",297,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",297,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",297,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",297,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",297,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",315,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",315,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",315,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",299,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",299,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",299,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",298,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",298,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",298,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",298,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",298,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",298,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",316,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",316,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",316,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",316,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",317,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",317,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",317,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",317,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",318,null],[11,"new","std::sync::mpsc::oneshot","",319,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",319,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",319,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",319,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",319,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",319,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",319,null],[11,"drop_port","","",319,null],[11,"can_recv","","",319,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",319,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",319,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",319,null],[11,"eq","std::sync::mpsc::select","",320,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",321,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",321,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",321,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",322,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",322,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",322,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",322,null],[11,"drop","","",321,null],[11,"drop","","",322,null],[11,"next","","",323,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",324,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",324,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",324,null],[11,"send","","",324,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",324,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",324,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",324,null],[11,"drop_chan","","",324,null],[11,"drop_port","","",324,null],[11,"can_recv","","",324,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",324,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",324,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",324,null],[11,"new","std::sync::mpsc::stream","",325,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",325,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",325,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",325,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",325,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",325,null],[11,"drop_port","","",325,null],[11,"can_recv","","",325,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",325,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",325,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",325,null],[11,"fmt","std::sync::mpsc::sync","",326,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",327,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",327,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",327,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",327,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",327,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",327,null],[11,"drop_chan","","",327,null],[11,"drop_port","","",327,null],[11,"can_recv","","",327,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",327,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",327,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",327,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",328,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",328,null],[11,"pop","","Pops some data from this queue.",328,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",328,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",329,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",329,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",329,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",329,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",329,null],[11,"clone","std::sync::mpsc","",330,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",330,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",330,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",331,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",331,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",331,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",331,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",332,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",332,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",332,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",332,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",333,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",333,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",333,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",334,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",334,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",334,null],[11,"send","","Sends a value on this synchronous channel.",335,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",335,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",335,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",335,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",336,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",336,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",336,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",337,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",338,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",336,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",336,null],[11,"fmt","","",330,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",330,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",330,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",333,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",333,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",333,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",333,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",331,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",331,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",331,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",332,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",332,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",332,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",339,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",339,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",340,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",341,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",341,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",341,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",341,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",341,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",342,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",342,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",342,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",342,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",342,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",342,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",342,null],[11,"drop","","",342,null],[11,"new","","Creates a new condition variable",343,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",343,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",343,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",343,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",343,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",343,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",343,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",343,null],[11,"drop","std::sync::mutex","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",344,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",344,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",344,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",344,null],[11,"deref","","",345,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",345,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",345,null],[11,"new","std::sync::once","Creates a new `Once` value.",346,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",346,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",347,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",347,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",347,null],[11,"fmt","","",347,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",348,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",348,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",348,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",348,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",348,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",348,null],[11,"deref","","",349,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",350,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",350,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",349,null],[11,"drop","","",350,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",351,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",351,null],[11,"release","","Release a resource from this semaphore.",351,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",351,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",352,null],[11,"default","core::sync::atomic","",353,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",354,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",355,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",356,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",357,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",353,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",353,null],[11,"swap","","Stores a value into the bool, returning the old value.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",353,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",354,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",354,null],[11,"swap","","Stores a value into the isize, returning the old value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",354,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",355,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",355,null],[11,"swap","","Stores a value into the usize, returning the old value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",355,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",356,null],[11,"load","","Loads a value from the pointer.",356,null],[11,"store","","Stores a value into the pointer.",356,null],[11,"swap","","Stores a value into the pointer, returning the old value.",356,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",356,null],[11,"fmt","","",355,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",356,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",358,null],[11,"fmt","","",358,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",358,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",358,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",358,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",358,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",358,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",358,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",358,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",358,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",358,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",358,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",360,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",361,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",361,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",359,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",359,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",359,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",359,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",359,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",359,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",360,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",360,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",360,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",360,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",360,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",360,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",361,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",361,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",361,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",362,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",362,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",362,null],[11,"wait","","Waits for a signal on the specified mutex.",362,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",362,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",362,null],[11,"clone","std::sys_common::dwarf::eh","",363,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",364,null],[11,"read","","",364,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",364,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",364,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",365,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",366,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",367,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",367,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",367,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",367,null],[11,"destroy","","Deallocates all resources associated with this mutex.",367,null],[11,"next","std::sys_common::net","",368,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",368,null],[11,"connect","","",369,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",369,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",369,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",369,null],[11,"write","","",369,null],[11,"peer_addr","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",369,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",369,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",369,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",370,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",370,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",370,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",370,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",370,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",370,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",370,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",371,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",371,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",371,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",371,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",371,null],[11,"send_to","","",371,null],[11,"duplicate","","",371,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",371,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",371,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",371,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",371,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",371,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",372,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",372,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",372,null],[11,"get","","",372,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",373,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",373,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",373,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",373,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",373,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",373,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",373,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",374,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",374,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",374,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",374,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",374,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",375,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",375,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",375,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",375,null],[11,"fmt","","",375,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",376,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",376,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",377,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",377,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",377,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",377,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",377,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",377,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",377,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",377,null],[11,"new","std::sys_common::thread_local","",378,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",378,null],[11,"set","","Sets this TLS key to a new value.",378,null],[11,"destroy","","Deallocates this OS TLS key.",378,null],[11,"new","","Creates a new managed OS TLS key.",379,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",379,null],[11,"set","","See StaticKey::set",379,null],[11,"drop","","",379,null],[11,"clone","std::sys_common::wtf8","",380,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",380,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",380,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",380,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",380,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",380,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",380,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",380,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",380,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",382,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",382,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",381,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",381,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",381,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",381,null],[11,"as_slice","","",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",381,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",381,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",381,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",381,null],[11,"push","","Append a code point at the end of the string.",381,null],[11,"truncate","","Shortens a string to the specified length.",381,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",381,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",381,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",381,null],[11,"partial_cmp","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",382,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",382,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",382,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",382,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",382,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",383,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",383,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"clone","","",384,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",384,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"hash","","",380,null],[11,"hash","","",381,null],[11,"hash","","",382,null],[11,"is_ascii","","",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",382,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",382,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",382,null],[11,"make_ascii_lowercase","","",382,null],[11,"new","std::sys::condvar","",385,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",385,null],[11,"notify_all","","",385,null],[11,"wait","","",385,null],[11,"wait_timeout","","",385,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",385,null],[11,"new","std::sys::fd","",386,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",386,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",386,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",386,null],[11,"write","","",386,null],[11,"set_cloexec","","",386,null],[11,"drop","","",386,null],[11,"clone","std::sys::fs","",387,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",388,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",389,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",389,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",389,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",389,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",390,null],[11,"eq","","",390,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",390,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",390,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",387,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",387,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",387,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",241,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",389,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",389,null],[11,"mode","","",389,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u16"}}],[11,"is_dir","","",390,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",390,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",390,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",390,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",391,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",392,null],[11,"path","","",393,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",393,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",393,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",393,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",393,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",388,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",388,null],[11,"write","","",388,null],[11,"append","","",388,null],[11,"truncate","","",388,null],[11,"create","","",388,null],[11,"mode","","",388,null],[11,"open","","",394,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",394,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",394,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",394,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",394,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",394,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",394,null],[11,"write","","",394,null],[11,"flush","","",394,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",394,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",394,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",394,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",395,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",395,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",395,null],[11,"fmt","","",394,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",396,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",396,null],[11,"unlock","","",396,null],[11,"try_lock","","",396,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",396,null],[11,"uninitialized","","",397,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",397,null],[11,"lock","","",397,null],[11,"try_lock","","",397,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",397,null],[11,"destroy","","",397,null],[11,"new","std::sys::net","",398,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",398,null],[11,"duplicate","","",398,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",398,null],[11,"set_timeout","","",398,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",398,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",398,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",399,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",400,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",401,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",402,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",403,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",404,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",405,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",406,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",407,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",408,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",409,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",410,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",411,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",412,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",413,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",414,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",415,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",416,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",417,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",418,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",419,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",420,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",421,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",422,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",423,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",424,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",425,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",426,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",427,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",428,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",429,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",430,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",431,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",432,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",433,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",434,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",435,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",436,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",437,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",438,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",439,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",440,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",441,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",442,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",443,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",444,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",445,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",446,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",446,null],[11,"fmt","","",447,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",447,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",447,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",448,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",448,null],[11,"len","","",448,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",449,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",449,null],[11,"hash","std::sys::os_str","",450,null],[11,"clone","","",450,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",451,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",450,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",450,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",450,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",450,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",450,null],[11,"from_str","","",451,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",451,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",451,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",451,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",452,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",452,null],[11,"write","","",452,null],[11,"raw","","",452,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",452,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",452,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",453,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",453,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",453,null],[11,"args","","",453,null],[11,"env","","",453,null],[11,"env_remove","","",453,null],[11,"env_clear","","",453,null],[11,"cwd","","",453,null],[11,"fmt","","",454,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",454,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",454,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",454,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",454,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",454,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",454,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",454,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",455,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",455,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",455,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",455,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",455,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",456,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",456,null],[11,"try_read","","",456,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",456,null],[11,"try_write","","",456,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",456,null],[11,"write_unlock","","",456,null],[11,"destroy","","",456,null],[11,"new","std::sys::stack_overflow","",457,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",457,null],[11,"new","std::sys::thread","",458,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",458,null],[11,"set_name","","",458,null],[11,"sleep","","",458,null],[11,"join","","",458,null],[11,"id","","",458,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",458,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",458,null],[11,"fmt","std::sys::time::inner","",459,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",459,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",460,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",459,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",459,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",459,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",459,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",460,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",460,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",460,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",460,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",460,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",460,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",460,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",460,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",461,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",461,null],[11,"new","","",462,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",462,null],[11,"new","","",463,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",463,null],[11,"write","","",463,null],[11,"flush","","",463,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",464,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",465,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",465,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",466,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",466,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",467,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",467,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",467,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",467,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",468,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",468,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",468,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",468,null],[11,"clone","std::rand","",469,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",469,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",469,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",469,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",469,null],[11,"from_seed","","",469,null],[11,"reseed","","",470,null],[11,"clone","","",471,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",471,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",471,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",471,null],[11,"fmt","glium","",472,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",472,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",472,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",472,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",472,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",472,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",472,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",472,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",473,null],[11,"fmt","","",473,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",473,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",473,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",473,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",473,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",474,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",474,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",474,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",474,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",474,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",474,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",474,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",475,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",475,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",475,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",475,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",476,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",476,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",476,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",476,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",476,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",476,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",476,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",476,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",476,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",477,null],[11,"clone","","",477,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",478,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",478,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",478,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",478,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",479,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",479,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",480,null],[11,"deref","","",479,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",479,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",481,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",481,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",481,null],[11,"fmt","core::cmp","",482,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",482,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",482,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",482,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",482,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",482,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",482,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",483,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",483,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",483,null],[11,"finish","","",483,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",483,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",483,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",484,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",484,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",484,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",485,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",485,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",485,null],[11,"next_back","","",485,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",486,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",486,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",486,null],[11,"next_back","","",486,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",487,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",487,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",487,null],[11,"clone","","",488,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",489,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",488,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",488,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",488,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",488,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",488,null],[11,"next_back","","",488,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",490,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",490,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",490,null],[11,"next_back","","",490,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",491,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",491,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",491,null],[11,"next_back","","",491,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",492,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",492,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",492,null],[11,"next_back","","",492,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",493,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",493,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",493,null],[11,"next_back","","",493,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",494,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",494,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",494,null],[11,"nth","","",494,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",494,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",494,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",495,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",495,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",495,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",495,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",495,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",495,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",495,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",495,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",496,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",496,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",496,null],[11,"clone","","",497,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",497,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",497,null],[11,"clone","","",498,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",498,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",498,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",498,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",498,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",498,null],[11,"clone","","",499,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",499,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",499,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",499,null],[11,"clone","","",500,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",500,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",500,null],[11,"clone","","",501,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",501,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",501,null],[11,"next_back","","",501,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",502,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",502,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",502,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",502,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",502,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",502,null],[11,"next_back","","",502,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",503,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",503,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",503,null],[11,"next_back","","",503,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",504,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",505,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",506,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",504,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",504,null],[11,"clone","","",507,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",507,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",507,null],[11,"next_back","","",507,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",504,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",504,null],[11,"next","core::ops","",506,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",506,null],[11,"next_back","","",506,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",505,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",508,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",508,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",508,null],[11,"next_back","","",508,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",509,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",509,null],[11,"next_back","","",509,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",509,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",509,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",509,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",510,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",510,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",510,null],[11,"next_back","","",510,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",510,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",511,null],[11,"eq","","",511,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",511,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",511,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",511,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",511,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",512,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",512,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",512,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",512,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",506,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",506,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",506,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",506,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",505,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",505,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",505,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",505,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",513,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",513,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",513,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",513,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",514,null],[11,"get","","Dereferences the content.",514,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",514,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",514,null],[11,"fmt","","",514,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",515,null],[11,"clone","","",515,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",515,null],[11,"fmt","","",515,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",516,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",517,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",518,null],[11,"fmt","","",518,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",518,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",518,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",518,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",518,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",518,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",518,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",518,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",518,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",518,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",518,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",518,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",518,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",518,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",518,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",518,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",518,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",518,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",518,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",518,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",518,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",519,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",519,null],[11,"next_back","","",519,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",519,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",520,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",520,null],[11,"next_back","","",520,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",521,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",521,null],[11,"next_back","","",521,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",518,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",522,null],[11,"fmt","","",522,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",522,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",522,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",522,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",522,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",522,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",522,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",522,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",522,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",522,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",522,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",522,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",522,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",522,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",522,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",522,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",522,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",522,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",522,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",522,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",522,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",522,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",522,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",522,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",522,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",523,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",523,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",523,null],[11,"next_back","","",523,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",524,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",524,null],[11,"next_back","","",524,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",524,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",525,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",525,null],[11,"next_back","","",525,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",526,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",526,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",526,null],[11,"next_back","","",526,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",522,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",527,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",528,null],[11,"make_place","","",528,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",528,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",155,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",527,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",528,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",155,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",155,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",155,null],[11,"default","","",155,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",155,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",155,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",155,null],[11,"clone","","",155,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",155,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",155,null],[11,"from","","",155,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",155,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",155,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",155,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",155,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",155,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"next_back","","",155,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",155,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",155,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",155,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",155,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",155,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",155,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",155,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",66,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",66,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",66,null],[11,"clone","","Makes a clone of the `Rc<T>`.",66,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",66,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",66,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",66,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",529,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",529,null],[11,"clone","","Makes a clone of the `Weak<T>`.",529,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",529,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",529,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",66,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",66,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",312,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",312,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",312,null],[11,"into_owned","","Extracts the owned data.",312,null],[11,"deref","","",312,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",312,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",312,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",312,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",312,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",312,null],[11,"into_cow","","",312,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",312,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",530,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",531,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",532,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",532,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",532,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",533,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",534,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",214,null],[11,"borrow_mut","","",214,null],[11,"clone","collections::str","",535,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",535,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",535,null],[11,"borrow","collections::string","",240,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",536,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",536,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",536,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",536,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",537,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",538,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",537,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",537,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",537,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",539,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",540,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",541,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",542,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",542,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",543,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",543,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",544,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",544,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",542,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",542,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",542,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",542,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",542,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",545,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",545,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",546,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",546,null],[11,"matching","","",546,null],[11,"use_early_reject","","",547,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",547,null],[11,"matching","","",547,null],[11,"cmp","collections::string","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",240,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",240,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",240,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",240,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",240,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",240,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",240,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",240,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",240,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",240,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",240,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",240,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",240,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",240,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",240,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",240,null],[11,"push","","Appends the given `char` to the end of this `String`.",240,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",240,null],[11,"truncate","","Shortens this `String` to the specified length.",240,null],[11,"pop","","Removes the last character from the string buffer and returns it.",240,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",240,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",240,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",240,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",240,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",240,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",240,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",240,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",240,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",160,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",160,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",160,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",240,null],[11,"from_iter","","",240,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",240,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",240,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",240,null],[11,"extend","","",240,null],[11,"extend","","",240,null],[11,"extend","","",240,null],[11,"eq","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",312,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",312,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",312,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",240,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",240,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",240,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",240,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",240,null],[11,"add","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",240,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",240,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",240,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",240,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",240,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",240,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",240,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",240,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",240,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",240,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",548,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",548,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",548,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",240,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",240,null],[11,"from","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",312,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",312,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",240,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",240,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",240,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",240,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",549,null],[11,"next","","",549,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",549,null],[11,"next_back","","",549,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",214,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",214,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",214,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",214,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",214,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",214,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",214,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",214,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",214,null],[11,"as_slice","","Extracts a slice containing the entire vector.",214,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",214,null],[11,"set_len","","Sets the length of a vector.",214,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",214,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",214,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",214,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",214,null],[11,"push","","Appends an element to the back of a collection.",214,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",214,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",214,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",214,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",214,null],[11,"len","","Returns the number of elements in the vector.",214,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",214,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",214,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",214,null],[11,"push_all","","",214,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",214,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",214,null],[11,"clone","","",214,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",214,null],[11,"hash","","",214,null],[11,"index","","",214,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",214,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",214,null],[11,"index","","",214,null],[11,"index","","",214,null],[11,"index","","",214,null],[11,"index_mut","","",214,null],[11,"index_mut","","",214,null],[11,"index_mut","","",214,null],[11,"index_mut","","",214,null],[11,"deref","","",214,null],[11,"deref_mut","","",214,null],[11,"from_iter","","",214,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",214,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",214,null],[11,"extend","","",214,null],[11,"eq","","",214,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","collections::borrow","",312,null],[11,"ne","","",312,null],[11,"eq","","",312,null],[11,"ne","","",312,null],[11,"eq","","",312,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"partial_cmp","","",214,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",214,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",214,null],[11,"default","","",214,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",214,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",214,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",214,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",214,null],[11,"as_mut","","",214,null],[11,"from","","",214,null],[11,"from","","",214,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",312,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",214,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",550,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",550,null],[11,"count","","",550,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",550,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",550,null],[11,"next","","",551,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",551,null],[11,"next_back","","",551,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",551,null],[11,"next","rustc_unicode::char","",552,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",553,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",554,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",555,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",555,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",555,null],[11,"fmt","glium::program","",148,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"programcreationerror"}}],[11,"fmt","","",148,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",148,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"str"}}],[11,"fmt","","",149,{"inputs":[{"name":"programchoosercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"programchoosercreationerror"}],"output":{"name":"programchoosercreationerror"}}],[11,"fmt","","",149,{"inputs":[{"name":"programchoosercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",149,{"inputs":[{"name":"programchoosercreationerror"}],"output":{"name":"str"}}],[11,"cause","","",149,{"inputs":[{"name":"programchoosercreationerror"}],"output":{"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"programchoosercreationerror"},{"name":"programcreationerror"}],"output":{"name":"programchoosercreationerror"}}],[11,"fmt","","",150,{"inputs":[{"name":"getbinaryerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"getbinaryerror"}],"output":{"name":"getbinaryerror"}}],[11,"fmt","","",150,{"inputs":[{"name":"getbinaryerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",150,{"inputs":[{"name":"getbinaryerror"}],"output":{"name":"str"}}],[11,"from","","",151,{"inputs":[{"name":"programcreationinput"},{"name":"sourcecode"}],"output":{"name":"programcreationinput"}}],[11,"from","","",151,{"inputs":[{"name":"programcreationinput"},{"name":"binary"}],"output":{"name":"programcreationinput"}}],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to\ngive `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are\nhere to do that.",null,null],[3,"UniformBuffer","glium::uniforms","Buffer that contains a uniform block.",null,null],[3,"Sampler","","A sampler.",null,null],[3,"SamplerBehavior","","Behavior of a sampler.",null,null],[12,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",556,null],[12,"minify_filter","","Filter to use when minifying the texture.",556,null],[12,"magnify_filter","","Filter to use when magnifying the texture.",556,null],[12,"max_anisotropy","","`1` means no anisotropic filtering, any value above `1` sets the max anisotropy.",556,null],[3,"EmptyUniforms","","Object that can be used when you don't have any uniforms.",null,null],[3,"UniformsStorage","","Stores uniforms.",null,null],[4,"SamplerWrapFunction","","Function to use for out-of-bounds samples.",null,null],[13,"Repeat","","Samples at coord `x + 1` map to coord `x`.",557,null],[13,"Mirror","","Samples at coord `x + 1` map to coord `1 - x`.",557,null],[13,"Clamp","","Samples at coord `x + 1` map to coord `1`.",557,null],[13,"MirrorClamp","","Same as Mirror, but only for one repetition,",557,null],[4,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",558,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",558,null],[4,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel.",null,null],[13,"Nearest","","The nearest texel will be loaded.",559,null],[13,"Linear","","All nearby texels will be loaded and their values will be merged.",559,null],[13,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",559,null],[13,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",559,null],[13,"NearestMipmapLinear","","Same as `Linear`, but from the nearest mipmap.",559,null],[13,"LinearMipmapLinear","","Same as `Linear`, but from the two nearest mipmaps.",559,null],[4,"UniformValue","","Represents a value to bind to a uniform.",null,null],[13,"Block","","Contains a handle to the buffer, and a function that indicates whether this buffer\ncan be binded on a block with the given layout.\nThe last parameter is a sender which must be used to send a `SyncFence` that expires when\nthe buffer has finished being used.",560,null],[13,"Subroutine","","",560,null],[13,"SignedInt","","",560,null],[13,"UnsignedInt","","",560,null],[13,"Float","","",560,null],[13,"Mat2","","2x2 column-major matrix.",560,null],[13,"Mat3","","3x3 column-major matrix.",560,null],[13,"Mat4","","4x4 column-major matrix.",560,null],[13,"Vec2","","",560,null],[13,"Vec3","","",560,null],[13,"Vec4","","",560,null],[13,"IntVec2","","",560,null],[13,"IntVec3","","",560,null],[13,"IntVec4","","",560,null],[13,"UnsignedIntVec2","","",560,null],[13,"UnsignedIntVec3","","",560,null],[13,"UnsignedIntVec4","","",560,null],[13,"Bool","","",560,null],[13,"BoolVec2","","",560,null],[13,"BoolVec3","","",560,null],[13,"BoolVec4","","",560,null],[13,"Double","","",560,null],[13,"DoubleVec2","","",560,null],[13,"DoubleVec3","","",560,null],[13,"DoubleVec4","","",560,null],[13,"DoubleMat2","","",560,null],[13,"DoubleMat3","","",560,null],[13,"DoubleMat4","","",560,null],[13,"Int64","","",560,null],[13,"Int64Vec2","","",560,null],[13,"Int64Vec3","","",560,null],[13,"Int64Vec4","","",560,null],[13,"UnsignedInt64","","",560,null],[13,"UnsignedInt64Vec2","","",560,null],[13,"UnsignedInt64Vec3","","",560,null],[13,"UnsignedInt64Vec4","","",560,null],[13,"Texture1d","","",560,null],[13,"CompressedTexture1d","","",560,null],[13,"SrgbTexture1d","","",560,null],[13,"CompressedSrgbTexture1d","","",560,null],[13,"IntegralTexture1d","","",560,null],[13,"UnsignedTexture1d","","",560,null],[13,"DepthTexture1d","","",560,null],[13,"Texture2d","","",560,null],[13,"CompressedTexture2d","","",560,null],[13,"SrgbTexture2d","","",560,null],[13,"CompressedSrgbTexture2d","","",560,null],[13,"IntegralTexture2d","","",560,null],[13,"UnsignedTexture2d","","",560,null],[13,"DepthTexture2d","","",560,null],[13,"Texture2dMultisample","","",560,null],[13,"SrgbTexture2dMultisample","","",560,null],[13,"IntegralTexture2dMultisample","","",560,null],[13,"UnsignedTexture2dMultisample","","",560,null],[13,"DepthTexture2dMultisample","","",560,null],[13,"Texture3d","","",560,null],[13,"CompressedTexture3d","","",560,null],[13,"SrgbTexture3d","","",560,null],[13,"CompressedSrgbTexture3d","","",560,null],[13,"IntegralTexture3d","","",560,null],[13,"UnsignedTexture3d","","",560,null],[13,"DepthTexture3d","","",560,null],[13,"Texture1dArray","","",560,null],[13,"CompressedTexture1dArray","","",560,null],[13,"SrgbTexture1dArray","","",560,null],[13,"CompressedSrgbTexture1dArray","","",560,null],[13,"IntegralTexture1dArray","","",560,null],[13,"UnsignedTexture1dArray","","",560,null],[13,"DepthTexture1dArray","","",560,null],[13,"Texture2dArray","","",560,null],[13,"CompressedTexture2dArray","","",560,null],[13,"SrgbTexture2dArray","","",560,null],[13,"CompressedSrgbTexture2dArray","","",560,null],[13,"IntegralTexture2dArray","","",560,null],[13,"UnsignedTexture2dArray","","",560,null],[13,"DepthTexture2dArray","","",560,null],[13,"Texture2dMultisampleArray","","",560,null],[13,"SrgbTexture2dMultisampleArray","","",560,null],[13,"IntegralTexture2dMultisampleArray","","",560,null],[13,"UnsignedTexture2dMultisampleArray","","",560,null],[13,"DepthTexture2dMultisampleArray","","",560,null],[13,"Cubemap","","",560,null],[13,"CompressedCubemap","","",560,null],[13,"SrgbCubemap","","",560,null],[13,"CompressedSrgbCubemap","","",560,null],[13,"IntegralCubemap","","",560,null],[13,"UnsignedCubemap","","",560,null],[13,"DepthCubemap","","",560,null],[13,"CubemapArray","","",560,null],[13,"CompressedCubemapArray","","",560,null],[13,"SrgbCubemapArray","","",560,null],[13,"CompressedSrgbCubemapArray","","",560,null],[13,"IntegralCubemapArray","","",560,null],[13,"UnsignedCubemapArray","","",560,null],[13,"DepthCubemapArray","","",560,null],[13,"BufferTexture","","",560,null],[4,"UniformType","","Type of a uniform in a program.",null,null],[13,"Float","","",561,null],[13,"FloatVec2","","",561,null],[13,"FloatVec3","","",561,null],[13,"FloatVec4","","",561,null],[13,"Double","","",561,null],[13,"DoubleVec2","","",561,null],[13,"DoubleVec3","","",561,null],[13,"DoubleVec4","","",561,null],[13,"Int","","",561,null],[13,"IntVec2","","",561,null],[13,"IntVec3","","",561,null],[13,"IntVec4","","",561,null],[13,"UnsignedInt","","",561,null],[13,"UnsignedIntVec2","","",561,null],[13,"UnsignedIntVec3","","",561,null],[13,"UnsignedIntVec4","","",561,null],[13,"Int64","","",561,null],[13,"Int64Vec2","","",561,null],[13,"Int64Vec3","","",561,null],[13,"Int64Vec4","","",561,null],[13,"UnsignedInt64","","",561,null],[13,"UnsignedInt64Vec2","","",561,null],[13,"UnsignedInt64Vec3","","",561,null],[13,"UnsignedInt64Vec4","","",561,null],[13,"Bool","","",561,null],[13,"BoolVec2","","",561,null],[13,"BoolVec3","","",561,null],[13,"BoolVec4","","",561,null],[13,"FloatMat2","","",561,null],[13,"FloatMat3","","",561,null],[13,"FloatMat4","","",561,null],[13,"FloatMat2x3","","",561,null],[13,"FloatMat2x4","","",561,null],[13,"FloatMat3x2","","",561,null],[13,"FloatMat3x4","","",561,null],[13,"FloatMat4x2","","",561,null],[13,"FloatMat4x3","","",561,null],[13,"DoubleMat2","","",561,null],[13,"DoubleMat3","","",561,null],[13,"DoubleMat4","","",561,null],[13,"DoubleMat2x3","","",561,null],[13,"DoubleMat2x4","","",561,null],[13,"DoubleMat3x2","","",561,null],[13,"DoubleMat3x4","","",561,null],[13,"DoubleMat4x2","","",561,null],[13,"DoubleMat4x3","","",561,null],[13,"Sampler1d","","",561,null],[13,"ISampler1d","","",561,null],[13,"USampler1d","","",561,null],[13,"Sampler2d","","",561,null],[13,"ISampler2d","","",561,null],[13,"USampler2d","","",561,null],[13,"Sampler3d","","",561,null],[13,"ISampler3d","","",561,null],[13,"USampler3d","","",561,null],[13,"Sampler1dArray","","",561,null],[13,"ISampler1dArray","","",561,null],[13,"USampler1dArray","","",561,null],[13,"Sampler2dArray","","",561,null],[13,"ISampler2dArray","","",561,null],[13,"USampler2dArray","","",561,null],[13,"SamplerCube","","",561,null],[13,"ISamplerCube","","",561,null],[13,"USamplerCube","","",561,null],[13,"Sampler2dRect","","",561,null],[13,"ISampler2dRect","","",561,null],[13,"USampler2dRect","","",561,null],[13,"Sampler2dRectShadow","","",561,null],[13,"SamplerCubeArray","","",561,null],[13,"ISamplerCubeArray","","",561,null],[13,"USamplerCubeArray","","",561,null],[13,"SamplerBuffer","","",561,null],[13,"ISamplerBuffer","","",561,null],[13,"USamplerBuffer","","",561,null],[13,"Sampler2dMultisample","","",561,null],[13,"ISampler2dMultisample","","",561,null],[13,"USampler2dMultisample","","",561,null],[13,"Sampler2dMultisampleArray","","",561,null],[13,"ISampler2dMultisampleArray","","",561,null],[13,"USampler2dMultisampleArray","","",561,null],[13,"Sampler1dShadow","","",561,null],[13,"Sampler2dShadow","","",561,null],[13,"SamplerCubeShadow","","",561,null],[13,"Sampler1dArrayShadow","","",561,null],[13,"Sampler2dArrayShadow","","",561,null],[13,"SamplerCubeArrayShadow","","",561,null],[13,"Image1d","","",561,null],[13,"IImage1d","","",561,null],[13,"UImage1d","","",561,null],[13,"Image2d","","",561,null],[13,"IImage2d","","",561,null],[13,"UImage2d","","",561,null],[13,"Image3d","","",561,null],[13,"IImage3d","","",561,null],[13,"UImage3d","","",561,null],[13,"Image2dRect","","",561,null],[13,"IImage2dRect","","",561,null],[13,"UImage2dRect","","",561,null],[13,"ImageCube","","",561,null],[13,"IImageCube","","",561,null],[13,"UImageCube","","",561,null],[13,"ImageBuffer","","",561,null],[13,"IImageBuffer","","",561,null],[13,"UImageBuffer","","",561,null],[13,"Image1dArray","","",561,null],[13,"IImage1dArray","","",561,null],[13,"UImage1dArray","","",561,null],[13,"Image2dArray","","",561,null],[13,"IImage2dArray","","",561,null],[13,"UImage2dArray","","",561,null],[13,"Image2dMultisample","","",561,null],[13,"IImage2dMultisample","","",561,null],[13,"UImage2dMultisample","","",561,null],[13,"Image2dMultisampleArray","","",561,null],[13,"IImage2dMultisampleArray","","",561,null],[13,"UImage2dMultisampleArray","","",561,null],[13,"AtomicCounterUint","","",561,null],[4,"LayoutMismatchError","","Error about a block layout mismatch.",null,null],[13,"TypeMismatch","","There is a mismatch in the type of one element.",562,null],[12,"expected","glium::uniforms::LayoutMismatchError","Type expected by the shader.",562,null],[12,"obtained","","Type that you gave.",562,null],[13,"LayoutMismatch","glium::uniforms","The expected layout is totally different from what we have.",562,null],[12,"expected","glium::uniforms::LayoutMismatchError","Layout expected by the shader.",562,null],[12,"obtained","","Layout of the input.",562,null],[13,"OffsetMismatch","glium::uniforms","The type of data is good, but there is a misalignment.",562,null],[12,"expected","glium::uniforms::LayoutMismatchError","Expected offset of a member.",562,null],[12,"obtained","","Offset of the same member in the input.",562,null],[13,"MemberMismatch","glium::uniforms","There is a mismatch in a submember of this layout.",562,null],[12,"member","glium::uniforms::LayoutMismatchError","Name of the field.",562,null],[12,"err","","The sub-error.",562,null],[13,"MissingField","glium::uniforms","A field is missing in either the expected of the input data layout.",562,null],[12,"name","glium::uniforms::LayoutMismatchError","Name of the field.",562,null],[11,"fmt","glium::uniforms","",563,{"inputs":[{"name":"uniformbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Uploads data in the uniforms buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",563,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"deref","","",563,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",563,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"uniformbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"uniformbuffer"}],"output":{"name":"buffermutslice"}}],[11,"eq","glium::uniforms","",557,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"ne","","",557,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"hash","","",557,null],[11,"clone","","",557,{"inputs":[{"name":"samplerwrapfunction"}],"output":{"name":"samplerwrapfunction"}}],[11,"fmt","","",557,{"inputs":[{"name":"samplerwrapfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",558,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",558,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",558,null],[11,"clone","","",558,{"inputs":[{"name":"magnifysamplerfilter"}],"output":{"name":"magnifysamplerfilter"}}],[11,"fmt","","",558,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",559,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",559,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",559,null],[11,"clone","","",559,{"inputs":[{"name":"minifysamplerfilter"}],"output":{"name":"minifysamplerfilter"}}],[11,"fmt","","",559,{"inputs":[{"name":"minifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",564,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"ne","","",564,{"inputs":[{"name":"sampler"},{"name":"sampler"}],"output":{"name":"bool"}}],[11,"hash","","",564,null],[11,"fmt","","",564,{"inputs":[{"name":"sampler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Sampler` with default parameters.",564,{"inputs":[{"name":"sampler"},{"name":"t"}],"output":{"name":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",564,{"inputs":[{"name":"sampler"},{"name":"samplerwrapfunction"}],"output":{"name":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",564,{"inputs":[{"name":"sampler"},{"name":"minifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",564,{"inputs":[{"name":"sampler"},{"name":"magnifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",564,{"inputs":[{"name":"sampler"},{"name":"u16"}],"output":{"name":"sampler"}}],[11,"clone","","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"self"}}],[11,"eq","","",556,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",556,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"hash","","",556,null],[11,"clone","","",556,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"fmt","","",556,{"inputs":[{"name":"samplerbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",556,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"clone","","",565,{"inputs":[{"name":"emptyuniforms"}],"output":{"name":"emptyuniforms"}}],[11,"fmt","","",565,{"inputs":[{"name":"emptyuniforms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_values","","",565,{"inputs":[{"name":"emptyuniforms"},{"name":"f"}],"output":null}],[11,"new","","Builds a new storage with a value.",566,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"t"}],"output":{"name":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",566,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"u"}],"output":{"name":"uniformsstorage"}}],[11,"visit_values","","",566,{"inputs":[{"name":"uniformsstorage"},{"name":"f"}],"output":null}],[11,"eq","","",561,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"ne","","",561,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"fmt","","",561,{"inputs":[{"name":"uniformtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",561,{"inputs":[{"name":"uniformtype"}],"output":{"name":"uniformtype"}}],[11,"clone","","",560,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",560,{"inputs":[{"name":"uniformvalue"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[8,"Uniforms","","Object that contains the values of all the uniforms to bind to a program.",null,null],[10,"visit_values","","Calls the parameter once with the name and value of each uniform.",567,{"inputs":[{"name":"uniforms"},{"name":"f"}],"output":null}],[8,"AsUniformValue","","Value that can be used as the value of a uniform.",null,null],[10,"as_uniform_value","","Builds a `UniformValue`.",568,{"inputs":[{"name":"asuniformvalue"}],"output":{"name":"uniformvalue"}}],[8,"UniformBlock","","Objects that are suitable for being inside a uniform block or a SSBO.",null,null],[10,"matches","","Checks whether the uniforms' layout matches the given block if `Self` starts at\nthe given offset.",569,{"inputs":[{"name":"uniformblock"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[10,"build_layout","","Builds the `BlockLayout` corresponding to the current object.",569,{"inputs":[{"name":"uniformblock"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",562,{"inputs":[{"name":"layoutmismatcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",562,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"layoutmismatcherror"}}],[11,"description","","",562,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"str"}}],[11,"cause","","",562,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"option"}}],[11,"fmt","","",562,{"inputs":[{"name":"layoutmismatcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"vertex","glium","Contains everything related to vertex sources.",null,null],[3,"VertexBuffer","glium::vertex","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferAny","","A list of vertices loaded in the graphics card's memory.",null,null],[3,"VertexBufferSlice","","Represents a slice of a `VertexBuffer`.",null,null],[3,"TransformFeedbackSession","","Transform feedback allows you to obtain in a buffer the list of the vertices generated by\nthe vertex shader, geometry shader, or tessellation evaluation shader of your program. This\nis usually used to cache the result in order to draw the vertices multiple times with multiple\ndifferent fragment shaders.",null,null],[3,"EmptyVertexAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",570,null],[3,"EmptyInstanceAttributes","","Marker that can be passed instead of a buffer to indicate an empty list of buffers.",null,null],[12,"len","","Number of phantom vertices.",571,null],[3,"PerInstance","","Marker that instructs glium that the buffer is to be used per instance.",null,null],[4,"BufferCreationError","","Error that can happen when creating a vertex buffer.",null,null],[13,"FormatNotSupported","","The vertex format is not supported by the backend.",572,null],[13,"BufferCreationError","","Error while creating the vertex buffer.",572,null],[4,"AttributeType","","",null,null],[13,"I8","","",573,null],[13,"I8I8","","",573,null],[13,"I8I8I8","","",573,null],[13,"I8I8I8I8","","",573,null],[13,"U8","","",573,null],[13,"U8U8","","",573,null],[13,"U8U8U8","","",573,null],[13,"U8U8U8U8","","",573,null],[13,"I16","","",573,null],[13,"I16I16","","",573,null],[13,"I16I16I16","","",573,null],[13,"I16I16I16I16","","",573,null],[13,"U16","","",573,null],[13,"U16U16","","",573,null],[13,"U16U16U16","","",573,null],[13,"U16U16U16U16","","",573,null],[13,"I32","","",573,null],[13,"I32I32","","",573,null],[13,"I32I32I32","","",573,null],[13,"I32I32I32I32","","",573,null],[13,"U32","","",573,null],[13,"U32U32","","",573,null],[13,"U32U32U32","","",573,null],[13,"U32U32U32U32","","",573,null],[13,"I64","","",573,null],[13,"I64I64","","",573,null],[13,"I64I64I64","","",573,null],[13,"I64I64I64I64","","",573,null],[13,"U64","","",573,null],[13,"U64U64","","",573,null],[13,"U64U64U64","","",573,null],[13,"U64U64U64U64","","",573,null],[13,"F16","","",573,null],[13,"F16F16","","",573,null],[13,"F16F16F16","","",573,null],[13,"F16F16F16F16","","",573,null],[13,"F16x2x2","","2x2 matrix of `f16`s",573,null],[13,"F16x2x3","","2x3 matrix of `f16`s",573,null],[13,"F16x2x4","","2x3 matrix of `f16`s",573,null],[13,"F16x3x2","","3x2 matrix of `f16`s",573,null],[13,"F16x3x3","","3x3 matrix of `f16`s",573,null],[13,"F16x3x4","","3x4 matrix of `f16`s",573,null],[13,"F16x4x2","","4x2 matrix of `f16`s",573,null],[13,"F16x4x3","","4x3 matrix of `f16`s",573,null],[13,"F16x4x4","","4x4 matrix of `f16`s",573,null],[13,"F32","","",573,null],[13,"F32F32","","",573,null],[13,"F32F32F32","","",573,null],[13,"F32F32F32F32","","",573,null],[13,"F32x2x2","","2x2 matrix of `f32`s",573,null],[13,"F32x2x3","","2x3 matrix of `f32`s",573,null],[13,"F32x2x4","","2x3 matrix of `f32`s",573,null],[13,"F32x3x2","","3x2 matrix of `f32`s",573,null],[13,"F32x3x3","","3x3 matrix of `f32`s",573,null],[13,"F32x3x4","","3x4 matrix of `f32`s",573,null],[13,"F32x4x2","","4x2 matrix of `f32`s",573,null],[13,"F32x4x3","","4x3 matrix of `f32`s",573,null],[13,"F32x4x4","","4x4 matrix of `f32`s",573,null],[13,"F64","","Warning: using `f64`s can be very slow.",573,null],[13,"F64F64","","Warning: using `f64`s can be very slow.",573,null],[13,"F64F64F64","","Warning: using `f64`s can be very slow.",573,null],[13,"F64F64F64F64","","Warning: using `f64`s can be very slow.",573,null],[13,"F64x2x2","","2x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x2x3","","2x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x2x4","","2x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x3x2","","3x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x3x3","","3x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x3x4","","3x4 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x4x2","","4x2 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x4x3","","4x3 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"F64x4x4","","4x4 matrix of `f64`s\nWarning: using `f64`s can be very slow.",573,null],[13,"I2I10I10I10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green,\nten bits for the red.",573,null],[13,"U2U10U10U10Reversed","","From MSB to LSB: two bits for the alpha, ten bits for the blue, ten bits for the green,\nten bits for the red.",573,null],[13,"I10I10I10I2","","Corresponds to `GL_INT_10_10_10_2`.",573,null],[13,"U10U10U10U2","","Corresponds to `GL_UNSIGNED_INT_10_10_10_2`.",573,null],[13,"F10F11F11UnsignedIntReversed","","Three floating points values turned into unsigned integers./",573,null],[13,"FixedFloatI16U16","","Fixed floating points. A 16bits signed value followed by the 16bits unsigned exponent.",573,null],[4,"VerticesSource","","Describes the source to use for the vertices when drawing.",null,null],[13,"VertexBuffer","","A buffer uploaded in the video memory.",574,null],[13,"Marker","","A marker indicating a \"phantom list of attributes\".",574,null],[12,"len","glium::vertex::VerticesSource","Number of attributes.",574,null],[12,"per_instance","","Whether or not this buffer is \"per instance\" (true) or \"per vertex\" (false).",574,null],[5,"is_transform_feedback_supported","glium::vertex","Returns true if transform feedback is supported by the OpenGL implementation.",null,{"inputs":[{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",572,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",572,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",572,{"inputs":[{"name":"buffercreationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",572,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",572,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"str"}}],[11,"cause","","",572,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"option"}}],[11,"fmt","glium","",575,{"inputs":[{"name":"vertexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"per_instance","glium::vertex","Creates a marker that instructs glium to use multiple instances.",576,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"result"}}],[11,"new","glium","Builds a new vertex buffer.",575,null],[11,"dynamic","","Builds a new vertex buffer.",575,null],[11,"persistent","","Builds a new vertex buffer.",575,null],[11,"immutable","","Builds a new vertex buffer.",575,null],[11,"empty","","Builds an empty vertex buffer.",575,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",575,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",575,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",575,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",575,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",575,null],[11,"slice","","Accesses a slice of the buffer.",575,{"inputs":[{"name":"vertexbuffer"},{"name":"r"}],"output":{"name":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",575,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexformat"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",575,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead.\nDiscard the type information and turn the vertex buffer into a `VertexBufferAny`.",575,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",575,{"inputs":[{"name":"vertexbuffer"},{"name":"buffer"}],"output":{"name":"vertexbuffer"}}],[11,"deref","","",575,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",575,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"buffer"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"vertexbuffer"}],"output":{"name":"bufferslice"}}],[11,"from","","",77,{"inputs":[{"name":"buffermutslice"},{"name":"vertexbuffer"}],"output":{"name":"buffermutslice"}}],[11,"deref","glium::vertex","",576,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"deref_mut","","",576,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"from","glium::buffer","",76,{"inputs":[{"name":"bufferslice"},{"name":"vertexbufferslice"}],"output":{"name":"bufferslice"}}],[11,"into_vertices_source","glium::vertex","",576,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"verticessource"}}],[11,"fmt","","",577,{"inputs":[{"name":"vertexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",577,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",577,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",577,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"vertexformat"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",577,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",577,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"result"}}],[11,"from","","",577,{"inputs":[{"name":"vertexbufferany"},{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",577,{"inputs":[{"name":"vertexbufferany"},{"name":"buffer"}],"output":{"name":"vertexbufferany"}}],[11,"eq","","",573,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",573,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",573,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",573,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",573,{"inputs":[{"name":"attributetype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",573,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",573,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[11,"fmt","","",578,{"inputs":[{"name":"transformfeedbacksession"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new transform feedback session.",578,{"inputs":[{"name":"transformfeedbacksession"},{"name":"f"},{"name":"program"},{"name":"buffer"}],"output":{"name":"result"}}],[11,"drop","","",578,{"inputs":[{"name":"transformfeedbacksession"}],"output":null}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"IntoVerticesSource","","Objects that can be used as vertex sources.",null,null],[10,"into_vertices_source","","Builds the `VerticesSource`.",579,{"inputs":[{"name":"intoverticessource"}],"output":{"name":"verticessource"}}],[8,"MultiVerticesSource","","Objects that describe multiple vertex sources.",null,null],[16,"Iterator","","Iterator that enumerates each source.",580,null],[10,"iter","","Iterates over the `VerticesSource`.",580,{"inputs":[{"name":"multiverticessource"}],"output":{"name":"iterator"}}],[8,"Vertex","","Trait for structures that represent a vertex.",null,null],[10,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",581,{"inputs":[{"name":"vertex"}],"output":{"name":"vertexformat"}}],[11,"is_supported","","Returns true if the backend supports this vertex format.",581,{"inputs":[{"name":"vertex"},{"name":"c"}],"output":{"name":"bool"}}],[8,"Attribute","","Trait for types that can be used as vertex attributes.",null,null],[10,"get_type","","Get the type of data.",582,{"inputs":[{"name":"attribute"}],"output":{"name":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",582,{"inputs":[{"name":"attribute"},{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","","",574,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",574,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",570,{"inputs":[{"name":"emptyvertexattributes"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",571,{"inputs":[{"name":"emptyinstanceattributes"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",583,{"inputs":[{"name":"perinstance"}],"output":{"name":"verticessource"}}],[0,"texture","glium","A texture is an image loaded in video memory, which can be sampled in your shaders.",null,null],[3,"TextureAny","glium::texture","A texture whose type isn't fixed at compile-time.",null,null],[3,"TextureAnyMipmap","","Represents a specific mipmap of a texture.",null,null],[3,"TextureAnyLayer","","Represents a specific layer of an array texture and 3D textures.",null,null],[3,"TextureAnyLayerMipmap","","Represents a specific layer of a specific mipmap. This is the same as `TextureAnyImage`, except\nfor 3D textures, cubemaps and cubemap arrays.",null,null],[3,"TextureAnyImage","","Represents a specific 2D image of a texture. 1D textures are considered as having a height of 1.",null,null],[3,"RawImage1d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",584,null],[12,"width","","Number of pixels per column.",584,null],[12,"format","","Formats of the pixels.",584,null],[3,"RawImage2d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",585,null],[12,"width","","Number of pixels per column.",585,null],[12,"height","","Number of pixels per row.",585,null],[12,"format","","Formats of the pixels.",585,null],[3,"RawImage3d","","Represents raw data for a two-dimensional image.",null,null],[12,"data","","A contiguous array of pixel data.",586,null],[12,"width","","Number of pixels per column.",586,null],[12,"height","","Number of pixels per row.",586,null],[12,"depth","","Number of pixels per depth.",586,null],[12,"format","","Formats of the pixels.",586,null],[4,"ClientFormat","","List of client-side pixel formats.",null,null],[13,"U8","","",587,null],[13,"U8U8","","",587,null],[13,"U8U8U8","","",587,null],[13,"U8U8U8U8","","",587,null],[13,"I8","","",587,null],[13,"I8I8","","",587,null],[13,"I8I8I8","","",587,null],[13,"I8I8I8I8","","",587,null],[13,"U16","","",587,null],[13,"U16U16","","",587,null],[13,"U16U16U16","","",587,null],[13,"U16U16U16U16","","",587,null],[13,"I16","","",587,null],[13,"I16I16","","",587,null],[13,"I16I16I16","","",587,null],[13,"I16I16I16I16","","",587,null],[13,"U32","","",587,null],[13,"U32U32","","",587,null],[13,"U32U32U32","","",587,null],[13,"U32U32U32U32","","",587,null],[13,"I32","","",587,null],[13,"I32I32","","",587,null],[13,"I32I32I32","","",587,null],[13,"I32I32I32I32","","",587,null],[13,"U3U3U2","","",587,null],[13,"U5U6U5","","",587,null],[13,"U4U4U4U4","","",587,null],[13,"U5U5U5U1","","",587,null],[13,"U10U10U10U2","","",587,null],[13,"F16","","",587,null],[13,"F16F16","","",587,null],[13,"F16F16F16","","",587,null],[13,"F16F16F16F16","","",587,null],[13,"F32","","",587,null],[13,"F32F32","","",587,null],[13,"F32F32F32","","",587,null],[13,"F32F32F32F32","","",587,null],[4,"TextureFormat","","Format of the internal representation of a texture.",null,null],[13,"UncompressedFloat","","",588,null],[13,"UncompressedIntegral","","",588,null],[13,"UncompressedUnsigned","","",588,null],[13,"Srgb","","",588,null],[13,"CompressedFormat","","",588,null],[13,"CompressedSrgbFormat","","",588,null],[13,"DepthFormat","","",588,null],[13,"StencilFormat","","",588,null],[13,"DepthStencilFormat","","",588,null],[4,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating-point-like data.",null,null],[13,"U8","","",589,null],[13,"I8","","",589,null],[13,"U16","","",589,null],[13,"I16","","",589,null],[13,"U8U8","","",589,null],[13,"I8I8","","",589,null],[13,"U16U16","","",589,null],[13,"I16I16","","",589,null],[13,"U3U3U2","","",589,null],[13,"U4U4U4","","",589,null],[13,"U5U5U5","","",589,null],[13,"U8U8U8","","",589,null],[13,"I8I8I8","","",589,null],[13,"U10U10U10","","",589,null],[13,"U12U12U12","","",589,null],[13,"U16U16U16","","",589,null],[13,"I16I16I16","","",589,null],[13,"U2U2U2U2","","",589,null],[13,"U4U4U4U4","","",589,null],[13,"U5U5U5U1","","",589,null],[13,"U8U8U8U8","","",589,null],[13,"I8I8I8I8","","",589,null],[13,"U10U10U10U2","","",589,null],[13,"U12U12U12U12","","",589,null],[13,"U16U16U16U16","","",589,null],[13,"I16I16I16I16","","",589,null],[13,"F16","","",589,null],[13,"F16F16","","",589,null],[13,"F16F16F16","","",589,null],[13,"F16F16F16F16","","",589,null],[13,"F32","","",589,null],[13,"F32F32","","",589,null],[13,"F32F32F32","","",589,null],[13,"F32F32F32F32","","",589,null],[13,"F11F11F10","","",589,null],[13,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",589,null],[4,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data.",null,null],[13,"I8","","",590,null],[13,"I16","","",590,null],[13,"I32","","",590,null],[13,"I8I8","","",590,null],[13,"I16I16","","",590,null],[13,"I32I32","","",590,null],[13,"I8I8I8","","",590,null],[13,"I16I16I16","","May not be supported by renderbuffers.",590,null],[13,"I32I32I32","","May not be supported by renderbuffers.",590,null],[13,"I8I8I8I8","","May not be supported by renderbuffers.",590,null],[13,"I16I16I16I16","","",590,null],[13,"I32I32I32I32","","",590,null],[4,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data.",null,null],[13,"U8","","",591,null],[13,"U16","","",591,null],[13,"U32","","",591,null],[13,"U8U8","","",591,null],[13,"U16U16","","",591,null],[13,"U32U32","","",591,null],[13,"U8U8U8","","",591,null],[13,"U16U16U16","","May not be supported by renderbuffers.",591,null],[13,"U32U32U32","","May not be supported by renderbuffers.",591,null],[13,"U8U8U8U8","","May not be supported by renderbuffers.",591,null],[13,"U16U16U16U16","","",591,null],[13,"U32U32U32U32","","",591,null],[13,"U10U10U10U2","","",591,null],[4,"CompressedFormat","","List of compressed texture formats.",null,null],[13,"RgtcFormatU","","Red/green compressed texture with one unsigned component.",592,null],[13,"RgtcFormatI","","Red/green compressed texture with one signed component.",592,null],[13,"RgtcFormatUU","","Red/green compressed texture with two unsigned components.",592,null],[13,"RgtcFormatII","","Red/green compressed texture with two signed components.",592,null],[13,"BptcUnorm4","","BPTC format with four components represented as integers.",592,null],[13,"BptcSignedFloat3","","BPTC format with three components (no alpha) represented as signed floats.",592,null],[13,"BptcUnsignedFloat3","","BPTC format with three components (no alpha) represented as unsigned floats.",592,null],[13,"S3tcDxt1NoAlpha","","S3TC DXT1 without alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",592,null],[13,"S3tcDxt1Alpha","","S3TC DXT1 with 1-bit alpha, see https://www.opengl.org/wiki/S3_Texture_Compression.",592,null],[13,"S3tcDxt3Alpha","","S3TC DXT3, see https://www.opengl.org/wiki/S3_Texture_Compression.",592,null],[13,"S3tcDxt5Alpha","","S3TC DXT5, see https://www.opengl.org/wiki/S3_Texture_Compression.",592,null],[4,"DepthFormat","","List of formats available for depth textures.",null,null],[13,"I16","","",593,null],[13,"I24","","",593,null],[13,"I32","","May not be supported by all hardware.",593,null],[13,"F32","","",593,null],[4,"DepthStencilFormat","","List of formats available for depth-stencil textures.",null,null],[13,"I24I8","","",594,null],[13,"F32I8","","",594,null],[4,"StencilFormat","","List of formats available for stencil textures.",null,null],[13,"I1","","",595,null],[13,"I4","","",595,null],[13,"I8","","",595,null],[13,"I16","","",595,null],[4,"CompressedSrgbFormat","","List of compressed pixel formats in the sRGB color space.",null,null],[13,"Bptc","","BPTC format. sRGB with alpha. Also called `BC7` by DirectX.",596,null],[13,"S3tcDxt1NoAlpha","","",596,null],[13,"S3tcDxt1Alpha","","",596,null],[13,"S3tcDxt3Alpha","","",596,null],[13,"S3tcDxt5Alpha","","",596,null],[4,"SrgbFormat","","List of uncompressed pixel formats that contain floating-point data in the sRGB color space.",null,null],[13,"U8U8U8","","",597,null],[13,"U8U8U8U8","","",597,null],[4,"Dimensions","","Type of a texture.",null,null],[13,"Texture1d","","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[13,"Texture1dArray","glium::texture","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[12,"array_size","","",598,null],[13,"Texture2d","glium::texture","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[12,"height","","",598,null],[13,"Texture2dArray","glium::texture","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[12,"height","","",598,null],[12,"array_size","","",598,null],[13,"Texture2dMultisample","glium::texture","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[12,"height","","",598,null],[12,"samples","","",598,null],[13,"Texture2dMultisampleArray","glium::texture","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[12,"height","","",598,null],[12,"array_size","","",598,null],[12,"samples","","",598,null],[13,"Texture3d","glium::texture","",598,null],[12,"width","glium::texture::Dimensions","",598,null],[12,"height","","",598,null],[12,"depth","","",598,null],[13,"Cubemap","glium::texture","",598,null],[12,"dimension","glium::texture::Dimensions","",598,null],[13,"CubemapArray","glium::texture","",598,null],[12,"dimension","glium::texture::Dimensions","",598,null],[12,"array_size","","",598,null],[4,"InternalFormat","glium::texture","Internal format of a texture.",null,null],[13,"OneComponent","","The format has one component.",599,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",599,null],[12,"bits1","","Number of bits of the first component.",599,null],[13,"TwoComponents","glium::texture","The format has two components.",599,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",599,null],[12,"bits1","","Number of bits of the first component.",599,null],[12,"ty2","","Type of the second component.",599,null],[12,"bits2","","Number of bits of the second component.",599,null],[13,"ThreeComponents","glium::texture","The format has three components.",599,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",599,null],[12,"bits1","","Number of bits of the first component.",599,null],[12,"ty2","","Type of the second component.",599,null],[12,"bits2","","Number of bits of the second component.",599,null],[12,"ty3","","Type of the third component.",599,null],[12,"bits3","","Number of bits of the third component.",599,null],[13,"FourComponents","glium::texture","The format has four components.",599,null],[12,"ty1","glium::texture::InternalFormat","Type of the first component of the format.",599,null],[12,"bits1","","Number of bits of the first component.",599,null],[12,"ty2","","Type of the second component.",599,null],[12,"bits2","","Number of bits of the second component.",599,null],[12,"ty3","","Type of the third component.",599,null],[12,"bits3","","Number of bits of the third component.",599,null],[12,"ty4","","Type of the fourth component.",599,null],[12,"bits4","","Number of bits of the fourth component.",599,null],[4,"InternalFormatType","glium::texture","Format of a component of an internal format.",null,null],[13,"SignedNormalized","","Floating point texture with signed components.",600,null],[13,"UnsignedNormalized","","Floating point texture with unsigned components.",600,null],[13,"Float","","Floating point texture with floats.",600,null],[13,"Int","","Integral texture.",600,null],[13,"UnsignedInt","","Unsigned texture.",600,null],[4,"GetFormatError","","Error that can happen when retrieving the internal format of a texture.",null,null],[13,"NotSupported","","The backend doesn't support retrieving the internal format.",601,null],[4,"CubeLayer","","Represents a layer of a cubemap.",null,null],[13,"PositiveX","","",602,null],[13,"NegativeX","","",602,null],[13,"PositiveY","","",602,null],[13,"NegativeY","","",602,null],[13,"PositiveZ","","",602,null],[13,"NegativeZ","","",602,null],[4,"TextureKind","","Represents a kind of texture.",null,null],[13,"Float","","",603,null],[13,"Integral","","",603,null],[13,"Unsigned","","",603,null],[13,"Depth","","",603,null],[13,"Stencil","","",603,null],[13,"DepthStencil","","",603,null],[4,"MipmapsOption","","Describes what to do about mipmaps during texture creation.",null,null],[13,"NoMipmap","","No mipmap will be allocated or generated.",604,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",604,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not\ngenerate mipmaps.",604,null],[13,"AutoGeneratedMipmaps","","Allocates and generates mipmaps for all the possible levels given the texture dimensions.",604,null],[13,"AutoGeneratedMipmapsMax","","Allocates and generates mipmaps for the specified amount of mipmaps (excluding the top level)\nthe possible levels given the texture dimensions.",604,null],[4,"CompressedMipmapsOption","","Describes what to do about mipmaps during compressed texture creation.",null,null],[13,"NoMipmap","","No mipmaps will be allocated or generated.",605,null],[13,"EmptyMipmaps","","Allocates space for all the possible amount of mipmaps given the texture dimensions.",605,null],[13,"EmptyMipmapsMax","","Allocates space for the specified amount of mipmaps (excluding the top level) but does not\ngenerate mipmaps.",605,null],[4,"TextureCreationError","","Error that can happen when creating a texture.",null,null],[13,"FormatNotSupported","","The requested format is not supported by the backend.",606,null],[13,"DimensionsNotSupported","","The requested texture dimensions are not supported.",606,null],[13,"TypeNotSupported","","The texture format is not supported by the backend.",606,null],[5,"is_texture_1d_supported","","Returns true is one-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_supported","","Returns true is two-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_3d_supported","","Returns true is three-dimensional textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_1d_array_supported","","Returns true is one-dimensional texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_array_supported","","Returns true is two-dimensional texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_multisample_supported","","Returns true is two-dimensional multisample textures are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_texture_2d_multisample_array_supported","","Returns true is two-dimensional multisample texture arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_cubemaps_supported","","Returns true is cubemaps are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[5,"is_cubemap_arrays_supported","","Returns true is cubemap arrays are supported.",null,{"inputs":[{"name":"c"}],"output":{"name":"bool"}}],[0,"bindless","","Without bindless textures, using a texture in a shader requires binding the texture to a specific\nbind point before drawing. This not only slows down rendering, but may also prevent you from\ngrouping multiple draw calls into one because of the limitation to the number of available\ntexture units.",null,null],[3,"ResidentTexture","glium::texture::bindless","A texture that is resident in video memory. This allows you to use bindless textures in your\nshaders.",null,null],[3,"TextureHandle","","Represents a handle to a texture. Contains a raw pointer to a texture that is hidden from you.",null,null],[3,"BindlessTexturesNotSupportedError","","Bindless textures are not supported.",null,null],[11,"new","","Takes ownership of the given texture and makes it resident.",607,{"inputs":[{"name":"residenttexture"},{"name":"textureany"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",607,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"deref","","",607,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"deref_mut","","",607,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"drop","","",607,{"inputs":[{"name":"residenttexture"}],"output":null}],[11,"clone","","",608,{"inputs":[{"name":"texturehandle"}],"output":{"name":"texturehandle"}}],[11,"new","","Builds a new handle.",608,{"inputs":[{"name":"texturehandle"},{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":{"name":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",608,{"inputs":[{"name":"texturehandle"},{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":null}],[11,"as_uniform_value","","",608,{"inputs":[{"name":"texturehandle"}],"output":{"name":"uniformvalue"}}],[11,"matches","","",608,{"inputs":[{"name":"texturehandle"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",608,{"inputs":[{"name":"texturehandle"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",609,{"inputs":[{"name":"bindlesstexturesnotsupportederror"}],"output":{"name":"bindlesstexturesnotsupportederror"}}],[11,"fmt","","",609,{"inputs":[{"name":"bindlesstexturesnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"buffer_texture","glium::texture","A `BufferTexture` is a special kind of one-dimensional texture that gets its data from a buffer.\nBuffer textures have very limited capabilities compared to other texture types.",null,null],[3,"BufferTexture","glium::texture::buffer_texture","A one-dimensional texture that gets its data from a buffer.",null,null],[3,"BufferTextureRef","","Holds a reference to a `BufferTexture`.",null,null],[4,"TextureCreationError","","Error that can happen while building the texture part of a buffer texture.",null,null],[13,"NotSupported","","Buffer textures are not supported at all.",610,null],[13,"FormatNotSupported","","The requested format is not supported in combination with the given texture buffer type.",610,null],[13,"TooLarge","","The size of the buffer that you are trying to bind exceeds `GL_MAX_TEXTURE_BUFFER_SIZE`.",610,null],[4,"CreationError","","Error that can happen while building a buffer texture.",null,null],[13,"BufferCreationError","","Failed to create the buffer.",611,null],[13,"TextureCreationError","","Failed to create the texture.",611,null],[4,"BufferTextureType","","Type of a buffer texture.",null,null],[13,"Float","","The texture will behave as if it contained floating-point data. It can be sampled with\na `samplerBuffer` in your GLSL code.",612,null],[13,"Integral","","The texture will behave as if it contained signed integral data. It can be sampled with\na `isamplerBuffer` in your GLSL code.",612,null],[13,"Unsigned","","The texture will behave as if it contained unsigned integral data. It can be sampled with\na `usamplerBuffer` in your GLSL code.",612,null],[4,"TextureBufferContentType","","",null,null],[13,"U8","","",613,null],[13,"I8","","",613,null],[13,"U16","","",613,null],[13,"I16","","",613,null],[13,"U32","","",613,null],[13,"I32","","",613,null],[13,"U8U8","","",613,null],[13,"I8I8","","",613,null],[13,"U16U16","","",613,null],[13,"I16I16","","",613,null],[13,"U32U32","","",613,null],[13,"I32I32","","",613,null],[13,"U32U32U32","","",613,null],[13,"I32I32I32","","",613,null],[13,"U8U8U8U8","","",613,null],[13,"I8I8I8I8","","",613,null],[13,"U16U16U16U16","","",613,null],[13,"I16I16I16I16","","",613,null],[13,"U32U32U32U32","","",613,null],[13,"I32I32I32I32","","",613,null],[13,"F16","","",613,null],[13,"F32","","",613,null],[13,"F16F16","","",613,null],[13,"F32F32","","",613,null],[13,"F32F32F32","","",613,null],[13,"F16F16F16F16","","",613,null],[13,"F32F32F32F32","","",613,null],[8,"TextureBufferContent","","Trait for data types that can be interpreted by a buffer texture.",null,null],[10,"get_type","","Returns the enumeration corresponding to elements of this data type.",614,{"inputs":[{"name":"texturebuffercontent"}],"output":{"name":"texturebuffercontenttype"}}],[11,"fmt","","",610,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",610,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",610,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",610,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"str"}}],[11,"fmt","","",611,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",611,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",611,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",611,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",611,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"from","","",611,{"inputs":[{"name":"creationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",611,{"inputs":[{"name":"creationerror"},{"name":"texturecreationerror"}],"output":{"name":"creationerror"}}],[11,"eq","","",612,{"inputs":[{"name":"buffertexturetype"},{"name":"buffertexturetype"}],"output":{"name":"bool"}}],[11,"ne","","",612,{"inputs":[{"name":"buffertexturetype"},{"name":"buffertexturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",612,{"inputs":[{"name":"buffertexturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",612,{"inputs":[{"name":"buffertexturetype"}],"output":{"name":"buffertexturetype"}}],[11,"new","","Builds a new texture buffer from data.",615,null],[11,"dynamic","","Builds a new texture buffer from data.",615,null],[11,"persistent","","Builds a new texture buffer from data.",615,null],[11,"immutable","","Builds a new texture buffer from data.",615,null],[11,"empty","","Builds a new empty buffer buffer.",615,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty buffer buffer.",615,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty buffer buffer.",615,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty buffer buffer.",615,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"usize"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"from_buffer","","Builds a new buffer texture by taking ownership of a buffer.",615,{"inputs":[{"name":"buffertexture"},{"name":"f"},{"name":"buffer"},{"name":"buffertexturetype"}],"output":{"name":"result"}}],[11,"deref","","",615,{"inputs":[{"name":"buffertexture"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",615,{"inputs":[{"name":"buffertexture"}],"output":{"name":"buffer"}}],[11,"drop","","",615,{"inputs":[{"name":"buffertexture"}],"output":null}],[11,"as_buffer_texture_ref","","Builds a `BufferTextureRef`.",615,{"inputs":[{"name":"buffertexture"}],"output":{"name":"buffertextureref"}}],[11,"as_uniform_value","","",615,{"inputs":[{"name":"buffertexture"}],"output":{"name":"uniformvalue"}}],[11,"clone","","",616,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"buffertextureref"}}],[11,"get_texture_type","","Return the type of the texture.",616,{"inputs":[{"name":"buffertextureref"}],"output":{"name":"buffertexturetype"}}],[0,"pixel_buffer","glium::texture","Pixel buffers are buffers that contain two-dimensional texture data.",null,null],[3,"PixelBuffer","glium::texture::pixel_buffer","Buffer that stores the content of a texture.",null,null],[11,"new_empty","","Builds a new buffer with an uninitialized content.",617,{"inputs":[{"name":"pixelbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",617,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"result"}}],[11,"deref","","",617,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"buffer"}}],[11,"deref_mut","","",617,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"buffer"}}],[11,"get_id","","",617,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"gluint"}}],[11,"eq","glium::texture","",598,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",598,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"fmt","","",598,{"inputs":[{"name":"dimensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",598,{"inputs":[{"name":"dimensions"}],"output":{"name":"dimensions"}}],[11,"get_width","","Returns the width of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"kind","","Returns the kind of texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"texturekind"}}],[11,"dimensions","","Returns the dimensions of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"dimensions"}}],[11,"get_array_size","","Returns the array size of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture if it is a multisampling texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"first_layer","","Returns a structure that represents the first layer of the texture. All textures have a\nfirst layer.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"textureanylayer"}}],[11,"layer","","Returns a structure that represents a specific layer of the texture.",618,{"inputs":[{"name":"textureany"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",618,{"inputs":[{"name":"textureany"}],"output":{"name":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of the texture.",618,{"inputs":[{"name":"textureany"}],"output":{"name":"textureanymipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",618,{"inputs":[{"name":"textureany"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_id","","",618,{"inputs":[{"name":"textureany"}],"output":{"name":"gluint"}}],[11,"fmt","","",618,{"inputs":[{"name":"textureany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",618,{"inputs":[{"name":"textureany"}],"output":null}],[11,"clone","","",619,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"textureanylayer"}}],[11,"get_texture","","Returns the texture.",619,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"textureany"}}],[11,"get_samples","","Returns the number of samples of the texture.",619,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"option"}}],[11,"get_layer","","Returns the layer of the texture.",619,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"u32"}}],[11,"main_level","","Returns a structure that represents the main mipmap level of this layer of the texture.",619,{"inputs":[{"name":"textureanylayer"}],"output":{"name":"textureanylayermipmap"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of this layer of the texture.",619,{"inputs":[{"name":"textureanylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"get_width","","Returns the width of the mipmap.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the mipmap.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the mipmap.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the texture.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Returns a structure that represents the first layer of this mipmap of the texture. All\ntextures have a first layer.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureanylayermipmap"}}],[11,"layer","","Returns a structure that represents a specific layer of this mipmap of the texture.",620,{"inputs":[{"name":"textureanymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",620,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"raw_upload_from_pixel_buffer","","Uploads data to the texture from a buffer.",620,{"inputs":[{"name":"textureanymipmap"},{"name":"bufferslice"},{"name":"range"},{"name":"range"},{"name":"range"}],"output":null}],[11,"raw_upload_from_pixel_buffer_inverted","","Uploads data to the texture from a buffer. The R, G and B components are flipped.",620,{"inputs":[{"name":"textureanymipmap"},{"name":"bufferslice"},{"name":"range"},{"name":"range"},{"name":"range"}],"output":null}],[11,"clone","","",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"textureanylayermipmap"}}],[11,"get_texture","","Returns the texture.",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"u32"}}],[11,"get_width","","Returns the width of this texture slice.",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",621,{"inputs":[{"name":"textureanylayermipmap"}],"output":{"name":"option"}}],[11,"into_image","","Turns this into an image.",621,{"inputs":[{"name":"textureanylayermipmap"},{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"textureanyimage"}}],[11,"get_texture","","Returns the texture.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"u32"}}],[11,"get_cubemap_layer","","Returns the cubemap layer of this image, or `None` if the texture is not a cubemap.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"option"}}],[11,"get_width","","Returns the width of this texture slice.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of this texture slice.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"option"}}],[11,"get_samples","","Returns the number of samples of the texture.",622,{"inputs":[{"name":"textureanyimage"}],"output":{"name":"option"}}],[11,"raw_read","","Reads the content of the image.",622,{"inputs":[{"name":"textureanyimage"},{"name":"rect"}],"output":{"name":"t"}}],[11,"raw_read_to_pixel_buffer","","Reads the content of the image to a pixel buffer.",622,{"inputs":[{"name":"textureanyimage"},{"name":"rect"},{"name":"pixelbuffer"}],"output":null}],[11,"raw_clear_buffer","","Clears the content of the texture to a specific value.",622,{"inputs":[{"name":"textureanyimage"},{"name":"d"}],"output":null}],[11,"fmt","","",601,{"inputs":[{"name":"getformaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",601,{"inputs":[{"name":"getformaterror"}],"output":{"name":"getformaterror"}}],[11,"fmt","","",601,{"inputs":[{"name":"getformaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",601,{"inputs":[{"name":"getformaterror"}],"output":{"name":"str"}}],[11,"eq","","",599,{"inputs":[{"name":"internalformat"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"ne","","",599,{"inputs":[{"name":"internalformat"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"fmt","","",599,{"inputs":[{"name":"internalformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",599,{"inputs":[{"name":"internalformat"}],"output":{"name":"internalformat"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",599,{"inputs":[{"name":"internalformat"}],"output":{"name":"usize"}}],[11,"eq","","",600,{"inputs":[{"name":"internalformattype"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[11,"ne","","",600,{"inputs":[{"name":"internalformattype"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[11,"fmt","","",600,{"inputs":[{"name":"internalformattype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",600,{"inputs":[{"name":"internalformattype"}],"output":{"name":"internalformattype"}}],[0,"texture1d","","Contains the implementation of `Texture1d`.",null,null],[3,"Texture1d","glium::texture::texture1d","A one-dimensional texture  containing floating-point data.",null,null],[3,"Texture1dMipmap","","Represents a single mipmap level of a `Texture1d`.",null,null],[11,"get_id","","",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",623,{"inputs":[{"name":"texture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",623,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1d"}}],[11,"width","","Returns the width of that image.",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",623,{"inputs":[{"name":"texture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",623,{"inputs":[{"name":"texture1d"}],"output":{"name":"texture1dmipmap"}}],[11,"clone","","",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1dmipmap"}}],[11,"deref","","",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1d"}}],[11,"get_level","","Returns the texture level.",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",624,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture1d","glium::texture","Contains the implementation of `CompressedTexture1d`.",null,null],[3,"CompressedTexture1d","glium::texture::compressed_texture1d","A compressed one-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture1dMipmap","","Represents a single mipmap level of a `CompressedTexture1d`.",null,null],[11,"get_id","","",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",625,null],[11,"with_format","","Builds a new texture with a specific format.",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1d"}}],[11,"width","","Returns the width of that image.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",625,{"inputs":[{"name":"compressedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",625,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"clone","","",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"deref","","",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",626,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture1d","glium::texture","Contains the implementation of `SrgbTexture1d`.",null,null],[3,"SrgbTexture1d","glium::texture::srgb_texture1d","A one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dMipmap","","Represents a single mipmap level of a `SrgbTexture1d`.",null,null],[11,"get_id","","",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1d"}}],[11,"width","","Returns the width of that image.",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",627,{"inputs":[{"name":"srgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",627,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"clone","","",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"deref","","",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",628,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture1d","glium::texture","Contains the implementation of `CompressedSrgbTexture1d`.",null,null],[3,"CompressedSrgbTexture1d","glium::texture::compressed_srgb_texture1d","A compressed one-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1d`.",null,null],[11,"get_id","","",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",629,null],[11,"with_format","","Builds a new texture with a specific format.",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"width","","Returns the width of that image.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",629,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",629,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"deref","","",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",630,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture1d","glium::texture","Contains the implementation of `IntegralTexture1d`.",null,null],[3,"IntegralTexture1d","glium::texture::integral_texture1d","A one-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture1dMipmap","","Represents a single mipmap level of a `IntegralTexture1d`.",null,null],[11,"get_id","","",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",631,{"inputs":[{"name":"integraltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1d"}}],[11,"width","","Returns the width of that image.",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",631,{"inputs":[{"name":"integraltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",631,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"clone","","",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"deref","","",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",632,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture1d","glium::texture","Contains the implementation of `UnsignedTexture1d`.",null,null],[3,"UnsignedTexture1d","glium::texture::unsigned_texture1d","A one-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dMipmap","","Represents a single mipmap level of a `UnsignedTexture1d`.",null,null],[11,"get_id","","",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1d"}}],[11,"width","","Returns the width of that image.",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",633,{"inputs":[{"name":"unsignedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",633,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"clone","","",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"deref","","",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",634,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture1d","glium::texture","Contains the implementation of `DepthTexture1d`.",null,null],[3,"DepthTexture1d","glium::texture::depth_texture1d","A one-dimensional texture  containing depth data.",null,null],[3,"DepthTexture1dMipmap","","Represents a single mipmap level of a `DepthTexture1d`.",null,null],[11,"get_id","","",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",635,{"inputs":[{"name":"depthtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1d"}}],[11,"width","","Returns the width of that image.",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",635,{"inputs":[{"name":"depthtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",635,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"clone","","",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"deref","","",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",636,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture1d","glium::texture","Contains the implementation of `StencilTexture1d`.",null,null],[3,"StencilTexture1d","glium::texture::stencil_texture1d","A one-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture1dMipmap","","Represents a single mipmap level of a `StencilTexture1d`.",null,null],[11,"get_id","","",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1d"}}],[11,"width","","Returns the width of that image.",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",637,{"inputs":[{"name":"stenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",637,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"clone","","",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"deref","","",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",638,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture1d","glium::texture","Contains the implementation of `DepthStencilTexture1d`.",null,null],[3,"DepthStencilTexture1d","glium::texture::depth_stencil_texture1d","A one-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dMipmap","","Represents a single mipmap level of a `DepthStencilTexture1d`.",null,null],[11,"get_id","","",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"gluint"}}],[11,"fmt","","",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1d"}}],[11,"width","","Returns the width of that image.",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",639,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",639,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"clone","","",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"deref","","",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",640,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d","glium::texture","Contains the implementation of `Texture2d`.",null,null],[3,"Texture2d","glium::texture::texture2d","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMipmap","","Represents a single mipmap level of a `Texture2d`.",null,null],[11,"get_id","","",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",641,{"inputs":[{"name":"texture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",641,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2d"}}],[11,"width","","Returns the width of that image.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",641,null],[11,"as_surface","","Starts drawing on the texture.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",641,{"inputs":[{"name":"texture2d"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"resident","","Turns the texture into a `ResidentTexture`.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",641,{"inputs":[{"name":"texture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",641,{"inputs":[{"name":"texture2d"}],"output":{"name":"texture2dmipmap"}}],[11,"clone","","",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2dmipmap"}}],[11,"deref","","",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",642,null],[11,"write","","Uploads some data in the texture level.",642,{"inputs":[{"name":"texture2dmipmap"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"get_texture","","Returns the corresponding texture.",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2d"}}],[11,"get_level","","Returns the texture level.",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",642,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture2d","glium::texture","Contains the implementation of `CompressedTexture2d`.",null,null],[3,"CompressedTexture2d","glium::texture::compressed_texture2d","A compressed two-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture2dMipmap","","Represents a single mipmap level of a `CompressedTexture2d`.",null,null],[11,"get_id","","",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",643,null],[11,"with_format","","Builds a new texture with a specific format.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2d"}}],[11,"width","","Returns the width of that image.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",643,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",643,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",643,{"inputs":[{"name":"compressedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",643,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"clone","","",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"deref","","",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",644,null],[11,"write","","Uploads some data in the texture level.",644,{"inputs":[{"name":"compressedtexture2dmipmap"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",644,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",644,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture2d","glium::texture","Contains the implementation of `SrgbTexture2d`.",null,null],[3,"SrgbTexture2d","glium::texture::srgb_texture2d","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMipmap","","Represents a single mipmap level of a `SrgbTexture2d`.",null,null],[11,"get_id","","",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2d"}}],[11,"width","","Returns the width of that image.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",645,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"resident","","Turns the texture into a `ResidentTexture`.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",645,{"inputs":[{"name":"srgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",645,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"clone","","",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"deref","","",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",646,null],[11,"write","","Uploads some data in the texture level.",646,{"inputs":[{"name":"srgbtexture2dmipmap"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"get_texture","","Returns the corresponding texture.",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",646,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture2d","glium::texture","Contains the implementation of `CompressedSrgbTexture2d`.",null,null],[3,"CompressedSrgbTexture2d","glium::texture::compressed_srgb_texture2d","A compressed two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2d`.",null,null],[11,"get_id","","",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",647,null],[11,"with_format","","Builds a new texture with a specific format.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"width","","Returns the width of that image.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",647,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",647,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",647,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",647,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"deref","","",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",648,null],[11,"write","","Uploads some data in the texture level.",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"},{"name":"rect"},{"name":"t"}],"output":null}],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",648,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",648,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture2d","glium::texture","Contains the implementation of `IntegralTexture2d`.",null,null],[3,"IntegralTexture2d","glium::texture::integral_texture2d","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMipmap","","Represents a single mipmap level of a `IntegralTexture2d`.",null,null],[11,"get_id","","",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",649,{"inputs":[{"name":"integraltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2d"}}],[11,"width","","Returns the width of that image.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",649,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",649,{"inputs":[{"name":"integraltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",649,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"clone","","",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"deref","","",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",650,null],[11,"get_texture","","Returns the corresponding texture.",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",650,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d","glium::texture","Contains the implementation of `UnsignedTexture2d`.",null,null],[3,"UnsignedTexture2d","glium::texture::unsigned_texture2d","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMipmap","","Represents a single mipmap level of a `UnsignedTexture2d`.",null,null],[11,"get_id","","",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2d"}}],[11,"width","","Returns the width of that image.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",651,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",651,{"inputs":[{"name":"unsignedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",651,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"clone","","",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"deref","","",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",652,null],[11,"get_texture","","Returns the corresponding texture.",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",652,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d","glium::texture","Contains the implementation of `DepthTexture2d`.",null,null],[3,"DepthTexture2d","glium::texture::depth_texture2d","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMipmap","","Represents a single mipmap level of a `DepthTexture2d`.",null,null],[11,"get_id","","",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",653,{"inputs":[{"name":"depthtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2d"}}],[11,"width","","Returns the width of that image.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",653,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",653,{"inputs":[{"name":"depthtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",653,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"clone","","",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"deref","","",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",654,null],[11,"get_texture","","Returns the corresponding texture.",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",654,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d","glium::texture","Contains the implementation of `StencilTexture2d`.",null,null],[3,"StencilTexture2d","glium::texture::stencil_texture2d","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMipmap","","Represents a single mipmap level of a `StencilTexture2d`.",null,null],[11,"get_id","","",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2d"}}],[11,"width","","Returns the width of that image.",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",655,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",655,{"inputs":[{"name":"stenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",655,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"clone","","",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"deref","","",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",656,null],[11,"get_texture","","Returns the corresponding texture.",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",656,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d","glium::texture","Contains the implementation of `DepthStencilTexture2d`.",null,null],[3,"DepthStencilTexture2d","glium::texture::depth_stencil_texture2d","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMipmap","","Represents a single mipmap level of a `DepthStencilTexture2d`.",null,null],[11,"get_id","","",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"gluint"}}],[11,"fmt","","",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2d"}}],[11,"width","","Returns the width of that image.",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",657,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",657,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",657,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"clone","","",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"deref","","",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",658,null],[11,"get_texture","","Returns the corresponding texture.",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",658,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_multisample","glium::texture","Contains the implementation of `Texture2dMultisample`.",null,null],[3,"Texture2dMultisample","glium::texture::texture2d_multisample","A two-dimensional texture  containing floating-point data.",null,null],[3,"Texture2dMultisampleMipmap","","Represents a single mipmap level of a `Texture2dMultisample`.",null,null],[11,"get_id","","",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",659,{"inputs":[{"name":"texture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",659,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",659,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",659,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",659,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisample"}}],[11,"width","","Returns the width of that image.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",659,null],[11,"as_surface","","Starts drawing on the texture.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",659,{"inputs":[{"name":"texture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",659,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"clone","","",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"deref","","",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",660,null],[11,"get_texture","","Returns the corresponding texture.",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",660,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[0,"integral_texture2d_multisample","glium::texture","Contains the implementation of `IntegralTexture2dMultisample`.",null,null],[3,"IntegralTexture2dMultisample","glium::texture::integral_texture2d_multisample","A two-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisample`.",null,null],[11,"get_id","","",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",661,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",661,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",661,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",661,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",661,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",661,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",661,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",661,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"deref","","",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",662,null],[11,"get_texture","","Returns the corresponding texture.",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",662,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[0,"srgb_texture2d_multisample","glium::texture","Contains the implementation of `SrgbTexture2dMultisample`.",null,null],[3,"SrgbTexture2dMultisample","glium::texture::srgb_texture2d_multisample","A two-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisample`.",null,null],[11,"get_id","","",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",663,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",663,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",663,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",663,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",663,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",663,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",663,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",663,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"deref","","",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",664,null],[11,"get_texture","","Returns the corresponding texture.",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",664,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_multisample","glium::texture","Contains the implementation of `UnsignedTexture2dMultisample`.",null,null],[3,"UnsignedTexture2dMultisample","glium::texture::unsigned_texture2d_multisample","A two-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisample`.",null,null],[11,"get_id","","",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",665,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",665,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",665,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"deref","","",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",666,null],[11,"get_texture","","Returns the corresponding texture.",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",666,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_multisample","glium::texture","Contains the implementation of `DepthTexture2dMultisample`.",null,null],[3,"DepthTexture2dMultisample","glium::texture::depth_texture2d_multisample","A two-dimensional texture  containing depth data.",null,null],[3,"DepthTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisample`.",null,null],[11,"get_id","","",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",667,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",667,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",667,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",667,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",667,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"width","","Returns the width of that image.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",667,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",667,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",667,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"deref","","",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",668,null],[11,"get_texture","","Returns the corresponding texture.",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",668,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_multisample","glium::texture","Contains the implementation of `StencilTexture2dMultisample`.",null,null],[3,"StencilTexture2dMultisample","glium::texture::stencil_texture2d_multisample","A two-dimensional texture  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisample`.",null,null],[11,"get_id","","",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",669,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",669,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",669,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",669,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",669,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",669,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",669,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",669,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"deref","","",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",670,null],[11,"get_texture","","Returns the corresponding texture.",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",670,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisample`.",null,null],[3,"DepthStencilTexture2dMultisample","glium::texture::depth_stencil_texture2d_multisample","A two-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisample`.",null,null],[11,"get_id","","",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"gluint"}}],[11,"fmt","","",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"width","","Returns the width of that image.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",671,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",671,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"deref","","",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",672,null],[11,"get_texture","","Returns the corresponding texture.",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"into","","",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",672,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"texture3d","glium::texture","Contains the implementation of `Texture3d`.",null,null],[3,"Texture3d","glium::texture::texture3d","A three-dimensional texture  containing floating-point data.",null,null],[3,"Texture3dMipmap","","Represents a single mipmap level of a `Texture3d`.",null,null],[11,"get_id","","",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",673,{"inputs":[{"name":"texture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",673,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture3d"}}],[11,"width","","Returns the width of that image.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",673,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",673,{"inputs":[{"name":"texture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",673,{"inputs":[{"name":"texture3d"}],"output":{"name":"texture3dmipmap"}}],[11,"clone","","",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3dmipmap"}}],[11,"deref","","",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",674,null],[11,"get_texture","","Returns the corresponding texture.",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3d"}}],[11,"get_level","","Returns the texture level.",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",674,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture3d","glium::texture","Contains the implementation of `CompressedTexture3d`.",null,null],[3,"CompressedTexture3d","glium::texture::compressed_texture3d","A compressed three-dimensional texture  containing floating-point data.",null,null],[3,"CompressedTexture3dMipmap","","Represents a single mipmap level of a `CompressedTexture3d`.",null,null],[11,"get_id","","",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",675,null],[11,"with_format","","Builds a new texture with a specific format.",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture3d"}}],[11,"width","","Returns the width of that image.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",675,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",675,{"inputs":[{"name":"compressedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",675,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"clone","","",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"deref","","",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",676,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",676,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture3d","glium::texture","Contains the implementation of `SrgbTexture3d`.",null,null],[3,"SrgbTexture3d","glium::texture::srgb_texture3d","A three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"SrgbTexture3dMipmap","","Represents a single mipmap level of a `SrgbTexture3d`.",null,null],[11,"get_id","","",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture3d"}}],[11,"width","","Returns the width of that image.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",677,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",677,{"inputs":[{"name":"srgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",677,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"clone","","",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"deref","","",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",678,null],[11,"get_texture","","Returns the corresponding texture.",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",678,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture3d","glium::texture","Contains the implementation of `CompressedSrgbTexture3d`.",null,null],[3,"CompressedSrgbTexture3d","glium::texture::compressed_srgb_texture3d","A compressed three-dimensional texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture3dMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture3d`.",null,null],[11,"get_id","","",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",679,null],[11,"with_format","","Builds a new texture with a specific format.",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"width","","Returns the width of that image.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",679,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",679,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",679,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"deref","","",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",680,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",680,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture3d","glium::texture","Contains the implementation of `IntegralTexture3d`.",null,null],[3,"IntegralTexture3d","glium::texture::integral_texture3d","A three-dimensional texture  containing signed integral data.",null,null],[3,"IntegralTexture3dMipmap","","Represents a single mipmap level of a `IntegralTexture3d`.",null,null],[11,"get_id","","",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",681,{"inputs":[{"name":"integraltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture3d"}}],[11,"width","","Returns the width of that image.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",681,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",681,{"inputs":[{"name":"integraltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",681,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"clone","","",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"deref","","",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",682,null],[11,"get_texture","","Returns the corresponding texture.",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",682,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture3d","glium::texture","Contains the implementation of `UnsignedTexture3d`.",null,null],[3,"UnsignedTexture3d","glium::texture::unsigned_texture3d","A three-dimensional texture  containing unsigned integral data.",null,null],[3,"UnsignedTexture3dMipmap","","Represents a single mipmap level of a `UnsignedTexture3d`.",null,null],[11,"get_id","","",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture3d"}}],[11,"width","","Returns the width of that image.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",683,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",683,{"inputs":[{"name":"unsignedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",683,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"clone","","",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"deref","","",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",684,null],[11,"get_texture","","Returns the corresponding texture.",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",684,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture3d","glium::texture","Contains the implementation of `DepthTexture3d`.",null,null],[3,"DepthTexture3d","glium::texture::depth_texture3d","A three-dimensional texture  containing depth data.",null,null],[3,"DepthTexture3dMipmap","","Represents a single mipmap level of a `DepthTexture3d`.",null,null],[11,"get_id","","",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",685,{"inputs":[{"name":"depthtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture3d","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture3d"}}],[11,"width","","Returns the width of that image.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",685,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",685,{"inputs":[{"name":"depthtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",685,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"clone","","",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"deref","","",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",686,null],[11,"get_texture","","Returns the corresponding texture.",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",686,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthattachment"}}],[0,"depth_stencil_texture3d","glium::texture","Contains the implementation of `DepthStencilTexture3d`.",null,null],[3,"DepthStencilTexture3d","glium::texture::depth_stencil_texture3d","A three-dimensional texture  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture3dMipmap","","Represents a single mipmap level of a `DepthStencilTexture3d`.",null,null],[11,"get_id","","",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"gluint"}}],[11,"fmt","","",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture3d"}}],[11,"width","","Returns the width of that image.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",687,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",687,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",687,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"clone","","",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"deref","","",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"depth","","Returns the depth of that image.",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width, height and depth of that image.",688,null],[11,"get_texture","","Returns the corresponding texture.",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"into","","",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",688,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"texture1d_array","glium::texture","Contains the implementation of `Texture1dArray`.",null,null],[3,"Texture1dArray","glium::texture::texture1d_array","An array of one-dimensional textures  containing floating-point data.",null,null],[3,"Texture1dArrayLayer","","Represents a single layer of a `Texture1dArray`.",null,null],[3,"Texture1dArrayMipmap","","Represents a single mipmap level of a `Texture1dArray`.",null,null],[3,"Texture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture1dArray`.",null,null],[11,"get_id","","",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",689,{"inputs":[{"name":"texture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",689,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture1darray"}}],[11,"width","","Returns the width of that image.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"texture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",689,{"inputs":[{"name":"texture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",689,{"inputs":[{"name":"texture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",689,{"inputs":[{"name":"texture1darray"}],"output":{"name":"texture1darraymipmap"}}],[11,"clone","","",690,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraylayer"}}],[11,"width","","Returns the width of that image.",690,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",690,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",690,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",690,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",690,{"inputs":[{"name":"texture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",690,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"clone","","",691,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darraymipmap"}}],[11,"deref","","",691,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",691,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",691,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darray"}}],[11,"get_level","","Returns the texture level.",691,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",691,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",691,{"inputs":[{"name":"texture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",692,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"texture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",692,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",692,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",692,{"inputs":[{"name":"texture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture1d_array","glium::texture","Contains the implementation of `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArray","glium::texture::compressed_texture1d_array","An array of compressed one-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture1dArrayLayer","","Represents a single layer of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture1dArray`.",null,null],[3,"CompressedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture1dArray`.",null,null],[11,"get_id","","",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture1darray"}}],[11,"width","","Returns the width of that image.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",693,{"inputs":[{"name":"compressedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",693,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"clone","","",694,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",694,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",694,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",694,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",694,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",694,{"inputs":[{"name":"compressedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",694,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"clone","","",695,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"deref","","",695,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",695,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",695,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",695,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",695,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",695,{"inputs":[{"name":"compressedtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",696,{"inputs":[{"name":"compressedtexture1darraylayermipmap"}],"output":{"name":"compressedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",696,{"inputs":[{"name":"compressedtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",696,{"inputs":[{"name":"compressedtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture1d_array","glium::texture","Contains the implementation of `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArray","glium::texture::srgb_texture1d_array","An array of one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture1dArrayLayer","","Represents a single layer of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture1dArray`.",null,null],[3,"SrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture1dArray`.",null,null],[11,"get_id","","",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture1darray"}}],[11,"width","","Returns the width of that image.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",697,{"inputs":[{"name":"srgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",697,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"clone","","",698,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",698,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",698,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",698,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",698,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",698,{"inputs":[{"name":"srgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",698,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"clone","","",699,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"deref","","",699,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",699,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",699,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",699,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",699,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",699,{"inputs":[{"name":"srgbtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",700,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"srgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",700,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",700,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",700,{"inputs":[{"name":"srgbtexture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture1d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArray","glium::texture::compressed_srgb_texture1d_array","An array of compressed one-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture1dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[3,"CompressedSrgbTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture1dArray`.",null,null],[11,"get_id","","",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"width","","Returns the width of that image.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",701,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",702,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"clone","","",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"deref","","",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",703,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",704,{"inputs":[{"name":"compressedsrgbtexture1darraylayermipmap"}],"output":{"name":"compressedsrgbtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",704,{"inputs":[{"name":"compressedsrgbtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",704,{"inputs":[{"name":"compressedsrgbtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture1d_array","glium::texture","Contains the implementation of `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArray","glium::texture::integral_texture1d_array","An array of one-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture1dArrayLayer","","Represents a single layer of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture1dArray`.",null,null],[3,"IntegralTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture1dArray`.",null,null],[11,"get_id","","",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture1darray"}}],[11,"width","","Returns the width of that image.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",705,{"inputs":[{"name":"integraltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",705,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"clone","","",706,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",706,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",706,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",706,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",706,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",706,{"inputs":[{"name":"integraltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",706,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"clone","","",707,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"deref","","",707,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",707,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",707,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",707,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",707,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",707,{"inputs":[{"name":"integraltexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",708,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"integraltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",708,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",708,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",708,{"inputs":[{"name":"integraltexture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture1d_array","glium::texture","Contains the implementation of `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArray","glium::texture::unsigned_texture1d_array","An array of one-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture1dArrayLayer","","Represents a single layer of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture1dArray`.",null,null],[3,"UnsignedTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture1dArray`.",null,null],[11,"get_id","","",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture1darray"}}],[11,"width","","Returns the width of that image.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",709,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",709,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"clone","","",710,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",710,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",710,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",710,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",710,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",710,{"inputs":[{"name":"unsignedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",710,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"clone","","",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"deref","","",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",711,{"inputs":[{"name":"unsignedtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",712,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"unsignedtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",712,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",712,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",712,{"inputs":[{"name":"unsignedtexture1darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture1d_array","glium::texture","Contains the implementation of `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArray","glium::texture::depth_texture1d_array","An array of one-dimensional textures  containing depth data.",null,null],[3,"DepthTexture1dArrayLayer","","Represents a single layer of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthTexture1dArray`.",null,null],[3,"DepthTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture1dArray`.",null,null],[11,"get_id","","",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture1d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture1darray"}}],[11,"width","","Returns the width of that image.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",713,{"inputs":[{"name":"depthtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",713,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"clone","","",714,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"width","","Returns the width of that image.",714,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",714,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",714,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",714,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",714,{"inputs":[{"name":"depthtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",714,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"clone","","",715,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"deref","","",715,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",715,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",715,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",715,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",715,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",715,{"inputs":[{"name":"depthtexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",716,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"depthtexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",716,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",716,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",716,{"inputs":[{"name":"depthtexture1darraylayermipmap"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture1d_array","glium::texture","Contains the implementation of `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArray","glium::texture::stencil_texture1d_array","An array of one-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture1dArrayLayer","","Represents a single layer of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayMipmap","","Represents a single mipmap level of a `StencilTexture1dArray`.",null,null],[3,"StencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture1dArray`.",null,null],[11,"get_id","","",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture1darray"}}],[11,"width","","Returns the width of that image.",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",717,{"inputs":[{"name":"stenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",717,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"clone","","",718,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",718,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",718,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",718,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",718,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",718,{"inputs":[{"name":"stenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",718,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"clone","","",719,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"deref","","",719,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",719,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",719,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",719,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",719,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",719,{"inputs":[{"name":"stenciltexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",720,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"stenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",720,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",720,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",720,{"inputs":[{"name":"stenciltexture1darraylayermipmap"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture1d_array","glium::texture","Contains the implementation of `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArray","glium::texture::depth_stencil_texture1d_array","An array of one-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture1dArrayLayer","","Represents a single layer of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture1dArray`.",null,null],[3,"DepthStencilTexture1dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture1dArray`.",null,null],[11,"get_id","","",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"width","","Returns the width of that image.",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"layer","","Access a single layer of this texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",721,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"width","","Returns the width of that image.",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",722,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"clone","","",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"deref","","",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",723,{"inputs":[{"name":"depthstenciltexture1darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",724,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"depthstenciltexture1darraylayermipmap"}}],[11,"width","","Returns the width of that image.",724,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"u32"}}],[11,"into","","",724,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",724,{"inputs":[{"name":"depthstenciltexture1darraylayermipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_array","glium::texture","Contains the implementation of `Texture2dArray`.",null,null],[3,"Texture2dArray","glium::texture::texture2d_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dArrayLayer","","Represents a single layer of a `Texture2dArray`.",null,null],[3,"Texture2dArrayMipmap","","Represents a single mipmap level of a `Texture2dArray`.",null,null],[3,"Texture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dArray`.",null,null],[11,"get_id","","",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",725,{"inputs":[{"name":"texture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",725,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2darray"}}],[11,"width","","Returns the width of that image.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",725,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"texture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",725,{"inputs":[{"name":"texture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",725,{"inputs":[{"name":"texture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",725,{"inputs":[{"name":"texture2darray"}],"output":{"name":"texture2darraymipmap"}}],[11,"clone","","",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraylayer"}}],[11,"width","","Returns the width of that image.",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",726,null],[11,"get_texture","","Returns the corresponding texture.",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",726,{"inputs":[{"name":"texture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",726,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"clone","","",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darraymipmap"}}],[11,"deref","","",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",727,null],[11,"get_texture","","Returns the corresponding texture.",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darray"}}],[11,"get_level","","Returns the texture level.",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",727,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",727,{"inputs":[{"name":"texture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",728,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"texture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",728,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",728,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",728,null],[11,"into","","",728,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",728,{"inputs":[{"name":"texture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_texture2d_array","glium::texture","Contains the implementation of `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArray","glium::texture::compressed_texture2d_array","An array of compressed two-dimensional textures  containing floating-point data.",null,null],[3,"CompressedTexture2dArrayLayer","","Represents a single layer of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedTexture2dArray`.",null,null],[3,"CompressedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedTexture2dArray`.",null,null],[11,"get_id","","",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedtexture2darray"}}],[11,"width","","Returns the width of that image.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",729,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",729,{"inputs":[{"name":"compressedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",729,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"clone","","",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",730,null],[11,"get_texture","","Returns the corresponding texture.",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",730,{"inputs":[{"name":"compressedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",730,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"clone","","",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"deref","","",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",731,null],[11,"get_texture","","Returns the corresponding texture.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",731,{"inputs":[{"name":"compressedtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",732,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"compressedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",732,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",732,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",732,null],[11,"into","","",732,{"inputs":[{"name":"compressedtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[0,"srgb_texture2d_array","glium::texture","Contains the implementation of `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArray","glium::texture::srgb_texture2d_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dArrayLayer","","Represents a single layer of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dArray`.",null,null],[3,"SrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dArray`.",null,null],[11,"get_id","","",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2darray"}}],[11,"width","","Returns the width of that image.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",733,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",733,{"inputs":[{"name":"srgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",733,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"clone","","",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",734,null],[11,"get_texture","","Returns the corresponding texture.",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",734,{"inputs":[{"name":"srgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",734,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"clone","","",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"deref","","",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",735,null],[11,"get_texture","","Returns the corresponding texture.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",735,{"inputs":[{"name":"srgbtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",736,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"srgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",736,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",736,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",736,null],[11,"into","","",736,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",736,{"inputs":[{"name":"srgbtexture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_texture2d_array","glium::texture","Contains the implementation of `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArray","glium::texture::compressed_srgb_texture2d_array","An array of compressed two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbTexture2dArrayLayer","","Represents a single layer of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[3,"CompressedSrgbTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbTexture2dArray`.",null,null],[11,"get_id","","",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"width","","Returns the width of that image.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",737,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",737,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",738,null],[11,"get_texture","","Returns the corresponding texture.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",738,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"clone","","",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"deref","","",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",739,null],[11,"get_texture","","Returns the corresponding texture.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",739,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",740,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"compressedsrgbtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",740,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",740,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",740,null],[11,"into","","",740,{"inputs":[{"name":"compressedsrgbtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[0,"integral_texture2d_array","glium::texture","Contains the implementation of `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArray","glium::texture::integral_texture2d_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dArrayLayer","","Represents a single layer of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dArray`.",null,null],[3,"IntegralTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dArray`.",null,null],[11,"get_id","","",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2darray"}}],[11,"width","","Returns the width of that image.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",741,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",741,{"inputs":[{"name":"integraltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",741,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"clone","","",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",742,null],[11,"get_texture","","Returns the corresponding texture.",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",742,{"inputs":[{"name":"integraltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",742,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"clone","","",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"deref","","",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",743,null],[11,"get_texture","","Returns the corresponding texture.",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",743,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",743,{"inputs":[{"name":"integraltexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",744,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"integraltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",744,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",744,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",744,null],[11,"into","","",744,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",744,{"inputs":[{"name":"integraltexture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_array","glium::texture","Contains the implementation of `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArray","glium::texture::unsigned_texture2d_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dArrayLayer","","Represents a single layer of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dArray`.",null,null],[3,"UnsignedTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dArray`.",null,null],[11,"get_id","","",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2darray"}}],[11,"width","","Returns the width of that image.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",745,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",745,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",745,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"clone","","",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",746,null],[11,"get_texture","","Returns the corresponding texture.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",746,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"clone","","",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"deref","","",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",747,null],[11,"get_texture","","Returns the corresponding texture.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",747,{"inputs":[{"name":"unsignedtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",748,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"unsignedtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",748,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",748,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",748,null],[11,"into","","",748,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",748,{"inputs":[{"name":"unsignedtexture2darraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_array","glium::texture","Contains the implementation of `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArray","glium::texture::depth_texture2d_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dArrayLayer","","Represents a single layer of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dArray`.",null,null],[3,"DepthTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dArray`.",null,null],[11,"get_id","","",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2darray"}}],[11,"width","","Returns the width of that image.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",749,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",749,{"inputs":[{"name":"depthtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",749,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"clone","","",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"width","","Returns the width of that image.",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",750,null],[11,"get_texture","","Returns the corresponding texture.",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",750,{"inputs":[{"name":"depthtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",750,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"clone","","",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"deref","","",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",751,null],[11,"get_texture","","Returns the corresponding texture.",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",751,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",751,{"inputs":[{"name":"depthtexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",752,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"depthtexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",752,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",752,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",752,null],[11,"into","","",752,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",752,{"inputs":[{"name":"depthtexture2darraylayermipmap"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_array","glium::texture","Contains the implementation of `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArray","glium::texture::stencil_texture2d_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dArrayLayer","","Represents a single layer of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dArray`.",null,null],[3,"StencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dArray`.",null,null],[11,"get_id","","",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2darray"}}],[11,"width","","Returns the width of that image.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",753,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",753,{"inputs":[{"name":"stenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",753,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"clone","","",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",754,null],[11,"get_texture","","Returns the corresponding texture.",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",754,{"inputs":[{"name":"stenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",754,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"clone","","",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"deref","","",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",755,null],[11,"get_texture","","Returns the corresponding texture.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",755,{"inputs":[{"name":"stenciltexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",756,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"stenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",756,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",756,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",756,null],[11,"into","","",756,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",756,{"inputs":[{"name":"stenciltexture2darraylayermipmap"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_array","glium::texture","Contains the implementation of `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArray","glium::texture::depth_stencil_texture2d_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dArrayLayer","","Represents a single layer of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dArray`.",null,null],[3,"DepthStencilTexture2dArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dArray`.",null,null],[11,"get_id","","",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"gluint"}}],[11,"fmt","","",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"width","","Returns the width of that image.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",757,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"layer","","Access a single layer of this texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",757,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"width","","Returns the width of that image.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",758,null],[11,"get_texture","","Returns the corresponding texture.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",758,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"clone","","",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"deref","","",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",759,null],[11,"get_texture","","Returns the corresponding texture.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",759,{"inputs":[{"name":"depthstenciltexture2darraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",760,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"depthstenciltexture2darraylayermipmap"}}],[11,"width","","Returns the width of that image.",760,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",760,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",760,null],[11,"into","","",760,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",760,{"inputs":[{"name":"depthstenciltexture2darraylayermipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"texture2d_multisample_array","glium::texture","Contains the implementation of `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArray","glium::texture::texture2d_multisample_array","An array of two-dimensional textures  containing floating-point data.",null,null],[3,"Texture2dMultisampleArrayLayer","","Represents a single layer of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `Texture2dMultisampleArray`.",null,null],[3,"Texture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `Texture2dMultisampleArray`.",null,null],[11,"get_id","","",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",761,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",761,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"texture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",762,null],[11,"get_texture","","Returns the corresponding texture.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",762,{"inputs":[{"name":"texture2dmultisamplearraylayer"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"clone","","",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"deref","","",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",763,null],[11,"get_texture","","Returns the corresponding texture.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",763,{"inputs":[{"name":"texture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",764,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"texture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",764,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",764,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",764,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",764,null],[11,"into","","",764,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",764,{"inputs":[{"name":"texture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"srgb_texture2d_multisample_array","glium::texture","Contains the implementation of `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArray","glium::texture::srgb_texture2d_multisample_array","An array of two-dimensional textures  containing sRGB floating-point data.",null,null],[3,"SrgbTexture2dMultisampleArrayLayer","","Represents a single layer of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[3,"SrgbTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbTexture2dMultisampleArray`.",null,null],[11,"get_id","","",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",765,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",765,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"srgbtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",766,null],[11,"get_texture","","Returns the corresponding texture.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",766,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayer"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"deref","","",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",767,null],[11,"get_texture","","Returns the corresponding texture.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",767,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",768,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"srgbtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",768,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",768,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",768,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",768,null],[11,"into","","",768,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",768,{"inputs":[{"name":"srgbtexture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"integral_texture2d_multisample_array","glium::texture","Contains the implementation of `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArray","glium::texture::integral_texture2d_multisample_array","An array of two-dimensional textures  containing signed integral data.",null,null],[3,"IntegralTexture2dMultisampleArrayLayer","","Represents a single layer of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[3,"IntegralTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralTexture2dMultisampleArray`.",null,null],[11,"get_id","","",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",769,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",769,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"integraltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",770,null],[11,"get_texture","","Returns the corresponding texture.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",770,{"inputs":[{"name":"integraltexture2dmultisamplearraylayer"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"deref","","",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",771,null],[11,"get_texture","","Returns the corresponding texture.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",771,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",772,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"integraltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",772,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",772,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",772,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",772,null],[11,"into","","",772,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",772,{"inputs":[{"name":"integraltexture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"unsigned_texture2d_multisample_array","glium::texture","Contains the implementation of `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArray","glium::texture::unsigned_texture2d_multisample_array","An array of two-dimensional textures  containing unsigned integral data.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayer","","Represents a single layer of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedTexture2dMultisampleArray`.",null,null],[11,"get_id","","",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",773,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",773,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"unsignedtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",774,null],[11,"get_texture","","Returns the corresponding texture.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",774,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayer"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"deref","","",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",775,null],[11,"get_texture","","Returns the corresponding texture.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",775,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",776,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",776,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",776,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",776,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",776,null],[11,"into","","",776,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",776,{"inputs":[{"name":"unsignedtexture2dmultisamplearraylayermipmap"}],"output":{"name":"colorattachment"}}],[0,"depth_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArray","glium::texture::depth_texture2d_multisample_array","An array of two-dimensional textures  containing depth data.",null,null],[3,"DepthTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[3,"DepthTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthTexture2dMultisampleArray`.",null,null],[11,"get_id","","",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_texture2d_multisample_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",777,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",777,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"depthtexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",778,null],[11,"get_texture","","Returns the corresponding texture.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",778,{"inputs":[{"name":"depthtexture2dmultisamplearraylayer"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"deref","","",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",779,null],[11,"get_texture","","Returns the corresponding texture.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",779,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",780,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthtexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",780,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",780,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",780,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",780,null],[11,"into","","",780,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",780,{"inputs":[{"name":"depthtexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthattachment"}}],[0,"stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArray","glium::texture::stencil_texture2d_multisample_array","An array of two-dimensional textures  containing stencil data.",null,null],[3,"StencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[3,"StencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",781,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",781,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"stenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",782,null],[11,"get_texture","","Returns the corresponding texture.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",782,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayer"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",783,null],[11,"get_texture","","Returns the corresponding texture.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",783,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",784,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"stenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",784,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",784,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",784,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",784,null],[11,"into","","",784,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",784,{"inputs":[{"name":"stenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_texture2d_multisample_array","glium::texture","Contains the implementation of `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArray","glium::texture::depth_stencil_texture2d_multisample_array","An array of two-dimensional textures  containing both depth and stencil data.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayer","","Represents a single layer of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayMipmap","","Represents a single mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilTexture2dMultisampleArray`.",null,null],[11,"get_id","","",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"gluint"}}],[11,"fmt","","",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"width","","Returns the width of that image.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",785,null],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"layer","","Access a single layer of this texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",785,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayer"}}],[11,"width","","Returns the width of that image.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",786,null],[11,"get_texture","","Returns the corresponding texture.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_layer","","Returns the layer index.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",786,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayer"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"clone","","",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"deref","","",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",787,null],[11,"get_texture","","Returns the corresponding texture.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",787,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",788,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}}],[11,"width","","Returns the width of that image.",788,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",788,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"samples","","Returns the number of samples of that image.",788,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the width and height of that image.",788,null],[11,"into","","",788,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",788,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraylayermipmap"}],"output":{"name":"depthstencilattachment"}}],[0,"cubemap","glium::texture","Contains the implementation of `Cubemap`.",null,null],[3,"Cubemap","glium::texture::cubemap","A cube texture  containing floating-point data.",null,null],[3,"CubemapMipmap","","Represents a single mipmap level of a `Cubemap`.",null,null],[3,"CubemapImage","","Represents a single image of a mipmap level of a layer of `Cubemap`.",null,null],[11,"get_id","","",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",789,{"inputs":[{"name":"cubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",789,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",789,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",789,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",789,{"inputs":[{"name":"cubemap"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemap"}}],[11,"width","","Returns the width of that image.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",789,{"inputs":[{"name":"cubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",789,{"inputs":[{"name":"cubemap"}],"output":{"name":"cubemapmipmap"}}],[11,"clone","","",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"cubemapmipmap"}}],[11,"deref","","",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"cubemap"}}],[11,"get_level","","Returns the texture level.",790,{"inputs":[{"name":"cubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",790,{"inputs":[{"name":"cubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"cubemapimage"}}],[11,"clone","","",791,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"cubemapimage"}}],[11,"width","","Returns the width of that image.",791,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",791,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",791,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",791,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",791,{"inputs":[{"name":"cubemapimage"}],"output":{"name":"colorattachment"}}],[0,"compressed_cubemap","glium::texture","Contains the implementation of `CompressedCubemap`.",null,null],[3,"CompressedCubemap","glium::texture::compressed_cubemap","A compressed cube texture  containing floating-point data.",null,null],[3,"CompressedCubemapMipmap","","Represents a single mipmap level of a `CompressedCubemap`.",null,null],[3,"CompressedCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemap`.",null,null],[11,"get_id","","",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",792,{"inputs":[{"name":"compressedcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",792,{"inputs":[{"name":"compressedcubemap"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",792,{"inputs":[{"name":"compressedcubemap"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemap"}}],[11,"width","","Returns the width of that image.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",792,{"inputs":[{"name":"compressedcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",792,{"inputs":[{"name":"compressedcubemap"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"clone","","",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"compressedcubemapmipmap"}}],[11,"deref","","",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"compressedcubemap"}}],[11,"get_level","","Returns the texture level.",793,{"inputs":[{"name":"compressedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",793,{"inputs":[{"name":"compressedcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"compressedcubemapimage"}}],[11,"clone","","",794,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"compressedcubemapimage"}}],[11,"width","","Returns the width of that image.",794,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",794,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",794,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",794,{"inputs":[{"name":"compressedcubemapimage"}],"output":{"name":"textureanyimage"}}],[0,"srgb_cubemap","glium::texture","Contains the implementation of `SrgbCubemap`.",null,null],[3,"SrgbCubemap","glium::texture::srgb_cubemap","A cube texture  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapMipmap","","Represents a single mipmap level of a `SrgbCubemap`.",null,null],[3,"SrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemap`.",null,null],[11,"get_id","","",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",795,{"inputs":[{"name":"srgbcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",795,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",795,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",795,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",795,{"inputs":[{"name":"srgbcubemap"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemap"}}],[11,"width","","Returns the width of that image.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",795,{"inputs":[{"name":"srgbcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",795,{"inputs":[{"name":"srgbcubemap"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"clone","","",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"srgbcubemapmipmap"}}],[11,"deref","","",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"srgbcubemap"}}],[11,"get_level","","Returns the texture level.",796,{"inputs":[{"name":"srgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",796,{"inputs":[{"name":"srgbcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"srgbcubemapimage"}}],[11,"clone","","",797,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"srgbcubemapimage"}}],[11,"width","","Returns the width of that image.",797,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",797,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",797,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",797,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",797,{"inputs":[{"name":"srgbcubemapimage"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_cubemap","glium::texture","Contains the implementation of `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemap","glium::texture::compressed_srgb_cubemap","A compressed cube texture  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemap`.",null,null],[3,"CompressedSrgbCubemapImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemap`.",null,null],[11,"get_id","","",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",798,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",798,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",798,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"width","","Returns the width of that image.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",798,{"inputs":[{"name":"compressedsrgbcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",798,{"inputs":[{"name":"compressedsrgbcubemap"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"clone","","",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"compressedsrgbcubemapmipmap"}}],[11,"deref","","",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"compressedsrgbcubemap"}}],[11,"get_level","","Returns the texture level.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",799,{"inputs":[{"name":"compressedsrgbcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"clone","","",800,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"compressedsrgbcubemapimage"}}],[11,"width","","Returns the width of that image.",800,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",800,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",800,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",800,{"inputs":[{"name":"compressedsrgbcubemapimage"}],"output":{"name":"textureanyimage"}}],[0,"integral_cubemap","glium::texture","Contains the implementation of `IntegralCubemap`.",null,null],[3,"IntegralCubemap","glium::texture::integral_cubemap","A cube texture  containing signed integral data.",null,null],[3,"IntegralCubemapMipmap","","Represents a single mipmap level of a `IntegralCubemap`.",null,null],[3,"IntegralCubemapImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemap`.",null,null],[11,"get_id","","",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",801,{"inputs":[{"name":"integralcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",801,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",801,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",801,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",801,{"inputs":[{"name":"integralcubemap"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemap"}}],[11,"width","","Returns the width of that image.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",801,{"inputs":[{"name":"integralcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",801,{"inputs":[{"name":"integralcubemap"}],"output":{"name":"integralcubemapmipmap"}}],[11,"clone","","",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"integralcubemapmipmap"}}],[11,"deref","","",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"integralcubemap"}}],[11,"get_level","","Returns the texture level.",802,{"inputs":[{"name":"integralcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",802,{"inputs":[{"name":"integralcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"integralcubemapimage"}}],[11,"clone","","",803,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"integralcubemapimage"}}],[11,"width","","Returns the width of that image.",803,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",803,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",803,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",803,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",803,{"inputs":[{"name":"integralcubemapimage"}],"output":{"name":"colorattachment"}}],[0,"unsigned_cubemap","glium::texture","Contains the implementation of `UnsignedCubemap`.",null,null],[3,"UnsignedCubemap","glium::texture::unsigned_cubemap","A cube texture  containing unsigned integral data.",null,null],[3,"UnsignedCubemapMipmap","","Represents a single mipmap level of a `UnsignedCubemap`.",null,null],[3,"UnsignedCubemapImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemap`.",null,null],[11,"get_id","","",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",804,{"inputs":[{"name":"unsignedcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",804,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",804,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",804,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",804,{"inputs":[{"name":"unsignedcubemap"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemap"}}],[11,"width","","Returns the width of that image.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",804,{"inputs":[{"name":"unsignedcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",804,{"inputs":[{"name":"unsignedcubemap"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"clone","","",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"unsignedcubemapmipmap"}}],[11,"deref","","",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"unsignedcubemap"}}],[11,"get_level","","Returns the texture level.",805,{"inputs":[{"name":"unsignedcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",805,{"inputs":[{"name":"unsignedcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemapimage"}}],[11,"clone","","",806,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"unsignedcubemapimage"}}],[11,"width","","Returns the width of that image.",806,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",806,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",806,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",806,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",806,{"inputs":[{"name":"unsignedcubemapimage"}],"output":{"name":"colorattachment"}}],[0,"depth_cubemap","glium::texture","Contains the implementation of `DepthCubemap`.",null,null],[3,"DepthCubemap","glium::texture::depth_cubemap","A cube texture  containing depth data.",null,null],[3,"DepthCubemapMipmap","","Represents a single mipmap level of a `DepthCubemap`.",null,null],[3,"DepthCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthCubemap`.",null,null],[11,"get_id","","",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",807,{"inputs":[{"name":"depthcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",807,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",807,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",807,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",807,{"inputs":[{"name":"depthcubemap"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemap"}}],[11,"width","","Returns the width of that image.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",807,{"inputs":[{"name":"depthcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",807,{"inputs":[{"name":"depthcubemap"}],"output":{"name":"depthcubemapmipmap"}}],[11,"clone","","",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"depthcubemapmipmap"}}],[11,"deref","","",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"depthcubemap"}}],[11,"get_level","","Returns the texture level.",808,{"inputs":[{"name":"depthcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",808,{"inputs":[{"name":"depthcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"depthcubemapimage"}}],[11,"clone","","",809,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"depthcubemapimage"}}],[11,"width","","Returns the width of that image.",809,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",809,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",809,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",809,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",809,{"inputs":[{"name":"depthcubemapimage"}],"output":{"name":"depthattachment"}}],[0,"stencil_cubemap","glium::texture","Contains the implementation of `StencilCubemap`.",null,null],[3,"StencilCubemap","glium::texture::stencil_cubemap","A cube texture  containing stencil data.",null,null],[3,"StencilCubemapMipmap","","Represents a single mipmap level of a `StencilCubemap`.",null,null],[3,"StencilCubemapImage","","Represents a single image of a mipmap level of a layer of `StencilCubemap`.",null,null],[11,"get_id","","",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",810,{"inputs":[{"name":"stencilcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",810,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",810,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",810,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",810,{"inputs":[{"name":"stencilcubemap"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemap"}}],[11,"width","","Returns the width of that image.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",810,{"inputs":[{"name":"stencilcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",810,{"inputs":[{"name":"stencilcubemap"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"clone","","",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"stencilcubemapmipmap"}}],[11,"deref","","",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"stencilcubemap"}}],[11,"get_level","","Returns the texture level.",811,{"inputs":[{"name":"stencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",811,{"inputs":[{"name":"stencilcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"stencilcubemapimage"}}],[11,"clone","","",812,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"stencilcubemapimage"}}],[11,"width","","Returns the width of that image.",812,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",812,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",812,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",812,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",812,{"inputs":[{"name":"stencilcubemapimage"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_cubemap","glium::texture","Contains the implementation of `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemap","glium::texture::depth_stencil_cubemap","A cube texture  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapMipmap","","Represents a single mipmap level of a `DepthStencilCubemap`.",null,null],[3,"DepthStencilCubemapImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemap`.",null,null],[11,"get_id","","",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"gluint"}}],[11,"fmt","","",813,{"inputs":[{"name":"depthstencilcubemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",813,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",813,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",813,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",813,{"inputs":[{"name":"depthstencilcubemap"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemap"}}],[11,"width","","Returns the width of that image.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",813,{"inputs":[{"name":"depthstencilcubemap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",813,{"inputs":[{"name":"depthstencilcubemap"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"clone","","",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"depthstencilcubemapmipmap"}}],[11,"deref","","",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"depthstencilcubemap"}}],[11,"get_level","","Returns the texture level.",814,{"inputs":[{"name":"depthstencilcubemapmipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",814,{"inputs":[{"name":"depthstencilcubemapmipmap"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"clone","","",815,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"depthstencilcubemapimage"}}],[11,"width","","Returns the width of that image.",815,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",815,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",815,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"u32"}}],[11,"into","","",815,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",815,{"inputs":[{"name":"depthstencilcubemapimage"}],"output":{"name":"depthstencilattachment"}}],[0,"cubemap_array","glium::texture","Contains the implementation of `CubemapArray`.",null,null],[3,"CubemapArray","glium::texture::cubemap_array","An array of cube textures  containing floating-point data.",null,null],[3,"CubemapArrayLayer","","Represents a single layer of a `CubemapArray`.",null,null],[3,"CubemapArrayMipmap","","Represents a single mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CubemapArray`.",null,null],[3,"CubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CubemapArray`.",null,null],[11,"get_id","","",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",816,{"inputs":[{"name":"cubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",816,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",816,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",816,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",816,{"inputs":[{"name":"cubemaparray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"cubemaparray"}}],[11,"width","","Returns the width of that image.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"cubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",816,{"inputs":[{"name":"cubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",816,{"inputs":[{"name":"cubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",816,{"inputs":[{"name":"cubemaparray"}],"output":{"name":"cubemaparraymipmap"}}],[11,"clone","","",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"cubemaparraylayer"}}],[11,"width","","Returns the width of that image.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"cubemaparray"}}],[11,"get_layer","","Returns the layer index.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",817,{"inputs":[{"name":"cubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",817,{"inputs":[{"name":"cubemaparraylayer"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"clone","","",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"cubemaparraymipmap"}}],[11,"deref","","",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"cubemaparray"}}],[11,"get_level","","Returns the texture level.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",818,{"inputs":[{"name":"cubemaparraymipmap"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",818,{"inputs":[{"name":"cubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",819,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"cubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",819,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",819,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",819,{"inputs":[{"name":"cubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",819,{"inputs":[{"name":"cubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"cubemaparrayimage"}}],[11,"clone","","",820,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"cubemaparrayimage"}}],[11,"width","","Returns the width of that image.",820,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",820,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",820,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",820,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",820,{"inputs":[{"name":"cubemaparrayimage"}],"output":{"name":"colorattachment"}}],[0,"compressed_cubemap_array","glium::texture","Contains the implementation of `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArray","glium::texture::compressed_cubemap_array","An array of compressed cube textures  containing floating-point data.",null,null],[3,"CompressedCubemapArrayLayer","","Represents a single layer of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedCubemapArray`.",null,null],[3,"CompressedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedCubemapArray`.",null,null],[11,"get_id","","",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",821,{"inputs":[{"name":"compressedcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",821,{"inputs":[{"name":"compressedcubemaparray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",821,{"inputs":[{"name":"compressedcubemaparray"},{"name":"f"},{"name":"compressedformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedcubemaparray"}}],[11,"width","","Returns the width of that image.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",821,{"inputs":[{"name":"compressedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",821,{"inputs":[{"name":"compressedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",821,{"inputs":[{"name":"compressedcubemaparray"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"clone","","",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"compressedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",822,{"inputs":[{"name":"compressedcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",822,{"inputs":[{"name":"compressedcubemaparraylayer"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"clone","","",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"compressedcubemaparraymipmap"}}],[11,"deref","","",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"compressedcubemaparray"}}],[11,"get_level","","Returns the texture level.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",823,{"inputs":[{"name":"compressedcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",824,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"compressedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",824,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",824,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",824,{"inputs":[{"name":"compressedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",824,{"inputs":[{"name":"compressedcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"clone","","",825,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"compressedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",825,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",825,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",825,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",825,{"inputs":[{"name":"compressedcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[0,"srgb_cubemap_array","glium::texture","Contains the implementation of `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArray","glium::texture::srgb_cubemap_array","An array of cube textures  containing sRGB floating-point data.",null,null],[3,"SrgbCubemapArrayLayer","","Represents a single layer of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayMipmap","","Represents a single mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `SrgbCubemapArray`.",null,null],[3,"SrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `SrgbCubemapArray`.",null,null],[11,"get_id","","",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"f"},{"name":"srgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"srgbcubemaparray"}}],[11,"width","","Returns the width of that image.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",826,{"inputs":[{"name":"srgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",826,{"inputs":[{"name":"srgbcubemaparray"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"clone","","",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"srgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",827,{"inputs":[{"name":"srgbcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",827,{"inputs":[{"name":"srgbcubemaparraylayer"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"clone","","",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"srgbcubemaparraymipmap"}}],[11,"deref","","",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"srgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",828,{"inputs":[{"name":"srgbcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",829,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"srgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",829,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",829,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",829,{"inputs":[{"name":"srgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",829,{"inputs":[{"name":"srgbcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"clone","","",830,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"srgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",830,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",830,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",830,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",830,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",830,{"inputs":[{"name":"srgbcubemaparrayimage"}],"output":{"name":"colorattachment"}}],[0,"compressed_srgb_cubemap_array","glium::texture","Contains the implementation of `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArray","glium::texture::compressed_srgb_cubemap_array","An array of compressed cube textures  containing sRGB floating-point data.",null,null],[3,"CompressedSrgbCubemapArrayLayer","","Represents a single layer of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayMipmap","","Represents a single mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `CompressedSrgbCubemapArray`.",null,null],[3,"CompressedSrgbCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `CompressedSrgbCubemapArray`.",null,null],[11,"get_id","","",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",831,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::compressed_srgb_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"width","","Returns the width of that image.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",831,{"inputs":[{"name":"compressedsrgbcubemaparray"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"clone","","",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"compressedsrgbcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_layer","","Returns the layer index.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",832,{"inputs":[{"name":"compressedsrgbcubemaparraylayer"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"clone","","",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"compressedsrgbcubemaparraymipmap"}}],[11,"deref","","",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"compressedsrgbcubemaparray"}}],[11,"get_level","","Returns the texture level.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",833,{"inputs":[{"name":"compressedsrgbcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",834,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"compressedsrgbcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",834,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",834,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",834,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",834,{"inputs":[{"name":"compressedsrgbcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"clone","","",835,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"compressedsrgbcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",835,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",835,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",835,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",835,{"inputs":[{"name":"compressedsrgbcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[0,"integral_cubemap_array","glium::texture","Contains the implementation of `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArray","glium::texture::integral_cubemap_array","An array of cube textures  containing signed integral data.",null,null],[3,"IntegralCubemapArrayLayer","","Represents a single layer of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayMipmap","","Represents a single mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `IntegralCubemapArray`.",null,null],[3,"IntegralCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `IntegralCubemapArray`.",null,null],[11,"get_id","","",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::integral_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"integralcubemaparray"}}],[11,"width","","Returns the width of that image.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",836,{"inputs":[{"name":"integralcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",836,{"inputs":[{"name":"integralcubemaparray"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"clone","","",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"integralcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"integralcubemaparray"}}],[11,"get_layer","","Returns the layer index.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",837,{"inputs":[{"name":"integralcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",837,{"inputs":[{"name":"integralcubemaparraylayer"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"clone","","",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"integralcubemaparraymipmap"}}],[11,"deref","","",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"integralcubemaparray"}}],[11,"get_level","","Returns the texture level.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",838,{"inputs":[{"name":"integralcubemaparraymipmap"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",838,{"inputs":[{"name":"integralcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",839,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"integralcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",839,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",839,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",839,{"inputs":[{"name":"integralcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",839,{"inputs":[{"name":"integralcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"clone","","",840,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"integralcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",840,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",840,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",840,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",840,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",840,{"inputs":[{"name":"integralcubemaparrayimage"}],"output":{"name":"colorattachment"}}],[0,"unsigned_cubemap_array","glium::texture","Contains the implementation of `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArray","glium::texture::unsigned_cubemap_array","An array of cube textures  containing unsigned integral data.",null,null],[3,"UnsignedCubemapArrayLayer","","Represents a single layer of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayMipmap","","Represents a single mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `UnsignedCubemapArray`.",null,null],[3,"UnsignedCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `UnsignedCubemapArray`.",null,null],[11,"get_id","","",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::unsigned_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"unsignedcubemaparray"}}],[11,"width","","Returns the width of that image.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",841,{"inputs":[{"name":"unsignedcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",841,{"inputs":[{"name":"unsignedcubemaparray"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"clone","","",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"unsignedcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_layer","","Returns the layer index.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",842,{"inputs":[{"name":"unsignedcubemaparraylayer"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"clone","","",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"unsignedcubemaparraymipmap"}}],[11,"deref","","",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"unsignedcubemaparray"}}],[11,"get_level","","Returns the texture level.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",843,{"inputs":[{"name":"unsignedcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",844,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"unsignedcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",844,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",844,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",844,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",844,{"inputs":[{"name":"unsignedcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"clone","","",845,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"unsignedcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",845,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",845,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",845,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",845,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_color_attachment","","",845,{"inputs":[{"name":"unsignedcubemaparrayimage"}],"output":{"name":"colorattachment"}}],[0,"depth_cubemap_array","glium::texture","Contains the implementation of `DepthCubemapArray`.",null,null],[3,"DepthCubemapArray","glium::texture::depth_cubemap_array","An array of cube textures  containing depth data.",null,null],[3,"DepthCubemapArrayLayer","","Represents a single layer of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayMipmap","","Represents a single mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthCubemapArray`.",null,null],[3,"DepthCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthCubemapArray`.",null,null],[11,"get_id","","",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms","",564,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture::depth_cubemap_array","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"f"},{"name":"depthformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthcubemaparray"}}],[11,"width","","Returns the width of that image.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",846,{"inputs":[{"name":"depthcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",846,{"inputs":[{"name":"depthcubemaparray"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"clone","","",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"depthcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"depthcubemaparray"}}],[11,"get_layer","","Returns the layer index.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",847,{"inputs":[{"name":"depthcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",847,{"inputs":[{"name":"depthcubemaparraylayer"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"clone","","",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"depthcubemaparraymipmap"}}],[11,"deref","","",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"depthcubemaparray"}}],[11,"get_level","","Returns the texture level.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",848,{"inputs":[{"name":"depthcubemaparraymipmap"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",848,{"inputs":[{"name":"depthcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",849,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"depthcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",849,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",849,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",849,{"inputs":[{"name":"depthcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",849,{"inputs":[{"name":"depthcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"clone","","",850,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"depthcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",850,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",850,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",850,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",850,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_attachment","","",850,{"inputs":[{"name":"depthcubemaparrayimage"}],"output":{"name":"depthattachment"}}],[0,"stencil_cubemap_array","glium::texture","Contains the implementation of `StencilCubemapArray`.",null,null],[3,"StencilCubemapArray","glium::texture::stencil_cubemap_array","An array of cube textures  containing stencil data.",null,null],[3,"StencilCubemapArrayLayer","","Represents a single layer of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayMipmap","","Represents a single mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `StencilCubemapArray`.",null,null],[3,"StencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `StencilCubemapArray`.",null,null],[11,"get_id","","",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"f"},{"name":"stencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"stencilcubemaparray"}}],[11,"width","","Returns the width of that image.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",851,{"inputs":[{"name":"stencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",851,{"inputs":[{"name":"stencilcubemaparray"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"clone","","",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"stencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",852,{"inputs":[{"name":"stencilcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",852,{"inputs":[{"name":"stencilcubemaparraylayer"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"clone","","",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"stencilcubemaparraymipmap"}}],[11,"deref","","",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"stencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",853,{"inputs":[{"name":"stencilcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",854,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"stencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",854,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",854,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",854,{"inputs":[{"name":"stencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",854,{"inputs":[{"name":"stencilcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"clone","","",855,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"stencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",855,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",855,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",855,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",855,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_stencil_attachment","","",855,{"inputs":[{"name":"stencilcubemaparrayimage"}],"output":{"name":"stencilattachment"}}],[0,"depth_stencil_cubemap_array","glium::texture","Contains the implementation of `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArray","glium::texture::depth_stencil_cubemap_array","An array of cube textures  containing both depth and stencil data.",null,null],[3,"DepthStencilCubemapArrayLayer","","Represents a single layer of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayMipmap","","Represents a single mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayLayerMipmap","","Represents a single layer of a mipmap level of a `DepthStencilCubemapArray`.",null,null],[3,"DepthStencilCubemapArrayImage","","Represents a single image of a mipmap level of a layer of `DepthStencilCubemapArray`.",null,null],[11,"get_id","","",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"gluint"}}],[11,"fmt","","",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_id","","Builds a new texture reference from an existing, externally created OpenGL texture.\nIf `owned` is true, this reference will take ownership of the texture and be responsible\nfor cleaning it up. Otherwise, the texture must be cleaned up externally, but only\nafter this reference's lifetime has ended.",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"gluint"},{"name":"bool"},{"name":"mipmapsoption"},{"name":"dimensions"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"width","","Returns the width of that image.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"result"}}],[11,"first_layer","","Access the first layer of this texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"layer","","Access a single layer of this texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"mipmap","","Access a single mipmap level of this texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",856,{"inputs":[{"name":"depthstencilcubemaparray"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"clone","","",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"depthstencilcubemaparraylayer"}}],[11,"width","","Returns the width of that image.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_layer","","Returns the layer index.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",857,{"inputs":[{"name":"depthstencilcubemaparraylayer"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"clone","","",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"depthstencilcubemaparraymipmap"}}],[11,"deref","","",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"width","","Returns the width of that image.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"array_size","","Returns the number of array layers.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"get_texture","","Returns the corresponding texture.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"depthstencilcubemaparray"}}],[11,"get_level","","Returns the texture level.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"u32"}}],[11,"first_layer","","Access the first layer of this texture.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"layer","","Access a single layer of this texture.",858,{"inputs":[{"name":"depthstencilcubemaparraymipmap"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",859,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"depthstencilcubemaparraylayermipmap"}}],[11,"width","","Returns the width of that image.",859,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",859,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",859,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"}],"output":{"name":"u32"}}],[11,"image","","Provides an object representing a single layer of this cubemap.",859,{"inputs":[{"name":"depthstencilcubemaparraylayermipmap"},{"name":"cubelayer"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"clone","","",860,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"depthstencilcubemaparrayimage"}}],[11,"width","","Returns the width of that image.",860,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"height","","Returns the height of that image.",860,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"dimensions","","Returns the dimension of that image.",860,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"u32"}}],[11,"into","","",860,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"textureanyimage"}}],[11,"to_depth_stencil_attachment","","",860,{"inputs":[{"name":"depthstencilcubemaparrayimage"}],"output":{"name":"depthstencilattachment"}}],[8,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel.",null,null],[10,"get_format","","Returns corresponding client format.",861,{"inputs":[{"name":"pixelvalue"}],"output":{"name":"clientformat"}}],[8,"Texture1dDataSource","","Trait that describes data for a one-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",862,null],[10,"into_raw","","Returns the raw representation of the data.",862,{"inputs":[{"name":"texture1ddatasource"}],"output":{"name":"rawimage1d"}}],[8,"Texture1dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",863,{"inputs":[{"name":"texture1ddatasink"},{"name":"cow"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Texture2dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",864,null],[10,"into_raw","","Returns the raw representation of the data.",864,{"inputs":[{"name":"texture2ddatasource"}],"output":{"name":"rawimage2d"}}],[8,"Texture2dDataSink","","Trait that describes types that can be built from two-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",865,{"inputs":[{"name":"texture2ddatasink"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Texture3dDataSource","","Trait that describes data for a two-dimensional texture.",null,null],[16,"Data","","The type of each pixel.",866,null],[10,"into_raw","","Returns the raw representation of the data.",866,{"inputs":[{"name":"texture3ddatasource"}],"output":{"name":"rawimage3d"}}],[8,"Texture3dDataSink","","Trait that describes types that can be built from one-dimensional texture data.",null,null],[10,"from_raw","","Builds a new object from raw data.",867,{"inputs":[{"name":"texture3ddatasink"},{"name":"cow"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"hash","","",602,null],[11,"eq","","",602,{"inputs":[{"name":"cubelayer"},{"name":"cubelayer"}],"output":{"name":"bool"}}],[11,"ne","","",602,{"inputs":[{"name":"cubelayer"},{"name":"cubelayer"}],"output":{"name":"bool"}}],[11,"fmt","","",602,{"inputs":[{"name":"cubelayer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",602,{"inputs":[{"name":"cubelayer"}],"output":{"name":"cubelayer"}}],[11,"get_layer_index","","In some situations whole cubemaps can be binded at once. If this is the case, each layer\nof the cubemap has a specific index.",602,{"inputs":[{"name":"cubelayer"}],"output":{"name":"usize"}}],[11,"hash","","",603,null],[11,"eq","","",603,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"ne","","",603,{"inputs":[{"name":"texturekind"},{"name":"texturekind"}],"output":{"name":"bool"}}],[11,"fmt","","",603,{"inputs":[{"name":"texturekind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",603,{"inputs":[{"name":"texturekind"}],"output":{"name":"texturekind"}}],[11,"eq","","",604,{"inputs":[{"name":"mipmapsoption"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",604,{"inputs":[{"name":"mipmapsoption"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"clone","","",604,{"inputs":[{"name":"mipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"fmt","","",604,{"inputs":[{"name":"mipmapsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",604,{"inputs":[{"name":"mipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"eq","","",605,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",605,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"clone","","",605,{"inputs":[{"name":"compressedmipmapsoption"}],"output":{"name":"compressedmipmapsoption"}}],[11,"fmt","","",605,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_raw","collections::vec","",214,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage1d"}}],[11,"into_raw","glium::texture","",584,{"inputs":[{"name":"rawimage1d"}],"output":{"name":"rawimage1d"}}],[11,"from_raw","collections::vec","",214,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw_rgba","glium::texture","",585,null],[11,"from_raw_rgba_reversed","","",585,null],[11,"from_vec_raw1d","","Transforms a Vec<RawImage1d> into a RawImage2d",585,{"inputs":[{"name":"rawimage2d"},{"name":"vec"}],"output":{"name":"rawimage2d"}}],[11,"into_raw","collections::vec","",214,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage2d"}}],[11,"into_raw","glium::texture","",585,{"inputs":[{"name":"rawimage2d"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","collections::vec","",214,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_raw","glium::texture","",585,{"inputs":[{"name":"rawimage2d"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_vec_raw2d","","Transforms a Vec<RawImage2d> into a RawImage3d",586,{"inputs":[{"name":"rawimage3d"},{"name":"vec"}],"output":{"name":"rawimage3d"}}],[11,"into_raw","collections::vec","",214,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage3d"}}],[11,"into_raw","glium::texture","",586,{"inputs":[{"name":"rawimage3d"}],"output":{"name":"rawimage3d"}}],[11,"from_raw","collections::vec","",214,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"eq","glium::texture","",606,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",606,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"clone","","",606,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",606,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",606,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",606,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"str"}}],[11,"from","","",606,{"inputs":[{"name":"texturecreationerror"},{"name":"formatnotsupportederror"}],"output":{"name":"texturecreationerror"}}],[11,"clone","glium","",46,{"inputs":[{"name":"profile"}],"output":{"name":"profile"}}],[11,"fmt","","",46,{"inputs":[{"name":"profile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","glium::backend","",57,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"releasebehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"releasebehavior"}],"output":{"name":"releasebehavior"}}],[11,"new","","Builds a new context.",868,{"inputs":[{"name":"context"},{"name":"b"},{"name":"bool"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",868,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",868,{"inputs":[{"name":"context"},{"name":"b"}],"output":{"name":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",868,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",868,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",868,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",868,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",868,{"inputs":[{"name":"context"},{"name":"version"}],"output":{"name":"bool"}}],[11,"get_opengl_version_string","","Returns a string containing this GL version or release number used by this context.",868,{"inputs":[{"name":"context"}],"output":{"name":"str"}}],[11,"get_opengl_vendor_string","","Returns a string containing the company responsible for this GL implementation.",868,{"inputs":[{"name":"context"}],"output":{"name":"str"}}],[11,"get_opengl_renderer_string","","Returns a string containing the name of the GL renderer used by this context.",868,{"inputs":[{"name":"context"}],"output":{"name":"str"}}],[11,"is_debug","","Returns true if the context is in debug mode.",868,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_forward_compatible","","Returns true if the context is in \"forward-compatible\" mode.",868,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_opengl_profile","","Returns this context's OpenGL profile if available.",868,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot\nresult in a crash.",868,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",868,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",868,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_release_behavior","","Returns the behavior when the current OpenGL context is changed.",868,{"inputs":[{"name":"context"}],"output":{"name":"releasebehavior"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",868,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",868,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",868,{"inputs":[{"name":"context"}],"output":null}],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",868,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",868,{"inputs":[{"name":"context"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another\ncomponent needs to directly manipulate OpenGL state.",868,{"inputs":[{"name":"context"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",868,{"inputs":[{"name":"context"},{"name":"option"}],"output":null}],[11,"synchronize","","DEPRECATED. Renamed `finish`.",868,{"inputs":[{"name":"context"}],"output":null}],[11,"finish","","Calls `glFinish()`. This waits until all the previously issued commands have finished\nbeing executed.",868,{"inputs":[{"name":"context"}],"output":null}],[11,"flush","","Calls `glFlush()`. This starts executing the commands that you have issued if it is not\nyet the case.",868,{"inputs":[{"name":"context"}],"output":null}],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will\nbe able to see that string.",868,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions`\nit is a no-op and returns `Ok`.",868,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_version","","",868,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_extensions","","",868,{"inputs":[{"name":"context"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",868,{"inputs":[{"name":"context"}],"output":{"name":"capabilities"}}],[11,"drop","","",868,{"inputs":[{"name":"context"}],"output":null}],[11,"default","glium::debug","",81,{"inputs":[{"name":"debugcallbackbehavior"}],"output":{"name":"debugcallbackbehavior"}}],[11,"eq","glium::framebuffer","",103,{"inputs":[{"name":"validationerror"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"validationerror"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",103,{"inputs":[{"name":"validationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"validationerror"}],"output":{"name":"validationerror"}}],[11,"fmt","","",103,{"inputs":[{"name":"validationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",103,{"inputs":[{"name":"validationerror"}],"output":{"name":"str"}}],[11,"eq","glium::texture","",587,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"ne","","",587,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"clone","","",587,{"inputs":[{"name":"clientformat"}],"output":{"name":"clientformat"}}],[11,"fmt","","",587,{"inputs":[{"name":"clientformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",587,{"inputs":[{"name":"clientformat"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",587,{"inputs":[{"name":"clientformat"}],"output":{"name":"u8"}}],[11,"eq","","",589,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"ne","","",589,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"hash","","",589,null],[11,"clone","","",589,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"uncompressedfloatformat"}}],[11,"fmt","","",589,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",589,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",589,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",589,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",589,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",597,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",597,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"hash","","",597,null],[11,"clone","","",597,{"inputs":[{"name":"srgbformat"}],"output":{"name":"srgbformat"}}],[11,"fmt","","",597,{"inputs":[{"name":"srgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",597,{"inputs":[{"name":"srgbformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",597,{"inputs":[{"name":"srgbformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",597,{"inputs":[{"name":"srgbformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",597,{"inputs":[{"name":"srgbformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",590,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"ne","","",590,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"hash","","",590,null],[11,"clone","","",590,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"uncompressedintformat"}}],[11,"fmt","","",590,{"inputs":[{"name":"uncompressedintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",590,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",590,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",590,{"inputs":[{"name":"uncompressedintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",590,{"inputs":[{"name":"uncompressedintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",591,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"ne","","",591,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"hash","","",591,null],[11,"clone","","",591,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"uncompresseduintformat"}}],[11,"fmt","","",591,{"inputs":[{"name":"uncompresseduintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",591,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",591,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",591,{"inputs":[{"name":"uncompresseduintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_color_renderable","","Returns true if a texture or renderbuffer with this format can be used as a framebuffer\nattachment.",591,{"inputs":[{"name":"uncompresseduintformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",592,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"ne","","",592,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"hash","","",592,null],[11,"clone","","",592,{"inputs":[{"name":"compressedformat"}],"output":{"name":"compressedformat"}}],[11,"fmt","","",592,{"inputs":[{"name":"compressedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",592,{"inputs":[{"name":"compressedformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",592,{"inputs":[{"name":"compressedformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",592,{"inputs":[{"name":"compressedformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",596,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",596,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"hash","","",596,null],[11,"clone","","",596,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"compressedsrgbformat"}}],[11,"fmt","","",596,{"inputs":[{"name":"compressedsrgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",596,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",596,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",596,{"inputs":[{"name":"compressedsrgbformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",593,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"ne","","",593,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"hash","","",593,null],[11,"clone","","",593,{"inputs":[{"name":"depthformat"}],"output":{"name":"depthformat"}}],[11,"fmt","","",593,{"inputs":[{"name":"depthformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",593,{"inputs":[{"name":"depthformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",593,{"inputs":[{"name":"depthformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",593,{"inputs":[{"name":"depthformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",594,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",594,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"hash","","",594,null],[11,"clone","","",594,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"depthstencilformat"}}],[11,"fmt","","",594,{"inputs":[{"name":"depthstencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",594,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",594,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"textureformat"}}],[11,"is_supported","","Returns true if this format is supported by the backend.",594,{"inputs":[{"name":"depthstencilformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",595,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",595,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"hash","","",595,null],[11,"clone","","",595,{"inputs":[{"name":"stencilformat"}],"output":{"name":"stencilformat"}}],[11,"fmt","","",595,{"inputs":[{"name":"stencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",595,{"inputs":[{"name":"stencilformat"}],"output":{"name":"vec"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",595,{"inputs":[{"name":"stencilformat"}],"output":{"name":"textureformat"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",595,{"inputs":[{"name":"stencilformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",595,{"inputs":[{"name":"stencilformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"eq","","",588,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"ne","","",588,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"hash","","",588,null],[11,"clone","","",588,{"inputs":[{"name":"textureformat"}],"output":{"name":"textureformat"}}],[11,"fmt","","",588,{"inputs":[{"name":"textureformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_formats_list","","Returns a list of all the possible values of this enumeration.",588,{"inputs":[{"name":"textureformat"}],"output":{"name":"vec"}}],[11,"is_supported_for_textures","","Returns true if this format is supported by the backend for textures.",588,{"inputs":[{"name":"textureformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_supported_for_renderbuffers","","Returns true if this format is supported by the backend for renderbuffers.",588,{"inputs":[{"name":"textureformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"is_renderable","","Returns true if the format is color-renderable, depth-renderable, depth-stencil-renderable\nor stencil-renderable.",588,{"inputs":[{"name":"textureformat"},{"name":"c"}],"output":{"name":"bool"}}],[11,"new","glium","Builds a new `SyncFence` that is injected in the server.",869,{"inputs":[{"name":"syncfence"},{"name":"f"}],"output":{"name":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",869,{"inputs":[{"name":"syncfence"}],"output":null}],[11,"drop","","",869,{"inputs":[{"name":"syncfence"}],"output":null}],[11,"into_sync_fence","","Turns the prototype into a real fence.",870,{"inputs":[{"name":"linearsyncfence"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"drop","","",870,{"inputs":[{"name":"linearsyncfence"}],"output":null}],[11,"eq","","",871,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",871,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",871,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"fmt","","",871,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",52,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",871,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[6,"VertexFormat","","Describes the layout of each vertex in a vertex buffer.",null,null],[8,"CapabilitiesSource","","Trait for objects that describe the capabilities of an OpenGL backend.",null,null],[10,"get_version","","Returns the version of the backend.",872,{"inputs":[{"name":"capabilitiessource"}],"output":{"name":"version"}}],[10,"get_extensions","","Returns the list of extensions that are supported.",872,{"inputs":[{"name":"capabilitiessource"}],"output":{"name":"extensionslist"}}],[10,"get_capabilities","","Returns the capabilities of the backend.",872,{"inputs":[{"name":"capabilitiessource"}],"output":{"name":"capabilities"}}],[8,"GlObject","","Trait for objects that are OpenGL objects.",null,null],[16,"Id","","The type of identifier for this object.",873,null],[10,"get_id","","Returns the id of the object.",873,{"inputs":[{"name":"globject"}],"output":{"name":"id"}}],[8,"Surface","","Object that can be drawn upon.",null,null],[10,"clear","","Clears some attachments of the target.",874,{"inputs":[{"name":"surface"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"clear_color","","Clears the color attachment of the target.",874,{"inputs":[{"name":"surface"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_color_srgb","","Clears the color attachment of the target. The color is in sRGB format.",874,{"inputs":[{"name":"surface"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear_depth","","Clears the depth attachment of the target.",874,{"inputs":[{"name":"surface"},{"name":"f32"}],"output":null}],[11,"clear_stencil","","Clears the stencil attachment of the target.",874,{"inputs":[{"name":"surface"},{"name":"i32"}],"output":null}],[11,"clear_color_and_depth","","Clears the color and depth attachments of the target.",874,null],[11,"clear_color_srgb_and_depth","","Clears the color and depth attachments of the target. The color is in sRGB format.",874,null],[11,"clear_color_and_stencil","","Clears the color and stencil attachments of the target.",874,null],[11,"clear_color_srgb_and_stencil","","Clears the color and stencil attachments of the target. The color is in sRGB format.",874,null],[11,"clear_depth_and_stencil","","Clears the depth and stencil attachments of the target.",874,{"inputs":[{"name":"surface"},{"name":"f32"},{"name":"i32"}],"output":null}],[11,"clear_all","","Clears the color, depth and stencil attachments of the target.",874,null],[11,"clear_all_srgb","","Clears the color, depth and stencil attachments of the target. The color is in sRGB format.",874,null],[10,"get_dimensions","","Returns the dimensions in pixels of the target.",874,null],[10,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",874,{"inputs":[{"name":"surface"}],"output":{"name":"option"}}],[11,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",874,{"inputs":[{"name":"surface"}],"output":{"name":"bool"}}],[10,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",874,{"inputs":[{"name":"surface"}],"output":{"name":"option"}}],[11,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",874,{"inputs":[{"name":"surface"}],"output":{"name":"bool"}}],[10,"draw","","Draws.",874,{"inputs":[{"name":"surface"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[10,"blit_from_frame","","Blits from the default framebuffer.",874,{"inputs":[{"name":"surface"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_simple_framebuffer","","Blits from a simple framebuffer.",874,{"inputs":[{"name":"surface"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_from_multioutput_framebuffer","","Blits from a multi-output framebuffer.",874,{"inputs":[{"name":"surface"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",874,{"inputs":[{"name":"surface"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",874,{"inputs":[{"name":"surface"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"fill","","Copies the entire surface to the entire target. See `blit_color`.",874,{"inputs":[{"name":"surface"},{"name":"s"},{"name":"magnifysamplerfilter"}],"output":null}],[8,"DisplayBuild","","Objects that can build a facade object.",null,null],[16,"Facade","","The object that this `DisplayBuild` builds.",875,null],[16,"Err","","The type of error that initialization can return.",875,null],[11,"build_glium","","Build a context and a facade to draw on it.",875,{"inputs":[{"name":"displaybuild"}],"output":{"name":"result"}}],[10,"build_glium_debug","","Build a context and a facade to draw on it.",875,{"inputs":[{"name":"displaybuild"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[11,"build_glium_unchecked","","Build a context and a facade to draw on it",875,{"inputs":[{"name":"displaybuild"}],"output":{"name":"result"}}],[10,"build_glium_unchecked_debug","","Build a context and a facade to draw on it",875,{"inputs":[{"name":"displaybuild"},{"name":"debugcallbackbehavior"}],"output":{"name":"result"}}],[10,"rebuild_glium","","Changes the settings of an existing facade.",875,{"inputs":[{"name":"displaybuild"},{"name":"facade"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"handle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",53,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"default","","",44,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",44,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"fmt","","",44,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"default","","",45,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"clone","","",45,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"fmt","","",45,{"inputs":[{"name":"blittarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"drawerror"}],"output":{"name":"drawerror"}}],[11,"description","","",54,{"inputs":[{"name":"drawerror"}],"output":{"name":"str"}}],[11,"cause","","",54,{"inputs":[{"name":"drawerror"}],"output":{"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"swapbufferserror"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"swapbufferserror"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"swapbufferserror"}],"output":{"name":"swapbufferserror"}}],[11,"fmt","","",55,{"inputs":[{"name":"swapbufferserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",55,{"inputs":[{"name":"swapbufferserror"}],"output":{"name":"str"}}],[11,"fmt","","",55,{"inputs":[{"name":"swapbufferserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",876,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",876,{"inputs":[{"name":"frame"}],"output":{"name":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",876,{"inputs":[{"name":"frame"}],"output":{"name":"result"}}],[11,"clear","","",876,{"inputs":[{"name":"frame"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":null}],[11,"get_dimensions","","",876,null],[11,"get_depth_buffer_bits","","",876,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",876,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"draw","","",876,{"inputs":[{"name":"frame"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",876,{"inputs":[{"name":"frame"},{"name":"rect"},{"name":"s"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_frame","","",876,{"inputs":[{"name":"frame"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_simple_framebuffer","","",876,{"inputs":[{"name":"frame"},{"name":"simpleframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"blit_from_multioutput_framebuffer","","",876,{"inputs":[{"name":"frame"},{"name":"multioutputframebuffer"},{"name":"rect"},{"name":"blittarget"},{"name":"magnifysamplerfilter"}],"output":null}],[11,"drop","","",876,{"inputs":[{"name":"frame"}],"output":null}],[11,"eq","","",56,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"gliumcreationerror"}}],[11,"fmt","","",56,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",56,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"str"}}],[11,"cause","","",56,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"option"}}],[11,"from","","",56,{"inputs":[{"name":"gliumcreationerror"},{"name":"t"}],"output":{"name":"gliumcreationerror"}}],[14,"assert_no_gl_error!","","Calls the `assert_no_error` method on a `glium::Display` instance\nwith file and line number information.",null,null],[14,"uniform!","","Returns an implementation-defined type which implements the `Uniform` trait.",null,null],[14,"implement_vertex!","","Implements the `glium::vertex::Vertex` trait for the given type.",null,null],[14,"implement_buffer_content!","","Implements the `glium::buffer::Content` trait for the given type.",null,null],[14,"implement_uniform_block!","","Implements the `glium::uniforms::UniformBlock` trait for the given type.",null,null],[14,"program!","","Builds a program depending on the GLSL version supported by the backend.",null,null]],"paths":[[8,"WindowExt"],[3,"Window"],[3,"MonitorId"],[3,"PlatformSpecificHeadlessBuilderAttributes"],[3,"HeadlessContext"],[3,"WindowDelegate"],[3,"PlatformSpecificWindowBuilderAttributes"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"Window"],[3,"IdRef"],[4,"Event"],[4,"TouchPhase"],[3,"Touch"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[3,"HeadlessRendererBuilder"],[3,"HeadlessContext"],[3,"WindowBuilder"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[4,"MouseCursor"],[4,"CursorState"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"WindowAttributes"],[3,"GlAttributes"],[4,"NativeMonitorId"],[8,"GlContext"],[3,"Blend"],[3,"Depth"],[3,"Rect"],[3,"BlitTarget"],[4,"Profile"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"DepthTest"],[4,"StencilTest"],[4,"StencilOperation"],[4,"Api"],[4,"Handle"],[4,"DrawError"],[4,"SwapBuffersError"],[4,"GliumCreationError"],[4,"ReleaseBehavior"],[3,"GlutinFacade"],[3,"PollEventsIter"],[3,"WaitEventsIter"],[3,"WinRef"],[3,"GlutinWindowBackend"],[3,"GlutinHeadlessBackend"],[8,"Backend"],[8,"Facade"],[3,"Rc"],[4,"ReadError"],[4,"CopyError"],[4,"BufferCreationError"],[4,"BufferMode"],[3,"Mapping"],[3,"ReadMapping"],[3,"WriteMapping"],[3,"Inserter"],[3,"Buffer"],[3,"BufferSlice"],[3,"BufferMutSlice"],[3,"BufferAny"],[3,"BufferAnySlice"],[8,"Content"],[4,"DebugCallbackBehavior"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[3,"Stencil"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"DepthClamp"],[4,"QueryCreationError"],[4,"BackfaceCullingMode"],[4,"PolygonMode"],[4,"Smooth"],[4,"ProvokingVertex"],[4,"SamplesQueryParam"],[3,"SamplesPassedQuery"],[3,"TimeElapsedQuery"],[3,"AnySamplesPassedQuery"],[3,"PrimitivesGeneratedQuery"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[4,"DefaultFramebufferAttachment"],[4,"RenderBufferCreationError"],[4,"ValidationError"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[3,"DefaultFramebuffer"],[3,"RenderBuffer"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"RenderBufferAny"],[8,"ToColorAttachment"],[8,"ToDepthAttachment"],[8,"ToStencilAttachment"],[8,"ToDepthStencilAttachment"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[3,"EmptyFrameBuffer"],[3,"DrawCommandNoIndices"],[3,"DrawCommandIndices"],[4,"BufferCreationError"],[4,"IndicesSource"],[4,"PrimitiveType"],[4,"IndexType"],[3,"IndexBuffer"],[3,"IndexBufferSlice"],[3,"IndexBufferAny"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DrawCommandsIndicesBuffer"],[8,"Index"],[3,"NoIndices"],[3,"ComputeCommand"],[3,"Uniform"],[3,"UniformBlock"],[3,"Attribute"],[3,"TransformFeedbackVarying"],[3,"TransformFeedbackBuffer"],[3,"SubroutineData"],[3,"SubroutineUniform"],[3,"SourceCode"],[3,"Binary"],[4,"BlockLayout"],[4,"OutputPrimitives"],[4,"TransformFeedbackMode"],[4,"ShaderStage"],[4,"ProgramCreationError"],[4,"ProgramChooserCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"ComputeShader"],[3,"Program"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"SamplerBehavior"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[4,"UniformValue"],[4,"UniformType"],[4,"LayoutMismatchError"],[3,"UniformBuffer"],[3,"Sampler"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[8,"Uniforms"],[8,"AsUniformValue"],[8,"UniformBlock"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[4,"BufferCreationError"],[4,"AttributeType"],[4,"VerticesSource"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"TransformFeedbackSession"],[8,"IntoVerticesSource"],[8,"MultiVerticesSource"],[8,"Vertex"],[8,"Attribute"],[3,"PerInstance"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"ClientFormat"],[4,"TextureFormat"],[4,"UncompressedFloatFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"CompressedSrgbFormat"],[4,"SrgbFormat"],[4,"Dimensions"],[4,"InternalFormat"],[4,"InternalFormatType"],[4,"GetFormatError"],[4,"CubeLayer"],[4,"TextureKind"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[4,"TextureCreationError"],[3,"ResidentTexture"],[3,"TextureHandle"],[3,"BindlessTexturesNotSupportedError"],[4,"TextureCreationError"],[4,"CreationError"],[4,"BufferTextureType"],[4,"TextureBufferContentType"],[8,"TextureBufferContent"],[3,"BufferTexture"],[3,"BufferTextureRef"],[3,"PixelBuffer"],[3,"TextureAny"],[3,"TextureAnyLayer"],[3,"TextureAnyMipmap"],[3,"TextureAnyLayerMipmap"],[3,"TextureAnyImage"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"Texture1dArrayLayerMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"CompressedTexture1dArrayLayerMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"SrgbTexture1dArrayLayerMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArrayLayerMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"IntegralTexture1dArrayLayerMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"UnsignedTexture1dArrayLayerMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"DepthTexture1dArrayLayerMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"StencilTexture1dArrayLayerMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArrayLayerMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"Texture2dArrayLayerMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"CompressedTexture2dArrayLayerMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"SrgbTexture2dArrayLayerMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArrayLayerMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"IntegralTexture2dArrayLayerMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"UnsignedTexture2dArrayLayerMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"DepthTexture2dArrayLayerMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"StencilTexture2dArrayLayerMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArrayLayerMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayLayer"],[3,"Texture2dMultisampleArrayMipmap"],[3,"Texture2dMultisampleArrayLayerMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayLayer"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArrayLayerMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayLayer"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArrayLayerMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayLayer"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArrayLayerMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayLayer"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArrayLayerMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayLayer"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArrayLayerMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayLayer"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArrayLayerMipmap"],[3,"Cubemap"],[3,"CubemapMipmap"],[3,"CubemapImage"],[3,"CompressedCubemap"],[3,"CompressedCubemapMipmap"],[3,"CompressedCubemapImage"],[3,"SrgbCubemap"],[3,"SrgbCubemapMipmap"],[3,"SrgbCubemapImage"],[3,"CompressedSrgbCubemap"],[3,"CompressedSrgbCubemapMipmap"],[3,"CompressedSrgbCubemapImage"],[3,"IntegralCubemap"],[3,"IntegralCubemapMipmap"],[3,"IntegralCubemapImage"],[3,"UnsignedCubemap"],[3,"UnsignedCubemapMipmap"],[3,"UnsignedCubemapImage"],[3,"DepthCubemap"],[3,"DepthCubemapMipmap"],[3,"DepthCubemapImage"],[3,"StencilCubemap"],[3,"StencilCubemapMipmap"],[3,"StencilCubemapImage"],[3,"DepthStencilCubemap"],[3,"DepthStencilCubemapMipmap"],[3,"DepthStencilCubemapImage"],[3,"CubemapArray"],[3,"CubemapArrayLayer"],[3,"CubemapArrayMipmap"],[3,"CubemapArrayLayerMipmap"],[3,"CubemapArrayImage"],[3,"CompressedCubemapArray"],[3,"CompressedCubemapArrayLayer"],[3,"CompressedCubemapArrayMipmap"],[3,"CompressedCubemapArrayLayerMipmap"],[3,"CompressedCubemapArrayImage"],[3,"SrgbCubemapArray"],[3,"SrgbCubemapArrayLayer"],[3,"SrgbCubemapArrayMipmap"],[3,"SrgbCubemapArrayLayerMipmap"],[3,"SrgbCubemapArrayImage"],[3,"CompressedSrgbCubemapArray"],[3,"CompressedSrgbCubemapArrayLayer"],[3,"CompressedSrgbCubemapArrayMipmap"],[3,"CompressedSrgbCubemapArrayLayerMipmap"],[3,"CompressedSrgbCubemapArrayImage"],[3,"IntegralCubemapArray"],[3,"IntegralCubemapArrayLayer"],[3,"IntegralCubemapArrayMipmap"],[3,"IntegralCubemapArrayLayerMipmap"],[3,"IntegralCubemapArrayImage"],[3,"UnsignedCubemapArray"],[3,"UnsignedCubemapArrayLayer"],[3,"UnsignedCubemapArrayMipmap"],[3,"UnsignedCubemapArrayLayerMipmap"],[3,"UnsignedCubemapArrayImage"],[3,"DepthCubemapArray"],[3,"DepthCubemapArrayLayer"],[3,"DepthCubemapArrayMipmap"],[3,"DepthCubemapArrayLayerMipmap"],[3,"DepthCubemapArrayImage"],[3,"StencilCubemapArray"],[3,"StencilCubemapArrayLayer"],[3,"StencilCubemapArrayMipmap"],[3,"StencilCubemapArrayLayerMipmap"],[3,"StencilCubemapArrayImage"],[3,"DepthStencilCubemapArray"],[3,"DepthStencilCubemapArrayLayer"],[3,"DepthStencilCubemapArrayMipmap"],[3,"DepthStencilCubemapArrayLayerMipmap"],[3,"DepthStencilCubemapArrayImage"],[8,"PixelValue"],[8,"Texture1dDataSource"],[8,"Texture1dDataSink"],[8,"Texture2dDataSource"],[8,"Texture2dDataSink"],[8,"Texture3dDataSource"],[8,"Texture3dDataSink"],[3,"Context"],[3,"SyncFence"],[3,"LinearSyncFence"],[3,"Version"],[8,"CapabilitiesSource"],[8,"GlObject"],[8,"Surface"],[8,"DisplayBuild"],[3,"Frame"]]};
searchIndex['glutin'] = {"items":[[3,"Touch","glutin","Represents touch event",null,null],[12,"phase","","",0,null],[12,"location","","",0,null],[12,"id","","unique identifier of a finger.",0,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",1,null],[12,"opengl","","The OpenGL attributes to build the context with.",1,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",2,null],[12,"opengl","","The attributes to use to create the context.",2,null],[3,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads.",null,null],[3,"PollEventsIterator","","An iterator for the `poll_events` function.",null,null],[3,"WaitEventsIterator","","An iterator for the `wait_events` function.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[3,"Window","","Represents an OpenGL context and the Window or environment around it.",null,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",3,null],[12,"color_bits","","",3,null],[12,"alpha_bits","","",3,null],[12,"depth_bits","","",3,null],[12,"stencil_bits","","",3,null],[12,"stereoscopy","","",3,null],[12,"double_buffer","","",3,null],[12,"multisampling","","",3,null],[12,"srgb","","",3,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be conisdered. If false, only software\nrenderers. `None` means \"don't care\". Default is `Some(true)`.",4,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\".\nThe default is `Some(24)`.",4,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",4,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\".\nThe default is `Some(8)`.",4,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\".\nThe default value is `Some(24)`.",4,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\".\nThe default value is `Some(8)`.",4,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer\nformats. `None` means \"don't care\". The default is `Some(true)`.",4,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers.\n`None` means \"don't care\". Default is `None`.\nA value of `Some(0)` indicates that multisampling must not be enabled.",4,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic\nformats. The default is `false`.",4,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care.\nThe default is `false`.",4,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",4,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be\nused.",5,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",5,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",5,null],[12,"monitor","","If `Some`, the window will be in fullscreen mode with the given monitor.",5,null],[12,"title","","The title of the window in the title bar.",5,null],[12,"visible","","Whether the window should be immediately visible upon creation.",5,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors\nwith alpha values different than `1.0` will produce a transparent window.",5,null],[12,"decorations","","Whether the window should have borders and bars.",5,null],[12,"multitouch","","[iOS only] Enable multitouch, see [UIView#multipleTouchEnabled]\n(https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/occ/instp/UIView/multipleTouchEnabled)",5,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",6,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",6,null],[12,"profile","","OpenGL profile to use.",6,null],[12,"debug","","Whether to enable the `debug` flag of the context.",6,null],[12,"robustness","","How the OpenGL context should detect errors.",6,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the\nscreen refreshes. This is typically used to prevent screen tearing.",6,null],[4,"Event","","",null,null],[13,"Resized","","The size of the window has changed.",7,null],[13,"Moved","","The position of the window has changed.",7,null],[13,"Closed","","The window has been closed.",7,null],[13,"DroppedFile","","A file has been dropped into the window.",7,null],[13,"ReceivedCharacter","","The window received a unicode character.",7,null],[13,"Focused","","The window gained or lost focus.",7,null],[13,"KeyboardInput","","An event from the keyboard has been received.",7,null],[13,"MouseMoved","","The cursor has moved on the window.",7,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",7,null],[13,"MouseInput","","An event from the mouse has been received.",7,null],[13,"TouchpadPressure","","Touchpad pressure event.",7,null],[13,"Awakened","","The event loop was woken up by another thread.",7,null],[13,"Refresh","","The window needs to be redrawn.",7,null],[13,"Suspended","","App has been suspended or resumed.",7,null],[13,"Touch","","Touch event has been received",7,null],[4,"TouchPhase","","",null,null],[13,"Started","","",8,null],[13,"Moved","","",8,null],[13,"Ended","","",8,null],[13,"Cancelled","","",8,null],[4,"ElementState","","",null,null],[13,"Pressed","","",9,null],[13,"Released","","",9,null],[4,"MouseButton","","",null,null],[13,"Left","","",10,null],[13,"Right","","",10,null],[13,"Middle","","",10,null],[13,"Other","","",10,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal\nand vertical directions.",11,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and\nvertical direction.",11,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",12,null],[13,"Key2","","The '2' key over the letters.",12,null],[13,"Key3","","The '3' key over the letters.",12,null],[13,"Key4","","The '4' key over the letters.",12,null],[13,"Key5","","The '5' key over the letters.",12,null],[13,"Key6","","The '6' key over the letters.",12,null],[13,"Key7","","The '7' key over the letters.",12,null],[13,"Key8","","The '8' key over the letters.",12,null],[13,"Key9","","The '9' key over the letters.",12,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",12,null],[13,"A","","",12,null],[13,"B","","",12,null],[13,"C","","",12,null],[13,"D","","",12,null],[13,"E","","",12,null],[13,"F","","",12,null],[13,"G","","",12,null],[13,"H","","",12,null],[13,"I","","",12,null],[13,"J","","",12,null],[13,"K","","",12,null],[13,"L","","",12,null],[13,"M","","",12,null],[13,"N","","",12,null],[13,"O","","",12,null],[13,"P","","",12,null],[13,"Q","","",12,null],[13,"R","","",12,null],[13,"S","","",12,null],[13,"T","","",12,null],[13,"U","","",12,null],[13,"V","","",12,null],[13,"W","","",12,null],[13,"X","","",12,null],[13,"Y","","",12,null],[13,"Z","","",12,null],[13,"Escape","","The Escape key, next to F1.",12,null],[13,"F1","","",12,null],[13,"F2","","",12,null],[13,"F3","","",12,null],[13,"F4","","",12,null],[13,"F5","","",12,null],[13,"F6","","",12,null],[13,"F7","","",12,null],[13,"F8","","",12,null],[13,"F9","","",12,null],[13,"F10","","",12,null],[13,"F11","","",12,null],[13,"F12","","",12,null],[13,"F13","","",12,null],[13,"F14","","",12,null],[13,"F15","","",12,null],[13,"Snapshot","","Print Screen/SysRq.",12,null],[13,"Scroll","","Scroll Lock.",12,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",12,null],[13,"Insert","","`Insert`, next to Backspace.",12,null],[13,"Home","","",12,null],[13,"Delete","","",12,null],[13,"End","","",12,null],[13,"PageDown","","",12,null],[13,"PageUp","","",12,null],[13,"Left","","",12,null],[13,"Up","","",12,null],[13,"Right","","",12,null],[13,"Down","","",12,null],[13,"Back","","The Backspace key, right over Enter.",12,null],[13,"Return","","The Enter key.",12,null],[13,"Space","","The space bar.",12,null],[13,"Numlock","","",12,null],[13,"Numpad0","","",12,null],[13,"Numpad1","","",12,null],[13,"Numpad2","","",12,null],[13,"Numpad3","","",12,null],[13,"Numpad4","","",12,null],[13,"Numpad5","","",12,null],[13,"Numpad6","","",12,null],[13,"Numpad7","","",12,null],[13,"Numpad8","","",12,null],[13,"Numpad9","","",12,null],[13,"AbntC1","","",12,null],[13,"AbntC2","","",12,null],[13,"Add","","",12,null],[13,"Apostrophe","","",12,null],[13,"Apps","","",12,null],[13,"At","","",12,null],[13,"Ax","","",12,null],[13,"Backslash","","",12,null],[13,"Calculator","","",12,null],[13,"Capital","","",12,null],[13,"Colon","","",12,null],[13,"Comma","","",12,null],[13,"Convert","","",12,null],[13,"Decimal","","",12,null],[13,"Divide","","",12,null],[13,"Equals","","",12,null],[13,"Grave","","",12,null],[13,"Kana","","",12,null],[13,"Kanji","","",12,null],[13,"LAlt","","",12,null],[13,"LBracket","","",12,null],[13,"LControl","","",12,null],[13,"LMenu","","",12,null],[13,"LShift","","",12,null],[13,"LWin","","",12,null],[13,"Mail","","",12,null],[13,"MediaSelect","","",12,null],[13,"MediaStop","","",12,null],[13,"Minus","","",12,null],[13,"Multiply","","",12,null],[13,"Mute","","",12,null],[13,"MyComputer","","",12,null],[13,"NextTrack","","",12,null],[13,"NoConvert","","",12,null],[13,"NumpadComma","","",12,null],[13,"NumpadEnter","","",12,null],[13,"NumpadEquals","","",12,null],[13,"OEM102","","",12,null],[13,"Period","","",12,null],[13,"PlayPause","","",12,null],[13,"Power","","",12,null],[13,"PrevTrack","","",12,null],[13,"RAlt","","",12,null],[13,"RBracket","","",12,null],[13,"RControl","","",12,null],[13,"RMenu","","",12,null],[13,"RShift","","",12,null],[13,"RWin","","",12,null],[13,"Semicolon","","",12,null],[13,"Slash","","",12,null],[13,"Sleep","","",12,null],[13,"Stop","","",12,null],[13,"Subtract","","",12,null],[13,"Sysrq","","",12,null],[13,"Tab","","",12,null],[13,"Underline","","",12,null],[13,"Unlabeled","","",12,null],[13,"VolumeDown","","",12,null],[13,"VolumeUp","","",12,null],[13,"Wake","","",12,null],[13,"WebBack","","",12,null],[13,"WebFavorites","","",12,null],[13,"WebForward","","",12,null],[13,"WebHome","","",12,null],[13,"WebRefresh","","",12,null],[13,"WebSearch","","",12,null],[13,"WebStop","","",12,null],[13,"Yen","","",12,null],[4,"NativeMonitorId","","Native platform identifier for a monitor. Different platforms use fundamentally different types\nto represent a monitor ID.",null,null],[13,"Numeric","","Cocoa and X11 use a numeric identifier to represent a monitor.",13,null],[13,"Name","","Win32 uses a Unicode string to represent a monitor.",13,null],[13,"Unavailable","","Other platforms (Android) don't support monitor identification.",13,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",14,null],[13,"NotSupported","","TODO: remove this error",14,null],[13,"NoBackendAvailable","","",14,null],[13,"RobustnessNotSupported","","",14,null],[13,"OpenGlVersionNotSupported","","",14,null],[13,"NoAvailablePixelFormat","","",14,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",15,null],[13,"ContextLost","","",15,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",16,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",16,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",16,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",17,null],[13,"Core","","Include all the future-compatible functions and definitions.",17,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",18,null],[13,"Specific","","Request a specific version of a specific API.",18,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`.\nElse if OpenGL ES or WebGL is available, create a context with the\nspecified `opengles_version`.",18,null],[12,"opengl_version","glutin::GlRequest","The version to use for OpenGL.",18,null],[12,"opengles_version","","The version to use for OpenGL ES.",18,null],[4,"Robustness","glutin","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands\nand/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your\nshaders.",19,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're\ndoing before using it. See the `GL_KHR_no_error` extension.",19,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem,\nbut if a problem occurs the behavior is implementation-defined. You are just guaranteed not\nto get a crash.",19,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not\nsupported.",19,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a\n\"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a\nway to recreate a context with the same window :-/",19,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not\nsupported.",19,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",20,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",20,null],[4,"MouseCursor","","",null,null],[13,"Default","","The platform-dependent default cursor.",21,null],[13,"Crosshair","","A simple crosshair.",21,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",21,null],[13,"Arrow","","Self explanatory.",21,null],[13,"Move","","Indicates something is to be moved.",21,null],[13,"Text","","Indicates text that may be selected or edited.",21,null],[13,"Wait","","Program busy indicator.",21,null],[13,"Help","","Help indicator (often rendered as a \"?\")",21,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast\nwith \"Wait\" the user may still interact with the program. Often rendered\nas a spinning beach ball, or an arrow with a watch or hourglass.",21,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",21,null],[13,"ContextMenu","","",21,null],[13,"NoneCursor","","",21,null],[13,"Cell","","",21,null],[13,"VerticalText","","",21,null],[13,"Alias","","",21,null],[13,"Copy","","",21,null],[13,"NoDrop","","",21,null],[13,"Grab","","",21,null],[13,"Grabbing","","",21,null],[13,"AllScroll","","",21,null],[13,"ZoomIn","","",21,null],[13,"ZoomOut","","",21,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor\nis used when the movement starts from the south-east corner of the box.",21,null],[13,"NResize","","",21,null],[13,"NeResize","","",21,null],[13,"NwResize","","",21,null],[13,"SResize","","",21,null],[13,"SeResize","","",21,null],[13,"SwResize","","",21,null],[13,"WResize","","",21,null],[13,"EwResize","","",21,null],[13,"NsResize","","",21,null],[13,"NeswResize","","",21,null],[13,"NwseResize","","",21,null],[13,"ColResize","","",21,null],[13,"RowResize","","",21,null],[4,"CursorState","","Describes how glutin handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",22,null],[13,"Hide","","The cursor will be invisible when over the window.",22,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this\nwindow and the window has exclusive access to further events regarding\nthe cursor.",22,null],[5,"get_available_monitors","","Returns the list of all available monitors.",null,{"inputs":[],"output":{"name":"availablemonitorsiter"}}],[5,"get_primary_monitor","","Returns the primary monitor of the system.",null,{"inputs":[],"output":{"name":"monitorid"}}],[11,"hash","cocoa::appkit","",23,null],[11,"cmp","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"eq","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"i64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"i64"}],"output":{"name":"nswindoworderingmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",23,null],[11,"remove","","Removes the specified flags in-place.",23,null],[11,"toggle","","Toggles the specified flags in-place.",23,null],[11,"bitor","","Returns the union of the two sets of flags.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"not","","Returns the complement of this set of flags.",23,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"from_iter","","",23,{"inputs":[{"name":"nswindoworderingmode"},{"name":"t"}],"output":{"name":"nswindoworderingmode"}}],[11,"hash","","",24,null],[11,"cmp","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"eq","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"u64"}],"output":{"name":"nsalignmentoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,null],[11,"remove","","Removes the specified flags in-place.",24,null],[11,"toggle","","Toggles the specified flags in-place.",24,null],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"from_iter","","",24,{"inputs":[{"name":"nsalignmentoptions"},{"name":"t"}],"output":{"name":"nsalignmentoptions"}}],[11,"eq","","",25,{"inputs":[{"name":"nswindowbutton"},{"name":"nswindowbutton"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"nswindowbutton"},{"name":"nswindowbutton"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"nswindowbutton"}],"output":{"name":"nswindowbutton"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"eq","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"u64"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,null],[11,"remove","","Removes the specified flags in-place.",26,null],[11,"toggle","","Toggles the specified flags in-place.",26,null],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"from_iter","","",26,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"t"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"hash","","",27,null],[11,"cmp","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"eq","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"u64"}],"output":{"name":"nswindowocclusionstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,null],[11,"remove","","Removes the specified flags in-place.",27,null],[11,"toggle","","Toggles the specified flags in-place.",27,null],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"from_iter","","",27,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"t"}],"output":{"name":"nswindowocclusionstate"}}],[11,"hash","","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"eq","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"u64"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,null],[11,"remove","","Removes the specified flags in-place.",28,null],[11,"toggle","","Toggles the specified flags in-place.",28,null],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"from_iter","","",28,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"t"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"hash","","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"eq","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"nseventphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"nseventphase"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"nseventphase"},{"name":"u64"}],"output":{"name":"nseventphase"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,null],[11,"remove","","Removes the specified flags in-place.",29,null],[11,"toggle","","Toggles the specified flags in-place.",29,null],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"from_iter","","",29,{"inputs":[{"name":"nseventphase"},{"name":"t"}],"output":{"name":"nseventphase"}}],[11,"hash","","",30,null],[11,"cmp","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"eq","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"nstouchphase"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"nstouchphase"},{"name":"u64"}],"output":{"name":"nstouchphase"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",30,null],[11,"remove","","Removes the specified flags in-place.",30,null],[11,"toggle","","Toggles the specified flags in-place.",30,null],[11,"bitor","","Returns the union of the two sets of flags.",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"sub","","Returns the set difference of the two sets of flags.",30,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"not","","Returns the complement of this set of flags.",30,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"from_iter","","",30,{"inputs":[{"name":"nstouchphase"},{"name":"t"}],"output":{"name":"nstouchphase"}}],[11,"fmt","","",31,{"inputs":[{"name":"nseventtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"eq","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"nseventmask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"nseventmask"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"nseventmask"},{"name":"u64"}],"output":{"name":"nseventmask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,null],[11,"remove","","Removes the specified flags in-place.",32,null],[11,"toggle","","Toggles the specified flags in-place.",32,null],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"from_iter","","",32,{"inputs":[{"name":"nseventmask"},{"name":"t"}],"output":{"name":"nseventmask"}}],[11,"from_type","","",32,{"inputs":[{"name":"nseventmask"},{"name":"nseventtype"}],"output":{"name":"nseventmask"}}],[11,"hash","","",33,null],[11,"cmp","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"eq","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"u64"}],"output":{"name":"nseventmodifierflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",33,null],[11,"remove","","Removes the specified flags in-place.",33,null],[11,"toggle","","Toggles the specified flags in-place.",33,null],[11,"bitor","","Returns the union of the two sets of flags.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"not","","Returns the complement of this set of flags.",33,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"from_iter","","",33,{"inputs":[{"name":"nseventmodifierflags"},{"name":"t"}],"output":{"name":"nseventmodifierflags"}}],[11,"new","cocoa::foundation","",34,{"inputs":[{"name":"nspoint"},{"name":"f64"},{"name":"f64"}],"output":{"name":"nspoint"}}],[11,"encode","","",34,{"inputs":[{"name":"nspoint"}],"output":{"name":"encoding"}}],[11,"new","","",35,{"inputs":[{"name":"nssize"},{"name":"f64"},{"name":"f64"}],"output":{"name":"nssize"}}],[11,"encode","","",35,{"inputs":[{"name":"nssize"}],"output":{"name":"encoding"}}],[11,"new","","",36,{"inputs":[{"name":"nsrect"},{"name":"nspoint"},{"name":"nssize"}],"output":{"name":"nsrect"}}],[11,"encode","","",36,{"inputs":[{"name":"nsrect"}],"output":{"name":"encoding"}}],[11,"fmt","glutin","",7,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",8,{"inputs":[{"name":"touchphase"}],"output":{"name":"touchphase"}}],[11,"eq","","",8,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"touchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"touch"}],"output":{"name":"touch"}}],[11,"fmt","","",0,{"inputs":[{"name":"touch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",9,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"mousescrolldelta"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"mousescrolldelta"}],"output":{"name":"mousescrolldelta"}}],[11,"fmt","","",11,{"inputs":[{"name":"mousescrolldelta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",12,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",1,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",1,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",1,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",37,null],[11,"get_api","","Returns the API that is currently provided by this window.",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",37,{"inputs":[{"name":"headlesscontext"},{"name":"option"}],"output":null}],[11,"make_current","","",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",37,null],[11,"swap_buffers","","",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",37,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",2,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",2,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",2,{"inputs":[{"name":"windowbuilder"},{"name":"string"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",2,{"inputs":[{"name":"windowbuilder"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",2,{"inputs":[{"name":"windowbuilder"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",2,{"inputs":[{"name":"windowbuilder"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",2,{"inputs":[{"name":"windowbuilder"},{"name":"glprofile"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",2,{"inputs":[{"name":"windowbuilder"},{"name":"robustness"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",2,{"inputs":[{"name":"windowbuilder"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means \"I don't care\".",2,{"inputs":[{"name":"windowbuilder"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",2,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",2,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",38,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",38,{"inputs":[{"name":"window"},{"name":"str"}],"output":null}],[11,"show","","Shows the window if it was hidden.",38,{"inputs":[{"name":"window"}],"output":null}],[11,"hide","","Hides the window if it was visible.",38,{"inputs":[{"name":"window"}],"output":null}],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",38,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",38,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"get_inner_size","","Returns the size in points of the client area of the window.",38,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",38,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",38,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",38,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",38,{"inputs":[{"name":"window"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",38,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",38,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",38,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",38,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",38,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",38,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",38,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",38,null],[11,"get_api","","Returns the API that is currently provided by this window.",38,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",38,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",38,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",38,{"inputs":[{"name":"window"},{"name":"option"}],"output":null}],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",38,{"inputs":[{"name":"window"},{"name":"mousecursor"}],"output":null}],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",38,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",38,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",38,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"make_current","","",38,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",38,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",38,null],[11,"swap_buffers","","",38,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",38,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",38,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"clone","","",39,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",39,{"inputs":[{"name":"windowproxy"}],"output":null}],[11,"next","","",40,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next","","",41,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next","","",42,{"inputs":[{"name":"availablemonitorsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"get_name","","Returns a human-readable name of the monitor.",43,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",43,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",43,null],[0,"os","","Contains traits with platform-specific methods in them.",null,null],[0,"macos","glutin::os","",null,null],[8,"WindowExt","glutin::os::macos","Additional methods on `Window` that are specific to MacOS.",null,null],[10,"get_nswindow","","Returns a pointer to the cocoa `NSWindow` that is used by this window.",44,null],[11,"get_nswindow","glutin","",38,null],[11,"eq","","",13,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"nativemonitorid"}],"output":{"name":"nativemonitorid"}}],[6,"ScanCode","","",null,null],[7,"GL_CORE","","The minimum core profile GL context. Useful for getting the minimum\nrequired GL version while still running on OSX, which often forbids\nthe compatibility profile features.",null,null],[8,"GlContext","","Trait that describes objects that have access to an OpenGL context.",null,null],[10,"make_current","","Sets the context as the current context.",45,{"inputs":[{"name":"glcontext"}],"output":{"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",45,{"inputs":[{"name":"glcontext"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",45,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",45,{"inputs":[{"name":"glcontext"}],"output":{"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",45,{"inputs":[{"name":"glcontext"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",45,{"inputs":[{"name":"glcontext"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",14,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"creationerror"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"contexterror"}],"output":{"name":"str"}}],[11,"eq","","",16,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",16,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"glprofile"}],"output":{"name":"glprofile"}}],[11,"fmt","","",17,{"inputs":[{"name":"glprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"glrequest"}],"output":{"name":"glrequest"}}],[11,"fmt","","",18,{"inputs":[{"name":"glrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",18,{"inputs":[{"name":"glrequest"}],"output":{"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"robustness"}],"output":{"name":"robustness"}}],[11,"fmt","","",19,{"inputs":[{"name":"robustness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"releasebehavior"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"releasebehavior"}],"output":{"name":"releasebehavior"}}],[11,"fmt","","",20,{"inputs":[{"name":"releasebehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"mousecursor"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",21,{"inputs":[{"name":"mousecursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"cursorstate"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",22,{"inputs":[{"name":"cursorstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",3,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"pixelformatrequirements"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"default","","",4,{"inputs":[{"name":"pixelformatrequirements"}],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",5,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"default","","",5,{"inputs":[{"name":"windowattributes"}],"output":{"name":"windowattributes"}}],[11,"clone","","",6,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",6,{"inputs":[{"name":"glattributes"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"default","","",6,{"inputs":[{"name":"glattributes"}],"output":{"name":"glattributes"}}]],"paths":[[3,"Touch"],[3,"HeadlessRendererBuilder"],[3,"WindowBuilder"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"WindowAttributes"],[3,"GlAttributes"],[4,"Event"],[4,"TouchPhase"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[4,"NativeMonitorId"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[4,"MouseCursor"],[4,"CursorState"],[3,"NSWindowOrderingMode"],[3,"NSAlignmentOptions"],[4,"NSWindowButton"],[3,"NSWindowCollectionBehavior"],[3,"NSWindowOcclusionState"],[3,"NSEventSwipeTrackingOptions"],[3,"NSEventPhase"],[3,"NSTouchPhase"],[4,"NSEventType"],[3,"NSEventMask"],[3,"NSEventModifierFlags"],[3,"NSPoint"],[3,"NSSize"],[3,"NSRect"],[3,"HeadlessContext"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorId"],[8,"WindowExt"],[8,"GlContext"]]};
searchIndex['cocoa'] = {"items":[[0,"appkit","cocoa","",null,null],[11,"drop","core_graphics::color_space","",0,null],[11,"clone","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cgcolorspace"}}],[11,"as_concrete_TypeRef","","",0,null],[11,"wrap_under_get_rule","","",0,null],[11,"as_CFTypeRef","","",0,null],[11,"wrap_under_create_rule","","",0,null],[11,"type_id","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"u64"}}],[11,"create_device_rgb","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cgcolorspace"}}],[11,"drop","core_graphics::context","",1,null],[11,"clone","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"cgcontext"}}],[11,"as_concrete_TypeRef","","",1,null],[11,"wrap_under_get_rule","","",1,null],[11,"as_CFTypeRef","","",1,null],[11,"wrap_under_create_rule","","",1,null],[11,"type_id","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"u64"}}],[11,"create_bitmap_context","","",1,{"inputs":[{"name":"cgcontext"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"cgcolorspace"},{"name":"u32"}],"output":{"name":"cgcontext"}}],[11,"data","","",1,null],[11,"width","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"usize"}}],[11,"height","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"usize"}}],[11,"bytes_per_row","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"usize"}}],[11,"set_rgb_fill_color","","",1,null],[11,"set_allows_font_smoothing","","",1,null],[11,"set_should_smooth_fonts","","",1,null],[11,"drop","core_graphics::data_provider","",2,null],[11,"as_concrete_TypeRef","","",2,null],[11,"wrap_under_get_rule","","",2,null],[11,"as_CFTypeRef","","",2,null],[11,"wrap_under_create_rule","","",2,null],[11,"type_id","","",2,{"inputs":[{"name":"cgdataprovider"}],"output":{"name":"u64"}}],[11,"from_buffer","","",2,null],[11,"serialize","core_graphics::font","",3,{"inputs":[{"name":"cgfont"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"cgfont"},{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cgfont"}}],[11,"drop","","",3,null],[11,"as_concrete_TypeRef","","",3,null],[11,"wrap_under_get_rule","","",3,null],[11,"as_CFTypeRef","","",3,null],[11,"wrap_under_create_rule","","",3,null],[11,"type_id","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"u64"}}],[11,"from_data_provider","","",3,{"inputs":[{"name":"cgfont"},{"name":"cgdataprovider"}],"output":{"name":"result"}}],[11,"from_name","","",3,{"inputs":[{"name":"cgfont"},{"name":"cfstring"}],"output":{"name":"result"}}],[11,"postscript_name","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cfstring"}}],[6,"CGFloat","cocoa::appkit","",null,null],[3,"CGPoint","","",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"NSWindowOrderingMode","","",null,null],[3,"NSAlignmentOptions","","",null,null],[3,"NSWindowCollectionBehavior","","",null,null],[3,"NSWindowOcclusionState","","",null,null],[3,"NSEventSwipeTrackingOptions","","",null,null],[3,"NSEventPhase","","",null,null],[3,"NSTouchPhase","","",null,null],[3,"NSEventMask","","",null,null],[3,"NSEventModifierFlags","","",null,null],[4,"NSApplicationActivationPolicy","","",null,null],[13,"NSApplicationActivationPolicyRegular","","",5,null],[13,"NSApplicationActivationPolicyAccessory","","",5,null],[13,"NSApplicationActivationPolicyERROR","","",5,null],[4,"NSApplicationActivationOptions","","",null,null],[13,"NSApplicationActivateAllWindows","","",6,null],[13,"NSApplicationActivateIgnoringOtherApps","","",6,null],[4,"NSApplicationTerminateReply","","",null,null],[13,"NSTerminateCancel","","",7,null],[13,"NSTerminateNow","","",7,null],[13,"NSTerminateLater","","",7,null],[4,"NSWindowMask","","",null,null],[13,"NSBorderlessWindowMask","","",8,null],[13,"NSTitledWindowMask","","",8,null],[13,"NSClosableWindowMask","","",8,null],[13,"NSMiniaturizableWindowMask","","",8,null],[13,"NSResizableWindowMask","","",8,null],[13,"NSTexturedBackgroundWindowMask","","",8,null],[13,"NSUnifiedTitleAndToolbarWindowMask","","",8,null],[13,"NSFullScreenWindowMask","","",8,null],[13,"NSFullSizeContentViewWindowMask","","",8,null],[4,"NSWindowTitleVisibility","","",null,null],[13,"NSWindowTitleVisible","","",9,null],[13,"NSWindowTitleHidden","","",9,null],[4,"NSBackingStoreType","","",null,null],[13,"NSBackingStoreRetained","","",10,null],[13,"NSBackingStoreNonretained","","",10,null],[13,"NSBackingStoreBuffered","","",10,null],[4,"NSOpenGLPixelFormatAttribute","","",null,null],[13,"NSOpenGLPFAAllRenderers","","",11,null],[13,"NSOpenGLPFATripleBuffer","","",11,null],[13,"NSOpenGLPFADoubleBuffer","","",11,null],[13,"NSOpenGLPFAStereo","","",11,null],[13,"NSOpenGLPFAAuxBuffers","","",11,null],[13,"NSOpenGLPFAColorSize","","",11,null],[13,"NSOpenGLPFAAlphaSize","","",11,null],[13,"NSOpenGLPFADepthSize","","",11,null],[13,"NSOpenGLPFAStencilSize","","",11,null],[13,"NSOpenGLPFAAccumSize","","",11,null],[13,"NSOpenGLPFAMinimumPolicy","","",11,null],[13,"NSOpenGLPFAMaximumPolicy","","",11,null],[13,"NSOpenGLPFAOffScreen","","",11,null],[13,"NSOpenGLPFAFullScreen","","",11,null],[13,"NSOpenGLPFASampleBuffers","","",11,null],[13,"NSOpenGLPFASamples","","",11,null],[13,"NSOpenGLPFAAuxDepthStencil","","",11,null],[13,"NSOpenGLPFAColorFloat","","",11,null],[13,"NSOpenGLPFAMultisample","","",11,null],[13,"NSOpenGLPFASupersample","","",11,null],[13,"NSOpenGLPFASampleAlpha","","",11,null],[13,"NSOpenGLPFARendererID","","",11,null],[13,"NSOpenGLPFASingleRenderer","","",11,null],[13,"NSOpenGLPFANoRecovery","","",11,null],[13,"NSOpenGLPFAAccelerated","","",11,null],[13,"NSOpenGLPFAClosestPolicy","","",11,null],[13,"NSOpenGLPFARobust","","",11,null],[13,"NSOpenGLPFABackingStore","","",11,null],[13,"NSOpenGLPFAMPSafe","","",11,null],[13,"NSOpenGLPFAWindow","","",11,null],[13,"NSOpenGLPFAMultiScreen","","",11,null],[13,"NSOpenGLPFACompliant","","",11,null],[13,"NSOpenGLPFAScreenMask","","",11,null],[13,"NSOpenGLPFAPixelBuffer","","",11,null],[13,"NSOpenGLPFARemotePixelBuffer","","",11,null],[13,"NSOpenGLPFAAllowOfflineRenderers","","",11,null],[13,"NSOpenGLPFAAcceleratedCompute","","",11,null],[13,"NSOpenGLPFAOpenGLProfile","","",11,null],[13,"NSOpenGLPFAVirtualScreenCount","","",11,null],[4,"NSOpenGLPFAOpenGLProfiles","","",null,null],[13,"NSOpenGLProfileVersionLegacy","","",12,null],[13,"NSOpenGLProfileVersion3_2Core","","",12,null],[13,"NSOpenGLProfileVersion4_1Core","","",12,null],[4,"NSOpenGLContextParameter","","",null,null],[13,"NSOpenGLCPSwapInterval","","",13,null],[13,"NSOpenGLCPSurfaceOrder","","",13,null],[13,"NSOpenGLCPSurfaceOpacity","","",13,null],[13,"NSOpenGLCPSurfaceBackingSize","","",13,null],[13,"NSOpenGLCPReclaimResources","","",13,null],[13,"NSOpenGLCPCurrentRendererID","","",13,null],[13,"NSOpenGLCPGPUVertexProcessing","","",13,null],[13,"NSOpenGLCPGPUFragmentProcessing","","",13,null],[13,"NSOpenGLCPHasDrawable","","",13,null],[13,"NSOpenGLCPMPSwapsInFlight","","",13,null],[4,"NSWindowButton","","",null,null],[13,"NSWindowCloseButton","","",14,null],[13,"NSWindowMiniaturizeButton","","",14,null],[13,"NSWindowZoomButton","","",14,null],[13,"NSWindowToolbarButton","","",14,null],[13,"NSWindowDocumentIconButton","","",14,null],[13,"NSWindowDocumentVersionsButton","","",14,null],[13,"NSWindowFullScreenButton","","",14,null],[4,"NSEventGestureAxis","","",null,null],[13,"NSEventGestureAxisNone","","",15,null],[13,"NSEventGestureAxisHorizontal","","",15,null],[13,"NSEventGestureAxisVertical","","",15,null],[4,"NSEventType","","",null,null],[13,"NSLeftMouseDown","","",16,null],[13,"NSLeftMouseUp","","",16,null],[13,"NSRightMouseDown","","",16,null],[13,"NSRightMouseUp","","",16,null],[13,"NSMouseMoved","","",16,null],[13,"NSLeftMouseDragged","","",16,null],[13,"NSRightMouseDragged","","",16,null],[13,"NSMouseEntered","","",16,null],[13,"NSMouseExited","","",16,null],[13,"NSKeyDown","","",16,null],[13,"NSKeyUp","","",16,null],[13,"NSFlagsChanged","","",16,null],[13,"NSAppKitDefined","","",16,null],[13,"NSSystemDefined","","",16,null],[13,"NSApplicationDefined","","",16,null],[13,"NSPeriodic","","",16,null],[13,"NSCursorUpdate","","",16,null],[13,"NSScrollWheel","","",16,null],[13,"NSTabletPoint","","",16,null],[13,"NSTabletProximity","","",16,null],[13,"NSOtherMouseDown","","",16,null],[13,"NSOtherMouseUp","","",16,null],[13,"NSOtherMouseDragged","","",16,null],[13,"NSEventTypeGesture","","",16,null],[13,"NSEventTypeMagnify","","",16,null],[13,"NSEventTypeSwipe","","",16,null],[13,"NSEventTypeRotate","","",16,null],[13,"NSEventTypeBeginGesture","","",16,null],[13,"NSEventTypeEndGesture","","",16,null],[13,"NSEventTypePressure","","",16,null],[4,"NSPointingDeviceType","","",null,null],[4,"NSEventButtonMask","","",null,null],[4,"NSEventSubtype","","",null,null],[13,"NSWindowExposedEventType","","",17,null],[13,"NSApplicationActivatedEventType","","",17,null],[13,"NSApplicationDeactivatedEventType","","",17,null],[13,"NSWindowMovedEventType","","",17,null],[13,"NSScreenChangedEventType","","",17,null],[13,"NSAWTEventType","","",17,null],[5,"NSApp","","",null,{"inputs":[],"output":{"name":"id"}}],[7,"NSAppKitVersionNumber","","",null,null],[6,"CGLContextObj","","",null,null],[6,"GLint","","",null,null],[6,"NSWindowDepth","","",null,null],[7,"NSMainMenuWindowLevel","","",null,null],[17,"NSAppKitVersionNumber10_0","","",null,null],[17,"NSAppKitVersionNumber10_1","","",null,null],[17,"NSAppKitVersionNumber10_2","","",null,null],[17,"NSAppKitVersionNumber10_2_3","","",null,null],[17,"NSAppKitVersionNumber10_3","","",null,null],[17,"NSAppKitVersionNumber10_3_2","","",null,null],[17,"NSAppKitVersionNumber10_3_3","","",null,null],[17,"NSAppKitVersionNumber10_3_5","","",null,null],[17,"NSAppKitVersionNumber10_3_7","","",null,null],[17,"NSAppKitVersionNumber10_3_9","","",null,null],[17,"NSAppKitVersionNumber10_4","","",null,null],[17,"NSAppKitVersionNumber10_4_1","","",null,null],[17,"NSAppKitVersionNumber10_4_3","","",null,null],[17,"NSAppKitVersionNumber10_4_4","","",null,null],[17,"NSAppKitVersionNumber10_4_7","","",null,null],[17,"NSAppKitVersionNumber10_5","","",null,null],[17,"NSAppKitVersionNumber10_5_2","","",null,null],[17,"NSAppKitVersionNumber10_5_3","","",null,null],[17,"NSAppKitVersionNumber10_6","","",null,null],[17,"NSAppKitVersionNumber10_7","","",null,null],[17,"NSAppKitVersionNumber10_7_2","","",null,null],[17,"NSAppKitVersionNumber10_7_3","","",null,null],[17,"NSAppKitVersionNumber10_7_4","","",null,null],[17,"NSAppKitVersionNumber10_8","","",null,null],[17,"NSAppKitVersionNumber10_9","","",null,null],[17,"NSWindowAbove","","",null,null],[17,"NSWindowBelow","","",null,null],[17,"NSWindowOut","","",null,null],[17,"NSAlignMinXInward","","",null,null],[17,"NSAlignMinYInward","","",null,null],[17,"NSAlignMaxXInward","","",null,null],[17,"NSAlignMaxYInward","","",null,null],[17,"NSAlignWidthInward","","",null,null],[17,"NSAlignHeightInward","","",null,null],[17,"NSAlignMinXOutward","","",null,null],[17,"NSAlignMinYOutward","","",null,null],[17,"NSAlignMaxXOutward","","",null,null],[17,"NSAlignMaxYOutward","","",null,null],[17,"NSAlignWidthOutward","","",null,null],[17,"NSAlignHeightOutward","","",null,null],[17,"NSAlignMinXNearest","","",null,null],[17,"NSAlignMinYNearest","","",null,null],[17,"NSAlignMaxXNearest","","",null,null],[17,"NSAlignMaxYNearest","","",null,null],[17,"NSAlignWidthNearest","","",null,null],[17,"NSAlignHeightNearest","","",null,null],[17,"NSAlignRectFlipped","","",null,null],[17,"NSAlignAllEdgesInward","","",null,null],[17,"NSAlignAllEdgesOutward","","",null,null],[17,"NSAlignAllEdgesNearest","","",null,null],[17,"NSWindowCollectionBehaviorDefault","","",null,null],[17,"NSWindowCollectionBehaviorCanJoinAllSpaces","","",null,null],[17,"NSWindowCollectionBehaviorMoveToActiveSpace","","",null,null],[17,"NSWindowCollectionBehaviorManaged","","",null,null],[17,"NSWindowCollectionBehaviorTransient","","",null,null],[17,"NSWindowCollectionBehaviorStationary","","",null,null],[17,"NSWindowCollectionBehaviorParticipatesInCycle","","",null,null],[17,"NSWindowCollectionBehaviorIgnoresCycle","","",null,null],[17,"NSWindowCollectionBehaviorFullScreenPrimary","","",null,null],[17,"NSWindowCollectionBehaviorFullScreenAuxiliary","","",null,null],[17,"NSWindowOcclusionStateVisible","","",null,null],[17,"NSEventSwipeTrackingLockDirection","","",null,null],[17,"NSEventSwipeTrackingClampGestureAmount","","",null,null],[17,"NSEventPhaseNone","","",null,null],[17,"NSEventPhaseBegan","","",null,null],[17,"NSEventPhaseStationary","","",null,null],[17,"NSEventPhaseChanged","","",null,null],[17,"NSEventPhaseEnded","","",null,null],[17,"NSEventPhaseCancelled","","",null,null],[17,"NSEventPhaseMayBegin","","",null,null],[17,"NSTouchPhaseBegan","","",null,null],[17,"NSTouchPhaseMoved","","",null,null],[17,"NSTouchPhaseStationary","","",null,null],[17,"NSTouchPhaseEnded","","",null,null],[17,"NSTouchPhaseCancelled","","",null,null],[17,"NSTouchPhaseTouching","","",null,null],[17,"NSTouchPhaseAny","","",null,null],[17,"NSLeftMouseDownMask","","",null,null],[17,"NSLeftMouseUpMask","","",null,null],[17,"NSRightMouseDownMask","","",null,null],[17,"NSRightMouseUpMask","","",null,null],[17,"NSMouseMovedMask","","",null,null],[17,"NSLeftMouseDraggedMask","","",null,null],[17,"NSRightMouseDraggedMask","","",null,null],[17,"NSMouseEnteredMask","","",null,null],[17,"NSMouseExitedMask","","",null,null],[17,"NSKeyDownMask","","",null,null],[17,"NSKeyUpMask","","",null,null],[17,"NSFlagsChangedMask","","",null,null],[17,"NSAppKitDefinedMask","","",null,null],[17,"NSSystemDefinedMask","","",null,null],[17,"NSApplicationDefinedMask","","",null,null],[17,"NSPeriodicMask","","",null,null],[17,"NSCursorUpdateMask","","",null,null],[17,"NSScrollWheelMask","","",null,null],[17,"NSTabletPointMask","","",null,null],[17,"NSTabletProximityMask","","",null,null],[17,"NSOtherMouseDownMask","","",null,null],[17,"NSOtherMouseUpMask","","",null,null],[17,"NSOtherMouseDraggedMask","","",null,null],[17,"NSEventMaskGesture","","",null,null],[17,"NSEventMaskSwipe","","",null,null],[17,"NSEventMaskRotate","","",null,null],[17,"NSEventMaskBeginGesture","","",null,null],[17,"NSEventMaskEndGesture","","",null,null],[17,"NSEventMaskPressure","","",null,null],[17,"NSAnyEventMask","","",null,null],[17,"NSAlphaShiftKeyMask","","",null,null],[17,"NSShiftKeyMask","","",null,null],[17,"NSControlKeyMask","","",null,null],[17,"NSAlternateKeyMask","","",null,null],[17,"NSCommandKeyMask","","",null,null],[17,"NSNumericPadKeyMask","","",null,null],[17,"NSHelpKeyMask","","",null,null],[17,"NSFunctionKeyMask","","",null,null],[17,"NSDeviceIndependentModifierFlagsMask","","",null,null],[17,"NSUpArrowFunctionKey","","",null,null],[17,"NSDownArrowFunctionKey","","",null,null],[17,"NSLeftArrowFunctionKey","","",null,null],[17,"NSRightArrowFunctionKey","","",null,null],[17,"NSF1FunctionKey","","",null,null],[17,"NSF2FunctionKey","","",null,null],[17,"NSF3FunctionKey","","",null,null],[17,"NSF4FunctionKey","","",null,null],[17,"NSF5FunctionKey","","",null,null],[17,"NSF6FunctionKey","","",null,null],[17,"NSF7FunctionKey","","",null,null],[17,"NSF8FunctionKey","","",null,null],[17,"NSF9FunctionKey","","",null,null],[17,"NSF10FunctionKey","","",null,null],[17,"NSF11FunctionKey","","",null,null],[17,"NSF12FunctionKey","","",null,null],[17,"NSF13FunctionKey","","",null,null],[17,"NSF14FunctionKey","","",null,null],[17,"NSF15FunctionKey","","",null,null],[17,"NSF16FunctionKey","","",null,null],[17,"NSF17FunctionKey","","",null,null],[17,"NSF18FunctionKey","","",null,null],[17,"NSF19FunctionKey","","",null,null],[17,"NSF20FunctionKey","","",null,null],[17,"NSF21FunctionKey","","",null,null],[17,"NSF22FunctionKey","","",null,null],[17,"NSF23FunctionKey","","",null,null],[17,"NSF24FunctionKey","","",null,null],[17,"NSF25FunctionKey","","",null,null],[17,"NSF26FunctionKey","","",null,null],[17,"NSF27FunctionKey","","",null,null],[17,"NSF28FunctionKey","","",null,null],[17,"NSF29FunctionKey","","",null,null],[17,"NSF30FunctionKey","","",null,null],[17,"NSF31FunctionKey","","",null,null],[17,"NSF32FunctionKey","","",null,null],[17,"NSF33FunctionKey","","",null,null],[17,"NSF34FunctionKey","","",null,null],[17,"NSF35FunctionKey","","",null,null],[17,"NSInsertFunctionKey","","",null,null],[17,"NSDeleteFunctionKey","","",null,null],[17,"NSHomeFunctionKey","","",null,null],[17,"NSBeginFunctionKey","","",null,null],[17,"NSEndFunctionKey","","",null,null],[17,"NSPageUpFunctionKey","","",null,null],[17,"NSPageDownFunctionKey","","",null,null],[17,"NSPrintScreenFunctionKey","","",null,null],[17,"NSScrollLockFunctionKey","","",null,null],[17,"NSPauseFunctionKey","","",null,null],[17,"NSSysReqFunctionKey","","",null,null],[17,"NSBreakFunctionKey","","",null,null],[17,"NSResetFunctionKey","","",null,null],[17,"NSStopFunctionKey","","",null,null],[17,"NSMenuFunctionKey","","",null,null],[17,"NSUserFunctionKey","","",null,null],[17,"NSSystemFunctionKey","","",null,null],[17,"NSPrintFunctionKey","","",null,null],[17,"NSClearLineFunctionKey","","",null,null],[17,"NSClearDisplayFunctionKey","","",null,null],[17,"NSInsertLineFunctionKey","","",null,null],[17,"NSDeleteLineFunctionKey","","",null,null],[17,"NSInsertCharFunctionKey","","",null,null],[17,"NSDeleteCharFunctionKey","","",null,null],[17,"NSPrevFunctionKey","","",null,null],[17,"NSNextFunctionKey","","",null,null],[17,"NSSelectFunctionKey","","",null,null],[17,"NSExecuteFunctionKey","","",null,null],[17,"NSUndoFunctionKey","","",null,null],[17,"NSRedoFunctionKey","","",null,null],[17,"NSFindFunctionKey","","",null,null],[17,"NSHelpFunctionKey","","",null,null],[17,"NSModeSwitchFunctionKey","","",null,null],[17,"NSVariableStatusItemLength","","",null,null],[17,"NSSquareStatusItemLength","","",null,null],[8,"NSApplication","","",null,null],[11,"sharedApplication","","",18,{"inputs":[{"name":"nsapplication"},{"name":"self"}],"output":{"name":"id"}}],[10,"setActivationPolicy_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"nsapplicationactivationpolicy"}],"output":{"name":"bool"}}],[10,"setMainMenu_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"id"}],"output":null}],[10,"setServicesMenu_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"id"}],"output":null}],[10,"activateIgnoringOtherApps_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"bool"}],"output":null}],[10,"run","","",18,{"inputs":[{"name":"nsapplication"}],"output":null}],[10,"finishLaunching","","",18,{"inputs":[{"name":"nsapplication"}],"output":null}],[10,"nextEventMatchingMask_untilDate_inMode_dequeue_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"nsuinteger"},{"name":"id"},{"name":"id"},{"name":"bool"}],"output":{"name":"id"}}],[10,"sendEvent_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"id"}],"output":null}],[10,"postEvent_atStart_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"id"},{"name":"bool"}],"output":null}],[10,"stop_","","",18,{"inputs":[{"name":"nsapplication"},{"name":"id"}],"output":null}],[8,"NSRunningApplication","","",null,null],[11,"currentApplication","","",19,{"inputs":[{"name":"nsrunningapplication"},{"name":"self"}],"output":{"name":"id"}}],[10,"activateWithOptions_","","",19,{"inputs":[{"name":"nsrunningapplication"},{"name":"nsapplicationactivationoptions"}],"output":{"name":"bool"}}],[8,"NSMenu","","",null,null],[11,"new","","",20,{"inputs":[{"name":"nsmenu"},{"name":"self"}],"output":{"name":"id"}}],[10,"setAutoenablesItems","","",20,{"inputs":[{"name":"nsmenu"},{"name":"bool"}],"output":null}],[10,"addItem_","","",20,{"inputs":[{"name":"nsmenu"},{"name":"id"}],"output":null}],[10,"addItemWithTitle_action_keyEquivalent","","",20,{"inputs":[{"name":"nsmenu"},{"name":"id"},{"name":"sel"},{"name":"id"}],"output":{"name":"id"}}],[8,"NSMenuItem","","",null,null],[11,"alloc","","",21,{"inputs":[{"name":"nsmenuitem"},{"name":"self"}],"output":{"name":"id"}}],[11,"new","","",21,{"inputs":[{"name":"nsmenuitem"},{"name":"self"}],"output":{"name":"id"}}],[11,"separatorItem","","",21,{"inputs":[{"name":"nsmenuitem"},{"name":"self"}],"output":{"name":"id"}}],[10,"initWithTitle_action_keyEquivalent_","","",21,{"inputs":[{"name":"nsmenuitem"},{"name":"id"},{"name":"sel"},{"name":"id"}],"output":{"name":"id"}}],[10,"setKeyEquivalentModifierMask_","","",21,{"inputs":[{"name":"nsmenuitem"},{"name":"nseventmodifierflags"}],"output":null}],[10,"setSubmenu_","","",21,{"inputs":[{"name":"nsmenuitem"},{"name":"id"}],"output":null}],[8,"NSWindow","","",null,null],[11,"alloc","","",22,{"inputs":[{"name":"nswindow"},{"name":"self"}],"output":{"name":"id"}}],[10,"initWithContentRect_styleMask_backing_defer_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"nsuinteger"},{"name":"nsbackingstoretype"},{"name":"bool"}],"output":{"name":"id"}}],[10,"initWithContentRect_styleMask_backing_defer_screen_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"nsuinteger"},{"name":"nsbackingstoretype"},{"name":"bool"},{"name":"id"}],"output":{"name":"id"}}],[10,"styleMask","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nsuinteger"}}],[10,"setStyleMask_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsuinteger"}],"output":null}],[10,"toggleFullScreen_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"worksWhenModal","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"alphaValue","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"cgfloat"}}],[10,"setAlphaValue_","","",22,{"inputs":[{"name":"nswindow"},{"name":"cgfloat"}],"output":null}],[10,"backgroundColor","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setBackgroundColor_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"colorSpace","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setColorSpace_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"contentView","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setContentView_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"canHide","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setCanHide_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"hidesOnDeactivate","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setHidesOnDeactivate_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"collectionBehavior","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nswindowcollectionbehavior"}}],[10,"setCollectionBehavior_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nswindowcollectionbehavior"}],"output":null}],[10,"setOpaque_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"hasShadow","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setHasShadow_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"invalidateShadow","","",22,{"inputs":[{"name":"nswindow"}],"output":null}],[10,"autorecalculatesContentBorderThicknessForEdge_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrectedge"}],"output":{"name":"bool"}}],[10,"setAutorecalculatesContentBorderThickness_forEdge_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"},{"name":"nsrectedge"}],"output":{"name":"bool"}}],[10,"contentBorderThicknessForEdge_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrectedge"}],"output":{"name":"cgfloat"}}],[10,"setContentBorderThickness_forEdge_","","",22,{"inputs":[{"name":"nswindow"},{"name":"cgfloat"},{"name":"nsrectedge"}],"output":null}],[10,"delegate","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setDelegate_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"preventsApplicationTerminationWhenModal","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setPreventsApplicationTerminationWhenModal_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"contentRectForFrameRect_styleMask_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"nsuinteger"}],"output":{"name":"nsrect"}}],[10,"frameRectForContentRect_styleMask_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"nsuinteger"}],"output":{"name":"nsrect"}}],[10,"minFrameWidthWithTitle_styleMask_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"},{"name":"nsuinteger"}],"output":{"name":"cgfloat"}}],[10,"contentRectForFrameRect_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"frameRectForContentRect_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"drawers","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"windowController","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setWindowController_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"frame","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nsrect"}}],[10,"setFrameOrigin_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nspoint"}],"output":null}],[10,"setFrameTopLeftPoint_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nspoint"}],"output":null}],[10,"constrainFrameRect_toScreen_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"id"}],"output":null}],[10,"cascadeTopLeftFromPoint_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nspoint"}],"output":{"name":"nspoint"}}],[10,"setFrame_display_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"bool"}],"output":null}],[10,"setFrame_displayViews_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"bool"}],"output":null}],[10,"aspectRatio","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setAspectRatio_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"minSize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setMinSize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"maxSize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setMaxSize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"performZoom_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"zoom_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"resizeFlags","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nsinteger"}}],[10,"showsResizeIndicator","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setShowsResizeIndicator_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"resizeIncrements","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setResizeIncrements_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"preservesContentDuringLiveResize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setPreservesContentDuringLiveResize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"inLiveResize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"contentAspectRatio","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setContentAspectRatio_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"contentMinSize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setContentMinSize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"contentSize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setContentSize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"contentMaxSize","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setContentMaxSize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"contentResizeIncrements","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nssize"}}],[10,"setContentResizeIncrements_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nssize"}],"output":null}],[10,"isVisible","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"occlusionState","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nswindowocclusionstate"}}],[10,"orderOut_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"orderBack_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"orderFront_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"orderFrontRegardless","","",22,{"inputs":[{"name":"nswindow"}],"output":null}],[10,"orderFrontWindow_relativeTo_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nswindoworderingmode"},{"name":"nsinteger"}],"output":null}],[10,"level","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nsinteger"}}],[10,"setLevel_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsinteger"}],"output":null}],[10,"canBecomeKeyWindow","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"makeKeyWindow","","",22,{"inputs":[{"name":"nswindow"}],"output":null}],[10,"makeKeyAndOrderFront_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"canBecomeMainWindow","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"makeMainWindow","","",22,{"inputs":[{"name":"nswindow"}],"output":null}],[10,"standardWindowButton_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nswindowbutton"}],"output":{"name":"id"}}],[10,"initialFirstResponder","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"firstResponder","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setInitialFirstResponder_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"makeFirstResponder_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":{"name":"bool"}}],[10,"keyDown_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"acceptsMouseMovedEvents","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"ignoresMouseEvents","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setIgnoresMouseEvents_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"mouseLocationOutsideOfEventStream","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"nspoint"}}],[10,"setAcceptsMouseMovedEvents_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"windowNumberAtPoint_belowWindowWithWindowNumber_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nspoint"},{"name":"nsinteger"}],"output":{"name":"nsinteger"}}],[10,"backingScaleFactor","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"cgfloat"}}],[10,"backingAlignedRect_options_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"},{"name":"nsalignmentoptions"}],"output":{"name":"nsrect"}}],[10,"convertRectFromBacking_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"convertRectToBacking_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"convertRectToScreen_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"convertRectFromScreen_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"setDocumentEdited_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"title","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setTitle_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"setTitleWithRepresentedFilename_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"setTitleVisibility_","","",22,{"inputs":[{"name":"nswindow"},{"name":"nswindowtitlevisibility"}],"output":null}],[10,"setTitlebarAppearsTransparent_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"representedFilename","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setRepresentedFilename_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"representedURL","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setRepresentedURL_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"screen","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"deepestScreen","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"displaysWhenScreenProfileChanges","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"bool"}}],[10,"setDisplaysWhenScreenProfileChanges_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"setMovableByWindowBackground_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"setMovable_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"center","","",22,{"inputs":[{"name":"nswindow"}],"output":null}],[10,"performClose_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"close","","",22,{"inputs":[{"name":"nswindow"}],"output":null}],[10,"setReleasedWhenClosed_","","",22,{"inputs":[{"name":"nswindow"},{"name":"bool"}],"output":null}],[10,"performMiniaturize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"miniaturize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"deminiaturize_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"miniwindowImage","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setMiniwindowImage_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[10,"miniwindowTitle","","",22,{"inputs":[{"name":"nswindow"}],"output":{"name":"id"}}],[10,"setMiniwindowTitle_","","",22,{"inputs":[{"name":"nswindow"},{"name":"id"}],"output":null}],[8,"NSView","","",null,null],[11,"alloc","","",23,{"inputs":[{"name":"nsview"},{"name":"self"}],"output":{"name":"id"}}],[10,"init","","",23,{"inputs":[{"name":"nsview"}],"output":{"name":"id"}}],[10,"initWithFrame_","","",23,{"inputs":[{"name":"nsview"},{"name":"nsrect"}],"output":{"name":"id"}}],[10,"bounds","","",23,{"inputs":[{"name":"nsview"}],"output":{"name":"nsrect"}}],[10,"frame","","",23,{"inputs":[{"name":"nsview"}],"output":{"name":"nsrect"}}],[10,"display_","","",23,{"inputs":[{"name":"nsview"}],"output":null}],[10,"setWantsBestResolutionOpenGLSurface_","","",23,{"inputs":[{"name":"nsview"},{"name":"bool"}],"output":null}],[10,"convertPoint_fromView_","","",23,{"inputs":[{"name":"nsview"},{"name":"nspoint"},{"name":"id"}],"output":{"name":"nspoint"}}],[10,"addSubview_","","",23,{"inputs":[{"name":"nsview"},{"name":"id"}],"output":null}],[10,"superview","","",23,{"inputs":[{"name":"nsview"}],"output":{"name":"id"}}],[10,"removeFromSuperview","","",23,{"inputs":[{"name":"nsview"}],"output":null}],[8,"NSOpenGLView","","",null,null],[11,"alloc","","",24,{"inputs":[{"name":"nsopenglview"},{"name":"self"}],"output":{"name":"id"}}],[10,"initWithFrame_pixelFormat_","","",24,{"inputs":[{"name":"nsopenglview"},{"name":"nsrect"},{"name":"id"}],"output":{"name":"id"}}],[10,"display_","","",24,{"inputs":[{"name":"nsopenglview"}],"output":null}],[10,"setOpenGLContext_","","",24,{"inputs":[{"name":"nsopenglview"},{"name":"id"}],"output":null}],[10,"setPixelFormat_","","",24,{"inputs":[{"name":"nsopenglview"},{"name":"id"}],"output":null}],[8,"NSOpenGLPixelFormat","","",null,null],[11,"alloc","","",25,{"inputs":[{"name":"nsopenglpixelformat"},{"name":"self"}],"output":{"name":"id"}}],[10,"initWithAttributes_","","",25,null],[10,"getValues_forAttribute_forVirtualScreen_","","",25,null],[10,"numberOfVirtualScreens","","",25,{"inputs":[{"name":"nsopenglpixelformat"}],"output":{"name":"glint"}}],[8,"NSOpenGLContext","","",null,null],[11,"alloc","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"self"}],"output":{"name":"id"}}],[10,"initWithFormat_shareContext_","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[10,"initWithCGLContextObj_","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"cglcontextobj"}],"output":{"name":"id"}}],[10,"clearCurrentContext","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"self"}],"output":null}],[10,"currentContext","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"self"}],"output":{"name":"id"}}],[10,"makeCurrentContext","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":null}],[10,"setView_","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"id"}],"output":null}],[10,"view","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":{"name":"id"}}],[10,"clearDrawable","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":null}],[10,"update","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":null}],[10,"flushBuffer","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":null}],[10,"setValues_forParameter_","","",26,null],[10,"getValues_forParameter_","","",26,null],[10,"setCurrentVirtualScreen_","","",26,{"inputs":[{"name":"nsopenglcontext"},{"name":"glint"}],"output":null}],[10,"currentVirtualScreen","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":{"name":"glint"}}],[10,"CGLContextObj","","",26,{"inputs":[{"name":"nsopenglcontext"}],"output":{"name":"cglcontextobj"}}],[8,"NSEvent","","",null,null],[10,"keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode_","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"},{"name":"nseventtype"},{"name":"nspoint"},{"name":"nseventmodifierflags"},{"name":"nstimeinterval"},{"name":"nsinteger"},{"name":"id"},{"name":"id"},{"name":"id"},{"name":"bool"},{"name":"c_ushort"}],"output":{"name":"id"}}],[10,"mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"},{"name":"nseventtype"},{"name":"nspoint"},{"name":"nseventmodifierflags"},{"name":"nstimeinterval"},{"name":"nsinteger"},{"name":"id"},{"name":"nsinteger"},{"name":"nsinteger"},{"name":"c_float"}],"output":{"name":"id"}}],[10,"enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData_","","",27,null],[10,"otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2_","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"},{"name":"nseventtype"},{"name":"nspoint"},{"name":"nseventmodifierflags"},{"name":"nstimeinterval"},{"name":"nsinteger"},{"name":"id"},{"name":"nseventsubtype"},{"name":"nsinteger"},{"name":"nsinteger"}],"output":{"name":"id"}}],[10,"eventWithEventRef_","","",27,null],[10,"eventWithCGEvent_","","",27,null],[10,"context","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"id"}}],[10,"locationInWindow","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nspoint"}}],[10,"modifierFlags","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nseventmodifierflags"}}],[10,"timestamp","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nstimeinterval"}}],[10,"eventType","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nseventtype"}}],[10,"window","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"id"}}],[10,"windowNumber","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"eventRef","","",27,null],[10,"CGEvent","","",27,null],[10,"currentModifierFlags","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"nseventmodifierflags"}}],[10,"keyRepeatDelay","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"nstimeinterval"}}],[10,"keyRepeatInterval","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"nstimeinterval"}}],[10,"characters","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"id"}}],[10,"charactersIgnoringModifiers","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"id"}}],[10,"keyCode","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"c_ushort"}}],[10,"pressedMouseButtons","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"nsuinteger"}}],[10,"doubleClickInterval","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"nstimeinterval"}}],[10,"mouseLocation","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"nspoint"}}],[10,"buttonNumber","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"clickCount","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"pressure","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"c_float"}}],[10,"stage","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"setMouseCoalescingEnabled_","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"},{"name":"bool"}],"output":null}],[10,"isMouseCoalescingEnabled","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"bool"}}],[10,"eventNumber","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"trackingNumber","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"trackingArea","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"id"}}],[10,"userData","","",27,null],[10,"data1","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"data2","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"subtype","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nseventsubtype"}}],[10,"deltaX","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"cgfloat"}}],[10,"deltaY","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"cgfloat"}}],[10,"deltaZ","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"cgfloat"}}],[10,"capabilityMask","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"deviceID","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"pointingDeviceID","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"pointingDeviceSerialNumber","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"pointingDeviceType","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nspointingdevicetype"}}],[10,"systemTabletID","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"tabletID","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"uniqueID","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"c_ulonglong"}}],[10,"vendorID","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"vendorPointingDeviceType","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsuinteger"}}],[10,"absoluteX","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"absoluteY","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"absoluteZ","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nsinteger"}}],[10,"buttonMask","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nseventbuttonmask"}}],[10,"rotation","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"c_float"}}],[10,"tangentialPressure","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"c_float"}}],[10,"tilt","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nspoint"}}],[10,"vendorDefined","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"id"}}],[10,"startPeriodicEventsAfterDelay_withPeriod_","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"},{"name":"nstimeinterval"},{"name":"nstimeinterval"}],"output":null}],[10,"stopPeriodicEvents","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":null}],[10,"magnification","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"cgfloat"}}],[10,"touchesMatchingPhase_inView_","","",27,{"inputs":[{"name":"nsevent"},{"name":"nstouchphase"},{"name":"id"}],"output":{"name":"id"}}],[10,"isSwipeTrackingFromScrollEventsEnabled","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"}],"output":{"name":"bool"}}],[10,"removeMonitor_","","",27,{"inputs":[{"name":"nsevent"},{"name":"self"},{"name":"id"}],"output":null}],[10,"hasPreciseScrollingDeltas","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"bool"}}],[10,"scrollingDeltaX","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"cgfloat"}}],[10,"scrollingDeltaY","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"cgfloat"}}],[10,"momentumPhase","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nseventphase"}}],[10,"phase","","",27,{"inputs":[{"name":"nsevent"}],"output":{"name":"nseventphase"}}],[10,"locationInNode_","","",27,{"inputs":[{"name":"nsevent"},{"name":"id"}],"output":{"name":"cgpoint"}}],[8,"NSScreen","","",null,null],[10,"mainScreen","","",28,{"inputs":[{"name":"nsscreen"},{"name":"self"}],"output":{"name":"id"}}],[10,"deepestScreen","","",28,{"inputs":[{"name":"nsscreen"},{"name":"self"}],"output":{"name":"id"}}],[10,"screens","","",28,{"inputs":[{"name":"nsscreen"},{"name":"self"}],"output":{"name":"id"}}],[10,"depth","","",28,{"inputs":[{"name":"nsscreen"}],"output":{"name":"nswindowdepth"}}],[10,"frame","","",28,{"inputs":[{"name":"nsscreen"}],"output":{"name":"nsrect"}}],[10,"supportedWindowDepths","","",28,null],[10,"deviceDescription","","",28,{"inputs":[{"name":"nsscreen"}],"output":{"name":"id"}}],[10,"visibleFrame","","",28,{"inputs":[{"name":"nsscreen"}],"output":{"name":"nsrect"}}],[10,"colorSpace","","",28,{"inputs":[{"name":"nsscreen"}],"output":{"name":"id"}}],[10,"screensHaveSeparateSpaces","","",28,{"inputs":[{"name":"nsscreen"},{"name":"self"}],"output":{"name":"bool"}}],[10,"backingAlignedRect_options_","","",28,{"inputs":[{"name":"nsscreen"},{"name":"nsrect"},{"name":"nsalignmentoptions"}],"output":{"name":"nsrect"}}],[10,"backingScaleFactor","","",28,{"inputs":[{"name":"nsscreen"}],"output":{"name":"cgfloat"}}],[10,"convertRectFromBacking_","","",28,{"inputs":[{"name":"nsscreen"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[10,"convertRectToBacking_","","",28,{"inputs":[{"name":"nsscreen"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[8,"NSButton","","",null,null],[10,"setImage_","","",29,{"inputs":[{"name":"nsbutton"},{"name":"id"}],"output":null}],[8,"NSImage","","",null,null],[11,"alloc","","",30,{"inputs":[{"name":"nsimage"},{"name":"self"}],"output":{"name":"id"}}],[10,"initByReferencingFile_","","",30,{"inputs":[{"name":"nsimage"},{"name":"id"}],"output":{"name":"id"}}],[10,"initWithContentsOfFile_","","",30,{"inputs":[{"name":"nsimage"},{"name":"id"}],"output":{"name":"id"}}],[10,"name","","",30,{"inputs":[{"name":"nsimage"}],"output":{"name":"id"}}],[10,"setName_","","",30,{"inputs":[{"name":"nsimage"},{"name":"id"}],"output":{"name":"bool"}}],[8,"NSStatusItem","","",null,null],[10,"statusBar","","",31,{"inputs":[{"name":"nsstatusitem"}],"output":{"name":"id"}}],[10,"button","","",31,{"inputs":[{"name":"nsstatusitem"}],"output":{"name":"id"}}],[10,"menu","","",31,{"inputs":[{"name":"nsstatusitem"}],"output":{"name":"id"}}],[10,"setMenu_","","",31,{"inputs":[{"name":"nsstatusitem"},{"name":"id"}],"output":null}],[10,"length","","",31,{"inputs":[{"name":"nsstatusitem"}],"output":{"name":"cgfloat"}}],[10,"setLength_","","",31,{"inputs":[{"name":"nsstatusitem"},{"name":"cgfloat"}],"output":null}],[8,"NSStatusBar","","",null,null],[11,"systemStatusBar","","",32,{"inputs":[{"name":"nsstatusbar"},{"name":"self"}],"output":{"name":"id"}}],[10,"statusItemWithLength_","","",32,{"inputs":[{"name":"nsstatusbar"},{"name":"cgfloat"}],"output":{"name":"id"}}],[10,"removeStatusItem_","","",32,{"inputs":[{"name":"nsstatusbar"},{"name":"id"}],"output":null}],[10,"isVertical","","",32,{"inputs":[{"name":"nsstatusbar"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"cmp","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"option"}}],[11,"lt","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"le","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"gt","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"ge","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"eq","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nsinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nsinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nsinteger"}],"output":{"name":"nswindoworderingmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"not","","Returns the complement of this set of flags.",33,{"inputs":[{"name":"nswindoworderingmode"}],"output":{"name":"nswindoworderingmode"}}],[11,"from_iter","","",33,{"inputs":[{"name":"nswindoworderingmode"},{"name":"t"}],"output":{"name":"nswindoworderingmode"}}],[11,"hash","","",34,null],[11,"cmp","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"option"}}],[11,"lt","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"le","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"gt","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"ge","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"eq","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"c_ulonglong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"c_ulonglong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"c_ulonglong"}],"output":{"name":"nsalignmentoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"not","","Returns the complement of this set of flags.",34,{"inputs":[{"name":"nsalignmentoptions"}],"output":{"name":"nsalignmentoptions"}}],[11,"from_iter","","",34,{"inputs":[{"name":"nsalignmentoptions"},{"name":"t"}],"output":{"name":"nsalignmentoptions"}}],[11,"eq","","",14,{"inputs":[{"name":"nswindowbutton"},{"name":"nswindowbutton"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"nswindowbutton"},{"name":"nswindowbutton"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"nswindowbutton"}],"output":{"name":"nswindowbutton"}}],[11,"hash","","",35,null],[11,"cmp","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"eq","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"all","","Returns the set containing all flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"bits","","Returns the raw value of the flags currently stored.",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nsuinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nsuinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nsuinteger"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"sub","","Returns the set difference of the two sets of flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"not","","Returns the complement of this set of flags.",35,{"inputs":[{"name":"nswindowcollectionbehavior"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"from_iter","","",35,{"inputs":[{"name":"nswindowcollectionbehavior"},{"name":"t"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"hash","","",36,null],[11,"cmp","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"option"}}],[11,"lt","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"le","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"gt","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"ge","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"eq","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nsuinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nsuinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nsuinteger"}],"output":{"name":"nswindowocclusionstate"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"sub","","Returns the set difference of the two sets of flags.",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"not","","Returns the complement of this set of flags.",36,{"inputs":[{"name":"nswindowocclusionstate"}],"output":{"name":"nswindowocclusionstate"}}],[11,"from_iter","","",36,{"inputs":[{"name":"nswindowocclusionstate"},{"name":"t"}],"output":{"name":"nswindowocclusionstate"}}],[11,"hash","","",37,null],[11,"cmp","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"eq","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nsuinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nsuinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nsuinteger"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"nseventswipetrackingoptions"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"from_iter","","",37,{"inputs":[{"name":"nseventswipetrackingoptions"},{"name":"t"}],"output":{"name":"nseventswipetrackingoptions"}}],[11,"hash","","",38,null],[11,"cmp","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"eq","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"nseventphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"all","","Returns the set containing all flags.",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"bits","","Returns the raw value of the flags currently stored.",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nsuinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",38,{"inputs":[{"name":"nseventphase"},{"name":"nsuinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",38,{"inputs":[{"name":"nseventphase"},{"name":"nsuinteger"}],"output":{"name":"nseventphase"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"sub","","Returns the set difference of the two sets of flags.",38,{"inputs":[{"name":"nseventphase"},{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"not","","Returns the complement of this set of flags.",38,{"inputs":[{"name":"nseventphase"}],"output":{"name":"nseventphase"}}],[11,"from_iter","","",38,{"inputs":[{"name":"nseventphase"},{"name":"t"}],"output":{"name":"nseventphase"}}],[11,"hash","","",39,null],[11,"cmp","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"eq","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nsuinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nsuinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nsuinteger"}],"output":{"name":"nstouchphase"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"nstouchphase"},{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"nstouchphase"}],"output":{"name":"nstouchphase"}}],[11,"from_iter","","",39,{"inputs":[{"name":"nstouchphase"},{"name":"t"}],"output":{"name":"nstouchphase"}}],[11,"fmt","","",16,{"inputs":[{"name":"nseventtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"cmp","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"eq","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"nseventmask"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"c_ulonglong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"nseventmask"},{"name":"c_ulonglong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",40,{"inputs":[{"name":"nseventmask"},{"name":"c_ulonglong"}],"output":{"name":"nseventmask"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"sub","","Returns the set difference of the two sets of flags.",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"not","","Returns the complement of this set of flags.",40,{"inputs":[{"name":"nseventmask"}],"output":{"name":"nseventmask"}}],[11,"from_iter","","",40,{"inputs":[{"name":"nseventmask"},{"name":"t"}],"output":{"name":"nseventmask"}}],[11,"from_type","","",40,{"inputs":[{"name":"nseventmask"},{"name":"nseventtype"}],"output":{"name":"nseventmask"}}],[11,"hash","","",41,null],[11,"cmp","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"eq","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"all","","Returns the set containing all flags.",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nsuinteger"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nsuinteger"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nsuinteger"}],"output":{"name":"nseventmodifierflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"not","","Returns the complement of this set of flags.",41,{"inputs":[{"name":"nseventmodifierflags"}],"output":{"name":"nseventmodifierflags"}}],[11,"from_iter","","",41,{"inputs":[{"name":"nseventmodifierflags"},{"name":"t"}],"output":{"name":"nseventmodifierflags"}}],[0,"base","cocoa","",null,null],[11,"register","objc::runtime","Registers a method with the Objective-C runtime system,\nmaps the method name to a selector, and returns the selector value.",42,{"inputs":[{"name":"sel"},{"name":"str"}],"output":{"name":"sel"}}],[11,"name","","Returns the name of the method specified by self.",42,{"inputs":[{"name":"sel"}],"output":{"name":"str"}}],[11,"eq","","",42,{"inputs":[{"name":"sel"},{"name":"sel"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"sel"}],"output":{"name":"sel"}}],[11,"fmt","","",42,{"inputs":[{"name":"sel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of self.",43,{"inputs":[{"name":"ivar"}],"output":{"name":"str"}}],[11,"offset","","Returns the offset of self.",43,{"inputs":[{"name":"ivar"}],"output":{"name":"isize"}}],[11,"type_encoding","","Returns the `Encoding` of self.",43,{"inputs":[{"name":"ivar"}],"output":{"name":"encoding"}}],[11,"name","","Returns the name of self.",44,{"inputs":[{"name":"method"}],"output":{"name":"sel"}}],[11,"return_type","","Returns the `Encoding` of self's return type.",44,{"inputs":[{"name":"method"}],"output":{"name":"encoding"}}],[11,"argument_type","","Returns the `Encoding` of a single parameter type of self, or\n`None` if self has no parameter at the given index.",44,{"inputs":[{"name":"method"},{"name":"usize"}],"output":{"name":"option"}}],[11,"arguments_count","","Returns the number of arguments accepted by self.",44,{"inputs":[{"name":"method"}],"output":{"name":"usize"}}],[11,"implementation","","Returns the implementation of self.",44,null],[11,"get","","Returns the class definition of a specified class, or `None` if the\nclass is not registered with the Objective-C runtime.",45,{"inputs":[{"name":"class"},{"name":"str"}],"output":{"name":"option"}}],[11,"classes","","Obtains the list of registered class definitions.",45,{"inputs":[{"name":"class"}],"output":{"name":"mallocbuffer"}}],[11,"classes_count","","Returns the total number of registered classes.",45,{"inputs":[{"name":"class"}],"output":{"name":"usize"}}],[11,"name","","Returns the name of self.",45,{"inputs":[{"name":"class"}],"output":{"name":"str"}}],[11,"superclass","","Returns the superclass of self, or `None` if self is a root class.",45,{"inputs":[{"name":"class"}],"output":{"name":"option"}}],[11,"metaclass","","Returns the metaclass of self.",45,{"inputs":[{"name":"class"}],"output":{"name":"class"}}],[11,"instance_size","","Returns the size of instances of self.",45,{"inputs":[{"name":"class"}],"output":{"name":"usize"}}],[11,"instance_method","","Returns a specified instance method for self, or `None` if self and\nits superclasses do not contain an instance method with the\nspecified selector.",45,{"inputs":[{"name":"class"},{"name":"sel"}],"output":{"name":"option"}}],[11,"instance_variable","","Returns the ivar for a specified instance variable of self, or `None`\nif self has no ivar with the given name.",45,{"inputs":[{"name":"class"},{"name":"str"}],"output":{"name":"option"}}],[11,"instance_methods","","Describes the instance methods implemented by self.",45,{"inputs":[{"name":"class"}],"output":{"name":"mallocbuffer"}}],[11,"instance_variables","","Describes the instance variables declared by self.",45,{"inputs":[{"name":"class"}],"output":{"name":"mallocbuffer"}}],[11,"eq","","",45,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"class"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"class","","Returns the class of self.",46,{"inputs":[{"name":"object"}],"output":{"name":"class"}}],[11,"get_ivar","","Returns a reference to the ivar of self with the given name.\nPanics if self has no ivar with the given name.\nUnsafe because the caller must ensure that the ivar is actually\nof type `T`.",46,{"inputs":[{"name":"object"},{"name":"str"}],"output":{"name":"t"}}],[11,"get_mut_ivar","","Returns a mutable reference to the ivar of self with the given name.\nPanics if self has no ivar with the given name.\nUnsafe because the caller must ensure that the ivar is actually\nof type `T`.",46,{"inputs":[{"name":"object"},{"name":"str"}],"output":{"name":"t"}}],[11,"set_ivar","","Sets the value of the ivar of self with the given name.\nPanics if self has no ivar with the given name.\nUnsafe because the caller must ensure that the ivar is actually\nof type `T`.",46,null],[11,"fmt","","",46,{"inputs":[{"name":"object"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","objc::declare","",47,{"inputs":[{"name":"unequalargserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"unequalargserror"},{"name":"unequalargserror"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"unequalargserror"},{"name":"unequalargserror"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"unequalargserror"}],"output":{"name":"unequalargserror"}}],[11,"fmt","","",47,{"inputs":[{"name":"unequalargserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",47,{"inputs":[{"name":"unequalargserror"}],"output":{"name":"str"}}],[11,"new","","Constructs a `ClassDecl` with the given superclass and name.\nReturns `None` if the class couldn't be allocated.",48,{"inputs":[{"name":"classdecl"},{"name":"class"},{"name":"str"}],"output":{"name":"option"}}],[11,"add_method","","Adds a method with the given name and implementation to self.\nPanics if the method wasn't sucessfully added\nor if the selector and function take different numbers of arguments.\nUnsafe because the caller must ensure that the types match those that\nare expected when the method is invoked from Objective-C.",48,null],[11,"add_class_method","","Adds a class method with the given name and implementation to self.\nPanics if the method wasn't sucessfully added\nor if the selector and function take different numbers of arguments.\nUnsafe because the caller must ensure that the types match those that\nare expected when the method is invoked from Objective-C.",48,null],[11,"add_ivar","","Adds an ivar with type `T` and the provided name to self.\nPanics if the ivar wasn't successfully added.",48,null],[11,"register","","Registers self, consuming it and returning a reference to the\nnewly registered `Class`.",48,{"inputs":[{"name":"classdecl"}],"output":{"name":"class"}}],[11,"drop","","",48,null],[11,"from_str","objc::encode","Constructs an `Encoding` from its string representation.\nUnsafe because the caller must ensure the string is a valid encoding.",49,{"inputs":[{"name":"encoding"},{"name":"str"}],"output":{"name":"encoding"}}],[11,"as_str","","Returns self as a `str`.",49,{"inputs":[{"name":"encoding"}],"output":{"name":"str"}}],[11,"clone","","",49,{"inputs":[{"name":"encoding"}],"output":{"name":"encoding"}}],[11,"eq","","",49,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","objc::runtime","",42,{"inputs":[{"name":"sel"}],"output":{"name":"encoding"}}],[11,"encode","core::option","",50,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[11,"encode","","",50,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[11,"encode","","",50,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[11,"encode","","",50,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[6,"BOOL","cocoa::base","",null,null],[17,"NO","","The equivalent of false for Objective-C's `BOOL` type.",null,null],[17,"YES","","The equivalent of true for Objective-C's `BOOL` type.",null,null],[5,"class","","A convenience method to convert the name of a class to the class object itself.",null,{"inputs":[{"name":"str"}],"output":{"name":"class"}}],[5,"selector","","A convenience method to convert the name of a selector to the selector object.",null,{"inputs":[{"name":"str"}],"output":{"name":"sel"}}],[6,"Class","","",null,null],[6,"id","","",null,null],[6,"SEL","","",null,null],[17,"nil","","",null,null],[17,"Nil","","",null,null],[0,"foundation","cocoa","",null,null],[3,"NSPoint","cocoa::foundation","",null,null],[12,"x","","",51,null],[12,"y","","",51,null],[3,"NSSize","","",null,null],[12,"width","","",52,null],[12,"height","","",52,null],[3,"NSRect","","",null,null],[12,"origin","","",53,null],[12,"size","","",53,null],[4,"NSRectEdge","","",null,null],[13,"NSRectMinXEdge","","",54,null],[13,"NSRectMinYEdge","","",54,null],[13,"NSRectMaxXEdge","","",54,null],[13,"NSRectMaxYEdge","","",54,null],[7,"NSDefaultRunLoopMode","","",null,null],[6,"NSInteger","","",null,null],[6,"NSUInteger","","",null,null],[6,"NSTimeInterval","","",null,null],[8,"NSAutoreleasePool","","",null,null],[11,"new","","",55,{"inputs":[{"name":"nsautoreleasepool"},{"name":"self"}],"output":{"name":"id"}}],[10,"autorelease","","",55,{"inputs":[{"name":"nsautoreleasepool"}],"output":{"name":"self"}}],[10,"drain","","",55,{"inputs":[{"name":"nsautoreleasepool"}],"output":null}],[8,"NSProcessInfo","","",null,null],[11,"processInfo","","",56,{"inputs":[{"name":"nsprocessinfo"},{"name":"self"}],"output":{"name":"id"}}],[10,"processName","","",56,{"inputs":[{"name":"nsprocessinfo"}],"output":{"name":"id"}}],[8,"NSValue","","",null,null],[11,"valueWithPoint","","",57,{"inputs":[{"name":"nsvalue"},{"name":"self"},{"name":"nspoint"}],"output":{"name":"id"}}],[11,"valueWithSize","","",57,{"inputs":[{"name":"nsvalue"},{"name":"self"},{"name":"nssize"}],"output":{"name":"id"}}],[8,"NSArray","","",null,null],[11,"array","","",58,{"inputs":[{"name":"nsarray"},{"name":"self"}],"output":{"name":"id"}}],[11,"arrayWithObjects","","",58,null],[11,"arrayWithObject","","",58,{"inputs":[{"name":"nsarray"},{"name":"self"},{"name":"id"}],"output":{"name":"id"}}],[10,"arrayByAddingObjectFromArray","","",58,{"inputs":[{"name":"nsarray"},{"name":"id"}],"output":{"name":"id"}}],[10,"arrayByAddingObjectsFromArray","","",58,{"inputs":[{"name":"nsarray"},{"name":"id"}],"output":{"name":"id"}}],[8,"NSString","","",null,null],[11,"alloc","","",59,{"inputs":[{"name":"nsstring"},{"name":"self"}],"output":{"name":"id"}}],[10,"stringByAppendingString_","","",59,{"inputs":[{"name":"nsstring"},{"name":"id"}],"output":{"name":"id"}}],[10,"init_str","","",59,{"inputs":[{"name":"nsstring"},{"name":"str"}],"output":{"name":"self"}}],[10,"UTF8String","","",59,null],[10,"len","","",59,{"inputs":[{"name":"nsstring"}],"output":{"name":"usize"}}],[10,"isEqualToString","","",59,{"inputs":[{"name":"nsstring"},{"name":"str"}],"output":{"name":"bool"}}],[8,"NSDate","","",null,null],[11,"distantPast","","",60,{"inputs":[{"name":"nsdate"},{"name":"self"}],"output":{"name":"id"}}],[11,"distantFuture","","",60,{"inputs":[{"name":"nsdate"},{"name":"self"}],"output":{"name":"id"}}],[11,"new","","",51,{"inputs":[{"name":"nspoint"},{"name":"f64"},{"name":"f64"}],"output":{"name":"nspoint"}}],[11,"encode","","",51,{"inputs":[{"name":"nspoint"}],"output":{"name":"encoding"}}],[11,"new","","",52,{"inputs":[{"name":"nssize"},{"name":"f64"},{"name":"f64"}],"output":{"name":"nssize"}}],[11,"encode","","",52,{"inputs":[{"name":"nssize"}],"output":{"name":"encoding"}}],[11,"new","","",53,{"inputs":[{"name":"nsrect"},{"name":"nspoint"},{"name":"nssize"}],"output":{"name":"nsrect"}}],[11,"encode","","",53,{"inputs":[{"name":"nsrect"}],"output":{"name":"encoding"}}],[11,"autorelease","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"drain","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"processName","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"arrayByAddingObjectFromArray","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[11,"arrayByAddingObjectsFromArray","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[11,"isEqualToString","","",61,{"inputs":[{"name":"id"},{"name":"str"}],"output":{"name":"bool"}}],[11,"stringByAppendingString_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[11,"init_str","","",61,{"inputs":[{"name":"id"},{"name":"str"}],"output":{"name":"id"}}],[11,"len","","",61,{"inputs":[{"name":"id"}],"output":{"name":"usize"}}],[11,"UTF8String","","",61,null],[11,"setActivationPolicy_","cocoa::base","",61,{"inputs":[{"name":"id"},{"name":"nsapplicationactivationpolicy"}],"output":{"name":"bool"}}],[11,"setMainMenu_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"setServicesMenu_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"activateIgnoringOtherApps_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"run","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"finishLaunching","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"nextEventMatchingMask_untilDate_inMode_dequeue_","","",61,{"inputs":[{"name":"id"},{"name":"nsuinteger"},{"name":"id"},{"name":"id"},{"name":"bool"}],"output":{"name":"id"}}],[11,"sendEvent_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"postEvent_atStart_","","",61,{"inputs":[{"name":"id"},{"name":"id"},{"name":"bool"}],"output":null}],[11,"stop_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"activateWithOptions_","","",61,{"inputs":[{"name":"id"},{"name":"nsapplicationactivationoptions"}],"output":{"name":"bool"}}],[11,"setAutoenablesItems","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"addItem_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"addItemWithTitle_action_keyEquivalent","","",61,{"inputs":[{"name":"id"},{"name":"id"},{"name":"sel"},{"name":"id"}],"output":{"name":"id"}}],[11,"initWithTitle_action_keyEquivalent_","","",61,{"inputs":[{"name":"id"},{"name":"id"},{"name":"sel"},{"name":"id"}],"output":{"name":"id"}}],[11,"setKeyEquivalentModifierMask_","","",61,{"inputs":[{"name":"id"},{"name":"nseventmodifierflags"}],"output":null}],[11,"setSubmenu_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"initWithContentRect_styleMask_backing_defer_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"nsuinteger"},{"name":"nsbackingstoretype"},{"name":"bool"}],"output":{"name":"id"}}],[11,"initWithContentRect_styleMask_backing_defer_screen_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"nsuinteger"},{"name":"nsbackingstoretype"},{"name":"bool"},{"name":"id"}],"output":{"name":"id"}}],[11,"styleMask","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"setStyleMask_","","",61,{"inputs":[{"name":"id"},{"name":"nsuinteger"}],"output":null}],[11,"toggleFullScreen_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"worksWhenModal","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"alphaValue","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"setAlphaValue_","","",61,{"inputs":[{"name":"id"},{"name":"cgfloat"}],"output":null}],[11,"backgroundColor","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setBackgroundColor_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"colorSpace","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setColorSpace_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"contentView","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setContentView_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"canHide","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setCanHide_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"hidesOnDeactivate","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setHidesOnDeactivate_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"collectionBehavior","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nswindowcollectionbehavior"}}],[11,"setCollectionBehavior_","","",61,{"inputs":[{"name":"id"},{"name":"nswindowcollectionbehavior"}],"output":null}],[11,"setOpaque_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"hasShadow","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setHasShadow_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"invalidateShadow","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"autorecalculatesContentBorderThicknessForEdge_","","",61,{"inputs":[{"name":"id"},{"name":"nsrectedge"}],"output":{"name":"bool"}}],[11,"setAutorecalculatesContentBorderThickness_forEdge_","","",61,{"inputs":[{"name":"id"},{"name":"bool"},{"name":"nsrectedge"}],"output":{"name":"bool"}}],[11,"contentBorderThicknessForEdge_","","",61,{"inputs":[{"name":"id"},{"name":"nsrectedge"}],"output":{"name":"cgfloat"}}],[11,"setContentBorderThickness_forEdge_","","",61,{"inputs":[{"name":"id"},{"name":"cgfloat"},{"name":"nsrectedge"}],"output":null}],[11,"delegate","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setDelegate_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"preventsApplicationTerminationWhenModal","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setPreventsApplicationTerminationWhenModal_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"contentRectForFrameRect_styleMask_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"nsuinteger"}],"output":{"name":"nsrect"}}],[11,"frameRectForContentRect_styleMask_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"nsuinteger"}],"output":{"name":"nsrect"}}],[11,"minFrameWidthWithTitle_styleMask_","","",61,{"inputs":[{"name":"id"},{"name":"id"},{"name":"nsuinteger"}],"output":{"name":"cgfloat"}}],[11,"contentRectForFrameRect_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"frameRectForContentRect_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"drawers","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"windowController","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setWindowController_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"frame","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsrect"}}],[11,"setFrameOrigin_","","",61,{"inputs":[{"name":"id"},{"name":"nspoint"}],"output":null}],[11,"setFrameTopLeftPoint_","","",61,{"inputs":[{"name":"id"},{"name":"nspoint"}],"output":null}],[11,"constrainFrameRect_toScreen_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"id"}],"output":null}],[11,"cascadeTopLeftFromPoint_","","",61,{"inputs":[{"name":"id"},{"name":"nspoint"}],"output":{"name":"nspoint"}}],[11,"setFrame_display_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"bool"}],"output":null}],[11,"setFrame_displayViews_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"bool"}],"output":null}],[11,"aspectRatio","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setAspectRatio_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"minSize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setMinSize_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"maxSize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setMaxSize_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"performZoom_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"zoom_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"resizeFlags","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"showsResizeIndicator","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setShowsResizeIndicator_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"resizeIncrements","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setResizeIncrements_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"preservesContentDuringLiveResize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setPreservesContentDuringLiveResize_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"inLiveResize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"contentAspectRatio","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setContentAspectRatio_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"contentMinSize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setContentMinSize_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"contentSize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setContentSize_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"contentMaxSize","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setContentMaxSize_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"contentResizeIncrements","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nssize"}}],[11,"setContentResizeIncrements_","","",61,{"inputs":[{"name":"id"},{"name":"nssize"}],"output":null}],[11,"isVisible","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"occlusionState","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nswindowocclusionstate"}}],[11,"orderOut_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"orderBack_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"orderFront_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"orderFrontRegardless","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"orderFrontWindow_relativeTo_","","",61,{"inputs":[{"name":"id"},{"name":"nswindoworderingmode"},{"name":"nsinteger"}],"output":null}],[11,"level","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"setLevel_","","",61,{"inputs":[{"name":"id"},{"name":"nsinteger"}],"output":null}],[11,"canBecomeKeyWindow","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"makeKeyWindow","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"makeKeyAndOrderFront_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"canBecomeMainWindow","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"makeMainWindow","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"standardWindowButton_","","",61,{"inputs":[{"name":"id"},{"name":"nswindowbutton"}],"output":{"name":"id"}}],[11,"initialFirstResponder","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"firstResponder","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setInitialFirstResponder_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"makeFirstResponder_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"keyDown_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"acceptsMouseMovedEvents","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"ignoresMouseEvents","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setIgnoresMouseEvents_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"mouseLocationOutsideOfEventStream","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nspoint"}}],[11,"setAcceptsMouseMovedEvents_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"windowNumberAtPoint_belowWindowWithWindowNumber_","","",61,{"inputs":[{"name":"id"},{"name":"nspoint"},{"name":"nsinteger"}],"output":{"name":"nsinteger"}}],[11,"backingScaleFactor","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"backingAlignedRect_options_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"nsalignmentoptions"}],"output":{"name":"nsrect"}}],[11,"convertRectFromBacking_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"convertRectToBacking_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"convertRectToScreen_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"convertRectFromScreen_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"setDocumentEdited_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"title","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setTitle_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"setTitleWithRepresentedFilename_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"setTitleVisibility_","","",61,{"inputs":[{"name":"id"},{"name":"nswindowtitlevisibility"}],"output":null}],[11,"setTitlebarAppearsTransparent_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"representedFilename","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setRepresentedFilename_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"representedURL","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setRepresentedURL_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"screen","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"deepestScreen","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"displaysWhenScreenProfileChanges","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"setDisplaysWhenScreenProfileChanges_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"setMovableByWindowBackground_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"setMovable_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"center","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"performClose_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"close","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"setReleasedWhenClosed_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"performMiniaturize_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"miniaturize_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"deminiaturize_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"miniwindowImage","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setMiniwindowImage_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"miniwindowTitle","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setMiniwindowTitle_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"init","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"initWithFrame_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"id"}}],[11,"bounds","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsrect"}}],[11,"frame","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsrect"}}],[11,"display_","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"setWantsBestResolutionOpenGLSurface_","","",61,{"inputs":[{"name":"id"},{"name":"bool"}],"output":null}],[11,"convertPoint_fromView_","","",61,{"inputs":[{"name":"id"},{"name":"nspoint"},{"name":"id"}],"output":{"name":"nspoint"}}],[11,"addSubview_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"superview","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"removeFromSuperview","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"initWithFrame_pixelFormat_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"id"}],"output":{"name":"id"}}],[11,"display_","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"setOpenGLContext_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"setPixelFormat_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"initWithAttributes_","","",61,null],[11,"getValues_forAttribute_forVirtualScreen_","","",61,null],[11,"numberOfVirtualScreens","","",61,{"inputs":[{"name":"id"}],"output":{"name":"glint"}}],[11,"initWithFormat_shareContext_","","",61,{"inputs":[{"name":"id"},{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[11,"initWithCGLContextObj_","","",61,{"inputs":[{"name":"id"},{"name":"cglcontextobj"}],"output":{"name":"id"}}],[11,"clearCurrentContext","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":null}],[11,"currentContext","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"id"}}],[11,"makeCurrentContext","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"setView_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"view","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"clearDrawable","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"update","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"flushBuffer","","",61,{"inputs":[{"name":"id"}],"output":null}],[11,"setValues_forParameter_","","",61,null],[11,"getValues_forParameter_","","",61,null],[11,"setCurrentVirtualScreen_","","",61,{"inputs":[{"name":"id"},{"name":"glint"}],"output":null}],[11,"currentVirtualScreen","","",61,{"inputs":[{"name":"id"}],"output":{"name":"glint"}}],[11,"CGLContextObj","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cglcontextobj"}}],[11,"keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode_","","",61,{"inputs":[{"name":"id"},{"name":"self"},{"name":"nseventtype"},{"name":"nspoint"},{"name":"nseventmodifierflags"},{"name":"nstimeinterval"},{"name":"nsinteger"},{"name":"id"},{"name":"id"},{"name":"id"},{"name":"bool"},{"name":"c_ushort"}],"output":{"name":"id"}}],[11,"mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure_","","",61,{"inputs":[{"name":"id"},{"name":"self"},{"name":"nseventtype"},{"name":"nspoint"},{"name":"nseventmodifierflags"},{"name":"nstimeinterval"},{"name":"nsinteger"},{"name":"id"},{"name":"nsinteger"},{"name":"nsinteger"},{"name":"c_float"}],"output":{"name":"id"}}],[11,"enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData_","","",61,null],[11,"otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2_","","",61,{"inputs":[{"name":"id"},{"name":"self"},{"name":"nseventtype"},{"name":"nspoint"},{"name":"nseventmodifierflags"},{"name":"nstimeinterval"},{"name":"nsinteger"},{"name":"id"},{"name":"nseventsubtype"},{"name":"nsinteger"},{"name":"nsinteger"}],"output":{"name":"id"}}],[11,"eventWithEventRef_","","",61,null],[11,"eventWithCGEvent_","","",61,null],[11,"context","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"locationInWindow","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nspoint"}}],[11,"modifierFlags","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nseventmodifierflags"}}],[11,"timestamp","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nstimeinterval"}}],[11,"eventType","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nseventtype"}}],[11,"window","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"windowNumber","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"eventRef","","",61,null],[11,"CGEvent","","",61,null],[11,"currentModifierFlags","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"nseventmodifierflags"}}],[11,"keyRepeatDelay","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"nstimeinterval"}}],[11,"keyRepeatInterval","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"nstimeinterval"}}],[11,"characters","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"charactersIgnoringModifiers","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"keyCode","","",61,{"inputs":[{"name":"id"}],"output":{"name":"c_ushort"}}],[11,"pressedMouseButtons","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"nsuinteger"}}],[11,"doubleClickInterval","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"nstimeinterval"}}],[11,"mouseLocation","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"nspoint"}}],[11,"buttonNumber","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"clickCount","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"pressure","","",61,{"inputs":[{"name":"id"}],"output":{"name":"c_float"}}],[11,"stage","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"setMouseCoalescingEnabled_","","",61,{"inputs":[{"name":"id"},{"name":"self"},{"name":"bool"}],"output":null}],[11,"isMouseCoalescingEnabled","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eventNumber","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"trackingNumber","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"trackingArea","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"userData","","",61,null],[11,"data1","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"data2","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"subtype","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nseventsubtype"}}],[11,"deltaX","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"deltaY","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"deltaZ","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"capabilityMask","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"deviceID","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"pointingDeviceID","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"pointingDeviceSerialNumber","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"pointingDeviceType","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nspointingdevicetype"}}],[11,"systemTabletID","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"tabletID","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"uniqueID","","",61,{"inputs":[{"name":"id"}],"output":{"name":"c_ulonglong"}}],[11,"vendorID","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"vendorPointingDeviceType","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsuinteger"}}],[11,"absoluteX","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"absoluteY","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"absoluteZ","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsinteger"}}],[11,"buttonMask","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nseventbuttonmask"}}],[11,"rotation","","",61,{"inputs":[{"name":"id"}],"output":{"name":"c_float"}}],[11,"tangentialPressure","","",61,{"inputs":[{"name":"id"}],"output":{"name":"c_float"}}],[11,"tilt","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nspoint"}}],[11,"vendorDefined","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"startPeriodicEventsAfterDelay_withPeriod_","","",61,{"inputs":[{"name":"id"},{"name":"self"},{"name":"nstimeinterval"},{"name":"nstimeinterval"}],"output":null}],[11,"stopPeriodicEvents","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":null}],[11,"magnification","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"touchesMatchingPhase_inView_","","",61,{"inputs":[{"name":"id"},{"name":"nstouchphase"},{"name":"id"}],"output":{"name":"id"}}],[11,"isSwipeTrackingFromScrollEventsEnabled","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"bool"}}],[11,"removeMonitor_","","",61,{"inputs":[{"name":"id"},{"name":"self"},{"name":"id"}],"output":null}],[11,"hasPreciseScrollingDeltas","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}],[11,"scrollingDeltaX","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"scrollingDeltaY","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"momentumPhase","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nseventphase"}}],[11,"phase","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nseventphase"}}],[11,"locationInNode_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"cgpoint"}}],[11,"mainScreen","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"id"}}],[11,"deepestScreen","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"id"}}],[11,"screens","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"id"}}],[11,"depth","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nswindowdepth"}}],[11,"frame","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsrect"}}],[11,"supportedWindowDepths","","",61,null],[11,"deviceDescription","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"visibleFrame","","",61,{"inputs":[{"name":"id"}],"output":{"name":"nsrect"}}],[11,"colorSpace","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"screensHaveSeparateSpaces","","",61,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"bool"}}],[11,"backingAlignedRect_options_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"},{"name":"nsalignmentoptions"}],"output":{"name":"nsrect"}}],[11,"backingScaleFactor","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"convertRectFromBacking_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"convertRectToBacking_","","",61,{"inputs":[{"name":"id"},{"name":"nsrect"}],"output":{"name":"nsrect"}}],[11,"setImage_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"initByReferencingFile_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[11,"initWithContentsOfFile_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"id"}}],[11,"name","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setName_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"bool"}}],[11,"statusBar","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"button","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"menu","","",61,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"setMenu_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"length","","",61,{"inputs":[{"name":"id"}],"output":{"name":"cgfloat"}}],[11,"setLength_","","",61,{"inputs":[{"name":"id"},{"name":"cgfloat"}],"output":null}],[11,"statusItemWithLength_","","",61,{"inputs":[{"name":"id"},{"name":"cgfloat"}],"output":{"name":"id"}}],[11,"removeStatusItem_","","",61,{"inputs":[{"name":"id"},{"name":"id"}],"output":null}],[11,"isVertical","","",61,{"inputs":[{"name":"id"}],"output":{"name":"bool"}}]],"paths":[[3,"CGColorSpace"],[3,"CGContext"],[3,"CGDataProvider"],[3,"CGFont"],[3,"CGPoint"],[4,"NSApplicationActivationPolicy"],[4,"NSApplicationActivationOptions"],[4,"NSApplicationTerminateReply"],[4,"NSWindowMask"],[4,"NSWindowTitleVisibility"],[4,"NSBackingStoreType"],[4,"NSOpenGLPixelFormatAttribute"],[4,"NSOpenGLPFAOpenGLProfiles"],[4,"NSOpenGLContextParameter"],[4,"NSWindowButton"],[4,"NSEventGestureAxis"],[4,"NSEventType"],[4,"NSEventSubtype"],[8,"NSApplication"],[8,"NSRunningApplication"],[8,"NSMenu"],[8,"NSMenuItem"],[8,"NSWindow"],[8,"NSView"],[8,"NSOpenGLView"],[8,"NSOpenGLPixelFormat"],[8,"NSOpenGLContext"],[8,"NSEvent"],[8,"NSScreen"],[8,"NSButton"],[8,"NSImage"],[8,"NSStatusItem"],[8,"NSStatusBar"],[3,"NSWindowOrderingMode"],[3,"NSAlignmentOptions"],[3,"NSWindowCollectionBehavior"],[3,"NSWindowOcclusionState"],[3,"NSEventSwipeTrackingOptions"],[3,"NSEventPhase"],[3,"NSTouchPhase"],[3,"NSEventMask"],[3,"NSEventModifierFlags"],[3,"Sel"],[3,"Ivar"],[3,"Method"],[3,"Class"],[3,"Object"],[3,"UnequalArgsError"],[3,"ClassDecl"],[3,"Encoding"],[4,"Option"],[3,"NSPoint"],[3,"NSSize"],[3,"NSRect"],[4,"NSRectEdge"],[8,"NSAutoreleasePool"],[8,"NSProcessInfo"],[8,"NSValue"],[8,"NSArray"],[8,"NSString"],[8,"NSDate"],[6,"id"]]};
searchIndex['core_graphics'] = {"items":[[0,"base","core_graphics","",null,null],[6,"boolean_t","core_graphics::base","",null,null],[6,"CGFloat","","",null,null],[6,"CGError","","",null,null],[6,"CGAffineTransform","","",null,null],[17,"kCGImageAlphaNone","","",null,null],[17,"kCGImageAlphaPremultipliedLast","","",null,null],[17,"kCGImageAlphaPremultipliedFirst","","",null,null],[17,"kCGImageAlphaLast","","",null,null],[17,"kCGImageAlphaFirst","","",null,null],[17,"kCGImageAlphaNoneSkipLast","","",null,null],[17,"kCGImageAlphaNoneSkipFirst","","",null,null],[0,"color_space","core_graphics","",null,null],[3,"CGColorSpace","core_graphics::color_space","",null,null],[6,"CGColorSpaceRef","","",null,null],[11,"drop","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cgcolorspace"}}],[11,"as_concrete_TypeRef","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cgcolorspaceref"}}],[11,"wrap_under_get_rule","","",0,{"inputs":[{"name":"cgcolorspace"},{"name":"cgcolorspaceref"}],"output":{"name":"cgcolorspace"}}],[11,"as_CFTypeRef","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",0,{"inputs":[{"name":"cgcolorspace"},{"name":"cgcolorspaceref"}],"output":{"name":"cgcolorspace"}}],[11,"type_id","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cftypeid"}}],[11,"create_device_rgb","","",0,{"inputs":[{"name":"cgcolorspace"}],"output":{"name":"cgcolorspace"}}],[0,"context","core_graphics","",null,null],[3,"CGContext","core_graphics::context","",null,null],[6,"CGContextRef","","",null,null],[11,"drop","","",1,{"inputs":[{"name":"cgcontext"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"cgcontext"}}],[11,"as_concrete_TypeRef","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"cgcontextref"}}],[11,"wrap_under_get_rule","","",1,{"inputs":[{"name":"cgcontext"},{"name":"cgcontextref"}],"output":{"name":"cgcontext"}}],[11,"as_CFTypeRef","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",1,{"inputs":[{"name":"cgcontext"},{"name":"cgcontextref"}],"output":{"name":"cgcontext"}}],[11,"type_id","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"cftypeid"}}],[11,"create_bitmap_context","","",1,{"inputs":[{"name":"cgcontext"},{"name":"size_t"},{"name":"size_t"},{"name":"size_t"},{"name":"size_t"},{"name":"cgcolorspace"},{"name":"u32"}],"output":{"name":"cgcontext"}}],[11,"data","","",1,null],[11,"width","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"size_t"}}],[11,"height","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"size_t"}}],[11,"bytes_per_row","","",1,{"inputs":[{"name":"cgcontext"}],"output":{"name":"size_t"}}],[11,"set_rgb_fill_color","","",1,{"inputs":[{"name":"cgcontext"},{"name":"cgfloat"},{"name":"cgfloat"},{"name":"cgfloat"},{"name":"cgfloat"}],"output":null}],[11,"set_allows_font_smoothing","","",1,{"inputs":[{"name":"cgcontext"},{"name":"bool"}],"output":null}],[11,"set_should_smooth_fonts","","",1,{"inputs":[{"name":"cgcontext"},{"name":"bool"}],"output":null}],[0,"data_provider","core_graphics","",null,null],[3,"CGDataProvider","core_graphics::data_provider","",null,null],[6,"CGDataProviderGetBytesCallback","","",null,null],[6,"CGDataProviderReleaseInfoCallback","","",null,null],[6,"CGDataProviderRewindCallback","","",null,null],[6,"CGDataProviderSkipBytesCallback","","",null,null],[6,"CGDataProviderSkipForwardCallback","","",null,null],[6,"CGDataProviderGetBytePointerCallback","","",null,null],[6,"CGDataProviderGetBytesAtOffsetCallback","","",null,null],[6,"CGDataProviderReleaseBytePointerCallback","","",null,null],[6,"CGDataProviderReleaseDataCallback","","",null,null],[6,"CGDataProviderGetBytesAtPositionCallback","","",null,null],[6,"CGDataProviderRef","","",null,null],[11,"drop","","",2,{"inputs":[{"name":"cgdataprovider"}],"output":null}],[11,"as_concrete_TypeRef","","",2,{"inputs":[{"name":"cgdataprovider"}],"output":{"name":"cgdataproviderref"}}],[11,"wrap_under_get_rule","","",2,{"inputs":[{"name":"cgdataprovider"},{"name":"cgdataproviderref"}],"output":{"name":"cgdataprovider"}}],[11,"as_CFTypeRef","","",2,{"inputs":[{"name":"cgdataprovider"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",2,{"inputs":[{"name":"cgdataprovider"},{"name":"cgdataproviderref"}],"output":{"name":"cgdataprovider"}}],[11,"type_id","","",2,{"inputs":[{"name":"cgdataprovider"}],"output":{"name":"cftypeid"}}],[11,"from_buffer","","",2,null],[0,"display","core_graphics","",null,null],[5,"CGMainDisplayID","core_graphics::display","",null,null],[5,"CGDisplayIsActive","","",null,null],[5,"CGDisplayIsAlwaysInMirrorSet","","",null,null],[5,"CGDisplayIsAsleep","","",null,null],[5,"CGDisplayIsBuiltin","","",null,null],[5,"CGDisplayIsInHWMirrorSet","","",null,null],[5,"CGDisplayIsInMirrorSet","","",null,null],[5,"CGDisplayIsMain","","",null,null],[5,"CGDisplayIsOnline","","",null,null],[5,"CGDisplayIsStereo","","",null,null],[5,"CGDisplayMirrorsDisplay","","",null,null],[5,"CGDisplayPrimaryDisplay","","",null,null],[5,"CGDisplayRotation","","",null,null],[5,"CGDisplayScreenSize","","",null,null],[5,"CGDisplaySerialNumber","","",null,null],[5,"CGDisplayUnitNumber","","",null,null],[5,"CGDisplayUsesOpenGLAcceleration","","",null,null],[5,"CGDisplayVendorNumber","","",null,null],[5,"CGGetActiveDisplayList","","",null,null],[5,"CGDisplayModelNumber","","",null,null],[5,"CGDisplayPixelsHigh","","",null,null],[5,"CGDisplayPixelsWide","","",null,null],[5,"CGDisplayBounds","","",null,null],[5,"CGDisplayHideCursor","","",null,null],[5,"CGDisplayShowCursor","","",null,null],[5,"CGDisplayMoveCursorToPoint","","",null,null],[5,"CGWarpMouseCursorPosition","","",null,null],[5,"CGAssociateMouseAndMouseCursorPosition","","",null,null],[6,"CGDirectDisplayID","","",null,null],[0,"font","core_graphics","",null,null],[3,"CGFont","core_graphics::font","",null,null],[6,"CGGlyph","","",null,null],[6,"CGFontRef","","",null,null],[11,"serialize","","",3,{"inputs":[{"name":"cgfont"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"cgfont"},{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cgfont"}}],[11,"drop","","",3,{"inputs":[{"name":"cgfont"}],"output":null}],[11,"as_concrete_TypeRef","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cgfontref"}}],[11,"wrap_under_get_rule","","",3,{"inputs":[{"name":"cgfont"},{"name":"cgfontref"}],"output":{"name":"cgfont"}}],[11,"as_CFTypeRef","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",3,{"inputs":[{"name":"cgfont"},{"name":"cgfontref"}],"output":{"name":"cgfont"}}],[11,"type_id","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cftypeid"}}],[11,"from_data_provider","","",3,{"inputs":[{"name":"cgfont"},{"name":"cgdataprovider"}],"output":{"name":"result"}}],[11,"from_name","","",3,{"inputs":[{"name":"cgfont"},{"name":"cfstring"}],"output":{"name":"result"}}],[11,"postscript_name","","",3,{"inputs":[{"name":"cgfont"}],"output":{"name":"cfstring"}}],[0,"geometry","core_graphics","",null,null],[3,"CGSize","core_graphics::geometry","",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[3,"CGPoint","","",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[3,"CGRect","","",null,null],[12,"origin","","",6,null],[12,"size","","",6,null]],"paths":[[3,"CGColorSpace"],[3,"CGContext"],[3,"CGDataProvider"],[3,"CGFont"],[3,"CGSize"],[3,"CGPoint"],[3,"CGRect"]]};
searchIndex['serde'] = {"items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"Bytes","serde::bytes","`Bytes` wraps a `&[u8]` in order to serialize into a byte array.",null,null],[3,"ByteBuf","","`ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"bytes"},{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"bytebuf"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",1,{"inputs":[{"name":"bytebuf"},{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",2,null],[11,"visit_byte_buf","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"d"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::kind_mismatch`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option<T>` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PrimitiveVisitor","","A visitor that produces a primitive type.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `PrimitiveVisitor`.",6,{"inputs":[{"name":"primitivevisitor"}],"output":{"name":"self"}}],[11,"visit_isize","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",6,{"inputs":[{"name":"primitivevisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",7,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",8,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",9,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",9,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",9,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",10,{"inputs":[{"name":"binaryheap"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",11,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",11,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",11,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",12,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",13,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",13,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",13,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",14,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",15,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",15,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",15,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",17,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",17,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",17,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",18,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",19,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",19,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",19,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",20,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*<T>`.",21,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"self"}}],[11,"visit_seq","","",21,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",22,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",23,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",24,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",25,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",26,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",27,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",28,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",29,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"self"}}],[11,"visit_seq","","",29,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",30,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"self"}}],[11,"visit_seq","","",30,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",31,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"self"}}],[11,"visit_seq","","",31,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*<T>`.",32,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"self"}}],[11,"visit_seq","","",32,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*<T>`.",33,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",33,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",33,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",34,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*<T>`.",35,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"self"}}],[11,"visit_unit","","",35,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",35,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",37,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",38,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",39,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",40,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",41,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",42,{"inputs":[{"name":"result"},{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"SyntaxError","","The value had some syntatic error.",43,null],[13,"EndOfStreamError","","EOF while deserializing a value.",43,null],[13,"UnknownFieldError","","Unknown field in struct.",43,null],[13,"MissingFieldError","","Struct is missing a field.",43,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",44,null],[10,"into_deserializer","","Convert this value into a deserializer.",44,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",43,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"syntax","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"end_of_stream","","",43,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"unknown_field","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",43,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"visit","","",45,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","",45,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",46,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",47,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",48,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",49,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",50,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",51,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",52,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",53,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",54,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",55,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",56,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",57,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",58,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",59,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",60,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",60,null],[11,"visit_variant","","",60,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",60,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",7,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"visit","serde::de::value","",61,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","",61,null],[11,"visit_variant","","",61,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",61,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",62,{"inputs":[{"name":"seqdeserializer"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",62,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",62,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",62,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",62,null],[11,"into_deserializer","collections::vec","",18,{"inputs":[{"name":"vec"}],"output":{"name":"seqdeserializer"}}],[11,"into_deserializer","collections::btree::set","",12,{"inputs":[{"name":"btreeset"}],"output":{"name":"seqdeserializer"}}],[11,"into_deserializer","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"}],"output":{"name":"seqdeserializer"}}],[11,"new","serde::de::value","Construct a new `MapDeserializer<I, K, V>`.",63,{"inputs":[{"name":"mapdeserializer"},{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"visit","","",63,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",63,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",63,null],[11,"into_deserializer","collections::btree::map","",34,{"inputs":[{"name":"btreemap"}],"output":{"name":"mapdeserializer"}}],[11,"into_deserializer","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"mapdeserializer"}}],[11,"into_deserializer","serde::bytes","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"visit","serde::de::value","",64,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"visit","serde::de::value","",65,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"syntax","","Raised when there is general error when deserializing a type.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[11,"length_mismatch","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",66,{"inputs":[{"name":"error"},{"name":"usize"}],"output":{"name":"self"}}],[11,"type_mismatch","","Raised when a `Deserialize` was passed an incorrect type.",66,{"inputs":[{"name":"error"},{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",66,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[10,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[10,"missing_field","","Raised when a `Deserialize` struct type did not receive a field.",66,{"inputs":[{"name":"error"},{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",67,{"inputs":[{"name":"deserialize"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",68,null],[10,"visit","","This method walks a visitor through a value as it is being deserialized.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_char","","This method hints that the `Deserialize` type is expecting a `char` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_str","","This method hints that the `Deserialize` type is expecting a `&str` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_string","","This method hints that the `Deserialize` type is expecting a `String` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren't tagged as sequences.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren't tagged as maps.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren't tagged as a unit struct.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren't tagged as a newtype struct.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren't tagged as sequences.",68,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren't tagged as maps.",68,null],[11,"visit_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",68,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",68,null],[11,"visit_bytes","","This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct key mapping.\nThis allows deserializers to choose between &str, usize, or &[u8] to properly deserialize a\nstruct key.",68,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","Specify a format string for the deserializer.",68,{"inputs":[{"name":"deserializer"}],"output":{"name":"str"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",69,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&str` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",69,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",69,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&[u8]` into a `Value`.",69,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.",69,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",70,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",70,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",70,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",70,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",71,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",71,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",71,null],[11,"missing_field","","Report that there",71,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",72,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",72,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",73,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",73,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",73,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",73,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position's line and column.",null,null],[11,"new","","Construct a new `LineColIterator<Iter>`.",74,{"inputs":[{"name":"linecoliterator"},{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust's builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",7,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",8,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",8,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",8,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor<Iter>`.",75,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",75,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",75,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",10,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",12,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",14,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",18,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",20,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",76,null],[11,"visit","","",76,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",76,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",77,null],[11,"visit","","",77,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",77,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",78,null],[11,"visit","","",78,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",78,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",79,null],[11,"visit","","",79,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",79,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",80,null],[11,"visit","","",80,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",80,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",81,null],[11,"visit","","",81,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",81,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",82,null],[11,"visit","","",82,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",82,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",83,null],[11,"visit","","",83,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",83,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",84,null],[11,"visit","","",84,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",84,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",85,null],[11,"visit","","",85,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",85,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",86,null],[11,"visit","","",86,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",86,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",87,null],[11,"visit","","",87,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",87,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor<Iter>`.",88,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",88,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",88,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",34,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",36,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",38,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",40,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",39,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",41,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",42,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",89,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",37,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serialize","serde::ser","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",90,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",91,null],[10,"visit_bool","","`visit_bool` serializes a `bool` value.",91,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `visit_i64` method.",91,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"visit_i64","","`visit_i64` serializes a `i64` value.",91,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `visit_u64` method.",91,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"visit_u64","","`visit_u64` serializes a `u64` value.",91,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `visit_f64` method.",91,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"visit_f64","","`visit_f64` serializes a `f64` value.",91,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` serializes a character. By default it serializes it as a `&str` containing a\nsingle character.",91,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"visit_str","","`visit_str` serializes a `&str`.",91,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` is a hook that enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",91,null],[10,"visit_unit","","Serializes a `()` value.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","Serializes a unit struct value.",91,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The `visit_newtype_struct` allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype_variant","","The `visit_newtype_variant` allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"visit_none","","Serializes a `None` value.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"visit_some","","Serializes a `Some(...)` value.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_seq","","Serializes a sequence.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_seq_elt","","Serializes a sequence element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple","","Serializes a tuple.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_elt","","Serializes a tuple element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple_struct","","Serializes a tuple struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_struct_elt","","Serializes a tuple struct element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_tuple_variant","","Serializes a tuple variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_tuple_variant_elt","","Serializes a tuple element.",91,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"visit_map","","Serializes a map.",91,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_map_elt","","Serializes a map element (key-value pair).",91,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","Serializes a struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_elt","","Serializes an element of a struct.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant","","Serializes a struct variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct_variant_elt","","Serializes an element of a struct variant.",91,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"format","","Specify a format string for the serializer.",91,{"inputs":[{"name":"serializer"}],"output":{"name":"str"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",92,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",92,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",93,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",93,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"Bytes"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PrimitiveVisitor"],[3,"String"],[4,"Option"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"MapDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex['enum_primitive'] = {"items":[[11,"is_some","core::option","Returns `true` if the option is a `Some` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",0,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",0,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",0,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",0,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",0,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",1,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"shl","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",1,null],[11,"shr","","",1,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"add","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",1,null],[11,"sub","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",1,null],[11,"mul","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",1,null],[11,"div","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",1,null],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",1,null],[11,"not","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",1,null],[11,"eq","core::num::flt2dec::decoder","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",4,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",4,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",4,null],[11,"clone","","",5,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",5,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",5,null],[11,"fmt","","",6,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",7,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",7,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",8,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,null],[11,"eq","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",12,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",13,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",13,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",13,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",13,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",13,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",13,null],[11,"eq","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",13,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",14,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",14,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",14,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",14,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",14,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",14,null],[11,"eq","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",14,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",15,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",15,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",15,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",15,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",16,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",18,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",19,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",19,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",20,null],[11,"get","","Dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",20,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",21,null],[11,"clone","","",21,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",22,null],[11,"eq","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",22,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",22,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",23,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",23,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",24,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",25,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",26,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",27,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",27,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",28,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",29,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",30,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",31,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",32,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",33,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",34,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",30,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",30,null],[11,"swap","","Stores a value into the bool, returning the old value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",30,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",31,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",31,null],[11,"swap","","Stores a value into the isize, returning the old value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",31,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",32,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",32,null],[11,"swap","","Stores a value into the usize, returning the old value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",32,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",33,null],[11,"load","","Loads a value from the pointer.",33,null],[11,"store","","Stores a value into the pointer.",33,null],[11,"swap","","Stores a value into the pointer, returning the old value.",33,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"fmt","","",32,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",35,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",35,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",35,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",35,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",35,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",35,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",37,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",37,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",37,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",37,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",37,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",38,null],[11,"clone","","",38,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",39,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",39,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",39,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",40,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",41,null],[11,"deref","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",42,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",42,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",42,null],[11,"clone","core::char","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",44,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",43,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",46,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"count","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",45,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",45,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",47,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",49,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",51,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",50,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"nth","","",56,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",56,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",57,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",57,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",58,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",59,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",60,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",60,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",61,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",61,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",62,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",64,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",25,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",24,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next","core::ops","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next_back","","",24,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",25,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",69,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",70,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",70,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",71,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",0,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",75,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",76,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",77,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",77,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",77,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",77,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",77,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",77,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",77,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",81,null],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"count","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",82,null],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",83,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","","",86,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next","","",87,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next","","",88,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next","","",89,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"count","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",90,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",90,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"count","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"count","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",92,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",92,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",93,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",95,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",94,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",96,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",97,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",98,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",99,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",100,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",101,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",99,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",102,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",103,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",103,null],[11,"matching","","",103,null],[11,"use_early_reject","","",104,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",104,null],[11,"matching","","",104,null],[11,"eq","core::str","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",106,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",106,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",107,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",108,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",109,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",111,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",113,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",114,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",118,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",119,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",122,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",126,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",126,null],[11,"call_mut","","",126,null],[11,"call_once","","",126,null],[11,"next","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",128,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",128,null],[11,"finish","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",128,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",129,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",136,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",137,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",138,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",138,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",139,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",139,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",140,null],[11,"entry","","Adds a new entry to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",141,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",141,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",142,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",142,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",143,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",143,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",144,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",145,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",147,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",148,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",150,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",151,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",152,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",153,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",153,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",153,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",153,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",153,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",153,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",153,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",153,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",153,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",22,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",35,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Option","enum_primitive","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",154,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl!","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive!","","Wrap this macro around an `enum` declaration to get an\nautomatically generated implementation of `num::FromPrimitive`.",null,null]],"paths":[[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"FromPrimitive"]]};
searchIndex['num'] = {"items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"biguint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"bigint"},{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"bigint"},{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",15,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe \"sign bit\" in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",25,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['rand'] = {"items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['cgl'] = {"items":[[5,"CGLSetCurrentContext","cgl","",null,null],[5,"CGLGetCurrentContext","","",null,null],[5,"CGLChoosePixelFormat","","",null,null],[5,"CGLDescribePixelFormat","","",null,null],[5,"CGLDestroyPixelFormat","","",null,null],[5,"CGLCreateContext","","",null,null],[5,"CGLDestroyContext","","",null,null],[5,"CGLGetPixelFormat","","",null,null],[5,"CGLEnable","","",null,null],[5,"CGLDisable","","",null,null],[5,"CGLIsEnabled","","",null,null],[5,"CGLSetParameter","","",null,null],[5,"CGLGetParameter","","",null,null],[5,"CGLLockContext","","",null,null],[5,"CGLUnlockContext","","",null,null],[5,"CGLSetOption","","",null,null],[5,"CGLGetOption","","",null,null],[5,"CGLSetGlobalOption","","",null,null],[5,"CGLGetGlobalOption","","",null,null],[5,"CGLGetVersion","","",null,null],[5,"CGLTexImageIOSurface2D","","",null,null],[5,"CGLErrorString","","",null,null],[6,"CGLPixelFormatAttribute","","",null,null],[6,"CGLContextParameter","","",null,null],[6,"CGLContextEnable","","",null,null],[6,"CGLGlobalOption","","",null,null],[6,"CGLError","","",null,null],[6,"CGLPixelFormatObj","","",null,null],[6,"CGLContextObj","","",null,null],[6,"IOSurfaceRef","","",null,null],[17,"kCGLNoError","","",null,null],[17,"kCGLPFAAllRenderers","","",null,null],[17,"kCGLPFADoubleBuffer","","",null,null],[17,"kCGLPFAStereo","","",null,null],[17,"kCGLPFAAuxBuffers","","",null,null],[17,"kCGLPFAColorSize","","",null,null],[17,"kCGLPFAAlphaSize","","",null,null],[17,"kCGLPFADepthSize","","",null,null],[17,"kCGLPFAStencilSize","","",null,null],[17,"kCGLPFAAccumSize","","",null,null],[17,"kCGLPFAMinimumPolicy","","",null,null],[17,"kCGLPFAMaximumPolicy","","",null,null],[17,"kCGLPFAOffScreen","","",null,null],[17,"kCGLPFAFullScreen","","",null,null],[17,"kCGLPFASampleBuffers","","",null,null],[17,"kCGLPFASamples","","",null,null],[17,"kCGLPFAAuxDepthStencil","","",null,null],[17,"kCGLPFAColorFloat","","",null,null],[17,"kCGLPFAMultisample","","",null,null],[17,"kCGLPFASupersample","","",null,null],[17,"kCGLPFASampleAlpha","","",null,null],[17,"kCGLPFARendererID","","",null,null],[17,"kCGLPFASingleRenderer","","",null,null],[17,"kCGLPFANoRecovery","","",null,null],[17,"kCGLPFAAccelerated","","",null,null],[17,"kCGLPFAClosestPolicy","","",null,null],[17,"kCGLPFARobust","","",null,null],[17,"kCGLPFABackingStore","","",null,null],[17,"kCGLPFAMPSafe","","",null,null],[17,"kCGLPFAWindow","","",null,null],[17,"kCGLPFAMultiScreen","","",null,null],[17,"kCGLPFACompliant","","",null,null],[17,"kCGLPFADisplayMask","","",null,null],[17,"kCGLPFAPBuffer","","",null,null],[17,"kCGLPFARemotePBuffer","","",null,null],[17,"kCGLPFAAllowOfflineRenderers","","",null,null],[17,"kCGLPFAAcceleratedCompute","","",null,null],[17,"kCGLPFAOpenGLProfile","","",null,null],[17,"kCGLPFAVirtualScreenCount","","",null,null],[17,"kCGLCESwapRectangle","","",null,null],[17,"kCGLCESwapLimit","","",null,null],[17,"kCGLCERasterization","","",null,null],[17,"kCGLCEStateValidation","","",null,null],[17,"kCGLCESurfaceBackingSize","","",null,null],[17,"kCGLCEDisplayListOptimization","","",null,null],[17,"kCGLCEMPEngine","","",null,null],[17,"kCGLCECrashOnRemovedFunctions","","",null,null],[17,"kCGLCPSwapRectangle","","",null,null],[17,"kCGLCPSwapInterval","","",null,null],[17,"kCGLCPDispatchTableSize","","",null,null],[17,"kCGLCPClientStorage","","",null,null],[17,"kCGLCPSurfaceTexture","","",null,null],[17,"kCGLCPSurfaceOrder","","",null,null],[17,"kCGLCPSurfaceOpacity","","",null,null],[17,"kCGLCPSurfaceBackingSize","","",null,null],[17,"kCGLCPSurfaceSurfaceVolatile","","",null,null],[17,"kCGLCPReclaimResources","","",null,null],[17,"kCGLCPCurrentRendererID","","",null,null],[17,"kCGLCPGPUVertexProcessing","","",null,null],[17,"kCGLCPGPUFragmentProcessing","","",null,null],[17,"kCGLCPHasDrawable","","",null,null],[17,"kCGLCPMPSwapsInFlight","","",null,null],[17,"kCGLGOFormatCacheSize","","",null,null],[17,"kCGLGOClearFormatCache","","",null,null],[17,"kCGLGORetainRenderers","","",null,null],[17,"kCGLGOResetLibrary","","",null,null],[17,"kCGLGOUseErrorHandler","","",null,null],[17,"kCGLGOUseBuildCache","","",null,null],[17,"CORE_BOOLEAN_ATTRIBUTES","","",null,null],[17,"CORE_INTEGER_ATTRIBUTES","","",null,null]],"paths":[]};
searchIndex['flate2'] = {"items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[{"name":"gzbuilder"}],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"u32"}],"output":{"name":"builder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",3,{"inputs":[{"name":"gzbuilder"},{"name":"vec"}],"output":{"name":"builder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,{"inputs":[{"name":"gzbuilder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"option"}}],[11,"mtime","","Returns the `mtime` field of this gzip stream's header, if present.",4,{"inputs":[{"name":"gzheader"}],"output":{"name":"u32"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",6,{"inputs":[{"name":"compress"},{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,{"inputs":[{"name":"compress"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,{"inputs":[{"name":"compress"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",7,{"inputs":[{"name":"decompress"},{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,{"inputs":[{"name":"decompress"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,{"inputs":[{"name":"dataerror"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over `Reader` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Writer` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"result"}}],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,{"inputs":[{"name":"flatereadext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,{"inputs":[{"name":"flatereadext"}],"output":{"name":"deflatedecoder"}}],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"zlibdecoder"}}],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,{"inputs":[{"name":"flatewriteext"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,{"inputs":[{"name":"flatewriteext"}],"output":{"name":"deflatedecoder"}}],[11,"clone","","",2,{"inputs":[{"name":"compression"}],"output":{"name":"compression"}}],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"deflateencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,{"inputs":[{"name":"deflateencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"deflateencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,{"inputs":[{"name":"deflateencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,{"inputs":[{"name":"deflateencoder"}],"output":{"name":"r"}}],[11,"read","","",11,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",12,{"inputs":[{"name":"deflatedecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",12,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",13,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",13,{"inputs":[{"name":"deflatedecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"u64"}}],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"deflatedecoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",14,{"inputs":[{"name":"gzencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"gzencoder"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"gzencoder"}],"output":null}],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",15,{"inputs":[{"name":"gzencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",15,{"inputs":[{"name":"gzencoder"}],"output":{"name":"r"}}],[11,"read","","",15,null],[11,"new","","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",16,{"inputs":[{"name":"gzdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",16,{"inputs":[{"name":"gzdecoder"}],"output":{"name":"header"}}],[11,"read","","",16,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",17,{"inputs":[{"name":"zlibencoder"},{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",17,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",18,{"inputs":[{"name":"zlibencoder"},{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",18,{"inputs":[{"name":"zlibencoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",18,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"new","","Creates a new decoder which will decompress data read from the given\nstream.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",19,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",19,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"read","","",19,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",20,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",20,{"inputs":[{"name":"zlibdecoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"u64"}}],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"result"}}]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex['objc'] = {"items":[[3,"Encoding","objc","An Objective-C type encoding.",null,null],[0,"runtime","","A Rust interface for the functionality of the Objective-C runtime.",null,null],[3,"Sel","objc::runtime","A type that represents a method selector.",null,null],[3,"Ivar","","A type that represents an instance variable.",null,null],[3,"Method","","A type that represents a method in a class definition.",null,null],[3,"Class","","A type that represents an Objective-C class.",null,null],[3,"Object","","A type that represents an instance of a class.",null,null],[3,"Super","","Specifies the superclass of an instance.",null,null],[12,"receiver","","Specifies an instance of a class.",0,null],[12,"superclass","","Specifies the particular superclass of the instance to message.",0,null],[5,"sel_registerName","","",null,null],[5,"sel_getName","","",null,null],[5,"class_getName","","",null,null],[5,"class_getSuperclass","","",null,null],[5,"class_getInstanceSize","","",null,null],[5,"class_getInstanceMethod","","",null,null],[5,"class_getInstanceVariable","","",null,null],[5,"class_copyMethodList","","",null,null],[5,"class_copyIvarList","","",null,null],[5,"class_addMethod","","",null,null],[5,"class_addIvar","","",null,null],[5,"objc_allocateClassPair","","",null,null],[5,"objc_disposeClassPair","","",null,null],[5,"objc_registerClassPair","","",null,null],[5,"object_getClass","","",null,null],[5,"objc_getClassList","","",null,null],[5,"objc_copyClassList","","",null,null],[5,"objc_getClass","","",null,null],[5,"ivar_getName","","",null,null],[5,"ivar_getOffset","","",null,null],[5,"ivar_getTypeEncoding","","",null,null],[5,"objc_msgSend","","",null,null],[5,"objc_msgSend_stret","","",null,null],[5,"objc_msgSendSuper","","",null,null],[5,"objc_msgSendSuper_stret","","",null,null],[5,"method_getName","","",null,null],[5,"method_getImplementation","","",null,null],[5,"method_copyReturnType","","",null,null],[5,"method_copyArgumentType","","",null,null],[5,"method_getNumberOfArguments","","",null,null],[5,"method_setImplementation","","",null,null],[5,"method_exchangeImplementations","","",null,null],[6,"BOOL","","The Objective-C `BOOL` type.",null,null],[6,"Imp","","A pointer to the start of a method implementation.",null,null],[17,"YES","","The equivalent of true for Objective-C's `BOOL` type.",null,null],[17,"NO","","The equivalent of false for Objective-C's `BOOL` type.",null,null],[11,"register","","Registers a method with the Objective-C runtime system,\nmaps the method name to a selector, and returns the selector value.",1,{"inputs":[{"name":"sel"},{"name":"str"}],"output":{"name":"sel"}}],[11,"name","","Returns the name of the method specified by self.",1,{"inputs":[{"name":"sel"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"sel"},{"name":"sel"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"sel"}],"output":{"name":"sel"}}],[11,"fmt","","",1,{"inputs":[{"name":"sel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of self.",2,{"inputs":[{"name":"ivar"}],"output":{"name":"str"}}],[11,"offset","","Returns the offset of self.",2,{"inputs":[{"name":"ivar"}],"output":{"name":"isize"}}],[11,"type_encoding","","Returns the `Encoding` of self.",2,{"inputs":[{"name":"ivar"}],"output":{"name":"encoding"}}],[11,"name","","Returns the name of self.",3,{"inputs":[{"name":"method"}],"output":{"name":"sel"}}],[11,"return_type","","Returns the `Encoding` of self's return type.",3,{"inputs":[{"name":"method"}],"output":{"name":"encoding"}}],[11,"argument_type","","Returns the `Encoding` of a single parameter type of self, or\n`None` if self has no parameter at the given index.",3,{"inputs":[{"name":"method"},{"name":"usize"}],"output":{"name":"option"}}],[11,"arguments_count","","Returns the number of arguments accepted by self.",3,{"inputs":[{"name":"method"}],"output":{"name":"usize"}}],[11,"implementation","","Returns the implementation of self.",3,{"inputs":[{"name":"method"}],"output":{"name":"imp"}}],[11,"get","","Returns the class definition of a specified class, or `None` if the\nclass is not registered with the Objective-C runtime.",4,{"inputs":[{"name":"class"},{"name":"str"}],"output":{"name":"option"}}],[11,"classes","","Obtains the list of registered class definitions.",4,{"inputs":[{"name":"class"}],"output":{"name":"mallocbuffer"}}],[11,"classes_count","","Returns the total number of registered classes.",4,{"inputs":[{"name":"class"}],"output":{"name":"usize"}}],[11,"name","","Returns the name of self.",4,{"inputs":[{"name":"class"}],"output":{"name":"str"}}],[11,"superclass","","Returns the superclass of self, or `None` if self is a root class.",4,{"inputs":[{"name":"class"}],"output":{"name":"option"}}],[11,"metaclass","","Returns the metaclass of self.",4,{"inputs":[{"name":"class"}],"output":{"name":"class"}}],[11,"instance_size","","Returns the size of instances of self.",4,{"inputs":[{"name":"class"}],"output":{"name":"usize"}}],[11,"instance_method","","Returns a specified instance method for self, or `None` if self and\nits superclasses do not contain an instance method with the\nspecified selector.",4,{"inputs":[{"name":"class"},{"name":"sel"}],"output":{"name":"option"}}],[11,"instance_variable","","Returns the ivar for a specified instance variable of self, or `None`\nif self has no ivar with the given name.",4,{"inputs":[{"name":"class"},{"name":"str"}],"output":{"name":"option"}}],[11,"instance_methods","","Describes the instance methods implemented by self.",4,{"inputs":[{"name":"class"}],"output":{"name":"mallocbuffer"}}],[11,"instance_variables","","Describes the instance variables declared by self.",4,{"inputs":[{"name":"class"}],"output":{"name":"mallocbuffer"}}],[11,"eq","","",4,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"class"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"class","","Returns the class of self.",5,{"inputs":[{"name":"object"}],"output":{"name":"class"}}],[11,"get_ivar","","Returns a reference to the ivar of self with the given name.\nPanics if self has no ivar with the given name.\nUnsafe because the caller must ensure that the ivar is actually\nof type `T`.",5,{"inputs":[{"name":"object"},{"name":"str"}],"output":{"name":"t"}}],[11,"get_mut_ivar","","Returns a mutable reference to the ivar of self with the given name.\nPanics if self has no ivar with the given name.\nUnsafe because the caller must ensure that the ivar is actually\nof type `T`.",5,{"inputs":[{"name":"object"},{"name":"str"}],"output":{"name":"t"}}],[11,"set_ivar","","Sets the value of the ivar of self with the given name.\nPanics if self has no ivar with the given name.\nUnsafe because the caller must ensure that the ivar is actually\nof type `T`.",5,{"inputs":[{"name":"object"},{"name":"str"},{"name":"t"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"object"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"declare","objc","Functionality for declaring Objective-C classes.",null,null],[3,"UnequalArgsError","objc::declare","An error returned from `MethodImplementation::imp_for` to indicate that a\nselector and function accept unequal numbers of arguments.",null,null],[3,"ClassDecl","","A type for declaring a new class and adding new methods and ivars to it\nbefore registering it.",null,null],[8,"MethodImplementation","","Types that can be used as the implementation of an Objective-C method.",null,null],[16,"Callee","","The callee type of the method.",6,null],[16,"Ret","","The return type of the method.",6,null],[10,"argument_encodings","","Returns the type encodings of Self's arguments.",6,{"inputs":[{"name":"methodimplementation"}],"output":{"name":"box"}}],[10,"imp_for","","Returns self as an `Imp` of a method for the given selector.",6,{"inputs":[{"name":"methodimplementation"},{"name":"sel"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"unequalargserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"unequalargserror"},{"name":"unequalargserror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"unequalargserror"},{"name":"unequalargserror"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"unequalargserror"}],"output":{"name":"unequalargserror"}}],[11,"fmt","","",7,{"inputs":[{"name":"unequalargserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"unequalargserror"}],"output":{"name":"str"}}],[11,"new","","Constructs a `ClassDecl` with the given superclass and name.\nReturns `None` if the class couldn't be allocated.",8,{"inputs":[{"name":"classdecl"},{"name":"class"},{"name":"str"}],"output":{"name":"option"}}],[11,"add_method","","Adds a method with the given name and implementation to self.\nPanics if the method wasn't sucessfully added\nor if the selector and function take different numbers of arguments.\nUnsafe because the caller must ensure that the types match those that\nare expected when the method is invoked from Objective-C.",8,{"inputs":[{"name":"classdecl"},{"name":"sel"},{"name":"f"}],"output":null}],[11,"add_class_method","","Adds a class method with the given name and implementation to self.\nPanics if the method wasn't sucessfully added\nor if the selector and function take different numbers of arguments.\nUnsafe because the caller must ensure that the types match those that\nare expected when the method is invoked from Objective-C.",8,{"inputs":[{"name":"classdecl"},{"name":"sel"},{"name":"f"}],"output":null}],[11,"add_ivar","","Adds an ivar with type `T` and the provided name to self.\nPanics if the ivar wasn't successfully added.",8,{"inputs":[{"name":"classdecl"},{"name":"str"}],"output":null}],[11,"register","","Registers self, consuming it and returning a reference to the\nnewly registered `Class`.",8,{"inputs":[{"name":"classdecl"}],"output":{"name":"class"}}],[11,"drop","","",8,{"inputs":[{"name":"classdecl"}],"output":null}],[11,"from_str","objc","Constructs an `Encoding` from its string representation.\nUnsafe because the caller must ensure the string is a valid encoding.",9,{"inputs":[{"name":"encoding"},{"name":"str"}],"output":{"name":"encoding"}}],[11,"as_str","","Returns self as a `str`.",9,{"inputs":[{"name":"encoding"}],"output":{"name":"str"}}],[11,"clone","","",9,{"inputs":[{"name":"encoding"}],"output":{"name":"encoding"}}],[11,"eq","","",9,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","objc::runtime","",1,{"inputs":[{"name":"sel"}],"output":{"name":"encoding"}}],[11,"encode","core::option","",10,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[11,"encode","","",10,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[11,"encode","","",10,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[11,"encode","","",10,{"inputs":[{"name":"option"}],"output":{"name":"encoding"}}],[8,"Encode","objc","Types that have an Objective-C type encoding.",null,null],[10,"encode","","Returns the Objective-C type encoding for Self.",11,{"inputs":[{"name":"encode"}],"output":{"name":"encoding"}}],[8,"Message","","Types that may be sent Objective-C messages.\nFor example: objects, classes, and blocks.",null,null],[8,"MessageArguments","","Types that may be used as the arguments of an Objective-C message.",null,null],[10,"send","","Sends a message to the given obj with the given selector and self as\nthe arguments.",12,null],[10,"send_super","","Sends a message to the superclass of an instance of a class with self\nas the arguments.",12,null],[14,"sel!","","Registers a selector, returning a `Sel`.",null,null],[14,"msg_send!","","Sends a message to an object.",null,null]],"paths":[[3,"Super"],[3,"Sel"],[3,"Ivar"],[3,"Method"],[3,"Class"],[3,"Object"],[8,"MethodImplementation"],[3,"UnequalArgsError"],[3,"ClassDecl"],[3,"Encoding"],[4,"Option"],[8,"Encode"],[8,"MessageArguments"]]};
searchIndex['core_foundation'] = {"items":[[0,"date","core_foundation","",null,null],[11,"clone","core_foundation_sys::array","",0,{"inputs":[{"name":"cfarraycallbacks"}],"output":{"name":"cfarraycallbacks"}}],[11,"clone","core_foundation_sys::base","",1,{"inputs":[{"name":"cfrange"}],"output":{"name":"cfrange"}}],[11,"init","","",1,{"inputs":[{"name":"cfrange"},{"name":"i64"},{"name":"i64"}],"output":{"name":"cfrange"}}],[11,"clone","core_foundation_sys::dictionary","",2,{"inputs":[{"name":"cfdictionarykeycallbacks"}],"output":{"name":"cfdictionarykeycallbacks"}}],[11,"clone","","",3,{"inputs":[{"name":"cfdictionaryvaluecallbacks"}],"output":{"name":"cfdictionaryvaluecallbacks"}}],[11,"clone","core_foundation_sys::set","",4,{"inputs":[{"name":"cfsetcallbacks"}],"output":{"name":"cfsetcallbacks"}}],[6,"CFTimeInterval","core_foundation::date","",null,null],[6,"CFAbsoluteTime","","",null,null],[5,"CFAbsoluteTimeGetCurrent","","",null,{"inputs":[],"output":{"name":"f64"}}],[0,"array","core_foundation","Heterogeneous immutable arrays.",null,null],[3,"CFArray","core_foundation::array","A heterogeneous immutable array.",null,null],[3,"CFArrayIterator","","",null,null],[11,"drop","","",5,{"inputs":[{"name":"cfarray"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"cfarrayiterator"}],"output":{"name":"option"}}],[11,"as_concrete_TypeRef","","",5,{"inputs":[{"name":"cfarray"}],"output":{"name":"cfarrayref"}}],[11,"wrap_under_get_rule","","",5,{"inputs":[{"name":"cfarray"},{"name":"cfarrayref"}],"output":{"name":"cfarray"}}],[11,"as_CFTypeRef","","",5,{"inputs":[{"name":"cfarray"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",5,{"inputs":[{"name":"cfarray"},{"name":"cfarrayref"}],"output":{"name":"cfarray"}}],[11,"type_id","","",5,{"inputs":[{"name":"cfarray"}],"output":{"name":"cftypeid"}}],[11,"from_CFTypes","","Creates a new `CFArray` with the given elements, which must be `CFType` objects.",5,null],[11,"iter","","Iterates over the elements of this `CFArray`.",5,{"inputs":[{"name":"cfarray"}],"output":{"name":"cfarrayiterator"}}],[11,"len","","",5,{"inputs":[{"name":"cfarray"}],"output":{"name":"cfindex"}}],[11,"get","","",5,null],[0,"base","core_foundation","",null,null],[3,"CFType","core_foundation::base","Superclass of all Core Foundation objects.",null,null],[8,"CFIndexConvertible","","",null,null],[10,"to_CFIndex","","Always use this method to construct a `CFIndex` value. It performs bounds checking to\nensure the value is in range.",7,{"inputs":[{"name":"cfindexconvertible"}],"output":{"name":"cfindex"}}],[8,"TCFType","","All Core Foundation types implement this trait. The type parameter `TypeRef` specifies the\nassociated Core Foundation type: e.g. for `CFType` this is `CFTypeRef`; for `CFArray` this is\n`CFArrayRef`.",null,null],[10,"as_concrete_TypeRef","","Returns the object as its concrete TypeRef.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"concretetyperef"}}],[10,"wrap_under_create_rule","","Returns an instance of the object, wrapping the underlying `CFTypeRef` subclass. Use this\nwhen following Core Foundation's \"Create Rule\". The reference count is *not* bumped.",8,{"inputs":[{"name":"tcftype"},{"name":"concretetyperef"}],"output":{"name":"self"}}],[10,"type_id","","Returns the type ID for this class.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"cftypeid"}}],[11,"as_CFType","","Returns the object as a wrapped `CFType`. The reference count is incremented by one.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"cftype"}}],[10,"as_CFTypeRef","","Returns the object as a raw `CFTypeRef`. The reference count is not adjusted.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"cftyperef"}}],[10,"wrap_under_get_rule","","Returns an instance of the object, wrapping the underlying `CFTypeRef` subclass. Use this\nwhen following Core Foundation's \"Get Rule\". The reference count *is* bumped.",8,{"inputs":[{"name":"tcftype"},{"name":"concretetyperef"}],"output":{"name":"self"}}],[11,"retain_count","","Returns the reference count of the object. It is unwise to do anything other than test\nwhether the return value of this method is greater than zero.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"cfindex"}}],[11,"type_of","","Returns the type ID of this object.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"cftypeid"}}],[11,"show","","Writes a debugging version of this object on standard error.",8,{"inputs":[{"name":"tcftype"}],"output":null}],[11,"instance_of","","Returns true if this value is an instance of another type.",8,{"inputs":[{"name":"tcftype"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"cftype"}],"output":{"name":"cftype"}}],[11,"drop","","",9,{"inputs":[{"name":"cftype"}],"output":null}],[11,"as_concrete_TypeRef","","",9,{"inputs":[{"name":"cftype"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_get_rule","","",9,{"inputs":[{"name":"cftype"},{"name":"cftyperef"}],"output":{"name":"cftype"}}],[11,"as_CFTypeRef","","",9,{"inputs":[{"name":"cftype"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",9,{"inputs":[{"name":"cftype"},{"name":"cftyperef"}],"output":{"name":"cftype"}}],[11,"type_id","","",9,{"inputs":[{"name":"cftype"}],"output":{"name":"cftypeid"}}],[11,"instance_of","","",9,{"inputs":[{"name":"cftype"}],"output":{"name":"bool"}}],[0,"boolean","core_foundation","A Boolean type.",null,null],[6,"CFBooleanRef","core_foundation::boolean","",null,null],[5,"CFBooleanGetTypeID","","",null,{"inputs":[],"output":{"name":"u64"}}],[7,"kCFBooleanTrue","","",null,null],[7,"kCFBooleanFalse","","",null,null],[3,"CFBoolean","","A Boolean type.",null,null],[11,"drop","","",10,{"inputs":[{"name":"cfboolean"}],"output":null}],[11,"as_concrete_TypeRef","","",10,{"inputs":[{"name":"cfboolean"}],"output":{"name":"cfbooleanref"}}],[11,"wrap_under_get_rule","","",10,{"inputs":[{"name":"cfboolean"},{"name":"cfbooleanref"}],"output":{"name":"cfboolean"}}],[11,"as_CFTypeRef","","",10,{"inputs":[{"name":"cfboolean"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",10,{"inputs":[{"name":"cfboolean"},{"name":"cfbooleanref"}],"output":{"name":"cfboolean"}}],[11,"type_id","","",10,{"inputs":[{"name":"cfboolean"}],"output":{"name":"cftypeid"}}],[11,"true_value","","",10,{"inputs":[{"name":"cfboolean"}],"output":{"name":"cfboolean"}}],[11,"false_value","","",10,{"inputs":[{"name":"cfboolean"}],"output":{"name":"cfboolean"}}],[0,"data","core_foundation","Core Foundation byte buffers.",null,null],[3,"CFData","core_foundation::data","A byte buffer.",null,null],[11,"drop","","",11,{"inputs":[{"name":"cfdata"}],"output":null}],[11,"as_concrete_TypeRef","","",11,{"inputs":[{"name":"cfdata"}],"output":{"name":"cfdataref"}}],[11,"wrap_under_get_rule","","",11,{"inputs":[{"name":"cfdata"},{"name":"cfdataref"}],"output":{"name":"cfdata"}}],[11,"as_CFTypeRef","","",11,{"inputs":[{"name":"cfdata"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",11,{"inputs":[{"name":"cfdata"},{"name":"cfdataref"}],"output":{"name":"cfdata"}}],[11,"type_id","","",11,{"inputs":[{"name":"cfdata"}],"output":{"name":"cftypeid"}}],[11,"from_buffer","","",11,null],[11,"bytes","","Returns a pointer to the underlying bytes in this data. Note that this byte buffer is\nread-only.",11,null],[11,"len","","Returns the length of this byte buffer.",11,{"inputs":[{"name":"cfdata"}],"output":{"name":"cfindex"}}],[11,"deref","","",11,null],[0,"dictionary","core_foundation","Dictionaries of key-value pairs.",null,null],[3,"CFDictionary","core_foundation::dictionary","An immutable dictionary of key-value pairs.",null,null],[11,"drop","","",12,{"inputs":[{"name":"cfdictionary"}],"output":null}],[11,"as_concrete_TypeRef","","",12,{"inputs":[{"name":"cfdictionary"}],"output":{"name":"cfdictionaryref"}}],[11,"wrap_under_get_rule","","",12,{"inputs":[{"name":"cfdictionary"},{"name":"cfdictionaryref"}],"output":{"name":"cfdictionary"}}],[11,"as_CFTypeRef","","",12,{"inputs":[{"name":"cfdictionary"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",12,{"inputs":[{"name":"cfdictionary"},{"name":"cfdictionaryref"}],"output":{"name":"cfdictionary"}}],[11,"type_id","","",12,{"inputs":[{"name":"cfdictionary"}],"output":{"name":"cftypeid"}}],[11,"from_CFType_pairs","","",12,null],[11,"len","","",12,{"inputs":[{"name":"cfdictionary"}],"output":{"name":"usize"}}],[11,"is_empty","","",12,{"inputs":[{"name":"cfdictionary"}],"output":{"name":"bool"}}],[11,"contains_key","","",12,null],[11,"find","","",12,null],[11,"get","","",12,null],[11,"get_CFType","","A convenience function to retrieve `CFType` instances.",12,null],[0,"number","core_foundation","Immutable numbers.",null,null],[3,"CFNumber","core_foundation::number","An immutable numeric value.",null,null],[5,"number","","A convenience function to create CFNumbers.",null,{"inputs":[{"name":"i64"}],"output":{"name":"cfnumber"}}],[11,"drop","","",13,{"inputs":[{"name":"cfnumber"}],"output":null}],[11,"as_concrete_TypeRef","","",13,{"inputs":[{"name":"cfnumber"}],"output":{"name":"cfnumberref"}}],[11,"wrap_under_get_rule","","",13,{"inputs":[{"name":"cfnumber"},{"name":"cfnumberref"}],"output":{"name":"cfnumber"}}],[11,"as_CFTypeRef","","",13,{"inputs":[{"name":"cfnumber"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",13,{"inputs":[{"name":"cfnumber"},{"name":"cfnumberref"}],"output":{"name":"cfnumber"}}],[11,"type_id","","",13,{"inputs":[{"name":"cfnumber"}],"output":{"name":"cftypeid"}}],[11,"from_i32","","",13,{"inputs":[{"name":"cfnumber"},{"name":"i32"}],"output":{"name":"cfnumber"}}],[11,"to_i64","","",13,{"inputs":[{"name":"cfnumber"}],"output":{"name":"option"}}],[11,"to_f64","","",13,{"inputs":[{"name":"cfnumber"}],"output":{"name":"option"}}],[11,"from_i64","","",13,{"inputs":[{"name":"cfnumber"},{"name":"i64"}],"output":{"name":"cfnumber"}}],[11,"from_f64","","",13,{"inputs":[{"name":"cfnumber"},{"name":"f64"}],"output":{"name":"cfnumber"}}],[0,"set","core_foundation","An immutable bag of elements.",null,null],[3,"CFSet","core_foundation::set","An immutable bag of elements.",null,null],[11,"drop","","",14,{"inputs":[{"name":"cfset"}],"output":null}],[11,"as_concrete_TypeRef","","",14,{"inputs":[{"name":"cfset"}],"output":{"name":"cfsetref"}}],[11,"wrap_under_get_rule","","",14,{"inputs":[{"name":"cfset"},{"name":"cfsetref"}],"output":{"name":"cfset"}}],[11,"as_CFTypeRef","","",14,{"inputs":[{"name":"cfset"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",14,{"inputs":[{"name":"cfset"},{"name":"cfsetref"}],"output":{"name":"cfset"}}],[11,"type_id","","",14,{"inputs":[{"name":"cfset"}],"output":{"name":"cftypeid"}}],[11,"from_slice","","Creates a new set from a list of `CFType` instances.",14,null],[0,"string","core_foundation","Immutable strings.",null,null],[3,"CFString","core_foundation::string","An immutable string in one of a variety of encodings.",null,null],[11,"clone","","",15,{"inputs":[{"name":"cfstring"}],"output":{"name":"cfstring"}}],[11,"drop","","",15,{"inputs":[{"name":"cfstring"}],"output":null}],[11,"as_concrete_TypeRef","","",15,{"inputs":[{"name":"cfstring"}],"output":{"name":"cfstringref"}}],[11,"wrap_under_get_rule","","",15,{"inputs":[{"name":"cfstring"},{"name":"cfstringref"}],"output":{"name":"cfstring"}}],[11,"as_CFTypeRef","","",15,{"inputs":[{"name":"cfstring"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",15,{"inputs":[{"name":"cfstring"},{"name":"cfstringref"}],"output":{"name":"cfstring"}}],[11,"type_id","","",15,{"inputs":[{"name":"cfstring"}],"output":{"name":"cftypeid"}}],[11,"from_str","","See also CFString::new for a variant of this which does not return a Result",15,{"inputs":[{"name":"cfstring"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"cfstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"cfstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `CFString` instance from a Rust string.",15,{"inputs":[{"name":"cfstring"},{"name":"str"}],"output":{"name":"cfstring"}}],[11,"from_static_string","","Like `CFString::new`, but references a string that can be used as a backing store\nby virtue of being statically allocated.",15,{"inputs":[{"name":"cfstring"},{"name":"str"}],"output":{"name":"cfstring"}}],[11,"char_len","","Returns the number of characters in the string.",15,{"inputs":[{"name":"cfstring"}],"output":{"name":"cfindex"}}],[0,"url","core_foundation","A URL type for Core Foundation.",null,null],[3,"CFURL","core_foundation::url","",null,null],[11,"drop","","",16,{"inputs":[{"name":"cfurl"}],"output":null}],[11,"as_concrete_TypeRef","","",16,{"inputs":[{"name":"cfurl"}],"output":{"name":"cfurlref"}}],[11,"wrap_under_get_rule","","",16,{"inputs":[{"name":"cfurl"},{"name":"cfurlref"}],"output":{"name":"cfurl"}}],[11,"as_CFTypeRef","","",16,{"inputs":[{"name":"cfurl"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",16,{"inputs":[{"name":"cfurl"},{"name":"cfurlref"}],"output":{"name":"cfurl"}}],[11,"type_id","","",16,{"inputs":[{"name":"cfurl"}],"output":{"name":"cftypeid"}}],[11,"fmt","","",16,{"inputs":[{"name":"cfurl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_file_system_path","","",16,{"inputs":[{"name":"cfurl"},{"name":"cfstring"},{"name":"cfurlpathstyle"},{"name":"bool"}],"output":{"name":"cfurl"}}],[11,"get_string","","",16,{"inputs":[{"name":"cfurl"}],"output":{"name":"cfstring"}}],[0,"bundle","core_foundation","Core Foundation Bundle Type",null,null],[3,"CFBundle","core_foundation::bundle","A Bundle type.",null,null],[11,"drop","","",17,{"inputs":[{"name":"cfbundle"}],"output":null}],[11,"as_concrete_TypeRef","","",17,{"inputs":[{"name":"cfbundle"}],"output":{"name":"cfbundleref"}}],[11,"wrap_under_get_rule","","",17,{"inputs":[{"name":"cfbundle"},{"name":"cfbundleref"}],"output":{"name":"cfbundle"}}],[11,"as_CFTypeRef","","",17,{"inputs":[{"name":"cfbundle"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",17,{"inputs":[{"name":"cfbundle"},{"name":"cfbundleref"}],"output":{"name":"cfbundle"}}],[11,"type_id","","",17,{"inputs":[{"name":"cfbundle"}],"output":{"name":"cftypeid"}}],[0,"runloop","core_foundation","",null,null],[3,"CFRunLoop","core_foundation::runloop","",null,null],[3,"CFRunLoopTimer","","",null,null],[11,"drop","","",18,{"inputs":[{"name":"cfrunloop"}],"output":null}],[11,"as_concrete_TypeRef","","",18,{"inputs":[{"name":"cfrunloop"}],"output":{"name":"cfrunloopref"}}],[11,"wrap_under_get_rule","","",18,{"inputs":[{"name":"cfrunloop"},{"name":"cfrunloopref"}],"output":{"name":"cfrunloop"}}],[11,"as_CFTypeRef","","",18,{"inputs":[{"name":"cfrunloop"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",18,{"inputs":[{"name":"cfrunloop"},{"name":"cfrunloopref"}],"output":{"name":"cfrunloop"}}],[11,"type_id","","",18,{"inputs":[{"name":"cfrunloop"}],"output":{"name":"cftypeid"}}],[11,"get_current","","",18,{"inputs":[{"name":"cfrunloop"}],"output":{"name":"cfrunloop"}}],[11,"get_main","","",18,{"inputs":[{"name":"cfrunloop"}],"output":{"name":"cfrunloop"}}],[11,"run_current","","",18,{"inputs":[{"name":"cfrunloop"}],"output":null}],[11,"stop","","",18,{"inputs":[{"name":"cfrunloop"}],"output":null}],[11,"current_mode","","",18,{"inputs":[{"name":"cfrunloop"}],"output":{"name":"option"}}],[11,"contains_timer","","",18,{"inputs":[{"name":"cfrunloop"},{"name":"cfrunlooptimer"},{"name":"cfstringref"}],"output":{"name":"bool"}}],[11,"add_timer","","",18,{"inputs":[{"name":"cfrunloop"},{"name":"cfrunlooptimer"},{"name":"cfstringref"}],"output":null}],[11,"drop","","",19,{"inputs":[{"name":"cfrunlooptimer"}],"output":null}],[11,"as_concrete_TypeRef","","",19,{"inputs":[{"name":"cfrunlooptimer"}],"output":{"name":"cfrunlooptimerref"}}],[11,"wrap_under_get_rule","","",19,{"inputs":[{"name":"cfrunlooptimer"},{"name":"cfrunlooptimerref"}],"output":{"name":"cfrunlooptimer"}}],[11,"as_CFTypeRef","","",19,{"inputs":[{"name":"cfrunlooptimer"}],"output":{"name":"cftyperef"}}],[11,"wrap_under_create_rule","","",19,{"inputs":[{"name":"cfrunlooptimer"},{"name":"cfrunlooptimerref"}],"output":{"name":"cfrunlooptimer"}}],[11,"type_id","","",19,{"inputs":[{"name":"cfrunlooptimer"}],"output":{"name":"cftypeid"}}],[11,"new","","",19,null],[14,"impl_TCFType!","core_foundation","",null,null]],"paths":[[3,"CFArrayCallBacks"],[3,"CFRange"],[3,"CFDictionaryKeyCallBacks"],[3,"CFDictionaryValueCallBacks"],[3,"CFSetCallBacks"],[3,"CFArray"],[3,"CFArrayIterator"],[8,"CFIndexConvertible"],[8,"TCFType"],[3,"CFType"],[3,"CFBoolean"],[3,"CFData"],[3,"CFDictionary"],[3,"CFNumber"],[3,"CFSet"],[3,"CFString"],[3,"CFURL"],[3,"CFBundle"],[3,"CFRunLoop"],[3,"CFRunLoopTimer"]]};
searchIndex['shared_library'] = {"items":[[4,"LoadingError","shared_library","Error that can happen while loading the shared library.",null,null],[13,"LibraryNotFound","","",0,null],[12,"descr","shared_library::LoadingError","",0,null],[13,"SymbolNotFound","shared_library","One of the symbols could not be found in the library.",0,null],[12,"symbol","shared_library::LoadingError","The symbol.",0,null],[0,"dynamic_library","shared_library","Dynamic library facilities.",null,null],[3,"DynamicLibrary","shared_library::dynamic_library","",null,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",1,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",2,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",3,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",4,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",5,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",6,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",7,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",8,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","shared_library::dynamic_library","Returns true if the boxed type is the same as `T`",9,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",9,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",10,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",11,null],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",11,null],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",11,null],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",11,null],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",11,null],[11,"rem","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",11,null],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",11,null],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",11,null],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",11,null],[11,"clone","std::thread::local","",12,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",12,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",13,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",13,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",14,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",14,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",15,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",15,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",16,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",16,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",16,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",17,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",17,null],[11,"get","","",17,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",18,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",18,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",18,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",18,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",19,null],[11,"name","","Gets the thread's name.",19,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",20,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",20,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",21,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",22,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",23,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",23,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",23,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",22,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",22,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",22,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",22,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",22,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",22,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",22,null],[11,"next","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",25,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",25,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",24,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",24,null],[11,"take","","Removes this bucket's key and value from the hashtable.",24,null],[11,"replace","","",24,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",24,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",24,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",24,null],[11,"expect_full","","",26,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",27,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",27,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",28,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",29,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",29,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",31,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"len","","",31,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",32,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"len","","",32,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",33,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"len","","",33,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",34,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"len","","",34,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",34,null],[11,"clone","","",28,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",28,null],[11,"clone","std::collections::hash::map","",35,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",36,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",36,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",36,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",36,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",36,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",36,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",36,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",36,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",36,null],[11,"get","","Returns a reference to the value corresponding to the key.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",36,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",39,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",36,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",41,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"len","","",42,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",43,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",43,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",44,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",44,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",45,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",36,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",36,null],[11,"extend","","",36,null],[11,"clone","","",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"build_hasher","","",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",46,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",36,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",36,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",47,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",47,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",47,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",47,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",47,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",47,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",47,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",47,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",47,null],[11,"contains","","Returns `true` if the set contains a value.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",47,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",47,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",47,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",47,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",47,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",47,null],[11,"extend","","",47,null],[11,"default","","",47,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",47,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"len","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"len","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",50,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"len","","",50,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",51,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",51,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",52,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",53,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",54,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"hasher","std::collections::hash::state","",55,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",55,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",55,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",56,null],[11,"default","","",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",56,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",56,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",56,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",56,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",56,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",56,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",56,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",56,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",56,null],[11,"drop","","",57,null],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",60,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",56,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",61,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",56,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",56,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"clone","collections::linked_list","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",63,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",64,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",64,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",65,null],[11,"iter","","Provides a forward iterator.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",65,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",65,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",65,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",65,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",65,null],[11,"next","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",66,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",66,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",65,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",65,null],[11,"extend","","",65,null],[11,"eq","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",65,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",65,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",65,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"clone","collections::vec_deque","",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",67,null],[11,"default","","",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",67,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",67,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",67,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",67,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",67,null],[11,"iter","","Returns a front-to-back iterator.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",67,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",67,null],[11,"len","","Returns the number of elements in the `VecDeque`.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",67,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",67,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",67,null],[11,"push_back","","Appends an element to the back of a buffer",67,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",67,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",67,null],[11,"retain","","Retains only the elements specified by the predicate.",67,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",67,null],[11,"clone","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",71,null],[11,"next","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",67,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",67,null],[11,"index","","",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",67,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",67,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",67,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",67,null],[11,"extend","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",72,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",72,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",72,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",72,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",72,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",72,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",72,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",73,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next","","",74,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"clone","","",75,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",75,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",76,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"fmt","","",77,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",77,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",78,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"len","","",78,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",79,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"len","","",79,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",80,null],[11,"cmp","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",82,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",83,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",80,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",80,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",80,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",80,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",80,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",80,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",80,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",80,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",80,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",81,null],[11,"as_ptr","","Returns the inner pointer to this C string.",81,null],[11,"to_bytes","","Converts this C string to a byte slice.",81,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",81,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",81,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",81,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",80,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",61,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",81,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",82,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",82,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",84,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",83,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",81,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",80,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",80,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",81,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",80,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",85,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",85,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",85,null],[11,"from","","",85,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",85,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",85,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",86,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",86,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",85,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"eq","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",86,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",86,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",86,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",89,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",90,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",91,null],[11,"eq","","",91,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",92,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",92,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",92,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",92,null],[11,"read_to_end","","",92,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",92,null],[11,"flush","","",92,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",92,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",89,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",89,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",89,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",88,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",90,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",90,null],[11,"is_dir","","Test whether this file type represents a directory.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",93,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",94,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",95,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",96,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",96,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",96,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",97,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",97,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",97,null],[11,"fill_buf","","",97,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",97,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",99,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",99,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",99,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",99,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",98,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",98,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",84,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",98,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",98,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",100,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",100,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",100,null],[11,"flush","","",100,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",101,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",101,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",101,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",101,null],[11,"seek","","",101,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",101,null],[11,"fill_buf","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",101,null],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",101,null],[11,"flush","","",101,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",84,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",103,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",84,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",84,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",84,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",84,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",104,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",84,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",84,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",2,null],[11,"read_to_end","","",2,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",2,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",2,null],[11,"write_fmt","","",2,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",2,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",2,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",2,null],[11,"read_until","","",2,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",2,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",61,null],[11,"write_all","","",61,null],[11,"flush","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",105,null],[11,"get","","",105,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",106,null],[11,"fill_buf","","",106,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",106,null],[11,"read","","",107,null],[11,"write","","",108,null],[11,"flush","","",108,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",109,null],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",111,null],[11,"flush","","",111,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",112,null],[11,"flush","","",112,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",112,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",113,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",113,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",113,null],[11,"read_to_end","","",113,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",113,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",113,null],[11,"read","","",114,null],[11,"read_to_end","","",114,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",114,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",114,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",115,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",115,null],[11,"write_fmt","","",115,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",116,null],[11,"flush","","",116,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",117,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",117,null],[11,"flush","","",117,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",117,null],[11,"write_fmt","","",117,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",119,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",119,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",121,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",122,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",122,null],[11,"fill_buf","","",122,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",122,null],[11,"read","","",123,null],[11,"next","","",124,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",125,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",125,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",125,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",125,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",127,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"clone","","",130,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",130,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",131,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",131,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",129,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[11,"partial_cmp","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",132,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",132,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",132,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",132,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"partial_cmp","","",132,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",132,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",133,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"eq","","",133,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",133,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",133,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",133,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",134,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",134,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",134,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",135,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",135,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",135,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",135,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",135,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",135,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",134,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"hash","","",135,null],[11,"to_socket_addrs","","",133,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",134,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",135,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",136,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",136,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",136,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",136,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",136,null],[11,"read_to_end","","",136,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",136,null],[11,"flush","","",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",137,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",137,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",137,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",137,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",137,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",138,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",137,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",139,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",139,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",139,null],[11,"local_addr","","Returns the socket address that this socket was created from.",139,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",139,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",139,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",139,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",139,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",139,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",129,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",131,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",132,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",134,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",135,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",140,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",140,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",140,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",141,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",142,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",143,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",92,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",92,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",92,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",137,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",139,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",136,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",137,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",139,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",136,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",137,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",139,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",85,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",86,null],[11,"as_bytes","","",86,null],[11,"mode","std::fs","",90,{"inputs":[{"name":"permissions"}],"output":{"name":"u16"}}],[11,"set_mode","","",90,null],[11,"from_mode","","",90,{"inputs":[{"name":"permissions"},{"name":"u16"}],"output":{"name":"permissions"}}],[11,"mode","","",89,{"inputs":[{"name":"openoptions"},{"name":"u16"}],"output":{"name":"openoptions"}}],[11,"dev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"ino","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"nlink","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"uid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"size","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"blocks","","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",91,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",94,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",96,{"inputs":[{"name":"dirbuilder"},{"name":"u16"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",144,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",144,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",144,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",145,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",146,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",147,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",148,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",149,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",147,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",148,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",149,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",20,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",20,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",150,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",150,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",150,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",151,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"fmt","","",151,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",151,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",153,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",153,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",153,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",153,null],[11,"fmt","","",154,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"cmp","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",154,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",154,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",155,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",155,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",155,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",155,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",155,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",156,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",156,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",155,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",155,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",155,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",157,null],[11,"pop","","Truncate `self` to `self.parent()`.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",157,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",157,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",157,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",157,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",157,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",157,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",158,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",158,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",158,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",158,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",158,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",158,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",158,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",158,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",158,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",158,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",158,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",158,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",158,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",158,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",158,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",158,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",158,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",158,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",158,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",158,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",158,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",158,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",158,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",158,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",158,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",158,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",158,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",158,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",158,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",158,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",158,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",159,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",159,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",158,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",157,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"partial_cmp","","",157,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",157,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",160,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",160,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",158,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",158,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",158,null],[11,"partial_cmp","","",158,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",158,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",158,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",86,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",85,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",157,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",157,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",159,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",158,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",159,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",157,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",160,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",147,null],[11,"flush","","",147,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",148,null],[11,"read","","",149,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",144,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",144,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",144,null],[11,"env","","Inserts or updates an environment variable mapping.",144,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",144,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",144,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",144,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",144,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",144,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",144,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",144,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",144,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",144,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",144,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",162,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",146,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",146,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",146,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",145,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",145,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",145,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",145,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",145,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",163,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",163,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",163,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",163,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",164,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",164,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",164,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",164,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",165,null],[11,"new","std::sync::mpsc::oneshot","",166,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",166,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",166,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",166,null],[11,"drop_port","","",166,null],[11,"can_recv","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",166,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",166,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",166,null],[11,"eq","std::sync::mpsc::select","",167,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",168,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",168,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",168,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",169,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",169,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",169,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",169,null],[11,"drop","","",168,null],[11,"drop","","",169,null],[11,"next","","",170,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",171,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",171,null],[11,"send","","",171,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",171,null],[11,"drop_chan","","",171,null],[11,"drop_port","","",171,null],[11,"can_recv","","",171,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",171,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",171,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",171,null],[11,"new","std::sync::mpsc::stream","",172,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",172,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",172,null],[11,"drop_port","","",172,null],[11,"can_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",172,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",172,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",172,null],[11,"fmt","std::sync::mpsc::sync","",173,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",174,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",174,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",174,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",174,null],[11,"drop_chan","","",174,null],[11,"drop_port","","",174,null],[11,"can_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",174,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",174,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",175,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",175,null],[11,"pop","","Pops some data from this queue.",175,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",175,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",176,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",176,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",176,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",176,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",176,null],[11,"clone","std::sync::mpsc","",177,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",177,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",178,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",179,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",180,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",181,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",181,null],[11,"send","","Sends a value on this synchronous channel.",182,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",182,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",182,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",183,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",183,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",183,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",185,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",183,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",183,null],[11,"fmt","","",177,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",177,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",177,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",180,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",180,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",180,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",178,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",178,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",179,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",179,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",179,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",186,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",186,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",187,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",188,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",188,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",188,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",188,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",189,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",189,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",189,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",189,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",189,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",189,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",189,null],[11,"drop","","",189,null],[11,"new","","Creates a new condition variable",190,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",190,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",190,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",190,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",190,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",190,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",190,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",190,null],[11,"drop","std::sync::mutex","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",191,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",191,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",191,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",191,null],[11,"deref","","",192,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",192,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",192,null],[11,"new","std::sync::once","Creates a new `Once` value.",193,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",193,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",194,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",194,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",195,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",195,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",195,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",195,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",195,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",195,null],[11,"deref","","",196,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",197,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",197,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",196,null],[11,"drop","","",197,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",198,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",198,null],[11,"release","","Release a resource from this semaphore.",198,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",198,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",199,null],[11,"default","core::sync::atomic","",200,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",201,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",202,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",203,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",204,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",200,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",200,null],[11,"swap","","Stores a value into the bool, returning the old value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",200,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",201,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",201,null],[11,"swap","","Stores a value into the isize, returning the old value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",201,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",202,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",202,null],[11,"swap","","Stores a value into the usize, returning the old value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",202,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",203,null],[11,"load","","Loads a value from the pointer.",203,null],[11,"store","","Stores a value into the pointer.",203,null],[11,"swap","","Stores a value into the pointer, returning the old value.",203,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",203,null],[11,"fmt","","",202,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",205,null],[11,"fmt","","",205,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",205,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",205,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",205,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",205,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",205,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",205,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",205,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",205,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",205,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",208,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",206,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",206,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",206,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",206,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",206,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",206,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",207,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",207,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",207,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",207,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",207,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",208,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",208,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",208,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",209,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",209,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",209,null],[11,"wait","","Waits for a signal on the specified mutex.",209,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",209,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",209,null],[11,"clone","std::sys_common::dwarf::eh","",210,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",211,null],[11,"read","","",211,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",211,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",211,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",212,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",213,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",214,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",214,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",214,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",214,null],[11,"destroy","","Deallocates all resources associated with this mutex.",214,null],[11,"next","std::sys_common::net","",215,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",215,null],[11,"connect","","",216,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",216,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",216,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",216,null],[11,"write","","",216,null],[11,"peer_addr","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",216,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",216,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",217,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",217,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",217,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",217,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",217,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",217,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",218,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",218,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",218,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",218,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",218,null],[11,"send_to","","",218,null],[11,"duplicate","","",218,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",218,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",218,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",218,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",218,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",219,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",219,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",219,null],[11,"get","","",219,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",220,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",220,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",220,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",220,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",220,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",220,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",221,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",221,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",221,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",221,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",222,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",222,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",222,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",222,null],[11,"fmt","","",222,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",223,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",223,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",224,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",224,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",224,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",224,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",224,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",224,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",224,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",224,null],[11,"new","std::sys_common::thread_local","",225,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",225,null],[11,"set","","Sets this TLS key to a new value.",225,null],[11,"destroy","","Deallocates this OS TLS key.",225,null],[11,"new","","Creates a new managed OS TLS key.",226,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",226,null],[11,"set","","See StaticKey::set",226,null],[11,"drop","","",226,null],[11,"clone","std::sys_common::wtf8","",227,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",227,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",227,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",227,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",227,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",227,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",227,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",227,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",229,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",229,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",228,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",228,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",228,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",228,null],[11,"as_slice","","",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",228,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",228,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",228,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",228,null],[11,"push","","Append a code point at the end of the string.",228,null],[11,"truncate","","Shortens a string to the specified length.",228,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",228,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",228,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",228,null],[11,"partial_cmp","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",229,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",229,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",229,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",229,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",229,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",230,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",230,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"clone","","",231,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",231,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"hash","","",227,null],[11,"hash","","",228,null],[11,"hash","","",229,null],[11,"is_ascii","","",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",229,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",229,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",229,null],[11,"make_ascii_lowercase","","",229,null],[11,"new","std::sys::condvar","",232,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",232,null],[11,"notify_all","","",232,null],[11,"wait","","",232,null],[11,"wait_timeout","","",232,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",232,null],[11,"new","std::sys::fd","",233,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",233,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",233,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",233,null],[11,"write","","",233,null],[11,"set_cloexec","","",233,null],[11,"drop","","",233,null],[11,"clone","std::sys::fs","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",235,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",236,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",237,null],[11,"eq","","",237,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",237,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",234,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",88,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",236,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",236,null],[11,"mode","","",236,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u16"}}],[11,"is_dir","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",237,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",237,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",238,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",239,null],[11,"path","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",240,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",235,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",235,null],[11,"write","","",235,null],[11,"append","","",235,null],[11,"truncate","","",235,null],[11,"create","","",235,null],[11,"mode","","",235,null],[11,"open","","",241,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",241,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",241,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",241,null],[11,"write","","",241,null],[11,"flush","","",241,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",241,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",241,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",241,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",242,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",242,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",242,null],[11,"fmt","","",241,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",243,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",243,null],[11,"unlock","","",243,null],[11,"try_lock","","",243,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",243,null],[11,"uninitialized","","",244,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",244,null],[11,"lock","","",244,null],[11,"try_lock","","",244,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",244,null],[11,"destroy","","",244,null],[11,"new","std::sys::net","",245,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",245,null],[11,"duplicate","","",245,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",245,null],[11,"set_timeout","","",245,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",245,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",245,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",246,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",247,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",248,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",249,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",250,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",251,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",252,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",253,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",254,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",255,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",256,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",257,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",258,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",259,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",260,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",261,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",262,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",263,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",264,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",265,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",266,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",267,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",268,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",269,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",270,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",271,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",272,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",273,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",274,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",275,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",276,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",277,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",278,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",279,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",280,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",281,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",282,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",283,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",284,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",285,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",286,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",287,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",288,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",289,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",290,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",291,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",292,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",293,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",293,null],[11,"fmt","","",294,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",294,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",294,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",295,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[11,"len","","",295,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",296,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"hash","std::sys::os_str","",297,null],[11,"clone","","",297,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",298,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",297,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",297,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",297,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",297,null],[11,"from_str","","",298,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",298,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",298,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",298,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",299,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",299,null],[11,"write","","",299,null],[11,"raw","","",299,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",299,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",299,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",300,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",300,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",300,null],[11,"args","","",300,null],[11,"env","","",300,null],[11,"env_remove","","",300,null],[11,"env_clear","","",300,null],[11,"cwd","","",300,null],[11,"fmt","","",301,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",301,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",301,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",301,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",301,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",301,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",301,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",301,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",302,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",302,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",302,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",302,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",302,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",303,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",303,null],[11,"try_read","","",303,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",303,null],[11,"try_write","","",303,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",303,null],[11,"write_unlock","","",303,null],[11,"destroy","","",303,null],[11,"new","std::sys::stack_overflow","",304,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",304,null],[11,"new","std::sys::thread","",305,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",305,null],[11,"set_name","","",305,null],[11,"sleep","","",305,null],[11,"join","","",305,null],[11,"id","","",305,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",305,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",305,null],[11,"fmt","std::sys::time::inner","",306,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",306,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",307,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",306,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",306,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",306,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",306,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",307,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",307,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",307,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",307,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",307,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",307,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",307,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",307,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",308,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",308,null],[11,"new","","",309,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",309,null],[11,"new","","",310,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",310,null],[11,"write","","",310,null],[11,"flush","","",310,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",311,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",312,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",312,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",313,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",313,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",314,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",314,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",314,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",314,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",315,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",315,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",315,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",315,null],[11,"clone","std::rand","",316,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",316,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",316,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",316,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",316,null],[11,"from_seed","","",316,null],[11,"reseed","","",317,null],[11,"clone","","",318,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",318,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",318,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",318,null],[11,"fmt","shared_library::dynamic_library","",319,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",319,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",319,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",319,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",319,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",319,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",319,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",320,null],[11,"fmt","","",320,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",320,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",320,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",320,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",320,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",321,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",321,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",321,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",321,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",321,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",321,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",321,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",322,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",322,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",322,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",322,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",323,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",323,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",323,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",323,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",323,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",323,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",323,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",323,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",323,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",324,null],[11,"clone","","",324,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",325,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",325,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",325,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",325,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",326,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",326,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",327,null],[11,"deref","","",326,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",326,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",328,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",328,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",328,null],[11,"fmt","core::cmp","",329,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",329,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",329,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",329,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",329,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",329,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",329,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",330,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",330,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",330,null],[11,"finish","","",330,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",330,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",330,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",331,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",331,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",331,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",332,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",332,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"next_back","","",332,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",333,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",333,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"next_back","","",333,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",334,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",334,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",334,null],[11,"clone","","",335,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",336,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",335,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",335,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",335,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",335,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",335,null],[11,"next_back","","",335,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",337,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",337,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next_back","","",337,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",338,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",338,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"next_back","","",338,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",339,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",339,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"next_back","","",339,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",340,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",340,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"next_back","","",340,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",341,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",341,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"nth","","",341,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",341,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",341,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",342,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",342,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",342,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",342,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",342,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",342,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",342,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",343,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",343,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"clone","","",344,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",344,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"clone","","",345,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",345,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",345,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",345,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",345,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"clone","","",346,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",346,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",346,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"clone","","",347,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",347,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"clone","","",348,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",348,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"next_back","","",348,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",349,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",349,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",349,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",349,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",349,null],[11,"next_back","","",349,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",350,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",350,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next_back","","",350,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",351,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",352,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",353,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",351,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"clone","","",354,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",354,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"next_back","","",354,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",351,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",351,null],[11,"next","core::ops","",353,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next_back","","",353,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",352,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",355,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",355,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"next_back","","",355,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",356,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"next_back","","",356,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",356,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",356,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",356,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",357,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",357,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"next_back","","",357,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",357,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",358,null],[11,"eq","","",358,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",358,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",358,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",358,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",358,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",359,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",359,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",353,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",353,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",353,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",353,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",352,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",352,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",352,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",352,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",360,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",360,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",360,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",360,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",361,null],[11,"get","","Dereferences the content.",361,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",361,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",361,null],[11,"fmt","","",361,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",362,null],[11,"clone","","",362,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",362,null],[11,"fmt","","",362,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",363,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",364,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",365,null],[11,"fmt","","",365,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",365,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",365,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",365,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",365,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",365,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",365,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",365,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",365,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",365,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",365,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",365,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",365,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",365,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",365,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",365,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",365,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",365,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",365,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next_back","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",367,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",368,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",365,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",369,null],[11,"fmt","","",369,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",369,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",369,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",369,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",369,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",369,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",369,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",369,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",369,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",369,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",369,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",369,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",369,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",369,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",369,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",369,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",369,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",369,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",369,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",369,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",369,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",369,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",369,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",369,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",369,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",370,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",370,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",371,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",371,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",372,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next_back","","",372,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",373,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",373,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"next_back","","",373,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",369,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",374,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",375,null],[11,"make_place","","",375,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",375,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",2,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",374,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",375,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",2,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",2,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",2,null],[11,"default","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",2,null],[11,"clone","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"from","","",2,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",2,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",2,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",2,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",2,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",376,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",376,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",376,null],[11,"clone","","Makes a clone of the `Rc<T>`.",376,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",376,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",376,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",376,null],[11,"fmt","","",376,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",376,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",376,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",377,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",377,null],[11,"clone","","Makes a clone of the `Weak<T>`.",377,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",377,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",377,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",376,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",376,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",159,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",159,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",159,null],[11,"into_owned","","Extracts the owned data.",159,null],[11,"deref","","",159,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",159,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",159,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",159,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",159,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"into_cow","","",159,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",159,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",378,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",379,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",380,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",380,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",380,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",381,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",382,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",61,null],[11,"borrow_mut","","",61,null],[11,"clone","collections::str","",383,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",383,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"borrow","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",384,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",384,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",384,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",384,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",385,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",386,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",385,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",385,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",385,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",387,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",388,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",389,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",390,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",390,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",391,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",391,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",392,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",392,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",390,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",390,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",390,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",390,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",390,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",393,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",393,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",394,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",394,null],[11,"matching","","",394,null],[11,"use_early_reject","","",395,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",395,null],[11,"matching","","",395,null],[11,"cmp","collections::string","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",87,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",87,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",87,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",87,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",87,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",87,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",87,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",87,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",87,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",87,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",87,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",87,null],[11,"push","","Appends the given `char` to the end of this `String`.",87,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",87,null],[11,"truncate","","Shortens this `String` to the specified length.",87,null],[11,"pop","","Removes the last character from the string buffer and returns it.",87,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",87,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",87,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",87,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",87,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",87,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",87,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",87,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",7,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",7,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",7,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",87,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",87,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"extend","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",159,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",87,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",87,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",87,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"add","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",87,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",87,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",396,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",396,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",396,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",87,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",87,null],[11,"from","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",159,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",159,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",87,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",87,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",87,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",87,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",397,null],[11,"next","","",397,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",397,null],[11,"next_back","","",397,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",61,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",61,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",61,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",61,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",61,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",61,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",61,null],[11,"as_slice","","Extracts a slice containing the entire vector.",61,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",61,null],[11,"set_len","","Sets the length of a vector.",61,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",61,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",61,null],[11,"push","","Appends an element to the back of a collection.",61,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",61,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",61,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",61,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",61,null],[11,"len","","Returns the number of elements in the vector.",61,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",61,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",61,null],[11,"push_all","","",61,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",61,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",61,null],[11,"clone","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",61,null],[11,"hash","","",61,null],[11,"index","","",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",61,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",61,null],[11,"index","","",61,null],[11,"index","","",61,null],[11,"index","","",61,null],[11,"index_mut","","",61,null],[11,"index_mut","","",61,null],[11,"index_mut","","",61,null],[11,"index_mut","","",61,null],[11,"deref","","",61,null],[11,"deref_mut","","",61,null],[11,"from_iter","","",61,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",61,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",61,null],[11,"extend","","",61,null],[11,"eq","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","collections::borrow","",159,null],[11,"ne","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"eq","","",159,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"partial_cmp","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",61,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",61,null],[11,"default","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",61,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",61,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",61,null],[11,"as_mut","","",61,null],[11,"from","","",61,null],[11,"from","","",61,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",159,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",61,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",398,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"count","","",398,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",398,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",398,null],[11,"next","","",399,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",399,null],[11,"next_back","","",399,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",399,null],[11,"next","rustc_unicode::char","",400,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",401,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",402,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",403,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",403,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"drop","shared_library::dynamic_library","",404,{"inputs":[{"name":"dynamiclibrary"}],"output":null}],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",404,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",404,{"inputs":[{"name":"dynamiclibrary"},{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",404,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",404,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",404,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Access the value at the symbol of the dynamic library",404,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","shared_library","",0,{"inputs":[{"name":"loadingerror"}],"output":{"name":"loadingerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"loadingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"shared_library!","","",null,null]],"paths":[[4,"LoadingError"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"DynamicLibrary"]]};
searchIndex['gleam'] = {"items":[[0,"gl","gleam","",null,null],[3,"FnPtr","gleam::gl","",null,null],[4,"__GLsync","","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[5,"ActiveTexture","","Fallbacks: ActiveTextureARB",null,null],[5,"AttachShader","","Fallbacks: AttachObjectARB",null,null],[5,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",null,null],[5,"BeginQuery","","Fallbacks: BeginQueryARB",null,null],[5,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",null,null],[5,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",null,null],[5,"BindBuffer","","Fallbacks: BindBufferARB",null,null],[5,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",null,null],[5,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",null,null],[5,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",null,null],[5,"BindFragDataLocationIndexed","","",null,null],[5,"BindFramebuffer","","",null,null],[5,"BindRenderbuffer","","",null,null],[5,"BindSampler","","",null,null],[5,"BindTexture","","Fallbacks: BindTextureEXT",null,null],[5,"BindVertexArray","","Fallbacks: BindVertexArrayOES",null,null],[5,"BlendColor","","Fallbacks: BlendColorEXT",null,null],[5,"BlendEquation","","Fallbacks: BlendEquationEXT",null,null],[5,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",null,null],[5,"BlendFunc","","",null,null],[5,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",null,null],[5,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",null,null],[5,"BufferData","","Fallbacks: BufferDataARB",null,null],[5,"BufferSubData","","Fallbacks: BufferSubDataARB",null,null],[5,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glenum"}}],[5,"ClampColor","","Fallbacks: ClampColorARB",null,null],[5,"Clear","","",null,null],[5,"ClearBufferfi","","",null,null],[5,"ClearBufferfv","","",null,null],[5,"ClearBufferiv","","",null,null],[5,"ClearBufferuiv","","",null,null],[5,"ClearColor","","",null,null],[5,"ClearDepth","","",null,null],[5,"ClearStencil","","",null,null],[5,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",null,{"inputs":[{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":{"name":"glenum"}}],[5,"ColorMask","","",null,null],[5,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",null,null],[5,"ColorP3ui","","",null,null],[5,"ColorP3uiv","","",null,null],[5,"ColorP4ui","","",null,null],[5,"ColorP4uiv","","",null,null],[5,"CompileShader","","Fallbacks: CompileShaderARB",null,null],[5,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",null,null],[5,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",null,null],[5,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB, CompressedTexImage3DOES",null,null],[5,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",null,null],[5,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",null,null],[5,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB, CompressedTexSubImage3DOES",null,null],[5,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",null,null],[5,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",null,null],[5,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",null,null],[5,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",null,null],[5,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",null,null],[5,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT, CopyTexSubImage3DOES",null,null],[5,"CreateProgram","","Fallbacks: CreateProgramObjectARB",null,{"inputs":[],"output":{"name":"gluint"}}],[5,"CreateShader","","Fallbacks: CreateShaderObjectARB",null,{"inputs":[{"name":"glenum"}],"output":{"name":"gluint"}}],[5,"CullFace","","",null,null],[5,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",null,null],[5,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",null,null],[5,"DeleteProgram","","",null,null],[5,"DeleteQueries","","Fallbacks: DeleteQueriesARB",null,null],[5,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",null,null],[5,"DeleteSamplers","","",null,null],[5,"DeleteShader","","",null,null],[5,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",null,null],[5,"DeleteTextures","","",null,null],[5,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",null,null],[5,"DepthFunc","","",null,null],[5,"DepthMask","","",null,null],[5,"DepthRange","","",null,null],[5,"DetachShader","","Fallbacks: DetachObjectARB",null,null],[5,"Disable","","",null,null],[5,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",null,null],[5,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",null,null],[5,"DrawArrays","","Fallbacks: DrawArraysEXT",null,null],[5,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",null,null],[5,"DrawBuffer","","",null,null],[5,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",null,null],[5,"DrawElements","","",null,null],[5,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",null,null],[5,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",null,null],[5,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",null,null],[5,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",null,null],[5,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",null,null],[5,"Enable","","",null,null],[5,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",null,null],[5,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",null,null],[5,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",null,null],[5,"EndQuery","","Fallbacks: EndQueryARB",null,null],[5,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",null,null],[5,"FenceSync","","Fallbacks: FenceSyncAPPLE",null,{"inputs":[{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[5,"Finish","","",null,null],[5,"Flush","","",null,null],[5,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",null,null],[5,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",null,null],[5,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",null,null],[5,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",null,null],[5,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",null,null],[5,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT, FramebufferTexture3DOES",null,null],[5,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",null,null],[5,"FrontFace","","",null,null],[5,"GenBuffers","","Fallbacks: GenBuffersARB",null,null],[5,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",null,null],[5,"GenQueries","","Fallbacks: GenQueriesARB",null,null],[5,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",null,null],[5,"GenSamplers","","",null,null],[5,"GenTextures","","",null,null],[5,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",null,null],[5,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",null,null],[5,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",null,null],[5,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",null,null],[5,"GetActiveUniformBlockName","","",null,null],[5,"GetActiveUniformBlockiv","","",null,null],[5,"GetActiveUniformName","","",null,null],[5,"GetActiveUniformsiv","","",null,null],[5,"GetAttachedShaders","","",null,null],[5,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",null,null],[5,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",null,null],[5,"GetBooleanv","","",null,null],[5,"GetBufferParameteri64v","","",null,null],[5,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",null,null],[5,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",null,null],[5,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",null,null],[5,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",null,null],[5,"GetDoublev","","",null,null],[5,"GetError","","",null,{"inputs":[],"output":{"name":"glenum"}}],[5,"GetFloatv","","",null,null],[5,"GetFragDataIndex","","",null,null],[5,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",null,null],[5,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",null,null],[5,"GetInteger64i_v","","",null,null],[5,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",null,null],[5,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",null,null],[5,"GetIntegerv","","",null,null],[5,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",null,null],[5,"GetProgramInfoLog","","",null,null],[5,"GetProgramiv","","",null,null],[5,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",null,null],[5,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",null,null],[5,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",null,null],[5,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",null,null],[5,"GetQueryiv","","Fallbacks: GetQueryivARB",null,null],[5,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",null,null],[5,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",null,null],[5,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",null,null],[5,"GetSamplerParameterfv","","",null,null],[5,"GetSamplerParameteriv","","",null,null],[5,"GetShaderInfoLog","","",null,null],[5,"GetShaderSource","","Fallbacks: GetShaderSourceARB",null,null],[5,"GetShaderiv","","",null,null],[5,"GetString","","",null,null],[5,"GetStringi","","",null,null],[5,"GetSynciv","","Fallbacks: GetSyncivAPPLE",null,null],[5,"GetTexImage","","",null,null],[5,"GetTexLevelParameterfv","","",null,null],[5,"GetTexLevelParameteriv","","",null,null],[5,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",null,null],[5,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",null,null],[5,"GetTexParameterfv","","",null,null],[5,"GetTexParameteriv","","",null,null],[5,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",null,null],[5,"GetUniformBlockIndex","","",null,null],[5,"GetUniformIndices","","",null,null],[5,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",null,null],[5,"GetUniformfv","","Fallbacks: GetUniformfvARB",null,null],[5,"GetUniformiv","","Fallbacks: GetUniformivARB",null,null],[5,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",null,null],[5,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",null,null],[5,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",null,null],[5,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",null,null],[5,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",null,null],[5,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",null,null],[5,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",null,null],[5,"Hint","","",null,null],[5,"IsBuffer","","Fallbacks: IsBufferARB",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsEnabled","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsProgram","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsQuery","","Fallbacks: IsQueryARB",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsSampler","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsShader","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsSync","","Fallbacks: IsSyncAPPLE",null,{"inputs":[{"name":"glsync"}],"output":{"name":"glboolean"}}],[5,"IsTexture","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",null,{"inputs":[{"name":"gluint"}],"output":{"name":"glboolean"}}],[5,"LineWidth","","",null,null],[5,"LinkProgram","","Fallbacks: LinkProgramARB",null,null],[5,"LogicOp","","",null,null],[5,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",null,null],[5,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",null,null],[5,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",null,null],[5,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",null,null],[5,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT, MultiDrawElementsBaseVertexOES",null,null],[5,"MultiTexCoordP1ui","","",null,null],[5,"MultiTexCoordP1uiv","","",null,null],[5,"MultiTexCoordP2ui","","",null,null],[5,"MultiTexCoordP2uiv","","",null,null],[5,"MultiTexCoordP3ui","","",null,null],[5,"MultiTexCoordP3uiv","","",null,null],[5,"MultiTexCoordP4ui","","",null,null],[5,"MultiTexCoordP4uiv","","",null,null],[5,"NormalP3ui","","",null,null],[5,"NormalP3uiv","","",null,null],[5,"PixelStoref","","",null,null],[5,"PixelStorei","","",null,null],[5,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",null,null],[5,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",null,null],[5,"PointParameteri","","Fallbacks: PointParameteriNV",null,null],[5,"PointParameteriv","","Fallbacks: PointParameterivNV",null,null],[5,"PointSize","","",null,null],[5,"PolygonMode","","Fallbacks: PolygonModeNV",null,null],[5,"PolygonOffset","","",null,null],[5,"PrimitiveRestartIndex","","",null,null],[5,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",null,null],[5,"QueryCounter","","Fallbacks: QueryCounterEXT",null,null],[5,"ReadBuffer","","",null,null],[5,"ReadPixels","","",null,null],[5,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",null,null],[5,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",null,null],[5,"SampleCoverage","","Fallbacks: SampleCoverageARB",null,null],[5,"SampleMaski","","",null,null],[5,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",null,null],[5,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",null,null],[5,"SamplerParameterf","","",null,null],[5,"SamplerParameterfv","","",null,null],[5,"SamplerParameteri","","",null,null],[5,"SamplerParameteriv","","",null,null],[5,"Scissor","","",null,null],[5,"SecondaryColorP3ui","","",null,null],[5,"SecondaryColorP3uiv","","",null,null],[5,"ShaderSource","","Fallbacks: ShaderSourceARB",null,null],[5,"StencilFunc","","",null,null],[5,"StencilFuncSeparate","","",null,null],[5,"StencilMask","","",null,null],[5,"StencilMaskSeparate","","",null,null],[5,"StencilOp","","",null,null],[5,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",null,null],[5,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",null,null],[5,"TexCoordP1ui","","",null,null],[5,"TexCoordP1uiv","","",null,null],[5,"TexCoordP2ui","","",null,null],[5,"TexCoordP2uiv","","",null,null],[5,"TexCoordP3ui","","",null,null],[5,"TexCoordP3uiv","","",null,null],[5,"TexCoordP4ui","","",null,null],[5,"TexCoordP4uiv","","",null,null],[5,"TexImage1D","","",null,null],[5,"TexImage2D","","",null,null],[5,"TexImage2DMultisample","","",null,null],[5,"TexImage3D","","Fallbacks: TexImage3DEXT, TexImage3DOES",null,null],[5,"TexImage3DMultisample","","",null,null],[5,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",null,null],[5,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",null,null],[5,"TexParameterf","","",null,null],[5,"TexParameterfv","","",null,null],[5,"TexParameteri","","",null,null],[5,"TexParameteriv","","",null,null],[5,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",null,null],[5,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",null,null],[5,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT, TexSubImage3DOES",null,null],[5,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",null,null],[5,"Uniform1f","","Fallbacks: Uniform1fARB",null,null],[5,"Uniform1fv","","Fallbacks: Uniform1fvARB",null,null],[5,"Uniform1i","","Fallbacks: Uniform1iARB",null,null],[5,"Uniform1iv","","Fallbacks: Uniform1ivARB",null,null],[5,"Uniform1ui","","Fallbacks: Uniform1uiEXT",null,null],[5,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",null,null],[5,"Uniform2f","","Fallbacks: Uniform2fARB",null,null],[5,"Uniform2fv","","Fallbacks: Uniform2fvARB",null,null],[5,"Uniform2i","","Fallbacks: Uniform2iARB",null,null],[5,"Uniform2iv","","Fallbacks: Uniform2ivARB",null,null],[5,"Uniform2ui","","Fallbacks: Uniform2uiEXT",null,null],[5,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",null,null],[5,"Uniform3f","","Fallbacks: Uniform3fARB",null,null],[5,"Uniform3fv","","Fallbacks: Uniform3fvARB",null,null],[5,"Uniform3i","","Fallbacks: Uniform3iARB",null,null],[5,"Uniform3iv","","Fallbacks: Uniform3ivARB",null,null],[5,"Uniform3ui","","Fallbacks: Uniform3uiEXT",null,null],[5,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",null,null],[5,"Uniform4f","","Fallbacks: Uniform4fARB",null,null],[5,"Uniform4fv","","Fallbacks: Uniform4fvARB",null,null],[5,"Uniform4i","","Fallbacks: Uniform4iARB",null,null],[5,"Uniform4iv","","Fallbacks: Uniform4ivARB",null,null],[5,"Uniform4ui","","Fallbacks: Uniform4uiEXT",null,null],[5,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",null,null],[5,"UniformBlockBinding","","",null,null],[5,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",null,null],[5,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",null,null],[5,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",null,null],[5,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",null,null],[5,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",null,null],[5,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",null,null],[5,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",null,null],[5,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",null,null],[5,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",null,null],[5,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"UseProgram","","Fallbacks: UseProgramObjectARB",null,null],[5,"ValidateProgram","","Fallbacks: ValidateProgramARB",null,null],[5,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",null,null],[5,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",null,null],[5,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",null,null],[5,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",null,null],[5,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",null,null],[5,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",null,null],[5,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",null,null],[5,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",null,null],[5,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",null,null],[5,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",null,null],[5,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",null,null],[5,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",null,null],[5,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",null,null],[5,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",null,null],[5,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",null,null],[5,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",null,null],[5,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",null,null],[5,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",null,null],[5,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",null,null],[5,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",null,null],[5,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",null,null],[5,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",null,null],[5,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",null,null],[5,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",null,null],[5,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",null,null],[5,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",null,null],[5,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",null,null],[5,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",null,null],[5,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",null,null],[5,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",null,null],[5,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",null,null],[5,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",null,null],[5,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",null,null],[5,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",null,null],[5,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",null,null],[5,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",null,null],[5,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",null,null],[5,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",null,null],[5,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",null,null],[5,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",null,null],[5,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",null,null],[5,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",null,null],[5,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",null,null],[5,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",null,null],[5,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",null,null],[5,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",null,null],[5,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",null,null],[5,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",null,null],[5,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",null,null],[5,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",null,null],[5,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",null,null],[5,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",null,null],[5,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",null,null],[5,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",null,null],[5,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",null,null],[5,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",null,null],[5,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",null,null],[5,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",null,null],[5,"VertexAttribP1ui","","",null,null],[5,"VertexAttribP1uiv","","",null,null],[5,"VertexAttribP2ui","","",null,null],[5,"VertexAttribP2uiv","","",null,null],[5,"VertexAttribP3ui","","",null,null],[5,"VertexAttribP3uiv","","",null,null],[5,"VertexAttribP4ui","","",null,null],[5,"VertexAttribP4uiv","","",null,null],[5,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",null,null],[5,"VertexP2ui","","",null,null],[5,"VertexP2uiv","","",null,null],[5,"VertexP3ui","","",null,null],[5,"VertexP3uiv","","",null,null],[5,"VertexP4ui","","",null,null],[5,"VertexP4uiv","","",null,null],[5,"Viewport","","",null,null],[5,"WaitSync","","Fallbacks: WaitSyncAPPLE",null,null],[5,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.\n~~~ignore\ngl::load_with(|s| glfw.get_proc_address(s));\n~~~",null,{"inputs":[{"name":"f"}],"output":null}],[5,"buffer_data","","",null,null],[5,"buffer_data_raw","","",null,{"inputs":[{"name":"glenum"},{"name":"t"},{"name":"glenum"}],"output":null}],[5,"buffer_sub_data","","",null,null],[5,"shader_source","","",null,null],[5,"read_buffer","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"read_pixels","","",null,{"inputs":[{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"vec"}}],[5,"polygon_offset","","",null,{"inputs":[{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[5,"pixel_store_i","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"}],"output":null}],[5,"gen_buffers","","",null,{"inputs":[{"name":"glsizei"}],"output":{"name":"vec"}}],[5,"gen_renderbuffers","","",null,{"inputs":[{"name":"glsizei"}],"output":{"name":"vec"}}],[5,"gen_framebuffers","","",null,{"inputs":[{"name":"glsizei"}],"output":{"name":"vec"}}],[5,"gen_textures","","",null,{"inputs":[{"name":"glsizei"}],"output":{"name":"vec"}}],[5,"gen_vertex_arrays","","",null,{"inputs":[{"name":"glsizei"}],"output":{"name":"vec"}}],[5,"gen_queries","","",null,{"inputs":[{"name":"glsizei"}],"output":{"name":"vec"}}],[5,"begin_query","","",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"end_query","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"query_counter","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":null}],[5,"get_query_object_iv","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i32"}}],[5,"get_query_object_uiv","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u32"}}],[5,"get_query_object_i64v","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i64"}}],[5,"get_query_object_ui64v","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u64"}}],[5,"delete_queries","","",null,null],[5,"delete_vertex_arrays","","",null,null],[5,"delete_buffers","","",null,null],[5,"delete_renderbuffers","","",null,null],[5,"delete_framebuffers","","",null,null],[5,"delete_frame_buffers","","",null,null],[5,"delete_textures","","",null,null],[5,"framebuffer_renderbuffer","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"renderbuffer_storage","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[5,"depth_func","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"active_texture","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"attach_shader","","",null,{"inputs":[{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"bind_attrib_location","","",null,{"inputs":[{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[5,"get_uniform_block_index","","",null,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"gluint"}}],[5,"bind_buffer_base","","",null,{"inputs":[{"name":"glenum"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"uniform_block_binding","","",null,{"inputs":[{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"bind_buffer","","",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"bind_vertex_array","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"bind_renderbuffer","","",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"bind_framebuffer","","",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"bind_texture","","",null,{"inputs":[{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"tex_image_2d","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[5,"compressed_tex_image_2d","","",null,null],[5,"compressed_tex_sub_image_2d","","",null,null],[5,"tex_image_3d","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[5,"copy_tex_sub_image_2d","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[5,"copy_tex_sub_image_3d","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[5,"tex_sub_image_2d","","",null,null],[5,"tex_sub_image_3d","","",null,null],[5,"get_integer_v","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glint"}}],[5,"get_boolean_v","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glboolean"}}],[5,"get_float_v","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"glfloat"}}],[5,"tex_parameter_i","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glint"}],"output":null}],[5,"tex_parameter_f","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glfloat"}],"output":null}],[5,"framebuffer_texture_2d","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"}],"output":null}],[5,"framebuffer_texture_layer","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"},{"name":"glint"}],"output":null}],[5,"vertex_attrib_4f","","",null,{"inputs":[{"name":"gluint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[5,"vertex_attrib_pointer_f32","","",null,{"inputs":[{"name":"gluint"},{"name":"glint"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[5,"vertex_attrib_pointer","","",null,{"inputs":[{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[5,"vertex_attrib_divisor","","",null,{"inputs":[{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"viewport","","",null,{"inputs":[{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[5,"scissor","","",null,{"inputs":[{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[5,"line_width","","",null,{"inputs":[{"name":"glfloat"}],"output":null}],[5,"use_program","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"draw_arrays","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"glsizei"}],"output":null}],[5,"draw_arrays_instanced","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[5,"draw_elements","","",null,{"inputs":[{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[5,"draw_elements_instanced","","",null,{"inputs":[{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"},{"name":"glsizei"}],"output":null}],[5,"blend_color","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[5,"blend_func","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"}],"output":null}],[5,"blend_func_separate","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[5,"blend_equation","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"blend_equation_separate","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"}],"output":null}],[5,"color_mask","","",null,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[5,"cull_face","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"front_face","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"enable","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"disable","","",null,{"inputs":[{"name":"glenum"}],"output":null}],[5,"hint","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"}],"output":null}],[5,"enable_vertex_attrib_array","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"disable_vertex_attrib_array","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"uniform_1f","","",null,{"inputs":[{"name":"glint"},{"name":"glfloat"}],"output":null}],[5,"uniform_1i","","",null,{"inputs":[{"name":"glint"},{"name":"glint"}],"output":null}],[5,"uniform_1ui","","",null,{"inputs":[{"name":"glint"},{"name":"gluint"}],"output":null}],[5,"uniform_2f","","",null,{"inputs":[{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[5,"uniform_2i","","",null,{"inputs":[{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[5,"uniform_2ui","","",null,{"inputs":[{"name":"glint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"uniform_3f","","",null,{"inputs":[{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[5,"uniform_3i","","",null,{"inputs":[{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[5,"uniform_3ui","","",null,{"inputs":[{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"uniform_4f","","",null,{"inputs":[{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[5,"uniform_4i","","",null,{"inputs":[{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[5,"uniform_4ui","","",null,{"inputs":[{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"uniform_4fv","","",null,null],[5,"uniform_matrix_4fv","","",null,null],[5,"depth_mask","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"depth_range","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":null}],[5,"get_attrib_location","","",null,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[5,"get_frag_data_location","","",null,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[5,"get_uniform_location","","",null,{"inputs":[{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[5,"get_program_info_log","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"string"}}],[5,"get_program_iv","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[5,"get_buffer_parameter_iv","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[5,"get_shader_info_log","","",null,{"inputs":[{"name":"gluint"}],"output":{"name":"string"}}],[5,"get_string","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"string"}}],[5,"get_shader_iv","","",null,{"inputs":[{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[5,"compile_shader","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"create_program","","",null,{"inputs":[],"output":{"name":"gluint"}}],[5,"delete_program","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"create_shader","","",null,{"inputs":[{"name":"glenum"}],"output":{"name":"gluint"}}],[5,"delete_shader","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"detach_shader","","",null,{"inputs":[{"name":"gluint"},{"name":"gluint"}],"output":null}],[5,"link_program","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"clear_color","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[5,"clear","","",null,{"inputs":[{"name":"glbitfield"}],"output":null}],[5,"clear_depth","","",null,{"inputs":[{"name":"f64"}],"output":null}],[5,"clear_stencil","","",null,{"inputs":[{"name":"glint"}],"output":null}],[5,"flush","","",null,{"inputs":[],"output":null}],[5,"finish","","",null,{"inputs":[],"output":null}],[5,"get_error","","",null,{"inputs":[],"output":{"name":"glenum"}}],[5,"stencil_mask","","",null,{"inputs":[{"name":"gluint"}],"output":null}],[5,"stencil_func","","",null,{"inputs":[{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[5,"stencil_op","","",null,{"inputs":[{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"from","alloc::boxed","",0,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",0,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",0,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",0,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",0,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",0,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",1,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",2,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",3,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",4,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",6,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","gleam::gl::__gl_imports","Returns true if the boxed type is the same as `T`",7,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",7,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",7,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",7,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",7,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",7,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",7,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",7,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",7,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",7,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",7,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",7,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",8,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"shl","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",9,null],[11,"shr","","",9,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"add","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",9,null],[11,"sub","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",9,null],[11,"div","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",9,null],[11,"rem","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",9,null],[11,"not","","",9,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",9,null],[11,"bitor","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",9,null],[11,"bitand","","",9,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",9,null],[11,"clone","std::thread::local","",10,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",10,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",11,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",11,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",12,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",12,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",13,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",13,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",14,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",14,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",14,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",15,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",15,null],[11,"get","","",15,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",16,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",16,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",16,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",16,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",17,null],[11,"name","","Gets the thread's name.",17,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",18,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",18,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",19,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",20,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",21,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",21,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",21,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",20,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",20,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",20,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",20,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",20,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",20,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",20,null],[11,"next","","",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",23,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",23,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",22,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",22,null],[11,"take","","Removes this bucket's key and value from the hashtable.",22,null],[11,"replace","","",22,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",22,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",22,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",22,null],[11,"expect_full","","",24,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",25,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",25,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",26,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",27,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",27,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"len","","",29,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",30,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"len","","",30,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",31,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"len","","",31,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",32,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"len","","",32,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",32,null],[11,"clone","","",26,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",26,null],[11,"clone","std::collections::hash::map","",33,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",34,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",34,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",34,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",34,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",34,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",34,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",34,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",34,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",34,null],[11,"get","","Returns a reference to the value corresponding to the key.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",34,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",34,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",37,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",34,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"len","","",39,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",37,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",40,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"len","","",40,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",41,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",42,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",42,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",43,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",34,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",34,null],[11,"extend","","",34,null],[11,"clone","","",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"build_hasher","","",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",44,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",34,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",34,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",45,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",45,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",45,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",45,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",45,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",45,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",45,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",45,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",45,null],[11,"contains","","Returns `true` if the set contains a value.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",45,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",45,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",45,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",45,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",45,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"default","","",45,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",45,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"len","","",46,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"len","","",47,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",48,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"len","","",48,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",49,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",49,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",50,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",51,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",52,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"hasher","std::collections::hash::state","",53,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",53,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",53,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",54,null],[11,"default","","",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",54,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",54,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",54,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",54,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",54,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",54,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",54,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",54,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",54,null],[11,"drop","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",54,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",59,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",54,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",54,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",54,null],[11,"extend","","",54,null],[11,"clone","collections::linked_list","",60,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",62,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",62,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",63,null],[11,"iter","","Provides a forward iterator.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",63,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",63,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",63,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",63,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",63,null],[11,"next","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",64,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",64,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",63,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",63,null],[11,"extend","","",63,null],[11,"eq","","",63,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",63,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",63,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"clone","collections::vec_deque","",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",65,null],[11,"default","","",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",65,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",65,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",65,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",65,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",65,null],[11,"iter","","Returns a front-to-back iterator.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",65,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",65,null],[11,"len","","Returns the number of elements in the `VecDeque`.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",65,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",65,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",65,null],[11,"push_back","","Appends an element to the back of a buffer",65,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",65,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",65,null],[11,"retain","","Retains only the elements specified by the predicate.",65,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",65,null],[11,"clone","","",66,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",66,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",67,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",69,null],[11,"next","","",69,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",65,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",65,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",65,null],[11,"index","","",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",65,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",65,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",65,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",65,null],[11,"extend","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",70,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",70,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",70,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",70,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",70,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",70,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",70,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",71,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next","","",72,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",73,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",73,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",73,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",74,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"fmt","","",75,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",75,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",76,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"len","","",76,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",77,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"len","","",77,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",78,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",78,null],[11,"cmp","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",80,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",81,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",78,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",78,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",78,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",78,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",78,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",78,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",78,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",78,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",78,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",79,null],[11,"as_ptr","","Returns the inner pointer to this C string.",79,null],[11,"to_bytes","","Converts this C string to a byte slice.",79,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",79,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",79,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",79,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",78,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",78,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",59,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",79,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",78,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",80,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",80,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",80,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",80,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",82,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",81,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",81,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",81,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",81,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",81,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",79,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",79,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",78,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",78,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",79,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",78,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",83,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",83,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",83,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",83,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",83,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",83,null],[11,"from","","",83,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",83,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",83,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",84,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",84,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",84,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",84,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",84,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",84,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",83,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",83,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",83,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",83,null],[11,"eq","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",83,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",84,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",84,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",83,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",85,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",87,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",88,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",90,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",90,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",90,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",90,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",90,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",90,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",90,null],[11,"read_to_end","","",90,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",90,null],[11,"flush","","",90,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",90,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",87,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",87,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",87,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",87,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",87,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",87,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",87,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",86,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",86,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",86,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",86,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",86,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",88,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",88,null],[11,"is_dir","","Test whether this file type represents a directory.",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",91,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",92,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",92,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",92,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",92,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",93,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",94,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",94,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",94,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",95,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",95,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",95,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",95,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",95,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",95,null],[11,"fill_buf","","",95,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",95,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",97,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",97,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",97,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",97,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",97,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",97,null],[11,"flush","","",97,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",97,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",97,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",96,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",96,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",82,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",96,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",96,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",98,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",98,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",98,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",98,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",98,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",98,null],[11,"flush","","",98,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",99,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",99,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",99,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",99,null],[11,"seek","","",99,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",99,null],[11,"fill_buf","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",99,null],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",99,null],[11,"flush","","",99,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",82,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",101,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",82,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",82,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",82,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",82,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",82,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",82,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",82,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",82,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",102,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",82,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",82,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",0,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",0,null],[11,"write_fmt","","",0,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",0,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",0,null],[11,"read_until","","",0,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",0,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",59,null],[11,"write_all","","",59,null],[11,"flush","","",59,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",103,null],[11,"get","","",103,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",104,null],[11,"fill_buf","","",104,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",104,null],[11,"read","","",105,null],[11,"write","","",106,null],[11,"flush","","",106,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",107,null],[11,"write","","",108,null],[11,"flush","","",108,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",110,null],[11,"flush","","",110,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",110,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",111,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",111,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",111,null],[11,"read_to_end","","",111,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",111,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",111,null],[11,"read","","",112,null],[11,"read_to_end","","",112,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",112,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",112,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",113,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",113,null],[11,"write_fmt","","",113,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",115,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",115,null],[11,"write_fmt","","",115,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",116,null],[11,"flush","","",116,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",117,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",117,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",119,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",120,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",120,null],[11,"fill_buf","","",120,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",120,null],[11,"read","","",121,null],[11,"next","","",122,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",123,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",124,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",123,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",123,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",123,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",125,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",127,null],[11,"fmt","","",127,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",128,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"clone","","",128,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",128,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",129,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",129,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",127,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",129,null],[11,"partial_cmp","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",130,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",130,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",130,null],[11,"partial_cmp","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",131,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"eq","","",131,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",131,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",132,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",133,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",131,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"hash","","",133,null],[11,"to_socket_addrs","","",131,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",132,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",133,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",134,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",134,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",134,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",134,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",134,null],[11,"read_to_end","","",134,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",134,null],[11,"flush","","",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",135,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",136,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",135,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",137,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",137,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",137,null],[11,"local_addr","","Returns the socket address that this socket was created from.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",137,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",137,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",127,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",129,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",130,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",132,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",133,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",131,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",138,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",138,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",138,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",139,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",140,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",141,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",90,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",90,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",90,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",134,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",135,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",137,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",134,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",135,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",137,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",83,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",83,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",84,null],[11,"as_bytes","","",84,null],[11,"mode","std::fs","",88,{"inputs":[{"name":"permissions"}],"output":{"name":"u16"}}],[11,"set_mode","","",88,null],[11,"from_mode","","",88,{"inputs":[{"name":"permissions"},{"name":"u16"}],"output":{"name":"permissions"}}],[11,"mode","","",87,{"inputs":[{"name":"openoptions"},{"name":"u16"}],"output":{"name":"openoptions"}}],[11,"dev","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"ino","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"nlink","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"u16"}}],[11,"uid","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"size","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i32"}}],[11,"blocks","","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",89,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",92,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",94,{"inputs":[{"name":"dirbuilder"},{"name":"u16"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",142,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",142,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",142,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",144,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",146,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",147,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",146,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",147,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",18,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",18,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",148,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",148,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",148,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",149,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"fmt","","",149,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",149,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",151,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",151,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",151,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",151,null],[11,"fmt","","",152,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"cmp","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",152,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",152,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",153,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",153,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",153,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",153,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",153,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",154,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",153,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",153,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",153,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",153,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",155,null],[11,"pop","","Truncate `self` to `self.parent()`.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",155,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",155,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",155,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",155,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",155,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",155,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",156,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",156,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",156,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",156,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",156,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",156,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",156,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",156,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",156,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",156,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",156,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",156,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",156,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",157,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",156,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",155,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"partial_cmp","","",155,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",155,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",156,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",156,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"partial_cmp","","",156,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",156,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",156,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",84,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",83,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",85,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",155,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",155,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",156,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",155,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",158,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",145,null],[11,"flush","","",145,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",146,null],[11,"read","","",147,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",142,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",142,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",142,null],[11,"env","","Inserts or updates an environment variable mapping.",142,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",142,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",142,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",142,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",142,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",142,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",142,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",160,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",144,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",143,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",143,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",143,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",161,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",161,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",162,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",162,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",163,null],[11,"new","std::sync::mpsc::oneshot","",164,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",164,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",164,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",164,null],[11,"drop_port","","",164,null],[11,"can_recv","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",164,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",164,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",164,null],[11,"eq","std::sync::mpsc::select","",165,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",166,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",166,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",166,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",167,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",167,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",167,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",167,null],[11,"drop","","",166,null],[11,"drop","","",167,null],[11,"next","","",168,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",169,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",169,null],[11,"send","","",169,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",169,null],[11,"drop_chan","","",169,null],[11,"drop_port","","",169,null],[11,"can_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",169,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",169,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",169,null],[11,"new","std::sync::mpsc::stream","",170,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",170,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",170,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",170,null],[11,"drop_port","","",170,null],[11,"can_recv","","",170,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",170,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",170,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",170,null],[11,"fmt","std::sync::mpsc::sync","",171,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",172,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",172,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",172,null],[11,"drop_chan","","",172,null],[11,"drop_port","","",172,null],[11,"can_recv","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",172,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",172,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",172,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",173,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",173,null],[11,"pop","","Pops some data from this queue.",173,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",173,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",174,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",174,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",174,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",174,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",174,null],[11,"clone","std::sync::mpsc","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",175,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",176,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",178,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",179,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",179,null],[11,"send","","Sends a value on this synchronous channel.",180,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",180,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",180,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",181,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",181,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",181,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",182,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",183,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",181,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",181,null],[11,"fmt","","",175,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",175,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",178,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",178,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",176,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",176,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",177,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",177,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",184,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",184,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",185,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",186,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",186,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",186,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",187,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",187,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",187,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",187,null],[11,"drop","","",187,null],[11,"new","","Creates a new condition variable",188,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",188,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",188,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",188,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",188,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",189,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",189,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",190,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",190,null],[11,"deref","","",191,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",191,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",191,null],[11,"new","std::sync::once","Creates a new `Once` value.",192,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",192,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",193,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",193,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",193,null],[11,"fmt","","",193,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",194,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",194,null],[11,"deref","","",195,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",196,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",196,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",195,null],[11,"drop","","",196,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",197,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",197,null],[11,"release","","Release a resource from this semaphore.",197,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",197,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",198,null],[11,"default","core::sync::atomic","",199,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",200,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",201,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",202,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",203,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",199,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",199,null],[11,"swap","","Stores a value into the bool, returning the old value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",199,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",200,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",200,null],[11,"swap","","Stores a value into the isize, returning the old value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",200,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",201,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",201,null],[11,"swap","","Stores a value into the usize, returning the old value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",201,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",202,null],[11,"load","","Loads a value from the pointer.",202,null],[11,"store","","Stores a value into the pointer.",202,null],[11,"swap","","Stores a value into the pointer, returning the old value.",202,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",202,null],[11,"fmt","","",201,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",204,null],[11,"fmt","","",204,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",204,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",204,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",204,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",204,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",204,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",204,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",204,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",204,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",204,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",205,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",205,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",205,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",205,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",205,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",205,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",206,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",206,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",206,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",206,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",206,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",207,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",207,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",208,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",208,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",208,null],[11,"wait","","Waits for a signal on the specified mutex.",208,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",208,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",208,null],[11,"clone","std::sys_common::dwarf::eh","",209,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",210,null],[11,"read","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",210,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",211,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",212,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",213,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",213,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",213,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",213,null],[11,"destroy","","Deallocates all resources associated with this mutex.",213,null],[11,"next","std::sys_common::net","",214,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",214,null],[11,"connect","","",215,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",215,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",215,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",215,null],[11,"write","","",215,null],[11,"peer_addr","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",215,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",215,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",216,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",216,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",217,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",217,null],[11,"send_to","","",217,null],[11,"duplicate","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",217,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",217,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",217,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",218,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",218,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",218,null],[11,"get","","",218,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",219,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",219,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",219,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",220,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",220,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",220,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",220,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",221,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",221,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",221,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",221,null],[11,"fmt","","",221,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",222,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",222,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",223,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",223,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",223,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",223,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",223,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",223,null],[11,"new","std::sys_common::thread_local","",224,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",224,null],[11,"set","","Sets this TLS key to a new value.",224,null],[11,"destroy","","Deallocates this OS TLS key.",224,null],[11,"new","","Creates a new managed OS TLS key.",225,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",225,null],[11,"set","","See StaticKey::set",225,null],[11,"drop","","",225,null],[11,"clone","std::sys_common::wtf8","",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",226,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",226,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",226,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",226,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",226,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",228,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",228,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",227,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",227,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",227,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",227,null],[11,"as_slice","","",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",227,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",227,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",227,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",227,null],[11,"push","","Append a code point at the end of the string.",227,null],[11,"truncate","","Shortens a string to the specified length.",227,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",227,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",227,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",227,null],[11,"partial_cmp","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",228,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",228,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",229,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",229,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",230,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",230,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"hash","","",226,null],[11,"hash","","",227,null],[11,"hash","","",228,null],[11,"is_ascii","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",228,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",228,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",228,null],[11,"make_ascii_lowercase","","",228,null],[11,"new","std::sys::condvar","",231,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",231,null],[11,"notify_all","","",231,null],[11,"wait","","",231,null],[11,"wait_timeout","","",231,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",231,null],[11,"new","std::sys::fd","",232,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",232,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",232,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",232,null],[11,"write","","",232,null],[11,"set_cloexec","","",232,null],[11,"drop","","",232,null],[11,"clone","std::sys::fs","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",234,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",235,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",235,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",236,null],[11,"eq","","",236,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",236,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",233,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",86,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",235,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",235,null],[11,"mode","","",235,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u16"}}],[11,"is_dir","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",236,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",236,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",237,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",238,null],[11,"path","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",239,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",234,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",234,null],[11,"write","","",234,null],[11,"append","","",234,null],[11,"truncate","","",234,null],[11,"create","","",234,null],[11,"mode","","",234,null],[11,"open","","",240,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",240,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",240,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",240,null],[11,"write","","",240,null],[11,"flush","","",240,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",240,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",240,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",240,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",241,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",241,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",241,null],[11,"fmt","","",240,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",242,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",242,null],[11,"unlock","","",242,null],[11,"try_lock","","",242,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",242,null],[11,"uninitialized","","",243,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",243,null],[11,"lock","","",243,null],[11,"try_lock","","",243,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",243,null],[11,"destroy","","",243,null],[11,"new","std::sys::net","",244,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",244,null],[11,"duplicate","","",244,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",244,null],[11,"set_timeout","","",244,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",244,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",244,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",245,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",246,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",247,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",248,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",249,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",250,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",251,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",252,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",253,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",254,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",255,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",256,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",257,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",258,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",259,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",260,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",261,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",262,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",263,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",264,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",265,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",266,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",267,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",268,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",269,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",270,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",271,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",272,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",273,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",274,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",275,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",276,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",277,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",278,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",279,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",280,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",281,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",282,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",283,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",284,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",285,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",286,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",287,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",288,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",289,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",290,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","libc::unix::bsd::apple::b64","",291,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",292,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"fmt","","",293,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",293,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",294,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"len","","",294,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",295,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",295,null],[11,"hash","std::sys::os_str","",296,null],[11,"clone","","",296,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",297,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",296,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",296,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",296,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",296,null],[11,"from_str","","",297,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",297,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",297,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",297,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",298,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",298,null],[11,"write","","",298,null],[11,"raw","","",298,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",298,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",298,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",299,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",299,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",299,null],[11,"args","","",299,null],[11,"env","","",299,null],[11,"env_remove","","",299,null],[11,"env_clear","","",299,null],[11,"cwd","","",299,null],[11,"fmt","","",300,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",300,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",300,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",300,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",301,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",301,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",301,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",301,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",301,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",302,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",302,null],[11,"try_read","","",302,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",302,null],[11,"try_write","","",302,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",302,null],[11,"write_unlock","","",302,null],[11,"destroy","","",302,null],[11,"new","std::sys::stack_overflow","",303,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",303,null],[11,"new","std::sys::thread","",304,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",304,null],[11,"set_name","","",304,null],[11,"sleep","","",304,null],[11,"join","","",304,null],[11,"id","","",304,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",304,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",304,null],[11,"fmt","std::sys::time::inner","",305,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",305,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",306,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",305,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",305,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",305,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",305,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",306,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",306,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",306,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"eq","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",306,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",306,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",307,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",307,null],[11,"new","","",308,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",308,null],[11,"new","","",309,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",309,null],[11,"write","","",309,null],[11,"flush","","",309,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",310,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",311,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",311,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",312,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",312,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",313,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",313,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",313,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",314,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",314,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",314,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",314,null],[11,"clone","std::rand","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",315,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",315,null],[11,"from_seed","","",315,null],[11,"reseed","","",316,null],[11,"clone","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",317,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",317,null],[11,"fmt","gleam::gl::__gl_imports","",318,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",318,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",318,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",318,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",319,null],[11,"fmt","","",319,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",319,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",319,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",319,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",319,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",320,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",320,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",320,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",320,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",320,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",320,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",320,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",321,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",321,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",321,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",322,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",322,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",322,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",322,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",322,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",322,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",323,null],[11,"clone","","",323,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",324,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",324,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",324,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",324,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",325,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",325,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",326,null],[11,"deref","","",325,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",325,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",327,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",327,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",327,null],[11,"fmt","core::cmp","",328,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",328,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",328,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",328,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",329,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",329,null],[11,"finish","","",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",329,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",330,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",330,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",330,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",331,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",331,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",331,null],[11,"next_back","","",331,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",332,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",332,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",332,null],[11,"next_back","","",332,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",333,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",333,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",333,null],[11,"clone","","",334,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",335,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",334,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",334,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",334,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",334,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",334,null],[11,"next_back","","",334,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",336,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",336,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",336,null],[11,"next_back","","",336,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",337,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",337,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",337,null],[11,"next_back","","",337,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",338,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",338,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",338,null],[11,"next_back","","",338,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",339,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",339,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",339,null],[11,"next_back","","",339,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",340,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",340,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",340,null],[11,"nth","","",340,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",340,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",340,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",341,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",341,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",341,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",341,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",341,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",341,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",341,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",341,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",342,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",342,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",342,null],[11,"clone","","",343,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",343,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",343,null],[11,"clone","","",344,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",344,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",344,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",344,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",344,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",344,null],[11,"clone","","",345,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",345,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",345,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",345,null],[11,"clone","","",346,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",346,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",346,null],[11,"clone","","",347,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",347,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next_back","","",347,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",348,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",348,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",348,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",348,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",348,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",348,null],[11,"next_back","","",348,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",349,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"next_back","","",349,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",350,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",351,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",352,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",350,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"clone","","",353,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",353,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next_back","","",353,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",350,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next","core::ops","",352,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",351,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",354,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",354,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"next_back","","",354,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",355,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"next_back","","",355,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",355,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",355,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",355,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",356,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",356,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"next_back","","",356,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",356,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",357,null],[11,"eq","","",357,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",357,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",357,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",357,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",357,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",358,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",358,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",358,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",352,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",352,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",352,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",352,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",351,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",351,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",351,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",351,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",359,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",359,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",360,null],[11,"get","","Dereferences the content.",360,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",360,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",360,null],[11,"fmt","","",360,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",361,null],[11,"clone","","",361,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",361,null],[11,"fmt","","",361,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",362,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",363,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",364,null],[11,"fmt","","",364,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",364,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",364,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",364,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",364,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",364,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",364,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",364,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",364,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",364,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",364,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",364,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",364,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",364,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",364,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",364,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",364,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",364,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",364,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",364,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",364,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",365,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"next_back","","",365,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",365,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",366,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next_back","","",366,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",367,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",364,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",368,null],[11,"fmt","","",368,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",368,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",368,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",368,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",368,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",368,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",368,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",368,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",368,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",368,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",368,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",368,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",368,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",368,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",368,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",368,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",368,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",368,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",368,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",368,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",368,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",368,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",368,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",368,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",368,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",369,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",369,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",370,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",370,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",371,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",372,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",372,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next_back","","",372,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",368,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",373,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",374,null],[11,"make_place","","",374,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",374,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",0,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",373,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",374,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",0,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",0,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",0,null],[11,"default","","",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",0,null],[11,"clone","","",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",0,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",0,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",0,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",0,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",0,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",0,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",0,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",0,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",375,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",375,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",375,null],[11,"clone","","Makes a clone of the `Rc<T>`.",375,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",375,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",375,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",375,null],[11,"fmt","","",375,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",375,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",375,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",376,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",376,null],[11,"clone","","Makes a clone of the `Weak<T>`.",376,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",376,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",376,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",375,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",375,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",157,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",157,null],[11,"into_owned","","Extracts the owned data.",157,null],[11,"deref","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",157,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",157,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"into_cow","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",157,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",377,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",378,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",379,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",379,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",379,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",380,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",381,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",59,null],[11,"borrow_mut","","",59,null],[11,"clone","collections::str","",382,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",382,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",382,null],[11,"borrow","collections::string","",85,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",383,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",383,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",383,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",383,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",384,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",385,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",384,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",384,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",384,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",386,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",387,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",388,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",389,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",389,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",390,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",390,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",391,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",391,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",389,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",389,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",389,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",389,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",389,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",392,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",392,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",393,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",393,null],[11,"matching","","",393,null],[11,"use_early_reject","","",394,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",394,null],[11,"matching","","",394,null],[11,"cmp","collections::string","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",85,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",85,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",85,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",85,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",85,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",85,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",85,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",85,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",85,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",85,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",85,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",85,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",85,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",85,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",85,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",85,null],[11,"push","","Appends the given `char` to the end of this `String`.",85,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",85,null],[11,"truncate","","Shortens this `String` to the specified length.",85,null],[11,"pop","","Removes the last character from the string buffer and returns it.",85,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",85,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",85,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",85,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",85,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",85,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",85,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",85,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",85,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",5,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",85,null],[11,"from_iter","","",85,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",85,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",85,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",85,null],[11,"extend","","",85,null],[11,"extend","","",85,null],[11,"extend","","",85,null],[11,"eq","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",85,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",85,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",85,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"add","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",85,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",85,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",85,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",85,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",85,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",85,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",85,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",85,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",85,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",85,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",395,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",395,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",395,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",85,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",85,null],[11,"from","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",157,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",85,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",85,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",85,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",85,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",396,null],[11,"next","","",396,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",396,null],[11,"next_back","","",396,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",59,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",59,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",59,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",59,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",59,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",59,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",59,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",59,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",59,null],[11,"as_slice","","Extracts a slice containing the entire vector.",59,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",59,null],[11,"set_len","","Sets the length of a vector.",59,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",59,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",59,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",59,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",59,null],[11,"push","","Appends an element to the back of a collection.",59,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",59,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",59,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",59,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",59,null],[11,"len","","Returns the number of elements in the vector.",59,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",59,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",59,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",59,null],[11,"push_all","","",59,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",59,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",59,null],[11,"clone","","",59,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",59,null],[11,"hash","","",59,null],[11,"index","","",59,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",59,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",59,null],[11,"index","","",59,null],[11,"index","","",59,null],[11,"index","","",59,null],[11,"index_mut","","",59,null],[11,"index_mut","","",59,null],[11,"index_mut","","",59,null],[11,"index_mut","","",59,null],[11,"deref","","",59,null],[11,"deref_mut","","",59,null],[11,"from_iter","","",59,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",59,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",59,null],[11,"extend","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","collections::borrow","",157,null],[11,"ne","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"eq","","",157,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"partial_cmp","","",59,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",59,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",59,null],[11,"default","","",59,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",59,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",59,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",59,null],[11,"as_mut","","",59,null],[11,"from","","",59,null],[11,"from","","",59,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",157,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",59,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",397,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",397,null],[11,"count","","",397,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",397,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",397,null],[11,"next","","",398,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"next_back","","",398,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",398,null],[11,"next","rustc_unicode::char","",399,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",400,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",401,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",402,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",402,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",402,null],[0,"types","gleam::gl","",null,null],[4,"__GLsync","gleam::gl::types","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[6,"GLenum","","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[0,"ActiveTexture","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ActiveTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"AttachShader","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::AttachShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginConditionalRender","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BeginConditionalRender","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginQuery","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BeginQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BeginTransformFeedback","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BeginTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindAttribLocation","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindAttribLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBufferBase","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindBufferBase","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindBufferRange","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFragDataLocation","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindFragDataLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFragDataLocationIndexed","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindFragDataLocationIndexed","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindFramebuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindRenderbuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindSampler","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindSampler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindTexture","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BindVertexArray","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BindVertexArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendColor","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BlendColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquation","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BlendEquation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendEquationSeparate","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BlendEquationSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFunc","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BlendFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlendFuncSeparate","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BlendFuncSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BlitFramebuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BlitFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferData","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BufferData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"BufferSubData","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::BufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CheckFramebufferStatus","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CheckFramebufferStatus","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClampColor","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClampColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Clear","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Clear","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferfi","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearBufferfi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearBufferfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearBufferiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearBufferuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearBufferuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearColor","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearColor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearDepth","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearDepth","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClearStencil","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClearStencil","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ClientWaitSync","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ClientWaitSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorMask","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ColorMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorMaski","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ColorMaski","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ColorP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ColorP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ColorP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ColorP4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ColorP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompileShader","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompileShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompressedTexImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompressedTexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexImage3D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompressedTexImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompressedTexSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompressedTexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CompressedTexSubImage3D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CompressedTexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyBufferSubData","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CopyBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexImage1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CopyTexImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexImage2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CopyTexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CopyTexSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CopyTexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CopyTexSubImage3D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CopyTexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateProgram","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CreateProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CreateShader","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CreateShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"CullFace","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::CullFace","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteBuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteFramebuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteProgram","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteQueries","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteRenderbuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteSamplers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteShader","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteSync","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteTextures","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DeleteVertexArrays","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DeleteVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthFunc","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DepthFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthMask","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DepthMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DepthRange","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DepthRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DetachShader","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DetachShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Disable","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Disable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DisableVertexAttribArray","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DisableVertexAttribArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Disablei","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Disablei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArrays","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawArraysInstanced","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawArraysInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawBuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElements","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsBaseVertex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawElementsBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstanced","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawElementsInstanced","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawElementsInstancedBaseVertex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawElementsInstancedBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawRangeElements","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawRangeElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"DrawRangeElementsBaseVertex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::DrawRangeElementsBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Enable","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Enable","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EnableVertexAttribArray","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::EnableVertexAttribArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Enablei","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Enablei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndConditionalRender","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::EndConditionalRender","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndQuery","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::EndQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"EndTransformFeedback","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::EndTransformFeedback","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FenceSync","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FenceSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Finish","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Finish","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Flush","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Flush","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FlushMappedBufferRange","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FlushMappedBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferRenderbuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FramebufferRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FramebufferTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FramebufferTexture1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FramebufferTexture2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTexture3D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FramebufferTexture3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FramebufferTextureLayer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FramebufferTextureLayer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"FrontFace","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::FrontFace","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenBuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenBuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenFramebuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenFramebuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenQueries","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenQueries","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenRenderbuffers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenRenderbuffers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenSamplers","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenSamplers","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenTextures","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenTextures","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenVertexArrays","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenVertexArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GenerateMipmap","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GenerateMipmap","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveAttrib","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetActiveAttrib","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniform","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetActiveUniform","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformBlockName","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetActiveUniformBlockName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformBlockiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetActiveUniformBlockiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformName","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetActiveUniformName","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetActiveUniformsiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetActiveUniformsiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetAttachedShaders","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetAttachedShaders","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetAttribLocation","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetAttribLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBooleani_v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetBooleani_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBooleanv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetBooleanv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferParameteri64v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetBufferParameteri64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetBufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferPointerv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetBufferPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetBufferSubData","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetBufferSubData","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetCompressedTexImage","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetCompressedTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetDoublev","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetDoublev","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetError","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetError","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFloatv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetFloatv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFragDataIndex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetFragDataIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFragDataLocation","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetFragDataLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetFramebufferAttachmentParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetFramebufferAttachmentParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInteger64i_v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetInteger64i_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetInteger64v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetInteger64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetIntegeri_v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetIntegeri_v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetIntegerv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetIntegerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetMultisamplefv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetMultisamplefv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramInfoLog","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetProgramInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetProgramiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetProgramiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjecti64v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetQueryObjecti64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetQueryObjectiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectui64v","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetQueryObjectui64v","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryObjectuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetQueryObjectuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetQueryiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetQueryiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetRenderbufferParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetRenderbufferParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterIiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetSamplerParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterIuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetSamplerParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameterfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetSamplerParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSamplerParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetSamplerParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderInfoLog","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetShaderInfoLog","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderSource","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetShaderSource","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetShaderiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetShaderiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetString","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetString","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetStringi","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetStringi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetSynciv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetSynciv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexImage","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexImage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexLevelParameterfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexLevelParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexLevelParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexLevelParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterIiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterIuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameterfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTexParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTexParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetTransformFeedbackVarying","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetTransformFeedbackVarying","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformBlockIndex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetUniformBlockIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformIndices","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetUniformIndices","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformLocation","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetUniformLocation","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetUniformfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetUniformiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetUniformuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetUniformuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribIiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetVertexAttribIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribIuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetVertexAttribIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribPointerv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetVertexAttribPointerv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribdv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetVertexAttribdv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetVertexAttribfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"GetVertexAttribiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::GetVertexAttribiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Hint","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Hint","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsEnabled","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsEnabled","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsEnabledi","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsEnabledi","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsFramebuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsFramebuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsProgram","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsQuery","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsQuery","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsRenderbuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsRenderbuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsSampler","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsSampler","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsShader","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsShader","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsSync","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsTexture","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsTexture","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"IsVertexArray","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::IsVertexArray","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LineWidth","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::LineWidth","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LinkProgram","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::LinkProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"LogicOp","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::LogicOp","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MapBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MapBufferRange","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MapBufferRange","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawArrays","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiDrawArrays","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawElements","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiDrawElements","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiDrawElementsBaseVertex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiDrawElementsBaseVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP1ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP1uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP2ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP2uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"MultiTexCoordP4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::MultiTexCoordP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NormalP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::NormalP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"NormalP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::NormalP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PixelStoref","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PixelStoref","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PixelStorei","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PixelStorei","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameterf","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PointParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameterfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PointParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameteri","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PointParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PointParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PointSize","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PointSize","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PolygonMode","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PolygonMode","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PolygonOffset","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PolygonOffset","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"PrimitiveRestartIndex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::PrimitiveRestartIndex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ProvokingVertex","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ProvokingVertex","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"QueryCounter","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::QueryCounter","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ReadBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ReadPixels","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ReadPixels","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"RenderbufferStorage","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::RenderbufferStorage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"RenderbufferStorageMultisample","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::RenderbufferStorageMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SampleCoverage","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SampleCoverage","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SampleMaski","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SampleMaski","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterIiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SamplerParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterIuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SamplerParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterf","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SamplerParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameterfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SamplerParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameteri","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SamplerParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SamplerParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SamplerParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Scissor","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Scissor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SecondaryColorP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SecondaryColorP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"SecondaryColorP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::SecondaryColorP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ShaderSource","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ShaderSource","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilFunc","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::StencilFunc","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilFuncSeparate","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::StencilFuncSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilMask","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::StencilMask","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilMaskSeparate","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::StencilMaskSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilOp","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::StencilOp","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"StencilOpSeparate","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::StencilOpSeparate","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP1ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP1uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP2ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP2uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexCoordP4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexCoordP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage2DMultisample","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexImage2DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage3D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexImage3DMultisample","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexImage3DMultisample","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterIiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexParameterIiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterIuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexParameterIuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterf","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexParameterf","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameterfv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexParameterfv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameteri","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexParameteri","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexParameteriv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexParameteriv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage1D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexSubImage1D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage2D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexSubImage2D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TexSubImage3D","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TexSubImage3D","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"TransformFeedbackVaryings","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::TransformFeedbackVaryings","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform1uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform2uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Uniform4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Uniform4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformBlockBinding","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformBlockBinding","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x3fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix2x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix2x4fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix2x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x2fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix3x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix3x4fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix3x4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x2fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix4x2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UniformMatrix4x3fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UniformMatrix4x3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UnmapBuffer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UnmapBuffer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"UseProgram","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::UseProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"ValidateProgram","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::ValidateProgram","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1d","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib1d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1dv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib1dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib1f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib1fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1s","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib1s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib1sv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib1sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2d","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib2d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2dv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib2dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib2f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib2fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2s","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib2s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib2sv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib2sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3d","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib3d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3dv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib3dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib3f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib3fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3s","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib3s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib3sv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib3sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nbv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Nbv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Niv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Niv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nsv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Nsv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nub","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Nub","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nubv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Nubv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nuiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Nuiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4Nusv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4Nusv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4bv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4bv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4d","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4d","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4dv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4dv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4f","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4f","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4fv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4fv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4s","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4s","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4sv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4ubv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4ubv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttrib4usv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttrib4usv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribDivisor","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribDivisor","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI1i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI1iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI1uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI2i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI2iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI2uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI3i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI3iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4bv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4bv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4i","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4i","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4iv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4iv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4sv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4sv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4ubv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4ubv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribI4usv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribI4usv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribIPointer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribIPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP1ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP1ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP1uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP1uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP2ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP2uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribP4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexAttribPointer","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexAttribPointer","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP2ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexP2ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP2uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexP2uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP3ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexP3ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP3uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexP3uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP4ui","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexP4ui","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"VertexP4uiv","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::VertexP4uiv","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"Viewport","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::Viewport","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[0,"WaitSync","gleam::gl","",null,null],[5,"is_loaded","gleam::gl::WaitSync","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_with","","",null,{"inputs":[{"name":"f"}],"output":null}],[6,"GLenum","gleam::gl","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[17,"DEPTH_BUFFER_BIT","","",null,null],[17,"STENCIL_BUFFER_BIT","","",null,null],[17,"COLOR_BUFFER_BIT","","",null,null],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",null,null],[17,"CONTEXT_CORE_PROFILE_BIT","","",null,null],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",null,null],[17,"MAP_READ_BIT","","",null,null],[17,"MAP_WRITE_BIT","","",null,null],[17,"MAP_INVALIDATE_RANGE_BIT","","",null,null],[17,"MAP_INVALIDATE_BUFFER_BIT","","",null,null],[17,"MAP_FLUSH_EXPLICIT_BIT","","",null,null],[17,"MAP_UNSYNCHRONIZED_BIT","","",null,null],[17,"SYNC_FLUSH_COMMANDS_BIT","","",null,null],[17,"FALSE","","",null,null],[17,"NO_ERROR","","",null,null],[17,"ZERO","","",null,null],[17,"NONE","","",null,null],[17,"TRUE","","",null,null],[17,"ONE","","",null,null],[17,"INVALID_INDEX","","",null,null],[17,"TIMEOUT_IGNORED","","",null,null],[17,"POINTS","","",null,null],[17,"LINES","","",null,null],[17,"LINE_LOOP","","",null,null],[17,"LINE_STRIP","","",null,null],[17,"TRIANGLES","","",null,null],[17,"TRIANGLE_STRIP","","",null,null],[17,"TRIANGLE_FAN","","",null,null],[17,"LINES_ADJACENCY","","",null,null],[17,"LINE_STRIP_ADJACENCY","","",null,null],[17,"TRIANGLES_ADJACENCY","","",null,null],[17,"TRIANGLE_STRIP_ADJACENCY","","",null,null],[17,"NEVER","","",null,null],[17,"LESS","","",null,null],[17,"EQUAL","","",null,null],[17,"LEQUAL","","",null,null],[17,"GREATER","","",null,null],[17,"NOTEQUAL","","",null,null],[17,"GEQUAL","","",null,null],[17,"ALWAYS","","",null,null],[17,"SRC_COLOR","","",null,null],[17,"ONE_MINUS_SRC_COLOR","","",null,null],[17,"SRC_ALPHA","","",null,null],[17,"ONE_MINUS_SRC_ALPHA","","",null,null],[17,"DST_ALPHA","","",null,null],[17,"ONE_MINUS_DST_ALPHA","","",null,null],[17,"DST_COLOR","","",null,null],[17,"ONE_MINUS_DST_COLOR","","",null,null],[17,"SRC_ALPHA_SATURATE","","",null,null],[17,"FRONT_LEFT","","",null,null],[17,"FRONT_RIGHT","","",null,null],[17,"BACK_LEFT","","",null,null],[17,"BACK_RIGHT","","",null,null],[17,"FRONT","","",null,null],[17,"BACK","","",null,null],[17,"LEFT","","",null,null],[17,"RIGHT","","",null,null],[17,"FRONT_AND_BACK","","",null,null],[17,"INVALID_ENUM","","",null,null],[17,"INVALID_VALUE","","",null,null],[17,"INVALID_OPERATION","","",null,null],[17,"OUT_OF_MEMORY","","",null,null],[17,"INVALID_FRAMEBUFFER_OPERATION","","",null,null],[17,"CW","","",null,null],[17,"CCW","","",null,null],[17,"POINT_SIZE","","",null,null],[17,"POINT_SIZE_RANGE","","",null,null],[17,"SMOOTH_POINT_SIZE_RANGE","","",null,null],[17,"POINT_SIZE_GRANULARITY","","",null,null],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",null,null],[17,"LINE_SMOOTH","","",null,null],[17,"LINE_WIDTH","","",null,null],[17,"LINE_WIDTH_RANGE","","",null,null],[17,"SMOOTH_LINE_WIDTH_RANGE","","",null,null],[17,"LINE_WIDTH_GRANULARITY","","",null,null],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",null,null],[17,"POLYGON_MODE","","",null,null],[17,"POLYGON_SMOOTH","","",null,null],[17,"CULL_FACE","","",null,null],[17,"CULL_FACE_MODE","","",null,null],[17,"FRONT_FACE","","",null,null],[17,"DEPTH_RANGE","","",null,null],[17,"DEPTH_TEST","","",null,null],[17,"DEPTH_WRITEMASK","","",null,null],[17,"DEPTH_CLEAR_VALUE","","",null,null],[17,"DEPTH_FUNC","","",null,null],[17,"STENCIL_TEST","","",null,null],[17,"STENCIL_CLEAR_VALUE","","",null,null],[17,"STENCIL_FUNC","","",null,null],[17,"STENCIL_VALUE_MASK","","",null,null],[17,"STENCIL_FAIL","","",null,null],[17,"STENCIL_PASS_DEPTH_FAIL","","",null,null],[17,"STENCIL_PASS_DEPTH_PASS","","",null,null],[17,"STENCIL_REF","","",null,null],[17,"STENCIL_WRITEMASK","","",null,null],[17,"VIEWPORT","","",null,null],[17,"DITHER","","",null,null],[17,"BLEND_DST","","",null,null],[17,"BLEND_SRC","","",null,null],[17,"BLEND","","",null,null],[17,"LOGIC_OP_MODE","","",null,null],[17,"COLOR_LOGIC_OP","","",null,null],[17,"DRAW_BUFFER","","",null,null],[17,"READ_BUFFER","","",null,null],[17,"SCISSOR_BOX","","",null,null],[17,"SCISSOR_TEST","","",null,null],[17,"COLOR_CLEAR_VALUE","","",null,null],[17,"COLOR_WRITEMASK","","",null,null],[17,"DOUBLEBUFFER","","",null,null],[17,"STEREO","","",null,null],[17,"LINE_SMOOTH_HINT","","",null,null],[17,"POLYGON_SMOOTH_HINT","","",null,null],[17,"UNPACK_SWAP_BYTES","","",null,null],[17,"UNPACK_LSB_FIRST","","",null,null],[17,"UNPACK_ROW_LENGTH","","",null,null],[17,"UNPACK_SKIP_ROWS","","",null,null],[17,"UNPACK_SKIP_PIXELS","","",null,null],[17,"UNPACK_ALIGNMENT","","",null,null],[17,"PACK_SWAP_BYTES","","",null,null],[17,"PACK_LSB_FIRST","","",null,null],[17,"PACK_ROW_LENGTH","","",null,null],[17,"PACK_SKIP_ROWS","","",null,null],[17,"PACK_SKIP_PIXELS","","",null,null],[17,"PACK_ALIGNMENT","","",null,null],[17,"MAX_CLIP_DISTANCES","","",null,null],[17,"MAX_TEXTURE_SIZE","","",null,null],[17,"MAX_VIEWPORT_DIMS","","",null,null],[17,"SUBPIXEL_BITS","","",null,null],[17,"TEXTURE_1D","","",null,null],[17,"TEXTURE_2D","","",null,null],[17,"TEXTURE_WIDTH","","",null,null],[17,"TEXTURE_HEIGHT","","",null,null],[17,"TEXTURE_INTERNAL_FORMAT","","",null,null],[17,"TEXTURE_BORDER_COLOR","","",null,null],[17,"DONT_CARE","","",null,null],[17,"FASTEST","","",null,null],[17,"NICEST","","",null,null],[17,"BYTE","","",null,null],[17,"UNSIGNED_BYTE","","",null,null],[17,"SHORT","","",null,null],[17,"UNSIGNED_SHORT","","",null,null],[17,"INT","","",null,null],[17,"UNSIGNED_INT","","",null,null],[17,"FLOAT","","",null,null],[17,"DOUBLE","","",null,null],[17,"HALF_FLOAT","","",null,null],[17,"CLEAR","","",null,null],[17,"AND","","",null,null],[17,"AND_REVERSE","","",null,null],[17,"COPY","","",null,null],[17,"AND_INVERTED","","",null,null],[17,"NOOP","","",null,null],[17,"XOR","","",null,null],[17,"OR","","",null,null],[17,"NOR","","",null,null],[17,"EQUIV","","",null,null],[17,"INVERT","","",null,null],[17,"OR_REVERSE","","",null,null],[17,"COPY_INVERTED","","",null,null],[17,"OR_INVERTED","","",null,null],[17,"NAND","","",null,null],[17,"SET","","",null,null],[17,"TEXTURE","","",null,null],[17,"COLOR","","",null,null],[17,"DEPTH","","",null,null],[17,"STENCIL","","",null,null],[17,"STENCIL_INDEX","","",null,null],[17,"DEPTH_COMPONENT","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"ALPHA","","",null,null],[17,"RGB","","",null,null],[17,"RGBA","","",null,null],[17,"POINT","","",null,null],[17,"LINE","","",null,null],[17,"FILL","","",null,null],[17,"KEEP","","",null,null],[17,"REPLACE","","",null,null],[17,"INCR","","",null,null],[17,"DECR","","",null,null],[17,"VENDOR","","",null,null],[17,"RENDERER","","",null,null],[17,"VERSION","","",null,null],[17,"EXTENSIONS","","",null,null],[17,"NEAREST","","",null,null],[17,"LINEAR","","",null,null],[17,"NEAREST_MIPMAP_NEAREST","","",null,null],[17,"LINEAR_MIPMAP_NEAREST","","",null,null],[17,"NEAREST_MIPMAP_LINEAR","","",null,null],[17,"LINEAR_MIPMAP_LINEAR","","",null,null],[17,"TEXTURE_MAG_FILTER","","",null,null],[17,"TEXTURE_MIN_FILTER","","",null,null],[17,"TEXTURE_WRAP_S","","",null,null],[17,"TEXTURE_WRAP_T","","",null,null],[17,"REPEAT","","",null,null],[17,"POLYGON_OFFSET_UNITS","","",null,null],[17,"POLYGON_OFFSET_POINT","","",null,null],[17,"POLYGON_OFFSET_LINE","","",null,null],[17,"R3_G3_B2","","",null,null],[17,"CLIP_DISTANCE0","","",null,null],[17,"CLIP_DISTANCE1","","",null,null],[17,"CLIP_DISTANCE2","","",null,null],[17,"CLIP_DISTANCE3","","",null,null],[17,"CLIP_DISTANCE4","","",null,null],[17,"CLIP_DISTANCE5","","",null,null],[17,"CLIP_DISTANCE6","","",null,null],[17,"CLIP_DISTANCE7","","",null,null],[17,"CONSTANT_COLOR","","",null,null],[17,"ONE_MINUS_CONSTANT_COLOR","","",null,null],[17,"CONSTANT_ALPHA","","",null,null],[17,"ONE_MINUS_CONSTANT_ALPHA","","",null,null],[17,"FUNC_ADD","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[17,"BLEND_EQUATION_RGB","","",null,null],[17,"FUNC_SUBTRACT","","",null,null],[17,"FUNC_REVERSE_SUBTRACT","","",null,null],[17,"UNSIGNED_BYTE_3_3_2","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","",null,null],[17,"UNSIGNED_INT_8_8_8_8","","",null,null],[17,"UNSIGNED_INT_10_10_10_2","","",null,null],[17,"POLYGON_OFFSET_FILL","","",null,null],[17,"POLYGON_OFFSET_FACTOR","","",null,null],[17,"RGB4","","",null,null],[17,"RGB5","","",null,null],[17,"RGB8","","",null,null],[17,"RGB10","","",null,null],[17,"RGB12","","",null,null],[17,"RGB16","","",null,null],[17,"RGBA2","","",null,null],[17,"RGBA4","","",null,null],[17,"RGB5_A1","","",null,null],[17,"RGBA8","","",null,null],[17,"RGB10_A2","","",null,null],[17,"RGBA12","","",null,null],[17,"RGBA16","","",null,null],[17,"TEXTURE_RED_SIZE","","",null,null],[17,"TEXTURE_GREEN_SIZE","","",null,null],[17,"TEXTURE_BLUE_SIZE","","",null,null],[17,"TEXTURE_ALPHA_SIZE","","",null,null],[17,"PROXY_TEXTURE_1D","","",null,null],[17,"PROXY_TEXTURE_2D","","",null,null],[17,"TEXTURE_BINDING_1D","","",null,null],[17,"TEXTURE_BINDING_2D","","",null,null],[17,"TEXTURE_BINDING_3D","","",null,null],[17,"PACK_SKIP_IMAGES","","",null,null],[17,"PACK_IMAGE_HEIGHT","","",null,null],[17,"UNPACK_SKIP_IMAGES","","",null,null],[17,"UNPACK_IMAGE_HEIGHT","","",null,null],[17,"TEXTURE_3D","","",null,null],[17,"PROXY_TEXTURE_3D","","",null,null],[17,"TEXTURE_DEPTH","","",null,null],[17,"TEXTURE_WRAP_R","","",null,null],[17,"MAX_3D_TEXTURE_SIZE","","",null,null],[17,"MULTISAMPLE","","",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",null,null],[17,"SAMPLE_ALPHA_TO_ONE","","",null,null],[17,"SAMPLE_COVERAGE","","",null,null],[17,"SAMPLE_BUFFERS","","",null,null],[17,"SAMPLES","","",null,null],[17,"SAMPLE_COVERAGE_VALUE","","",null,null],[17,"SAMPLE_COVERAGE_INVERT","","",null,null],[17,"BLEND_DST_RGB","","",null,null],[17,"BLEND_SRC_RGB","","",null,null],[17,"BLEND_DST_ALPHA","","",null,null],[17,"BLEND_SRC_ALPHA","","",null,null],[17,"BGR","","",null,null],[17,"BGRA","","",null,null],[17,"MAX_ELEMENTS_VERTICES","","",null,null],[17,"MAX_ELEMENTS_INDICES","","",null,null],[17,"POINT_FADE_THRESHOLD_SIZE","","",null,null],[17,"CLAMP_TO_BORDER","","",null,null],[17,"CLAMP_TO_EDGE","","",null,null],[17,"TEXTURE_MIN_LOD","","",null,null],[17,"TEXTURE_MAX_LOD","","",null,null],[17,"TEXTURE_BASE_LEVEL","","",null,null],[17,"TEXTURE_MAX_LEVEL","","",null,null],[17,"DEPTH_COMPONENT16","","",null,null],[17,"DEPTH_COMPONENT24","","",null,null],[17,"DEPTH_COMPONENT32","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",null,null],[17,"FRAMEBUFFER_DEFAULT","","",null,null],[17,"FRAMEBUFFER_UNDEFINED","","",null,null],[17,"DEPTH_STENCIL_ATTACHMENT","","",null,null],[17,"MAJOR_VERSION","","",null,null],[17,"MINOR_VERSION","","",null,null],[17,"NUM_EXTENSIONS","","",null,null],[17,"CONTEXT_FLAGS","","",null,null],[17,"INDEX","","",null,null],[17,"COMPRESSED_RED","","",null,null],[17,"COMPRESSED_RG","","",null,null],[17,"RG","","",null,null],[17,"RG_INTEGER","","",null,null],[17,"R8","","",null,null],[17,"R16","","",null,null],[17,"RG8","","",null,null],[17,"RG16","","",null,null],[17,"R16F","","",null,null],[17,"R32F","","",null,null],[17,"RG16F","","",null,null],[17,"RG32F","","",null,null],[17,"R8I","","",null,null],[17,"R8UI","","",null,null],[17,"R16I","","",null,null],[17,"R16UI","","",null,null],[17,"R32I","","",null,null],[17,"R32UI","","",null,null],[17,"RG8I","","",null,null],[17,"RG8UI","","",null,null],[17,"RG16I","","",null,null],[17,"RG16UI","","",null,null],[17,"RG32I","","",null,null],[17,"RG32UI","","",null,null],[17,"UNSIGNED_BYTE_2_3_3_REV","","",null,null],[17,"UNSIGNED_SHORT_5_6_5","","",null,null],[17,"UNSIGNED_SHORT_5_6_5_REV","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",null,null],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",null,null],[17,"UNSIGNED_INT_8_8_8_8_REV","","",null,null],[17,"UNSIGNED_INT_2_10_10_10_REV","","",null,null],[17,"MIRRORED_REPEAT","","",null,null],[17,"ALIASED_LINE_WIDTH_RANGE","","",null,null],[17,"TEXTURE0","","",null,null],[17,"TEXTURE1","","",null,null],[17,"TEXTURE2","","",null,null],[17,"TEXTURE3","","",null,null],[17,"TEXTURE4","","",null,null],[17,"TEXTURE5","","",null,null],[17,"TEXTURE6","","",null,null],[17,"TEXTURE7","","",null,null],[17,"TEXTURE8","","",null,null],[17,"TEXTURE9","","",null,null],[17,"TEXTURE10","","",null,null],[17,"TEXTURE11","","",null,null],[17,"TEXTURE12","","",null,null],[17,"TEXTURE13","","",null,null],[17,"TEXTURE14","","",null,null],[17,"TEXTURE15","","",null,null],[17,"TEXTURE16","","",null,null],[17,"TEXTURE17","","",null,null],[17,"TEXTURE18","","",null,null],[17,"TEXTURE19","","",null,null],[17,"TEXTURE20","","",null,null],[17,"TEXTURE21","","",null,null],[17,"TEXTURE22","","",null,null],[17,"TEXTURE23","","",null,null],[17,"TEXTURE24","","",null,null],[17,"TEXTURE25","","",null,null],[17,"TEXTURE26","","",null,null],[17,"TEXTURE27","","",null,null],[17,"TEXTURE28","","",null,null],[17,"TEXTURE29","","",null,null],[17,"TEXTURE30","","",null,null],[17,"TEXTURE31","","",null,null],[17,"ACTIVE_TEXTURE","","",null,null],[17,"MAX_RENDERBUFFER_SIZE","","",null,null],[17,"COMPRESSED_RGB","","",null,null],[17,"COMPRESSED_RGBA","","",null,null],[17,"TEXTURE_COMPRESSION_HINT","","",null,null],[17,"TEXTURE_RECTANGLE","","",null,null],[17,"TEXTURE_RECTANGLE_ARB","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE_ARB","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE_ARB","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE_ARB","","",null,null],[17,"DEPTH_STENCIL","","",null,null],[17,"UNSIGNED_INT_24_8","","",null,null],[17,"MAX_TEXTURE_LOD_BIAS","","",null,null],[17,"TEXTURE_LOD_BIAS","","",null,null],[17,"INCR_WRAP","","",null,null],[17,"DECR_WRAP","","",null,null],[17,"TEXTURE_CUBE_MAP","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP","","",null,null],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",null,null],[17,"SRC1_ALPHA","","",null,null],[17,"VERTEX_ARRAY_BINDING","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",null,null],[17,"CURRENT_VERTEX_ATTRIB","","",null,null],[17,"VERTEX_PROGRAM_POINT_SIZE","","",null,null],[17,"PROGRAM_POINT_SIZE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",null,null],[17,"DEPTH_CLAMP","","",null,null],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",null,null],[17,"TEXTURE_COMPRESSED","","",null,null],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"BUFFER_SIZE","","",null,null],[17,"BUFFER_USAGE","","",null,null],[17,"STENCIL_BACK_FUNC","","",null,null],[17,"STENCIL_BACK_FAIL","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",null,null],[17,"RGBA32F","","",null,null],[17,"RGB32F","","",null,null],[17,"RGBA16F","","",null,null],[17,"RGB16F","","",null,null],[17,"MAX_DRAW_BUFFERS","","",null,null],[17,"DRAW_BUFFER0","","",null,null],[17,"DRAW_BUFFER1","","",null,null],[17,"DRAW_BUFFER2","","",null,null],[17,"DRAW_BUFFER3","","",null,null],[17,"DRAW_BUFFER4","","",null,null],[17,"DRAW_BUFFER5","","",null,null],[17,"DRAW_BUFFER6","","",null,null],[17,"DRAW_BUFFER7","","",null,null],[17,"DRAW_BUFFER8","","",null,null],[17,"DRAW_BUFFER9","","",null,null],[17,"DRAW_BUFFER10","","",null,null],[17,"DRAW_BUFFER11","","",null,null],[17,"DRAW_BUFFER12","","",null,null],[17,"DRAW_BUFFER13","","",null,null],[17,"DRAW_BUFFER14","","",null,null],[17,"DRAW_BUFFER15","","",null,null],[17,"BLEND_EQUATION_ALPHA","","",null,null],[17,"TEXTURE_DEPTH_SIZE","","",null,null],[17,"TEXTURE_COMPARE_MODE","","",null,null],[17,"TEXTURE_COMPARE_FUNC","","",null,null],[17,"COMPARE_REF_TO_TEXTURE","","",null,null],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",null,null],[17,"QUERY_COUNTER_BITS","","",null,null],[17,"CURRENT_QUERY","","",null,null],[17,"QUERY_RESULT","","",null,null],[17,"QUERY_RESULT_AVAILABLE","","",null,null],[17,"MAX_VERTEX_ATTRIBS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",null,null],[17,"MAX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"ARRAY_BUFFER","","",null,null],[17,"ELEMENT_ARRAY_BUFFER","","",null,null],[17,"ARRAY_BUFFER_BINDING","","",null,null],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",null,null],[17,"READ_ONLY","","",null,null],[17,"WRITE_ONLY","","",null,null],[17,"READ_WRITE","","",null,null],[17,"BUFFER_ACCESS","","",null,null],[17,"BUFFER_MAPPED","","",null,null],[17,"BUFFER_MAP_POINTER","","",null,null],[17,"TIME_ELAPSED","","",null,null],[17,"STREAM_DRAW","","",null,null],[17,"STREAM_READ","","",null,null],[17,"STREAM_COPY","","",null,null],[17,"STATIC_DRAW","","",null,null],[17,"STATIC_READ","","",null,null],[17,"STATIC_COPY","","",null,null],[17,"DYNAMIC_DRAW","","",null,null],[17,"DYNAMIC_READ","","",null,null],[17,"DYNAMIC_COPY","","",null,null],[17,"PIXEL_PACK_BUFFER","","",null,null],[17,"PIXEL_UNPACK_BUFFER","","",null,null],[17,"PIXEL_PACK_BUFFER_BINDING","","",null,null],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",null,null],[17,"DEPTH24_STENCIL8","","",null,null],[17,"TEXTURE_STENCIL_SIZE","","",null,null],[17,"SRC1_COLOR","","",null,null],[17,"ONE_MINUS_SRC1_COLOR","","",null,null],[17,"ONE_MINUS_SRC1_ALPHA","","",null,null],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",null,null],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",null,null],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"SAMPLES_PASSED","","",null,null],[17,"GEOMETRY_VERTICES_OUT","","",null,null],[17,"GEOMETRY_INPUT_TYPE","","",null,null],[17,"GEOMETRY_OUTPUT_TYPE","","",null,null],[17,"SAMPLER_BINDING","","",null,null],[17,"CLAMP_READ_COLOR","","",null,null],[17,"FIXED_ONLY","","",null,null],[17,"UNIFORM_BUFFER","","",null,null],[17,"UNIFORM_BUFFER_BINDING","","",null,null],[17,"UNIFORM_BUFFER_START","","",null,null],[17,"UNIFORM_BUFFER_SIZE","","",null,null],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",null,null],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",null,null],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",null,null],[17,"MAX_UNIFORM_BLOCK_SIZE","","",null,null],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",null,null],[17,"ACTIVE_UNIFORM_BLOCKS","","",null,null],[17,"UNIFORM_TYPE","","",null,null],[17,"UNIFORM_SIZE","","",null,null],[17,"UNIFORM_NAME_LENGTH","","",null,null],[17,"UNIFORM_BLOCK_INDEX","","",null,null],[17,"UNIFORM_OFFSET","","",null,null],[17,"UNIFORM_ARRAY_STRIDE","","",null,null],[17,"UNIFORM_MATRIX_STRIDE","","",null,null],[17,"UNIFORM_IS_ROW_MAJOR","","",null,null],[17,"UNIFORM_BLOCK_BINDING","","",null,null],[17,"UNIFORM_BLOCK_DATA_SIZE","","",null,null],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"FRAGMENT_SHADER","","",null,null],[17,"VERTEX_SHADER","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VARYING_FLOATS","","",null,null],[17,"MAX_VARYING_COMPONENTS","","",null,null],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",null,null],[17,"SHADER_TYPE","","",null,null],[17,"FLOAT_VEC2","","",null,null],[17,"FLOAT_VEC3","","",null,null],[17,"FLOAT_VEC4","","",null,null],[17,"INT_VEC2","","",null,null],[17,"INT_VEC3","","",null,null],[17,"INT_VEC4","","",null,null],[17,"BOOL","","",null,null],[17,"BOOL_VEC2","","",null,null],[17,"BOOL_VEC3","","",null,null],[17,"BOOL_VEC4","","",null,null],[17,"FLOAT_MAT2","","",null,null],[17,"FLOAT_MAT3","","",null,null],[17,"FLOAT_MAT4","","",null,null],[17,"SAMPLER_1D","","",null,null],[17,"SAMPLER_2D","","",null,null],[17,"SAMPLER_3D","","",null,null],[17,"SAMPLER_CUBE","","",null,null],[17,"SAMPLER_1D_SHADOW","","",null,null],[17,"SAMPLER_2D_SHADOW","","",null,null],[17,"SAMPLER_2D_RECT","","",null,null],[17,"SAMPLER_2D_RECT_SHADOW","","",null,null],[17,"FLOAT_MAT2x3","","",null,null],[17,"FLOAT_MAT2x4","","",null,null],[17,"FLOAT_MAT3x2","","",null,null],[17,"FLOAT_MAT3x4","","",null,null],[17,"FLOAT_MAT4x2","","",null,null],[17,"FLOAT_MAT4x3","","",null,null],[17,"DELETE_STATUS","","",null,null],[17,"COMPILE_STATUS","","",null,null],[17,"LINK_STATUS","","",null,null],[17,"VALIDATE_STATUS","","",null,null],[17,"INFO_LOG_LENGTH","","",null,null],[17,"ATTACHED_SHADERS","","",null,null],[17,"ACTIVE_UNIFORMS","","",null,null],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",null,null],[17,"SHADER_SOURCE_LENGTH","","",null,null],[17,"ACTIVE_ATTRIBUTES","","",null,null],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",null,null],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",null,null],[17,"SHADING_LANGUAGE_VERSION","","",null,null],[17,"CURRENT_PROGRAM","","",null,null],[17,"TEXTURE_RED_TYPE","","",null,null],[17,"TEXTURE_GREEN_TYPE","","",null,null],[17,"TEXTURE_BLUE_TYPE","","",null,null],[17,"TEXTURE_ALPHA_TYPE","","",null,null],[17,"TEXTURE_DEPTH_TYPE","","",null,null],[17,"UNSIGNED_NORMALIZED","","",null,null],[17,"TEXTURE_1D_ARRAY","","",null,null],[17,"PROXY_TEXTURE_1D_ARRAY","","",null,null],[17,"TEXTURE_2D_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D_ARRAY","","",null,null],[17,"TEXTURE_BINDING_1D_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D_ARRAY","","",null,null],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",null,null],[17,"TEXTURE_BUFFER","","",null,null],[17,"MAX_TEXTURE_BUFFER_SIZE","","",null,null],[17,"TEXTURE_BINDING_BUFFER","","",null,null],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",null,null],[17,"ANY_SAMPLES_PASSED","","",null,null],[17,"R11F_G11F_B10F","","",null,null],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",null,null],[17,"RGB9_E5","","",null,null],[17,"UNSIGNED_INT_5_9_9_9_REV","","",null,null],[17,"TEXTURE_SHARED_SIZE","","",null,null],[17,"SRGB","","",null,null],[17,"SRGB8","","",null,null],[17,"SRGB_ALPHA","","",null,null],[17,"SRGB8_ALPHA8","","",null,null],[17,"COMPRESSED_SRGB","","",null,null],[17,"COMPRESSED_SRGB_ALPHA","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",null,null],[17,"PRIMITIVES_GENERATED","","",null,null],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",null,null],[17,"RASTERIZER_DISCARD","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",null,null],[17,"INTERLEAVED_ATTRIBS","","",null,null],[17,"SEPARATE_ATTRIBS","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",null,null],[17,"POINT_SPRITE_COORD_ORIGIN","","",null,null],[17,"LOWER_LEFT","","",null,null],[17,"UPPER_LEFT","","",null,null],[17,"STENCIL_BACK_REF","","",null,null],[17,"STENCIL_BACK_VALUE_MASK","","",null,null],[17,"STENCIL_BACK_WRITEMASK","","",null,null],[17,"DRAW_FRAMEBUFFER_BINDING","","",null,null],[17,"FRAMEBUFFER_BINDING","","",null,null],[17,"RENDERBUFFER_BINDING","","",null,null],[17,"READ_FRAMEBUFFER","","",null,null],[17,"DRAW_FRAMEBUFFER","","",null,null],[17,"READ_FRAMEBUFFER_BINDING","","",null,null],[17,"RENDERBUFFER_SAMPLES","","",null,null],[17,"DEPTH_COMPONENT32F","","",null,null],[17,"DEPTH32F_STENCIL8","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",null,null],[17,"FRAMEBUFFER_COMPLETE","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",null,null],[17,"FRAMEBUFFER_UNSUPPORTED","","",null,null],[17,"MAX_COLOR_ATTACHMENTS","","",null,null],[17,"COLOR_ATTACHMENT0","","",null,null],[17,"COLOR_ATTACHMENT1","","",null,null],[17,"COLOR_ATTACHMENT2","","",null,null],[17,"COLOR_ATTACHMENT3","","",null,null],[17,"COLOR_ATTACHMENT4","","",null,null],[17,"COLOR_ATTACHMENT5","","",null,null],[17,"COLOR_ATTACHMENT6","","",null,null],[17,"COLOR_ATTACHMENT7","","",null,null],[17,"COLOR_ATTACHMENT8","","",null,null],[17,"COLOR_ATTACHMENT9","","",null,null],[17,"COLOR_ATTACHMENT10","","",null,null],[17,"COLOR_ATTACHMENT11","","",null,null],[17,"COLOR_ATTACHMENT12","","",null,null],[17,"COLOR_ATTACHMENT13","","",null,null],[17,"COLOR_ATTACHMENT14","","",null,null],[17,"COLOR_ATTACHMENT15","","",null,null],[17,"COLOR_ATTACHMENT16","","",null,null],[17,"COLOR_ATTACHMENT17","","",null,null],[17,"COLOR_ATTACHMENT18","","",null,null],[17,"COLOR_ATTACHMENT19","","",null,null],[17,"COLOR_ATTACHMENT20","","",null,null],[17,"COLOR_ATTACHMENT21","","",null,null],[17,"COLOR_ATTACHMENT22","","",null,null],[17,"COLOR_ATTACHMENT23","","",null,null],[17,"COLOR_ATTACHMENT24","","",null,null],[17,"COLOR_ATTACHMENT25","","",null,null],[17,"COLOR_ATTACHMENT26","","",null,null],[17,"COLOR_ATTACHMENT27","","",null,null],[17,"COLOR_ATTACHMENT28","","",null,null],[17,"COLOR_ATTACHMENT29","","",null,null],[17,"COLOR_ATTACHMENT30","","",null,null],[17,"COLOR_ATTACHMENT31","","",null,null],[17,"DEPTH_ATTACHMENT","","",null,null],[17,"STENCIL_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER","","",null,null],[17,"RENDERBUFFER","","",null,null],[17,"RENDERBUFFER_WIDTH","","",null,null],[17,"RENDERBUFFER_HEIGHT","","",null,null],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",null,null],[17,"STENCIL_INDEX1","","",null,null],[17,"STENCIL_INDEX4","","",null,null],[17,"STENCIL_INDEX8","","",null,null],[17,"STENCIL_INDEX16","","",null,null],[17,"RENDERBUFFER_RED_SIZE","","",null,null],[17,"RENDERBUFFER_GREEN_SIZE","","",null,null],[17,"RENDERBUFFER_BLUE_SIZE","","",null,null],[17,"RENDERBUFFER_ALPHA_SIZE","","",null,null],[17,"RENDERBUFFER_DEPTH_SIZE","","",null,null],[17,"RENDERBUFFER_STENCIL_SIZE","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",null,null],[17,"MAX_SAMPLES","","",null,null],[17,"RGBA32UI","","",null,null],[17,"RGB32UI","","",null,null],[17,"RGBA16UI","","",null,null],[17,"RGB16UI","","",null,null],[17,"RGBA8UI","","",null,null],[17,"RGB8UI","","",null,null],[17,"RGBA32I","","",null,null],[17,"RGB32I","","",null,null],[17,"RGBA16I","","",null,null],[17,"RGB16I","","",null,null],[17,"RGBA8I","","",null,null],[17,"RGB8I","","",null,null],[17,"RED_INTEGER","","",null,null],[17,"GREEN_INTEGER","","",null,null],[17,"BLUE_INTEGER","","",null,null],[17,"RGB_INTEGER","","",null,null],[17,"RGBA_INTEGER","","",null,null],[17,"BGR_INTEGER","","",null,null],[17,"BGRA_INTEGER","","",null,null],[17,"INT_2_10_10_10_REV","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",null,null],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",null,null],[17,"FRAMEBUFFER_SRGB","","",null,null],[17,"COMPRESSED_RED_RGTC1","","",null,null],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",null,null],[17,"COMPRESSED_RG_RGTC2","","",null,null],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",null,null],[17,"SAMPLER_1D_ARRAY","","",null,null],[17,"SAMPLER_2D_ARRAY","","",null,null],[17,"SAMPLER_BUFFER","","",null,null],[17,"SAMPLER_1D_ARRAY_SHADOW","","",null,null],[17,"SAMPLER_2D_ARRAY_SHADOW","","",null,null],[17,"SAMPLER_CUBE_SHADOW","","",null,null],[17,"UNSIGNED_INT_VEC2","","",null,null],[17,"UNSIGNED_INT_VEC3","","",null,null],[17,"UNSIGNED_INT_VEC4","","",null,null],[17,"INT_SAMPLER_1D","","",null,null],[17,"INT_SAMPLER_2D","","",null,null],[17,"INT_SAMPLER_3D","","",null,null],[17,"INT_SAMPLER_CUBE","","",null,null],[17,"INT_SAMPLER_2D_RECT","","",null,null],[17,"INT_SAMPLER_1D_ARRAY","","",null,null],[17,"INT_SAMPLER_2D_ARRAY","","",null,null],[17,"INT_SAMPLER_BUFFER","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_3D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",null,null],[17,"GEOMETRY_SHADER","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",null,null],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"QUERY_WAIT","","",null,null],[17,"QUERY_NO_WAIT","","",null,null],[17,"QUERY_BY_REGION_WAIT","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT","","",null,null],[17,"TIMESTAMP","","",null,null],[17,"TEXTURE_SWIZZLE_R","","",null,null],[17,"TEXTURE_SWIZZLE_G","","",null,null],[17,"TEXTURE_SWIZZLE_B","","",null,null],[17,"TEXTURE_SWIZZLE_A","","",null,null],[17,"TEXTURE_SWIZZLE_RGBA","","",null,null],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",null,null],[17,"FIRST_VERTEX_CONVENTION","","",null,null],[17,"LAST_VERTEX_CONVENTION","","",null,null],[17,"PROVOKING_VERTEX","","",null,null],[17,"SAMPLE_POSITION","","",null,null],[17,"SAMPLE_MASK","","",null,null],[17,"SAMPLE_MASK_VALUE","","",null,null],[17,"MAX_SAMPLE_MASK_WORDS","","",null,null],[17,"COPY_READ_BUFFER","","",null,null],[17,"COPY_WRITE_BUFFER","","",null,null],[17,"R8_SNORM","","",null,null],[17,"RG8_SNORM","","",null,null],[17,"RGB8_SNORM","","",null,null],[17,"RGBA8_SNORM","","",null,null],[17,"R16_SNORM","","",null,null],[17,"RG16_SNORM","","",null,null],[17,"RGB16_SNORM","","",null,null],[17,"RGBA16_SNORM","","",null,null],[17,"SIGNED_NORMALIZED","","",null,null],[17,"PRIMITIVE_RESTART","","",null,null],[17,"PRIMITIVE_RESTART_INDEX","","",null,null],[17,"RGB10_A2UI","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_SAMPLES","","",null,null],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",null,null],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",null,null],[17,"MAX_INTEGER_SAMPLES","","",null,null],[17,"MAX_SERVER_WAIT_TIMEOUT","","",null,null],[17,"OBJECT_TYPE","","",null,null],[17,"SYNC_CONDITION","","",null,null],[17,"SYNC_STATUS","","",null,null],[17,"SYNC_FLAGS","","",null,null],[17,"SYNC_FENCE","","",null,null],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",null,null],[17,"UNSIGNALED","","",null,null],[17,"SIGNALED","","",null,null],[17,"ALREADY_SIGNALED","","",null,null],[17,"TIMEOUT_EXPIRED","","",null,null],[17,"CONDITION_SATISFIED","","",null,null],[17,"WAIT_FAILED","","",null,null],[17,"BUFFER_ACCESS_FLAGS","","",null,null],[17,"BUFFER_MAP_LENGTH","","",null,null],[17,"BUFFER_MAP_OFFSET","","",null,null],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",null,null],[17,"CONTEXT_PROFILE_MASK","","",null,null],[11,"new","","Creates a `FnPtr` from a load attempt.",403,null]],"paths":[[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"flock"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"FnPtr"]]};
searchIndex['backtrace'] = {"items":[[5,"trace","backtrace","Inspects the current call-stack, passing all active frames into the closure\nprovided to calculate a stack trace.",null,{"inputs":[{"name":"fnmut"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified\nclosure.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[8,"Frame","","A trait representing one frame of a backtrace, yielded to the `trace`\nfunction of this crate.",null,null],[10,"ip","","Returns the current instruction pointer of this frame.",0,null],[10,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[8,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[11,"name","","Returns the name of this function as a byte array (may not always be\nvalid UTF-8).",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function as a byte array (may not always be\nvalid UTF-8).",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"symbol"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"symbol"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"Frame"],[8,"Symbol"]]};
searchIndex['core_foundation_sys'] = {"items":[[0,"array","core_foundation_sys","",null,null],[3,"CFArrayCallBacks","core_foundation_sys::array","",null,null],[12,"version","","",0,null],[12,"retain","","",0,null],[12,"release","","",0,null],[12,"copyDescription","","",0,null],[12,"equal","","",0,null],[7,"kCFTypeArrayCallBacks","","",null,null],[5,"CFArrayCreate","","",null,null],[5,"CFArrayGetCount","","",null,null],[5,"CFArrayGetValueAtIndex","","",null,null],[5,"CFArrayGetTypeID","","",null,null],[6,"CFArrayRetainCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayReleaseCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayCopyDescriptionCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayEqualCallBack","","FIXME(pcwalton): This is wrong.",null,null],[6,"CFArrayRef","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"cfarraycallbacks"}],"output":{"name":"cfarraycallbacks"}}],[0,"base","core_foundation_sys","",null,null],[3,"CFRange","core_foundation_sys::base","",null,null],[12,"location","","",1,null],[12,"length","","",1,null],[7,"kCFAllocatorDefault","","",null,null],[7,"kCFAllocatorSystemDefault","","",null,null],[7,"kCFAllocatorMalloc","","",null,null],[7,"kCFAllocatorMallocZone","","",null,null],[7,"kCFAllocatorNull","","",null,null],[7,"kCFAllocatorUseContext","","",null,null],[7,"kCFNull","","",null,null],[5,"CFGetRetainCount","","",null,null],[5,"CFGetTypeID","","",null,null],[5,"CFHash","","",null,null],[5,"CFRelease","","",null,null],[5,"CFRetain","","",null,null],[5,"CFShow","","",null,null],[6,"Boolean","","",null,null],[6,"CFIndex","","",null,null],[6,"mach_port_t","","",null,null],[6,"CFAllocatorRef","","",null,null],[6,"CFNullRef","","",null,null],[6,"CFHashCode","","",null,null],[6,"CFTypeID","","",null,null],[6,"CFTypeRef","","",null,null],[6,"CFOptionFlags","","",null,null],[6,"OSStatus","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"cfrange"}],"output":{"name":"cfrange"}}],[11,"init","","",1,{"inputs":[{"name":"cfrange"},{"name":"cfindex"},{"name":"cfindex"}],"output":{"name":"cfrange"}}],[0,"bundle","core_foundation_sys","",null,null],[5,"CFBundleGetBundleWithIdentifier","core_foundation_sys::bundle","",null,null],[5,"CFBundleGetFunctionPointerForName","","",null,null],[5,"CFBundleGetTypeID","","",null,null],[6,"CFBundleRef","","",null,null],[0,"data","core_foundation_sys","",null,null],[5,"CFDataCreate","core_foundation_sys::data","",null,null],[5,"CFDataGetBytePtr","","",null,null],[5,"CFDataGetLength","","",null,null],[5,"CFDataGetTypeID","","",null,null],[6,"CFDataRef","","",null,null],[0,"date","core_foundation_sys","",null,null],[5,"CFAbsoluteTimeGetCurrent","core_foundation_sys::date","",null,null],[6,"CFTimeInterval","","",null,null],[6,"CFAbsoluteTime","","",null,null],[0,"dictionary","core_foundation_sys","",null,null],[3,"CFDictionaryKeyCallBacks","core_foundation_sys::dictionary","",null,null],[12,"version","","",2,null],[12,"retain","","",2,null],[12,"release","","",2,null],[12,"copyDescription","","",2,null],[12,"equal","","",2,null],[12,"hash","","",2,null],[3,"CFDictionaryValueCallBacks","","",null,null],[12,"version","","",3,null],[12,"retain","","",3,null],[12,"release","","",3,null],[12,"copyDescription","","",3,null],[12,"equal","","",3,null],[7,"kCFTypeDictionaryKeyCallBacks","","",null,null],[7,"kCFTypeDictionaryValueCallBacks","","",null,null],[5,"CFDictionaryContainsKey","","",null,null],[5,"CFDictionaryCreate","","",null,null],[5,"CFDictionaryGetCount","","",null,null],[5,"CFDictionaryGetTypeID","","",null,null],[5,"CFDictionaryGetValueIfPresent","","",null,null],[6,"CFDictionaryApplierFunction","","",null,null],[6,"CFDictionaryCopyDescriptionCallBack","","",null,null],[6,"CFDictionaryEqualCallBack","","",null,null],[6,"CFDictionaryHashCallBack","","",null,null],[6,"CFDictionaryReleaseCallBack","","",null,null],[6,"CFDictionaryRetainCallBack","","",null,null],[6,"CFDictionaryRef","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"cfdictionarykeycallbacks"}],"output":{"name":"cfdictionarykeycallbacks"}}],[11,"clone","","",3,{"inputs":[{"name":"cfdictionaryvaluecallbacks"}],"output":{"name":"cfdictionaryvaluecallbacks"}}],[0,"number","core_foundation_sys","",null,null],[7,"kCFBooleanTrue","core_foundation_sys::number","",null,null],[7,"kCFBooleanFalse","","",null,null],[5,"CFBooleanGetTypeID","","",null,null],[5,"CFNumberCreate","","",null,null],[5,"CFNumberGetValue","","",null,null],[5,"CFNumberGetTypeID","","",null,null],[6,"CFBooleanRef","","",null,null],[6,"CFNumberType","","",null,null],[6,"CFNumberRef","","",null,null],[7,"kCFNumberSInt32Type","","",null,null],[7,"kCFNumberSInt64Type","","",null,null],[7,"kCFNumberFloat64Type","","",null,null],[0,"runloop","core_foundation_sys","",null,null],[3,"CFRunLoopSourceContext","core_foundation_sys::runloop","",null,null],[12,"version","","",4,null],[12,"info","","",4,null],[12,"retain","","",4,null],[12,"release","","",4,null],[12,"copyDescription","","",4,null],[12,"equal","","",4,null],[12,"hash","","",4,null],[12,"schedule","","",4,null],[12,"cancel","","",4,null],[12,"perform","","",4,null],[3,"CFRunLoopSourceContext1","","",null,null],[12,"version","","",5,null],[12,"info","","",5,null],[12,"retain","","",5,null],[12,"release","","",5,null],[12,"copyDescription","","",5,null],[12,"equal","","",5,null],[12,"hash","","",5,null],[12,"getPort","","",5,null],[12,"perform","","",5,null],[3,"CFRunLoopObserverContext","","",null,null],[12,"version","","",6,null],[12,"info","","",6,null],[12,"retain","","",6,null],[12,"release","","",6,null],[12,"copyDescription","","",6,null],[3,"CFRunLoopTimerContext","","",null,null],[12,"version","","",7,null],[12,"info","","",7,null],[12,"retain","","",7,null],[12,"release","","",7,null],[12,"copyDescription","","",7,null],[7,"kCFRunLoopDefaultMode","","",null,null],[7,"kCFRunLoopCommonModes","","",null,null],[5,"CFRunLoopGetTypeID","","",null,null],[5,"CFRunLoopGetCurrent","","",null,null],[5,"CFRunLoopGetMain","","",null,null],[5,"CFRunLoopCopyCurrentMode","","",null,null],[5,"CFRunLoopCopyAllModes","","",null,null],[5,"CFRunLoopAddCommonMode","","",null,null],[5,"CFRunLoopGetNextTimerFireDate","","",null,null],[5,"CFRunLoopRun","","",null,null],[5,"CFRunLoopRunInMode","","",null,null],[5,"CFRunLoopIsWaiting","","",null,null],[5,"CFRunLoopWakeUp","","",null,null],[5,"CFRunLoopStop","","",null,null],[5,"CFRunLoopContainsSource","","",null,null],[5,"CFRunLoopAddSource","","",null,null],[5,"CFRunLoopRemoveSource","","",null,null],[5,"CFRunLoopContainsObserver","","",null,null],[5,"CFRunLoopAddObserver","","",null,null],[5,"CFRunLoopRemoveObserver","","",null,null],[5,"CFRunLoopContainsTimer","","",null,null],[5,"CFRunLoopAddTimer","","",null,null],[5,"CFRunLoopRemoveTimer","","",null,null],[5,"CFRunLoopSourceGetTypeID","","",null,null],[5,"CFRunLoopSourceCreate","","",null,null],[5,"CFRunLoopSourceGetOrder","","",null,null],[5,"CFRunLoopSourceInvalidate","","",null,null],[5,"CFRunLoopSourceIsValid","","",null,null],[5,"CFRunLoopSourceGetContext","","",null,null],[5,"CFRunLoopSourceSignal","","",null,null],[5,"CFRunLoopObserverGetTypeID","","",null,null],[5,"CFRunLoopObserverCreate","","",null,null],[5,"CFRunLoopObserverGetActivities","","",null,null],[5,"CFRunLoopObserverDoesRepeat","","",null,null],[5,"CFRunLoopObserverGetOrder","","",null,null],[5,"CFRunLoopObserverInvalidate","","",null,null],[5,"CFRunLoopObserverIsValid","","",null,null],[5,"CFRunLoopObserverGetContext","","",null,null],[5,"CFRunLoopTimerGetTypeID","","",null,null],[5,"CFRunLoopTimerCreate","","",null,null],[5,"CFRunLoopTimerGetNextFireDate","","",null,null],[5,"CFRunLoopTimerSetNextFireDate","","",null,null],[5,"CFRunLoopTimerGetInterval","","",null,null],[5,"CFRunLoopTimerDoesRepeat","","",null,null],[5,"CFRunLoopTimerGetOrder","","",null,null],[5,"CFRunLoopTimerInvalidate","","",null,null],[5,"CFRunLoopTimerIsValid","","",null,null],[5,"CFRunLoopTimerGetContext","","",null,null],[5,"CFRunLoopTimerGetTolerance","","",null,null],[5,"CFRunLoopTimerSetTolerance","","",null,null],[6,"CFRunLoopRef","","",null,null],[6,"CFRunLoopSourceRef","","",null,null],[6,"CFRunLoopObserverRef","","",null,null],[6,"CFRunLoopActivity","","",null,null],[6,"CFRunLoopObserverCallBack","","",null,null],[6,"CFRunLoopTimerCallBack","","",null,null],[6,"CFRunLoopTimerRef","","",null,null],[17,"kCFRunLoopRunFinished","","",null,null],[17,"kCFRunLoopRunStopped","","",null,null],[17,"kCFRunLoopRunTimedOut","","",null,null],[17,"kCFRunLoopRunHandledSource","","",null,null],[17,"kCFRunLoopEntry","","",null,null],[17,"kCFRunLoopBeforeTimers","","",null,null],[17,"kCFRunLoopBeforeSources","","",null,null],[17,"kCFRunLoopBeforeWaiting","","",null,null],[17,"kCFRunLoopAfterWaiting","","",null,null],[17,"kCFRunLoopExit","","",null,null],[17,"kCFRunLoopAllActivities","","",null,null],[0,"set","core_foundation_sys","",null,null],[3,"CFSetCallBacks","core_foundation_sys::set","",null,null],[12,"version","","",8,null],[12,"retain","","",8,null],[12,"release","","",8,null],[12,"copyDescription","","",8,null],[12,"equal","","",8,null],[12,"hash","","",8,null],[7,"kCFTypeSetCallBacks","","",null,null],[5,"CFSetCreate","","",null,null],[5,"CFSetGetTypeID","","",null,null],[6,"CFSetRetainCallBack","","",null,null],[6,"CFSetReleaseCallBack","","",null,null],[6,"CFSetCopyDescriptionCallBack","","",null,null],[6,"CFSetEqualCallBack","","",null,null],[6,"CFSetHashCallBack","","",null,null],[6,"CFSetRef","","",null,null],[11,"clone","","",8,{"inputs":[{"name":"cfsetcallbacks"}],"output":{"name":"cfsetcallbacks"}}],[0,"string","core_foundation_sys","",null,null],[5,"CFStringCreateWithBytes","core_foundation_sys::string","",null,null],[5,"CFStringCreateWithBytesNoCopy","","",null,null],[5,"CFStringGetBytes","","",null,null],[5,"CFStringGetCStringPtr","","",null,null],[5,"CFStringGetLength","","",null,null],[5,"CFStringGetTypeID","","",null,null],[6,"UniChar","","",null,null],[6,"CFStringCompareFlags","","",null,null],[6,"CFStringEncoding","","",null,null],[6,"CFStringEncodings","","",null,null],[6,"CFStringRef","","",null,null],[7,"kCFStringEncodingUTF8","","",null,null],[0,"url","core_foundation_sys","",null,null],[5,"CFURLCreateWithFileSystemPath","core_foundation_sys::url","",null,null],[5,"CFURLGetString","","",null,null],[5,"CFURLGetTypeID","","",null,null],[6,"CFURLRef","","",null,null],[6,"CFURLBookmarkCreationOptions","","",null,null],[6,"CFURLPathStyle","","",null,null],[17,"kCFURLPOSIXPathStyle","","",null,null],[17,"kCFURLHFSPathStyle","","",null,null],[17,"kCFURLWindowsPathStyle","","",null,null]],"paths":[[3,"CFArrayCallBacks"],[3,"CFRange"],[3,"CFDictionaryKeyCallBacks"],[3,"CFDictionaryValueCallBacks"],[3,"CFRunLoopSourceContext"],[3,"CFRunLoopSourceContext1"],[3,"CFRunLoopObserverContext"],[3,"CFRunLoopTimerContext"],[3,"CFSetCallBacks"]]};
searchIndex['malloc_buf'] = {"items":[[3,"MallocBuffer","malloc_buf","A type that represents a `malloc`'d chunk of memory.",null,null],[11,"new","","Constructs a new `MallocBuffer` for a `malloc`'d buffer\nwith the given length at the given pointer.\nReturns `None` if the given pointer is null and the length is not 0.",0,null],[11,"deref","","",0,null]],"paths":[[3,"MallocBuffer"]]};
searchIndex['miniz_sys'] = {"items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex['backtrace_sys'] = {"items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex['freetype'] = {"items":[[11,"clone","freetype_sys","",0,{"inputs":[{"name":"ft_vector"}],"output":{"name":"ft_vector"}}],[11,"clone","","",1,{"inputs":[{"name":"ft_bbox"}],"output":{"name":"ft_bbox"}}],[11,"clone","","",2,{"inputs":[{"name":"ft_matrix"}],"output":{"name":"ft_matrix"}}],[11,"clone","","",3,{"inputs":[{"name":"ft_unitvector"}],"output":{"name":"ft_unitvector"}}],[11,"clone","","",4,{"inputs":[{"name":"ft_size_metrics"}],"output":{"name":"ft_size_metrics"}}],[11,"clone","","",5,{"inputs":[{"name":"ft_glyph_metrics"}],"output":{"name":"ft_glyph_metrics"}}],[11,"clone","","",6,{"inputs":[{"name":"ft_parameter"}],"output":{"name":"ft_parameter"}}],[11,"clone","","",7,{"inputs":[{"name":"ft_bitmap_size"}],"output":{"name":"ft_bitmap_size"}}],[11,"clone","","",8,{"inputs":[{"name":"tt_os2"}],"output":{"name":"tt_os2"}}],[11,"clone","","",9,{"inputs":[{"name":"ft_charmaprec"}],"output":{"name":"ft_charmaprec"}}],[11,"clone","","",10,{"inputs":[{"name":"ft_listrec"}],"output":{"name":"ft_listrec"}}],[11,"clone","","",11,{"inputs":[{"name":"ft_size_requestrec"}],"output":{"name":"ft_size_requestrec"}}],[6,"FT_Byte","freetype::ffi","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",12,{"inputs":[{"name":"fterrormethods"}],"output":{"name":"bool"}}],[3,"FT_Vector","","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",1,null],[12,"yMin","","",1,null],[12,"xMax","","",1,null],[12,"yMax","","",1,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",2,null],[12,"xy","","",2,null],[12,"yx","","",2,null],[12,"yy","","",2,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",13,null],[12,"width","","",13,null],[12,"pitch","","",13,null],[12,"buffer","","",13,null],[12,"num_grays","","",13,null],[12,"pixel_mode","","",13,null],[12,"palette_mode","","",13,null],[12,"palette","","",13,null],[3,"FT_Data","","",null,null],[12,"pointer","","",14,null],[12,"length","","",14,null],[3,"FT_Generic","","",null,null],[12,"data","","",15,null],[12,"finalizer","","",15,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",4,null],[12,"y_ppem","","",4,null],[12,"x_scale","","",4,null],[12,"y_scale","","",4,null],[12,"ascender","","",4,null],[12,"descender","","",4,null],[12,"height","","",4,null],[12,"max_advance","","",4,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",16,null],[12,"n_points","","",16,null],[12,"points","","",16,null],[12,"tags","","",16,null],[12,"contours","","",16,null],[12,"flags","","",16,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",5,null],[12,"height","","",5,null],[12,"horiBearingX","","",5,null],[12,"horiBearingY","","",5,null],[12,"horiAdvance","","",5,null],[12,"vertBearingX","","",5,null],[12,"vertBearingY","","",5,null],[12,"vertAdvance","","",5,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",6,null],[12,"data","","",6,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",17,null],[12,"memory_base","","",17,null],[12,"memory_size","","",17,null],[12,"pathname","","",17,null],[12,"stream","","",17,null],[12,"driver","","",17,null],[12,"num_params","","",17,null],[12,"params","","",17,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",7,null],[12,"width","","",7,null],[12,"size","","",7,null],[12,"x_ppem","","",7,null],[12,"y_ppem","","",7,null],[3,"TT_OS2","","",null,null],[12,"version","","",8,null],[12,"xAvgCharWidth","","",8,null],[12,"usWeightClass","","",8,null],[12,"usWidthClass","","",8,null],[12,"fsType","","",8,null],[12,"ySubscriptXSize","","",8,null],[12,"ySubscriptYSize","","",8,null],[12,"ySubscriptXOffset","","",8,null],[12,"ySubscriptYOffset","","",8,null],[12,"ySuperscriptXSize","","",8,null],[12,"ySuperscriptYSize","","",8,null],[12,"ySuperscriptXOffset","","",8,null],[12,"ySuperscriptYOffset","","",8,null],[12,"yStrikeoutSize","","",8,null],[12,"yStrikeoutPosition","","",8,null],[12,"sFamilyClass","","",8,null],[12,"panose","","",8,null],[12,"ulUnicodeRange1","","",8,null],[12,"ulUnicodeRange2","","",8,null],[12,"ulUnicodeRange3","","",8,null],[12,"ulUnicodeRange4","","",8,null],[12,"ulCodePageRange1","","",8,null],[12,"ulCodePageRange2","","",8,null],[12,"sxHeight","","",8,null],[12,"sCapHeight","","",8,null],[12,"usDefaultChar","","",8,null],[12,"usBreakChar","","",8,null],[12,"usMaxContext","","",8,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[6,"FT_Glyph_Format","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[6,"FT_Render_Mode","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[6,"FT_Encoding","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",9,null],[12,"encoding","","",9,null],[12,"platform_id","","",9,null],[12,"encoding_id","","",9,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",18,null],[12,"face_index","","",18,null],[12,"face_flags","","",18,null],[12,"style_flags","","",18,null],[12,"num_glyphs","","",18,null],[12,"family_name","","",18,null],[12,"style_name","","",18,null],[12,"num_fixed_sizes","","",18,null],[12,"available_sizes","","",18,null],[12,"num_charmaps","","",18,null],[12,"charmaps","","",18,null],[12,"generic","","",18,null],[12,"bbox","","",18,null],[12,"units_per_EM","","",18,null],[12,"ascender","","",18,null],[12,"descender","","",18,null],[12,"height","","",18,null],[12,"max_advance_width","","",18,null],[12,"max_advance_height","","",18,null],[12,"underline_position","","",18,null],[12,"underline_thickness","","",18,null],[12,"glyph","","",18,null],[12,"size","","",18,null],[12,"charmap","","",18,null],[12,"driver","","",18,null],[12,"memory","","",18,null],[12,"stream","","",18,null],[12,"sizes_list","","",18,null],[12,"autohint","","",18,null],[12,"extensions","","",18,null],[12,"internal","","",18,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",19,null],[12,"face","","",19,null],[12,"next","","",19,null],[12,"reserved","","",19,null],[12,"generic","","",19,null],[12,"metrics","","",19,null],[12,"linearHoriAdvance","","",19,null],[12,"linearVertAdvance","","",19,null],[12,"advance","","",19,null],[12,"format","","",19,null],[12,"bitmap","","",19,null],[12,"bitmap_left","","",19,null],[12,"bitmap_top","","",19,null],[12,"outline","","",19,null],[12,"num_subglyphs","","",19,null],[12,"subglyphs","","",19,null],[12,"control_data","","",19,null],[12,"control_len","","",19,null],[12,"lsb_delta","","",19,null],[12,"rsb_delta","","",19,null],[12,"other","","",19,null],[12,"internal","","",19,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",20,null],[12,"generic","","",20,null],[12,"metrics","","",20,null],[12,"internal","","",20,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",21,null],[12,"size","","",21,null],[12,"pos","","",21,null],[12,"descriptor","","",21,null],[12,"pathname","","",21,null],[12,"read","","",21,null],[12,"close","","",21,null],[12,"memory","","",21,null],[12,"cursor","","",21,null],[12,"limit","","",21,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",22,null],[12,"alloc","","",22,null],[12,"free","","",22,null],[12,"realloc","","",22,null],[3,"FT_ListRec","","",null,null],[12,"head","","",10,null],[12,"tail","","",10,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",23,null],[12,"next","","",23,null],[12,"data","","",23,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",11,null],[12,"width","","",11,null],[12,"height","","",11,null],[12,"horiResolution","","",11,null],[12,"vertResolution","","",11,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",24,null],[12,"clazz","","",24,null],[12,"format","","",24,null],[12,"advance","","",24,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",25,null],[12,"left","","",25,null],[12,"top","","",25,null],[12,"bitmap","","",25,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",26,null],[12,"outline","","",26,null],[5,"FT_HAS_HORIZONTAL","","",null,null],[5,"FT_HAS_VERTICAL","","",null,null],[5,"FT_HAS_KERNING","","",null,null],[5,"FT_IS_SCALABLE","","",null,null],[5,"FT_IS_SFNT","","",null,null],[5,"FT_IS_FIXED_WIDTH","","",null,null],[5,"FT_HAS_FIXED_SIZES","","",null,null],[5,"FT_HAS_GLYPH_NAMES","","",null,null],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,null],[5,"FT_IS_CID_KEYED","","",null,null],[5,"FT_IS_TRICKY","","",null,null],[5,"FT_HAS_COLOR","","",null,null],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[0,"bitmap","freetype","",null,null],[3,"Bitmap","freetype::bitmap","",null,null],[4,"PixelMode","","An enumeration type used to describe the format of pixels in a given bitmap. Note that\nadditional formats may be added in the future.",null,null],[13,"None","","This value is reserved.",27,null],[13,"Mono","","A monochrome bitmap, using 1 bit per pixel. Note that pixels are\nstored in most-significant order (MSB), which means that the left-most\npixel in a byte has value 128.",27,null],[13,"Gray","","An 8-bit bitmap, generally used to represent anti-aliased glyph images.\nEach pixel is stored in one byte. Note that the number of `gray`\nlevels is stored in the `num_grays` field of the FT_Bitmap structure\n(it generally is 256).",27,null],[13,"Gray2","","A 2-bit per pixel bitmap, used to represent embedded anti-aliased\nbitmaps in font files according to the OpenType specification. We\nhaven't found a single font using this format, however.",27,null],[13,"Gray4","","A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in\nfont files according to the OpenType specification. We haven't found a\nsingle font using this format, however.",27,null],[13,"Lcd","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used\nfor display on LCD displays; the bitmap is three times wider than the\noriginal glyph image. See also FT_RENDER_MODE_LCD.",27,null],[13,"LcdV","","An 8-bit bitmap, representing RGB or BGR decimated glyph images used for\ndisplay on rotated LCD displays; the bitmap is three times taller than\nthe original glyph image. See also FT_RENDER_MODE_LCD_V.",27,null],[13,"Bgra","","An image with four 8-bit channels per pixel, representing a color image\n(such as emoticons) with alpha channel. For each pixel, the format is\nBGRA, which means, the blue channel comes first in memory. The color\nchannels are pre-multiplied and in the sRGB colorspace. For example,\nfull red at half-translucent opacity will be represented as\n`00,00,80,80`, not `00,00,FF,80`. See also FT_LOAD_COLOR.",27,null],[11,"fmt","","",27,{"inputs":[{"name":"pixelmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"pixelmode"}],"output":{"name":"pixelmode"}}],[11,"from_raw","","",28,null],[11,"buffer","","A typeless pointer to the bitmap buffer. This value should be aligned\non 32-bit boundaries in most cases.",28,null],[11,"width","","The number of pixels in bitmap row.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"i32"}}],[11,"rows","","The number of bitmap rows.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"i32"}}],[11,"raw","","",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"ft_bitmap"}}],[11,"pixel_mode","","The pixel mode, i.e., how pixel bits are stored. See `PixelMode` for\npossible values.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"ftresult"}}],[11,"pitch","","The pitch's absolute value is the number of bytes taken by one bitmap row, including\npadding. However, the pitch is positive when the bitmap has a ‘down’ flow, and negative\nwhen it has an ‘up’ flow. In all cases, the pitch is an offset to add to a bitmap pointer\nin order to go down one row.",28,{"inputs":[{"name":"bitmap"}],"output":{"name":"i32"}}],[0,"bitmap_glyph","freetype","",null,null],[3,"BitmapGlyph","freetype::bitmap_glyph","",null,null],[11,"clone","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"bitmapglyph"}}],[11,"from_raw","","",29,{"inputs":[{"name":"bitmapglyph"},{"name":"ft_bitmapglyph"}],"output":{"name":"self"}}],[11,"left","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"i32"}}],[11,"top","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"i32"}}],[11,"bitmap","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"bitmap"}}],[11,"raw","","",29,{"inputs":[{"name":"bitmapglyph"}],"output":{"name":"ft_bitmapglyphrec"}}],[0,"error","freetype","",null,null],[4,"Error","freetype::error","",null,null],[13,"Ok","","",30,null],[13,"CannotOpenResource","","",30,null],[13,"UnknownFileFormat","","",30,null],[13,"InvalidFileFormat","","",30,null],[13,"InvalidVersion","","",30,null],[13,"LowerModuleVersion","","",30,null],[13,"InvalidArgument","","",30,null],[13,"UnimplementedFeature","","",30,null],[13,"InvalidTable","","",30,null],[13,"InvalidOffset","","",30,null],[13,"ArrayTooLarge","","",30,null],[13,"MissingModule","","",30,null],[13,"MissingProperty","","",30,null],[13,"InvalidGlyphIndex","","",30,null],[13,"InvalidCharacterCode","","",30,null],[13,"InvalidGlyphFormat","","",30,null],[13,"CannotRenderGlyph","","",30,null],[13,"InvalidOutline","","",30,null],[13,"InvalidComposite","","",30,null],[13,"TooManyHints","","",30,null],[13,"InvalidPixelSize","","",30,null],[13,"InvalidHandle","","",30,null],[13,"InvalidLibraryHandle","","",30,null],[13,"InvalidDriverHandle","","",30,null],[13,"InvalidFaceHandle","","",30,null],[13,"InvalidSizeHandle","","",30,null],[13,"InvalidSlotHandle","","",30,null],[13,"InvalidCharMapHandle","","",30,null],[13,"InvalidCacheHandle","","",30,null],[13,"InvalidStreamHandle","","",30,null],[13,"TooManyDrivers","","",30,null],[13,"TooManyExtensions","","",30,null],[13,"OutOfMemory","","",30,null],[13,"UnlistedObject","","",30,null],[13,"CannotOpenStream","","",30,null],[13,"InvalidStreamSeek","","",30,null],[13,"InvalidStreamSkip","","",30,null],[13,"InvalidStreamRead","","",30,null],[13,"InvalidStreamOperation","","",30,null],[13,"InvalidFrameOperation","","",30,null],[13,"NestedFrameAccess","","",30,null],[13,"InvalidFrameRead","","",30,null],[13,"RasterUninitialized","","",30,null],[13,"RasterCorrupted","","",30,null],[13,"RasterOverflow","","",30,null],[13,"RasterNegativeHeight","","",30,null],[13,"TooManyCaches","","",30,null],[13,"InvalidOpcode","","",30,null],[13,"TooFewArguments","","",30,null],[13,"StackOverflow","","",30,null],[13,"CodeOverflow","","",30,null],[13,"BadArgument","","",30,null],[13,"DivideByZero","","",30,null],[13,"InvalidReference","","",30,null],[13,"DebugOpCode","","",30,null],[13,"ENDFInExecStream","","",30,null],[13,"NestedDEFS","","",30,null],[13,"InvalidCodeRange","","",30,null],[13,"ExecutionTooLong","","",30,null],[13,"TooManyFunctionDefs","","",30,null],[13,"TooManyInstructionDefs","","",30,null],[13,"TableMissing","","",30,null],[13,"HorizHeaderMissing","","",30,null],[13,"LocationsMissing","","",30,null],[13,"NameTableMissing","","",30,null],[13,"CMapTableMissing","","",30,null],[13,"HmtxTableMissing","","",30,null],[13,"PostTableMissing","","",30,null],[13,"InvalidHorizMetrics","","",30,null],[13,"InvalidCharMapFormat","","",30,null],[13,"InvalidPPem","","",30,null],[13,"InvalidVertMetrics","","",30,null],[13,"CouldNotFindContext","","",30,null],[13,"InvalidPostTableFormat","","",30,null],[13,"InvalidPostTable","","",30,null],[13,"Syntax","","",30,null],[13,"StackUnderflow","","",30,null],[13,"Ignore","","",30,null],[13,"NoUnicodeGlyphName","","",30,null],[13,"MissingStartfontField","","",30,null],[13,"MissingFontField","","",30,null],[13,"MissingSizeField","","",30,null],[13,"MissingFontboundingboxField","","",30,null],[13,"MissingCharsField","","",30,null],[13,"MissingStartcharField","","",30,null],[13,"MissingEncodingField","","",30,null],[13,"MissingBbxField","","",30,null],[13,"BbxTooBig","","",30,null],[13,"CorruptedFontHeader","","",30,null],[13,"CorruptedFontGlyphs","","",30,null],[13,"Max","","",30,null],[13,"UnexpectedPixelMode","","",30,null],[13,"InvalidPath","","",30,null],[13,"Unknown","","",30,null],[6,"FtResult","","",null,null],[11,"fmt","","",30,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",30,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"face","freetype","",null,null],[3,"LoadFlag","freetype::face","",null,null],[3,"Face","","",null,null],[4,"KerningMode","","",null,null],[13,"KerningDefault","","",31,null],[13,"KerningUnfitted","","",31,null],[13,"KerningUnscaled","","",31,null],[17,"DEFAULT","","",null,null],[17,"NO_SCALE","","",null,null],[17,"NO_HINTING","","",null,null],[17,"RENDER","","",null,null],[17,"NO_BITMAP","","",null,null],[17,"VERTICAL_LAYOUT","","",null,null],[17,"FORCE_AUTOHINT","","",null,null],[17,"CROP_BITMAP","","",null,null],[17,"PEDANTIC","","",null,null],[17,"IGNORE_GLOBAL_ADVANCE_WITH","","",null,null],[17,"NO_RECURSE","","",null,null],[17,"IGNORE_TRANSFORM","","",null,null],[17,"MONOCHROME","","",null,null],[17,"LINEAR_DESIGN","","",null,null],[17,"NO_AUTOHINT","","",null,null],[17,"TARGET_NORMAL","","",null,null],[17,"TARGET_LIGHT","","",null,null],[17,"TARGET_MONO","","",null,null],[17,"TARGET_LCD","","",null,null],[17,"TARGET_LCD_V","","",null,null],[17,"COLOR","","",null,null],[11,"clone","","",31,{"inputs":[{"name":"kerningmode"}],"output":{"name":"kerningmode"}}],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"eq","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"loadflag"},{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"loadflag"},{"name":"i32"}],"output":{"name":"loadflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"loadflag"},{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"loadflag"}],"output":{"name":"loadflag"}}],[11,"hash","","",33,null],[11,"eq","","",33,{"inputs":[{"name":"face"},{"name":"face"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"face"},{"name":"face"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"face"}],"output":{"name":"self"}}],[11,"from_raw","","",33,{"inputs":[{"name":"face"},{"name":"ft_library"},{"name":"ft_face"}],"output":{"name":"self"}}],[11,"attach_file","","",33,{"inputs":[{"name":"face"},{"name":"str"}],"output":{"name":"ftresult"}}],[11,"reference","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ftresult"}}],[11,"set_char_size","","",33,{"inputs":[{"name":"face"},{"name":"isize"},{"name":"isize"},{"name":"u32"},{"name":"u32"}],"output":{"name":"ftresult"}}],[11,"set_pixel_sizes","","",33,{"inputs":[{"name":"face"},{"name":"u32"},{"name":"u32"}],"output":{"name":"ftresult"}}],[11,"load_glyph","","",33,{"inputs":[{"name":"face"},{"name":"u32"},{"name":"loadflag"}],"output":{"name":"ftresult"}}],[11,"load_char","","",33,{"inputs":[{"name":"face"},{"name":"usize"},{"name":"loadflag"}],"output":{"name":"ftresult"}}],[11,"set_transform","","",33,{"inputs":[{"name":"face"},{"name":"matrix"},{"name":"vector"}],"output":null}],[11,"get_char_index","","",33,{"inputs":[{"name":"face"},{"name":"usize"}],"output":{"name":"u32"}}],[11,"get_kerning","","",33,{"inputs":[{"name":"face"},{"name":"u32"},{"name":"u32"},{"name":"kerningmode"}],"output":{"name":"ftresult"}}],[11,"glyph","","",33,{"inputs":[{"name":"face"}],"output":{"name":"glyphslot"}}],[11,"has_horizontal","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_vertical","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_kerning","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_scalable","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_sfnt","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_fixed_width","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_fixed_sizes","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_glyph_names","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_cid_keyed","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"is_tricky","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"has_color","","",33,{"inputs":[{"name":"face"}],"output":{"name":"bool"}}],[11,"raw","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_facerec"}}],[11,"raw_mut","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_facerec"}}],[11,"ascender","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"descender","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"em_size","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"height","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"max_advance_width","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"max_advance_height","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"underline_position","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"underline_thickness","","",33,{"inputs":[{"name":"face"}],"output":{"name":"ft_short"}}],[11,"family_name","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"style_name","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"size_metrics","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"postscript_name","","",33,{"inputs":[{"name":"face"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"face"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",33,{"inputs":[{"name":"face"}],"output":null}],[0,"glyph","freetype","",null,null],[3,"Glyph","freetype::glyph","",null,null],[11,"from_raw","","",34,{"inputs":[{"name":"glyph"},{"name":"ft_library"},{"name":"ft_glyph"}],"output":{"name":"self"}}],[11,"transform","","",34,{"inputs":[{"name":"glyph"},{"name":"option"},{"name":"option"}],"output":{"name":"ftresult"}}],[11,"get_cbox","","",34,{"inputs":[{"name":"glyph"},{"name":"ft_glyph_bbox_mode"}],"output":{"name":"bbox"}}],[11,"to_bitmap","","",34,{"inputs":[{"name":"glyph"},{"name":"rendermode"},{"name":"option"}],"output":{"name":"ftresult"}}],[11,"advance_x","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"isize"}}],[11,"advance_y","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"isize"}}],[11,"advance","","DEPRECATED: use advance_x and advance_y instead",34,{"inputs":[{"name":"glyph"}],"output":{"name":"ft_vector"}}],[11,"format","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"ft_glyph_format"}}],[11,"raw","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"ft_glyphrec"}}],[11,"clone","","",34,{"inputs":[{"name":"glyph"}],"output":{"name":"self"}}],[11,"drop","","",34,{"inputs":[{"name":"glyph"}],"output":null}],[0,"glyph_slot","freetype","",null,null],[3,"GlyphSlot","freetype::glyph_slot","",null,null],[11,"hash","","",35,null],[11,"eq","","",35,{"inputs":[{"name":"glyphslot"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"glyphslot"},{"name":"glyphslot"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"glyphslot"}}],[11,"from_raw","","",35,{"inputs":[{"name":"glyphslot"},{"name":"ft_library"},{"name":"ft_glyphslot"}],"output":{"name":"self"}}],[11,"render_glyph","","",35,{"inputs":[{"name":"glyphslot"},{"name":"rendermode"}],"output":{"name":"ftresult"}}],[11,"get_subglyph_info","","",35,{"inputs":[{"name":"glyphslot"},{"name":"u32"}],"output":{"name":"ftresult"}}],[11,"get_glyph","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ftresult"}}],[11,"outline","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"option"}}],[11,"bitmap","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"bitmap"}}],[11,"bitmap_left","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"i32"}}],[11,"bitmap_top","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"i32"}}],[11,"advance","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"vector"}}],[11,"linear_hori_advance","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ft_fixed"}}],[11,"linear_vert_advance","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ft_fixed"}}],[11,"metrics","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"glyphmetrics"}}],[11,"raw","","",35,{"inputs":[{"name":"glyphslot"}],"output":{"name":"ft_glyphslotrec"}}],[0,"library","freetype","",null,null],[3,"Library","freetype::library","",null,null],[11,"init","","",36,{"inputs":[{"name":"library"}],"output":{"name":"ftresult"}}],[11,"new_face","","",36,{"inputs":[{"name":"library"},{"name":"p"},{"name":"isize"}],"output":{"name":"ftresult"}}],[11,"new_memory_face","","",36,null],[11,"raw","","",36,{"inputs":[{"name":"library"}],"output":{"name":"ft_library"}}],[11,"get_memory","","",36,{"inputs":[{"name":"library"}],"output":{"name":"ft_memoryrec"}}],[11,"new_memory","","",36,{"inputs":[{"name":"library"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":null}],[11,"drop","","",36,{"inputs":[{"name":"library"}],"output":null}],[0,"outline","freetype","",null,null],[3,"Outline","freetype::outline","",null,null],[3,"CurveIterator","","",null,null],[3,"ContourIterator","","",null,null],[4,"Curve","","",null,null],[13,"Line","","",37,null],[13,"Bezier2","","",37,null],[13,"Bezier3","","",37,null],[11,"clone","","",37,{"inputs":[{"name":"curve"}],"output":{"name":"curve"}}],[11,"from_raw","","",38,{"inputs":[{"name":"outline"},{"name":"ft_outline"}],"output":{"name":"self"}}],[11,"points","","",38,null],[11,"tags","","",38,null],[11,"contours","","",38,null],[11,"contours_iter","","",38,{"inputs":[{"name":"outline"}],"output":{"name":"contouriterator"}}],[11,"from_raw","","",39,{"inputs":[{"name":"curveiterator"},{"name":"ft_outline"},{"name":"isize"},{"name":"isize"}],"output":{"name":"self"}}],[11,"start","","",39,{"inputs":[{"name":"curveiterator"}],"output":{"name":"vector"}}],[11,"next","","",39,{"inputs":[{"name":"curveiterator"}],"output":{"name":"option"}}],[11,"from_raw","","",40,{"inputs":[{"name":"contouriterator"},{"name":"ft_outline"}],"output":{"name":"self"}}],[11,"next","","",40,{"inputs":[{"name":"contouriterator"}],"output":{"name":"option"}}],[0,"render_mode","freetype","",null,null],[4,"RenderMode","freetype::render_mode","",null,null],[13,"Normal","","",41,null],[13,"Light","","",41,null],[13,"Mono","","",41,null],[13,"Lcd","","",41,null],[13,"LcdV","","",41,null],[13,"Max","","",41,null],[11,"clone","","",41,{"inputs":[{"name":"rendermode"}],"output":{"name":"rendermode"}}],[0,"tt_os2","freetype","",null,null],[3,"TrueTypeOS2Table","freetype::tt_os2","",null,null],[11,"clone","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"truetypeos2table"}}],[11,"from_face","","",42,{"inputs":[{"name":"truetypeos2table"},{"name":"face"}],"output":{"name":"option"}}],[11,"version","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_ushort"}}],[11,"avg_char_width","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"us_weight_class","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_ushort"}}],[11,"us_width_class","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_ushort"}}],[11,"fs_type","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_x_size","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_y_size","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_x_offset","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_subscript_y_offset","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_x_size","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_y_size","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_x_offset","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_superscript_y_offset","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_strikeout_size","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"y_strikeout_position","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"s_family_class","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[11,"x_height","","",42,{"inputs":[{"name":"truetypeos2table"}],"output":{"name":"ft_short"}}],[6,"BBox","freetype","",null,null],[6,"GlyphMetrics","","",null,null],[6,"Matrix","","",null,null],[6,"Vector","","",null,null]],"paths":[[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Size_Metrics"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_ListRec"],[3,"FT_Size_RequestRec"],[8,"FTErrorMethods"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Outline"],[3,"FT_Open_Args"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListNodeRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[4,"PixelMode"],[3,"Bitmap"],[3,"BitmapGlyph"],[4,"Error"],[4,"KerningMode"],[3,"LoadFlag"],[3,"Face"],[3,"Glyph"],[3,"GlyphSlot"],[3,"Library"],[4,"Curve"],[3,"Outline"],[3,"CurveIterator"],[3,"ContourIterator"],[4,"RenderMode"],[3,"TrueTypeOS2Table"]]};
searchIndex['libc'] = {"items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",12,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",13,null],[12,"sin6_family","","",13,null],[12,"sin6_port","","",13,null],[12,"sin6_flowinfo","","",13,null],[12,"sin6_addr","","",13,null],[12,"sin6_scope_id","","",13,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",14,null],[12,"sun_family","","",14,null],[12,"sun_path","","",14,null],[3,"passwd","","",null,null],[12,"pw_name","","",15,null],[12,"pw_passwd","","",15,null],[12,"pw_uid","","",15,null],[12,"pw_gid","","",15,null],[12,"pw_change","","",15,null],[12,"pw_class","","",15,null],[12,"pw_gecos","","",15,null],[12,"pw_dir","","",15,null],[12,"pw_shell","","",15,null],[12,"pw_expire","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_dstaddr","","",16,null],[12,"ifa_data","","",16,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",17,null],[12,"tm_min","","",17,null],[12,"tm_hour","","",17,null],[12,"tm_mday","","",17,null],[12,"tm_mon","","",17,null],[12,"tm_year","","",17,null],[12,"tm_wday","","",17,null],[12,"tm_yday","","",17,null],[12,"tm_isdst","","",17,null],[12,"tm_gmtoff","","",17,null],[12,"tm_zone","","",17,null],[3,"utsname","","",null,null],[12,"sysname","","",18,null],[12,"nodename","","",18,null],[12,"release","","",18,null],[12,"version","","",18,null],[12,"machine","","",18,null],[3,"msghdr","","",null,null],[12,"msg_name","","",19,null],[12,"msg_namelen","","",19,null],[12,"msg_iov","","",19,null],[12,"msg_iovlen","","",19,null],[12,"msg_control","","",19,null],[12,"msg_controllen","","",19,null],[12,"msg_flags","","",19,null],[3,"fsid_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",20,null],[12,"gl_offs","","",20,null],[12,"gl_pathv","","",20,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",21,null],[12,"ss_family","","",21,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",22,null],[12,"ai_family","","",22,null],[12,"ai_socktype","","",22,null],[12,"ai_protocol","","",22,null],[12,"ai_addrlen","","",22,null],[12,"ai_canonname","","",22,null],[12,"ai_addr","","",22,null],[12,"ai_next","","",22,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",23,null],[12,"denom","","",23,null],[3,"stat","","",null,null],[12,"st_dev","","",24,null],[12,"st_mode","","",24,null],[12,"st_nlink","","",24,null],[12,"st_ino","","",24,null],[12,"st_uid","","",24,null],[12,"st_gid","","",24,null],[12,"st_rdev","","",24,null],[12,"st_atime","","",24,null],[12,"st_atime_nsec","","",24,null],[12,"st_mtime","","",24,null],[12,"st_mtime_nsec","","",24,null],[12,"st_ctime","","",24,null],[12,"st_ctime_nsec","","",24,null],[12,"st_birthtime","","",24,null],[12,"st_birthtime_nsec","","",24,null],[12,"st_size","","",24,null],[12,"st_blocks","","",24,null],[12,"st_blksize","","",24,null],[12,"st_flags","","",24,null],[12,"st_gen","","",24,null],[12,"st_lspare","","",24,null],[12,"st_qspare","","",24,null],[3,"dirent","","",null,null],[12,"d_ino","","",25,null],[12,"d_seekoff","","",25,null],[12,"d_reclen","","",25,null],[12,"d_namlen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",26,null],[12,"si_errno","","",26,null],[12,"si_code","","",26,null],[12,"si_pid","","",26,null],[12,"si_uid","","",26,null],[12,"si_status","","",26,null],[12,"si_addr","","",26,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",27,null],[12,"sa_mask","","",27,null],[12,"sa_flags","","",27,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",28,null],[12,"ss_size","","",28,null],[12,"ss_flags","","",28,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",29,null],[12,"fst_posmode","","",29,null],[12,"fst_offset","","",29,null],[12,"fst_length","","",29,null],[12,"fst_bytesalloc","","",29,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",30,null],[12,"ra_count","","",30,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",31,null],[12,"f_frsize","","",31,null],[12,"f_blocks","","",31,null],[12,"f_bfree","","",31,null],[12,"f_bavail","","",31,null],[12,"f_files","","",31,null],[12,"f_ffree","","",31,null],[12,"f_favail","","",31,null],[12,"f_fsid","","",31,null],[12,"f_flag","","",31,null],[12,"f_namemax","","",31,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",32,null],[12,"dli_fbase","","",32,null],[12,"dli_sname","","",32,null],[12,"dli_saddr","","",32,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",33,null],[12,"sin_family","","",33,null],[12,"sin_port","","",33,null],[12,"sin_addr","","",33,null],[12,"sin_zero","","",33,null],[3,"statfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_iosize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_fsid","","",34,null],[12,"f_owner","","",34,null],[12,"f_type","","",34,null],[12,"f_flags","","",34,null],[12,"f_fssubtype","","",34,null],[12,"f_fstypename","","",34,null],[12,"f_mntonname","","",34,null],[12,"f_mntfromname","","",34,null],[12,"f_reserved","","",34,null],[3,"kevent","","",null,null],[12,"ident","","",35,null],[12,"filter","","",35,null],[12,"flags","","",35,null],[12,"fflags","","",35,null],[12,"data","","",35,null],[12,"udata","","",35,null],[3,"kevent64_s","","",null,null],[12,"ident","","",36,null],[12,"filter","","",36,null],[12,"flags","","",36,null],[12,"fflags","","",36,null],[12,"data","","",36,null],[12,"udata","","",36,null],[12,"ext","","",36,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",37,null],[12,"dqb_bsoftlimit","","",37,null],[12,"dqb_curbytes","","",37,null],[12,"dqb_ihardlimit","","",37,null],[12,"dqb_isoftlimit","","",37,null],[12,"dqb_curinodes","","",37,null],[12,"dqb_btime","","",37,null],[12,"dqb_itime","","",37,null],[12,"dqb_id","","",37,null],[12,"dqb_spare","","",37,null],[3,"termios","","",null,null],[12,"c_iflag","","",38,null],[12,"c_oflag","","",38,null],[12,"c_cflag","","",38,null],[12,"c_lflag","","",38,null],[12,"c_cc","","",38,null],[12,"c_ispeed","","",38,null],[12,"c_ospeed","","",38,null],[3,"flock","","",null,null],[12,"l_start","","",39,null],[12,"l_len","","",39,null],[12,"l_pid","","",39,null],[12,"l_type","","",39,null],[12,"l_whence","","",39,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",40,null],[12,"hdr_cnt","","",40,null],[12,"trailers","","",40,null],[12,"trl_cnt","","",40,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",41,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",41,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",41,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",41,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",41,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",41,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",41,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",41,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",41,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",41,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",41,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",41,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",41,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",41,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",41,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",41,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",41,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",41,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",41,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",41,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",42,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"shl","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",42,null],[11,"shr","","",42,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"add","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",42,null],[11,"sub","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",42,null],[11,"mul","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",42,null],[11,"div","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",42,null],[11,"rem","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",42,null],[11,"not","","",42,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",42,null],[11,"bitor","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",42,null],[11,"bitand","","",42,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",42,null],[11,"eq","core::num::flt2dec::decoder","",43,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",44,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",45,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",45,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",45,null],[11,"clone","","",46,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",46,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",46,null],[11,"fmt","","",47,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",48,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",48,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",49,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",50,null],[11,"eq","","",51,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",52,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",52,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",53,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",54,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",54,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",54,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",54,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",54,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",54,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",54,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",54,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",54,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",54,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",54,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",54,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",54,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",54,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",54,null],[11,"eq","","",54,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",54,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",54,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",54,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",55,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",55,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",55,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",55,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",55,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",55,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",55,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",55,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",55,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",55,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",55,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",55,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",55,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",55,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",55,null],[11,"eq","","",55,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",55,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",55,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",55,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",56,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",56,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",56,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",56,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",57,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",58,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",58,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",59,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",60,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",60,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",61,null],[11,"get","","Dereferences the content.",61,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",61,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",62,null],[11,"clone","","",62,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",63,null],[11,"eq","","",63,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",63,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",63,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",64,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",64,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",65,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",66,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",67,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",68,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",68,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",68,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",69,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",69,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",69,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",69,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",69,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",69,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",69,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",70,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",71,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",72,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",73,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",74,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",75,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",71,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",71,null],[11,"swap","","Stores a value into the bool, returning the old value.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",71,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",72,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",72,null],[11,"swap","","Stores a value into the isize, returning the old value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",72,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",73,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",73,null],[11,"swap","","Stores a value into the usize, returning the old value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",73,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",74,null],[11,"load","","Loads a value from the pointer.",74,null],[11,"store","","Stores a value into the pointer.",74,null],[11,"swap","","Stores a value into the pointer, returning the old value.",74,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",74,null],[11,"fmt","","",73,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",76,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",76,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",76,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",76,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",76,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",76,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",76,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",78,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",78,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",78,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",78,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",78,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",78,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",78,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",78,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",78,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",80,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",80,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",80,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",80,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",81,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",81,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",82,null],[11,"deref","","",81,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",81,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",83,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",83,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",83,null],[11,"clone","core::char","",84,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",85,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",84,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"clone","","",86,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",87,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",86,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"count","","",86,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",86,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",86,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",88,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",88,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",89,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",90,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",92,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",91,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",91,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",94,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"nth","","",97,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",97,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",98,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",98,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",99,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"clone","","",100,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",100,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"clone","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",101,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",101,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"clone","","",102,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",102,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",102,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"clone","","",103,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",103,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",105,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",66,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",65,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",107,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","","",108,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",108,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",107,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next","core::ops","",65,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",109,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",109,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",110,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",110,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",110,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",110,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",111,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",111,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",111,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",41,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",41,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",112,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",112,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",41,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",116,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",117,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",118,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",118,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",118,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",118,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",118,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",118,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",118,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",118,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",118,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",118,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",118,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",118,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",118,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",118,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",118,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",118,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",118,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",118,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",118,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",119,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",120,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",118,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",122,null],[11,"next","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"count","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",122,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",123,null],[11,"next","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"count","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",123,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",124,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",124,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",125,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","","",127,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","","",128,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","","",129,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next","","",130,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"clone","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"count","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",132,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"count","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",133,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",134,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",136,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",135,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",137,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",138,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",139,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",140,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",141,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",142,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",140,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",143,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",144,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",144,null],[11,"matching","","",144,null],[11,"use_early_reject","","",145,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",145,null],[11,"matching","","",145,null],[11,"eq","core::str","",146,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",146,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",147,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",147,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",147,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",148,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",148,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",149,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",149,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"next_back","","",149,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",149,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",150,null],[11,"count","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",150,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",150,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",151,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",152,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",153,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",152,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",154,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",155,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",154,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",155,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",157,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",158,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",159,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",160,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",161,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",160,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",161,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",163,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",163,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",165,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next_back","","",165,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",167,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",167,null],[11,"call_mut","","",167,null],[11,"call_once","","",167,null],[11,"next","","",166,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next_back","","",166,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",169,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",169,null],[11,"finish","","",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",169,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",170,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",170,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",170,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",171,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",172,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",173,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",174,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",175,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",176,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",177,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",178,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",179,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",179,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",180,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",180,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",181,null],[11,"entry","","Adds a new entry to the set output.",182,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",182,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",182,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",183,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",183,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",183,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",184,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",184,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",184,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",185,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",186,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",187,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",188,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",189,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",190,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",191,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",192,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",193,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",193,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",194,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",194,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",194,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",194,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",194,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",194,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",194,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",194,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",194,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",194,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",194,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",194,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",194,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",194,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",194,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",63,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",76,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",195,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",195,null],[11,"clone","libc","",196,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",20,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",21,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",22,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",23,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",24,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",25,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",197,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",198,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",199,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",200,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",26,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",27,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",28,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",29,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",30,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",31,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",32,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",33,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",34,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",35,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",36,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",37,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",38,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",39,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",40,{"inputs":[{"name":"sf_hdtr"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",15,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",201,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",17,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",18,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",19,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",202,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"CTL_HW","","",null,null],[17,"HW_NCPU","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_SYSCOUNT","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex['freetype_sys'] = {"items":[[3,"FT_Vector","freetype_sys","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"FT_BBox","","",null,null],[12,"xMin","","",1,null],[12,"yMin","","",1,null],[12,"xMax","","",1,null],[12,"yMax","","",1,null],[3,"FT_Matrix","","",null,null],[12,"xx","","",2,null],[12,"xy","","",2,null],[12,"yx","","",2,null],[12,"yy","","",2,null],[3,"FT_UnitVector","","",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[3,"FT_Bitmap","","",null,null],[12,"rows","","",4,null],[12,"width","","",4,null],[12,"pitch","","",4,null],[12,"buffer","","",4,null],[12,"num_grays","","",4,null],[12,"pixel_mode","","",4,null],[12,"palette_mode","","",4,null],[12,"palette","","",4,null],[3,"FT_Data","","",null,null],[12,"pointer","","",5,null],[12,"length","","",5,null],[3,"FT_Generic","","",null,null],[12,"data","","",6,null],[12,"finalizer","","",6,null],[3,"FT_Size_Metrics","","",null,null],[12,"x_ppem","","",7,null],[12,"y_ppem","","",7,null],[12,"x_scale","","",7,null],[12,"y_scale","","",7,null],[12,"ascender","","",7,null],[12,"descender","","",7,null],[12,"height","","",7,null],[12,"max_advance","","",7,null],[3,"FT_Outline","","",null,null],[12,"n_contours","","",8,null],[12,"n_points","","",8,null],[12,"points","","",8,null],[12,"tags","","",8,null],[12,"contours","","",8,null],[12,"flags","","",8,null],[3,"FT_Glyph_Metrics","","",null,null],[12,"width","","",9,null],[12,"height","","",9,null],[12,"horiBearingX","","",9,null],[12,"horiBearingY","","",9,null],[12,"horiAdvance","","",9,null],[12,"vertBearingX","","",9,null],[12,"vertBearingY","","",9,null],[12,"vertAdvance","","",9,null],[3,"FT_Parameter","","",null,null],[12,"tag","","",10,null],[12,"data","","",10,null],[3,"FT_Open_Args","","",null,null],[12,"flags","","",11,null],[12,"memory_base","","",11,null],[12,"memory_size","","",11,null],[12,"pathname","","",11,null],[12,"stream","","",11,null],[12,"driver","","",11,null],[12,"num_params","","",11,null],[12,"params","","",11,null],[3,"FT_Bitmap_Size","","",null,null],[12,"height","","",12,null],[12,"width","","",12,null],[12,"size","","",12,null],[12,"x_ppem","","",12,null],[12,"y_ppem","","",12,null],[3,"TT_OS2","","",null,null],[12,"version","","",13,null],[12,"xAvgCharWidth","","",13,null],[12,"usWeightClass","","",13,null],[12,"usWidthClass","","",13,null],[12,"fsType","","",13,null],[12,"ySubscriptXSize","","",13,null],[12,"ySubscriptYSize","","",13,null],[12,"ySubscriptXOffset","","",13,null],[12,"ySubscriptYOffset","","",13,null],[12,"ySuperscriptXSize","","",13,null],[12,"ySuperscriptYSize","","",13,null],[12,"ySuperscriptXOffset","","",13,null],[12,"ySuperscriptYOffset","","",13,null],[12,"yStrikeoutSize","","",13,null],[12,"yStrikeoutPosition","","",13,null],[12,"sFamilyClass","","",13,null],[12,"panose","","",13,null],[12,"ulUnicodeRange1","","",13,null],[12,"ulUnicodeRange2","","",13,null],[12,"ulUnicodeRange3","","",13,null],[12,"ulUnicodeRange4","","",13,null],[12,"ulCodePageRange1","","",13,null],[12,"ulCodePageRange2","","",13,null],[12,"sxHeight","","",13,null],[12,"sCapHeight","","",13,null],[12,"usDefaultChar","","",13,null],[12,"usBreakChar","","",13,null],[12,"usMaxContext","","",13,null],[3,"FT_CharMapRec","","",null,null],[12,"face","","",14,null],[12,"encoding","","",14,null],[12,"platform_id","","",14,null],[12,"encoding_id","","",14,null],[3,"FT_FaceRec","","",null,null],[12,"num_faces","","",15,null],[12,"face_index","","",15,null],[12,"face_flags","","",15,null],[12,"style_flags","","",15,null],[12,"num_glyphs","","",15,null],[12,"family_name","","",15,null],[12,"style_name","","",15,null],[12,"num_fixed_sizes","","",15,null],[12,"available_sizes","","",15,null],[12,"num_charmaps","","",15,null],[12,"charmaps","","",15,null],[12,"generic","","",15,null],[12,"bbox","","",15,null],[12,"units_per_EM","","",15,null],[12,"ascender","","",15,null],[12,"descender","","",15,null],[12,"height","","",15,null],[12,"max_advance_width","","",15,null],[12,"max_advance_height","","",15,null],[12,"underline_position","","",15,null],[12,"underline_thickness","","",15,null],[12,"glyph","","",15,null],[12,"size","","",15,null],[12,"charmap","","",15,null],[12,"driver","","",15,null],[12,"memory","","",15,null],[12,"stream","","",15,null],[12,"sizes_list","","",15,null],[12,"autohint","","",15,null],[12,"extensions","","",15,null],[12,"internal","","",15,null],[3,"FT_GlyphSlotRec","","",null,null],[12,"library","","",16,null],[12,"face","","",16,null],[12,"next","","",16,null],[12,"reserved","","",16,null],[12,"generic","","",16,null],[12,"metrics","","",16,null],[12,"linearHoriAdvance","","",16,null],[12,"linearVertAdvance","","",16,null],[12,"advance","","",16,null],[12,"format","","",16,null],[12,"bitmap","","",16,null],[12,"bitmap_left","","",16,null],[12,"bitmap_top","","",16,null],[12,"outline","","",16,null],[12,"num_subglyphs","","",16,null],[12,"subglyphs","","",16,null],[12,"control_data","","",16,null],[12,"control_len","","",16,null],[12,"lsb_delta","","",16,null],[12,"rsb_delta","","",16,null],[12,"other","","",16,null],[12,"internal","","",16,null],[3,"FT_SizeRec","","",null,null],[12,"face","","",17,null],[12,"generic","","",17,null],[12,"metrics","","",17,null],[12,"internal","","",17,null],[3,"FT_StreamRec","","",null,null],[12,"base","","",18,null],[12,"size","","",18,null],[12,"pos","","",18,null],[12,"descriptor","","",18,null],[12,"pathname","","",18,null],[12,"read","","",18,null],[12,"close","","",18,null],[12,"memory","","",18,null],[12,"cursor","","",18,null],[12,"limit","","",18,null],[3,"FT_MemoryRec","","",null,null],[12,"user","","",19,null],[12,"alloc","","",19,null],[12,"free","","",19,null],[12,"realloc","","",19,null],[3,"FT_ListRec","","",null,null],[12,"head","","",20,null],[12,"tail","","",20,null],[3,"FT_ListNodeRec","","",null,null],[12,"prev","","",21,null],[12,"next","","",21,null],[12,"data","","",21,null],[3,"FT_Size_RequestRec","","",null,null],[12,"size_request_type","","",22,null],[12,"width","","",22,null],[12,"height","","",22,null],[12,"horiResolution","","",22,null],[12,"vertResolution","","",22,null],[3,"FT_GlyphRec","","",null,null],[12,"library","","",23,null],[12,"clazz","","",23,null],[12,"format","","",23,null],[12,"advance","","",23,null],[3,"FT_BitmapGlyphRec","","",null,null],[12,"root","","",24,null],[12,"left","","",24,null],[12,"top","","",24,null],[12,"bitmap","","",24,null],[3,"FT_OutlineGlyphRec","","",null,null],[12,"root","","",25,null],[12,"outline","","",25,null],[5,"FT_HAS_HORIZONTAL","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_VERTICAL","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_KERNING","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_SCALABLE","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_SFNT","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_FIXED_WIDTH","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_FIXED_SIZES","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_GLYPH_NAMES","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_MULTIPLE_MASTERS","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_CID_KEYED","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_IS_TRICKY","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_HAS_COLOR","","",null,{"inputs":[{"name":"ft_face"}],"output":{"name":"bool"}}],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_CharMap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Get_Glyph","","",null,null],[5,"FT_Glyph_Copy","","",null,null],[5,"FT_Glyph_Transform","","",null,null],[5,"FT_Glyph_Get_CBox","","",null,null],[5,"FT_Glyph_To_Bitmap","","",null,null],[5,"FT_Done_Glyph","","",null,null],[6,"FT_Byte","","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_Error","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[6,"enum_FT_Sfnt_Tag_","","",null,null],[6,"FT_Sfnt_Tag","","",null,null],[6,"FT_Pixel_Mode","","",null,null],[6,"FT_Glyph_Format","","",null,null],[6,"FT_Render_Mode","","",null,null],[6,"FT_Encoding","","",null,null],[6,"FT_Size_Request_Type","","",null,null],[6,"FT_Kerning_Mode","","",null,null],[6,"FT_Glyph_BBox_Mode","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_Glyph","","",null,null],[6,"FT_BitmapGlyph","","",null,null],[6,"FT_OutlineGlyph","","",null,null],[6,"TT_OS2_Internal","","",null,null],[6,"FT_LibraryRec","","",null,null],[6,"FT_ModuleRec","","",null,null],[6,"FT_DriverRec","","",null,null],[6,"FT_RendererRec","","",null,null],[6,"FT_Size_InternalRec","","",null,null],[6,"FT_SubGlyphRec","","",null,null],[6,"FT_Slot_InternalRec","","",null,null],[6,"FT_Face_InternalRec","","",null,null],[17,"ft_sfnt_head","","",null,null],[17,"ft_sfnt_maxp","","",null,null],[17,"ft_sfnt_os2","","",null,null],[17,"ft_sfnt_hhea","","",null,null],[17,"ft_sfnt_vhea","","",null,null],[17,"ft_sfnt_post","","",null,null],[17,"ft_sfnt_pclt","","",null,null],[17,"ft_sfnt_max","","",null,null],[17,"FT_PIXEL_MODE_NONE","","",null,null],[17,"FT_PIXEL_MODE_MONO","","",null,null],[17,"FT_PIXEL_MODE_GRAY","","",null,null],[17,"FT_PIXEL_MODE_GRAY2","","",null,null],[17,"FT_PIXEL_MODE_GRAY4","","",null,null],[17,"FT_PIXEL_MODE_LCD","","",null,null],[17,"FT_PIXEL_MODE_LCD_V","","",null,null],[17,"FT_PIXEL_MODE_BGRA","","",null,null],[17,"FT_PIXEL_MODE_MAX","","",null,null],[17,"FT_GLYPH_FORMAT_NONE","","",null,null],[17,"FT_GLYPH_FORMAT_COMPOSITE","","",null,null],[17,"FT_GLYPH_FORMAT_BITMAP","","",null,null],[17,"FT_GLYPH_FORMAT_OUTLINE","","",null,null],[17,"FT_GLYPH_FORMAT_PLOTTER","","",null,null],[17,"FT_RENDER_MODE_NORMAL","","",null,null],[17,"FT_RENDER_MODE_LIGHT","","",null,null],[17,"FT_RENDER_MODE_MONO","","",null,null],[17,"FT_RENDER_MODE_LCD","","",null,null],[17,"FT_RENDER_MODE_LCD_V","","",null,null],[17,"FT_RENDER_MODE_MAX","","",null,null],[17,"FT_ENCODING_NONE","","",null,null],[17,"FT_ENCODING_MS_SYMBOL","","",null,null],[17,"FT_ENCODING_UNICODE","","",null,null],[17,"FT_ENCODING_SJIS","","",null,null],[17,"FT_ENCODING_GB2312","","",null,null],[17,"FT_ENCODING_BIG5","","",null,null],[17,"FT_ENCODING_WANSUNG","","",null,null],[17,"FT_ENCODING_JOHAB","","",null,null],[17,"FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_ENCODING_ADOBE_STANDARD","","",null,null],[17,"FT_ENCODING_ADOBE_EXPERT","","",null,null],[17,"FT_ENCODING_ADOBE_CUSTOM","","",null,null],[17,"FT_ENCODING_ADOBE_LATIN_1","","",null,null],[17,"FT_ENCODING_OLD_LATIN_2","","",null,null],[17,"FT_ENCODING_APPLE_ROMAN","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_BBOX","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_CELL","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_SCALES","","",null,null],[17,"FT_SIZE_REQUEST_TYPE_MAX","","",null,null],[17,"FT_KERNING_DEFAULT","","",null,null],[17,"FT_KERNING_UNFITTED","","",null,null],[17,"FT_KERNING_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_UNSCALED","","",null,null],[17,"FT_GLYPH_BBOX_SUBPIXELS","","",null,null],[17,"FT_GLYPH_BBOX_GRIDFIT","","",null,null],[17,"FT_GLYPH_BBOX_TRUNCATE","","",null,null],[17,"FT_GLYPH_BBOX_PIXELS","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_TARGET_NORMAL","","",null,null],[17,"FT_LOAD_TARGET_LIGHT","","",null,null],[17,"FT_LOAD_TARGET_MONO","","",null,null],[17,"FT_LOAD_TARGET_LCD","","",null,null],[17,"FT_LOAD_TARGET_LCD_V","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[8,"FTErrorMethods","","",null,null],[10,"succeeded","","",26,{"inputs":[{"name":"fterrormethods"}],"output":{"name":"bool"}}],[11,"succeeded","","",27,{"inputs":[{"name":"ft_error"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"ft_vector"}],"output":{"name":"ft_vector"}}],[11,"clone","","",1,{"inputs":[{"name":"ft_bbox"}],"output":{"name":"ft_bbox"}}],[11,"clone","","",2,{"inputs":[{"name":"ft_matrix"}],"output":{"name":"ft_matrix"}}],[11,"clone","","",3,{"inputs":[{"name":"ft_unitvector"}],"output":{"name":"ft_unitvector"}}],[11,"clone","","",7,{"inputs":[{"name":"ft_size_metrics"}],"output":{"name":"ft_size_metrics"}}],[11,"clone","","",9,{"inputs":[{"name":"ft_glyph_metrics"}],"output":{"name":"ft_glyph_metrics"}}],[11,"clone","","",10,{"inputs":[{"name":"ft_parameter"}],"output":{"name":"ft_parameter"}}],[11,"clone","","",12,{"inputs":[{"name":"ft_bitmap_size"}],"output":{"name":"ft_bitmap_size"}}],[11,"clone","","",13,{"inputs":[{"name":"tt_os2"}],"output":{"name":"tt_os2"}}],[11,"clone","","",14,{"inputs":[{"name":"ft_charmaprec"}],"output":{"name":"ft_charmaprec"}}],[11,"clone","","",20,{"inputs":[{"name":"ft_listrec"}],"output":{"name":"ft_listrec"}}],[11,"clone","","",22,{"inputs":[{"name":"ft_size_requestrec"}],"output":{"name":"ft_size_requestrec"}}]],"paths":[[3,"FT_Vector"],[3,"FT_BBox"],[3,"FT_Matrix"],[3,"FT_UnitVector"],[3,"FT_Bitmap"],[3,"FT_Data"],[3,"FT_Generic"],[3,"FT_Size_Metrics"],[3,"FT_Outline"],[3,"FT_Glyph_Metrics"],[3,"FT_Parameter"],[3,"FT_Open_Args"],[3,"FT_Bitmap_Size"],[3,"TT_OS2"],[3,"FT_CharMapRec"],[3,"FT_FaceRec"],[3,"FT_GlyphSlotRec"],[3,"FT_SizeRec"],[3,"FT_StreamRec"],[3,"FT_MemoryRec"],[3,"FT_ListRec"],[3,"FT_ListNodeRec"],[3,"FT_Size_RequestRec"],[3,"FT_GlyphRec"],[3,"FT_BitmapGlyphRec"],[3,"FT_OutlineGlyphRec"],[8,"FTErrorMethods"],[6,"FT_Error"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['dbghelp'] = {"items":[],"paths":[]};
searchIndex['gif'] = {"items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data.\nOnly indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means\nthat there is no memory limit set.",null,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",1,null],[13,"Extension","","Extension block.",1,null],[13,"Trailer","","Image trailer.",1,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",2,null],[13,"Control","","Control extension.",2,null],[13,"Comment","","Comment extension.",2,null],[13,"Application","","Application extension.",2,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",3,null],[13,"Keep","","Do not dispose.",3,null],[13,"Background","","Restore to background color.",3,null],[13,"Previous","","Restore to previous.",3,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",4,null],[13,"GlobalPalette","","Global palette.",4,null],[13,"BackgroundColor","","Index of the background color in the global palette.",4,null],[13,"Trailer","","Decoded the image trailer.",4,null],[13,"BlockStart","","The start of a block.",4,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",4,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",4,null],[13,"Frame","","Decoded all information of the next frame.\nThe returned frame does **not** any image data.",4,null],[13,"Data","","Decoded some data of the current frame.",4,null],[13,"DataEnd","","No more data available the current frame.",4,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",5,null],[13,"Internal","","Internal (logic) error.",5,null],[13,"Io","","Wraps `std::io::Error`.",5,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA.\nThis affects:",6,null],[13,"Indexed","","The decoder returns the raw indexed data.",6,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",7,null],[13,"Skip","","Skips the data of unknown extensions\nand extracts the data from known ones",7,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",8,null],[12,"flags","gif::ExtensionData","Flags.",8,null],[12,"delay","","Frame delay.",8,null],[12,"trns","","Transparent index.",8,null],[13,"Repetitions","gif","Sets the number of repetitions",8,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",9,null],[13,"Infinite","","Infinite number of repetitions",9,null],[11,"clone","","",3,{"inputs":[{"name":"disposalmethod"}],"output":{"name":"disposalmethod"}}],[11,"fmt","","",3,{"inputs":[{"name":"disposalmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"inputs":[{"name":"disposalmethod"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"fmt","","",1,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",1,{"inputs":[{"name":"block"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"fmt","","",2,{"inputs":[{"name":"extension"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"inputs":[{"name":"extension"},{"name":"u8"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",0,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",5,{"inputs":[{"name":"decodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"decodingerror"},{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"extensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"extensions"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"set_param","","",7,{"inputs":[{"name":"extensions"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"streamingdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder.",10,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",10,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",10,{"inputs":[{"name":"streamingdecoder"}],"output":{"name":"u16"}}],[11,"fmt","","",6,{"inputs":[{"name":"coloroutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"coloroutput"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"set_param","","",6,{"inputs":[{"name":"coloroutput"},{"name":"decoder"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"memorylimit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",11,{"inputs":[{"name":"memorylimit"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"reader"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"reader"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[11,"set_param","","",9,{"inputs":[{"name":"repeat"},{"name":"encoder"}],"output":{"name":"result"}}],[11,"new_control_ext","","Constructor for control extension data.",8,{"inputs":[{"name":"extensiondata"},{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"encoder"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"encoder"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,{"inputs":[{"name":"parameter"},{"name":"object"}],"output":{"name":"result"}}],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"MemoryLimit"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex['libz_sys'] = {"items":[[3,"gz_header","libz_sys","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit","","",null,null],[5,"deflateInit2","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePending","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzbuffer","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzclose_r","","",null,null],[5,"gzclose_w","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzoffset","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetDictionary","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit","","",null,null],[5,"inflateInit2","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex['vecmath'] = {"items":[[5,"col_mat3x2_mul_col","vecmath","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat4_mul_col","","Computes column vector in column matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_mul_row","","Computes row vector in row matrix product.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat3x2_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"col_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"col_mat4x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"col_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"row_mat2x3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"row_mat3_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"row_mat3x4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"row_mat4_mul","","Multiplies two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"mat2x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix2x3"}}],[5,"mat3x2_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x2"}}],[5,"mat3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3"}}],[5,"mat3x4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix3x4"}}],[5,"mat4x3_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4x3"}}],[5,"mat4_id","","Constructs identity matrix.",null,{"inputs":[],"output":{"name":"matrix4"}}],[5,"vec2_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_cast","","Converts to another vector type.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_cast","","Converts to another matrix type.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_sub","","Subtracts 'b' from 'a'.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_add","","Adds two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_add","","Adds two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_add","","Adds two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"mat2x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix2x3"},{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x2"},{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix3x4"},{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4x3"},{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_add","","Adds two matrices.",null,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"vec2_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_mul","","Multiplies two vectors component wise.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_dot","","Computes the dot product.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_square_len","","Computes the square length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_cross","","Computes the cross product.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec2_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector2"},{"name":"t"}],"output":{"name":"vector2"}}],[5,"vec3_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector3"},{"name":"t"}],"output":{"name":"vector3"}}],[5,"vec4_scale","","Multiplies the vector with a scalar.",null,{"inputs":[{"name":"vector4"},{"name":"t"}],"output":{"name":"vector4"}}],[5,"vec2_neg","","Negates the vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_neg","","Negates the vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_neg","","Negates the vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_len","","Computes the length of vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec3_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec4_inv_len","","Computes the inverse length of a vector.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"t"}}],[5,"vec2_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized","","Computes the normalized.",null,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec2_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"vec3_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"vec4_normalized_sub","","Computes the normalized difference between two vectors.",null,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"vec3_dot_vec2","","Computes transformed vector component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_vec3","","Computes transformed vector component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"vec3_dot_pos2","","Computes transformed position component.",null,{"inputs":[{"name":"vector3"},{"name":"vector2"}],"output":{"name":"t"}}],[5,"vec4_dot_pos3","","Computes transformed position component.",null,{"inputs":[{"name":"vector4"},{"name":"vector3"}],"output":{"name":"t"}}],[5,"row_mat2x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"col_mat2x3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"usize"}],"output":{"name":"vector2"}}],[5,"row_mat3x2_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x2_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat3x4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"col_mat3x4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"usize"}],"output":{"name":"vector3"}}],[5,"row_mat4x3_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4x3_row","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"row_mat4_col","","Returns a column vector of a row matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"col_mat4_row","","Returns a row vector of a column matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[5,"mat2x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix3x2"}}],[5,"mat3x2_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix2x3"}}],[5,"mat3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix4x3"}}],[5,"mat4x3_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix3x4"}}],[5,"mat4_transposed","","Constructs the transpose of a matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[5,"col_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat3_transform","","Transforms a 3D vector through a matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat4_transform","","Transforms a 4D vector through a matrix.",null,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[5,"row_mat2x3_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_pos2","","Transforms a 2D position through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_pos2","","Transforms a 2D position through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_pos2","","Transforms a 2D position through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_pos3","","Transforms a 3D position through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"row_mat2x3_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix2x3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3x2_transform_vec2","","Transforms a 2D vector through matrix.",null,{"inputs":[{"name":"matrix3x2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3_transform_vec2","","Transforms a 2D vector through row matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"col_mat3_transform_vec2","","Transforms a 2D vector through column matrix.",null,{"inputs":[{"name":"matrix3"},{"name":"vector2"}],"output":{"name":"vector2"}}],[5,"row_mat3x4_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix3x4"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"col_mat4x3_transform_vec3","","Transforms a 3D vector through matrix.",null,{"inputs":[{"name":"matrix4x3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[5,"mat2x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_det","","Computes the determinant of a matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_det","","Computes the determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv_det","","Computes inverse determinant of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"t"}}],[5,"mat3x2_inv_det","","Computes inverse determinant of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"t"}}],[5,"mat3_inv_det","","Computes inverse determinant of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"t"}}],[5,"mat3x4_inv_det","","Computes inverse determinant of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"t"}}],[5,"mat4x3_inv_det","","Computes inverse determinant of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"t"}}],[5,"mat4_inv_det","","Computes the inverse determinant of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"t"}}],[5,"mat2x3_inv","","Computes the inverse of a 2x3 matrix.",null,{"inputs":[{"name":"matrix2x3"}],"output":{"name":"matrix2x3"}}],[5,"mat3x2_inv","","Computes the inverse of a 3x2 matrix.",null,{"inputs":[{"name":"matrix3x2"}],"output":{"name":"matrix3x2"}}],[5,"mat3_inv","","Computes the inverse of a 3x3 matrix.",null,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[5,"mat3x4_inv","","Computes the inverse of a 3x4 matrix.",null,{"inputs":[{"name":"matrix3x4"}],"output":{"name":"matrix3x4"}}],[5,"mat4x3_inv","","Computes the inverse of a 4x3 matrix.",null,{"inputs":[{"name":"matrix4x3"}],"output":{"name":"matrix4x3"}}],[5,"mat4_inv","","Computes the inverse of a 4x4 matrix.",null,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[0,"traits","","Various useful traits",null,null],[6,"Vector2","","A 2D vector.",null,null],[6,"Vector3","","A 3D vector.",null,null],[6,"Vector4","","A 4D vector.",null,null],[6,"Matrix2x3","","A 2x3 matrix.",null,null],[6,"Matrix3x2","","A 3x2 matrix.",null,null],[6,"Matrix3","","A 3x3 matrix.",null,null],[6,"Matrix3x4","","A 3x4 matrix.",null,null],[6,"Matrix4x3","","A 4x3 matrix.",null,null],[6,"Matrix4","","A 4x4 matrix.",null,null]],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['clock_ticks'] = {"items":[[5,"precise_time_ns","clock_ticks","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"precise_time_ms","","Returns the current value of a high-resolution performance counter\nin milliseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}]],"paths":[]};
searchIndex['smallvec'] = {"items":[[3,"SmallVecMoveIterator","smallvec","",null,null],[3,"SmallVec","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","",null,null],[10,"len","","",0,{"inputs":[{"name":"veclike"}],"output":{"name":"usize"}}],[10,"push","","",0,{"inputs":[{"name":"veclike"},{"name":"t"}],"output":null}],[8,"Array","","",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[{"name":"array"}],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"len","collections::vec","",2,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"push","","",2,{"inputs":[{"name":"vec"},{"name":"t"}],"output":null}],[11,"next","smallvec","",3,{"inputs":[{"name":"smallvecmoveiterator"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"smallvecmoveiterator"}],"output":null}],[11,"set_len","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":null}],[11,"inline_size","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"usize"}}],[11,"is_empty","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"capacity","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"usize"}}],[11,"spilled","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"into_iter","","NB: For efficiency reasons (avoiding making a second copy of the inline elements), this\nactually clears out the original array instead of moving it.\nFIXME: Rename this to `drain`? It’s more like `Vec::drain` than `Vec::into_iter`.",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"smallvecmoveiterator"}}],[11,"push","","",4,{"inputs":[{"name":"smallvec"},{"name":"item"}],"output":null}],[11,"push_all_move","","",4,{"inputs":[{"name":"smallvec"},{"name":"v"}],"output":null}],[11,"pop","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"option"}}],[11,"grow","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":null}],[11,"reserve","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",4,{"inputs":[{"name":"smallvec"}],"output":null}],[11,"truncate","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":null}],[11,"swap_remove","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":{"name":"item"}}],[11,"clear","","",4,{"inputs":[{"name":"smallvec"}],"output":null}],[11,"remove","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":{"name":"item"}}],[11,"insert","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"},{"name":"item"}],"output":null}],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"index","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":{"name":"item"}}],[11,"index_mut","","",4,{"inputs":[{"name":"smallvec"},{"name":"usize"}],"output":{"name":"item"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"len","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"usize"}}],[11,"push","","",4,{"inputs":[{"name":"smallvec"},{"name":"item"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"smallvec"},{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"smallvec"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"smallvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"smallvec"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"smallvec"}],"output":{"name":"smallvec"}}]],"paths":[[8,"VecLike"],[8,"Array"],[3,"Vec"],[3,"SmallVecMoveIterator"],[3,"SmallVec"]]};
searchIndex['debug_builders'] = {"items":[[3,"DebugStruct","debug_builders","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[11,"new","","Creates a new `DebugStruct`.",0,{"inputs":[{"name":"debugstruct"},{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"field","","Adds a new field to the generated struct output.",0,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Consumes the `DebugStruct`, finishing output and returning any error\nencountered.",0,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugTuple`.",1,{"inputs":[{"name":"debugtuple"},{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"field","","Adds a new field to the generated tuple struct output.",1,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Consumes the `DebugTuple`, finishing output and returning any error\nencountered.",1,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugSet`.",2,{"inputs":[{"name":"debugset"},{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"entry","","Adds a new entry to the set output.",2,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"finish","","Consumes the `DebugSet`, finishing output and returning any error\nencountered.",2,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugList`.",3,{"inputs":[{"name":"debuglist"},{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"entry","","Adds a new entry to the set output.",3,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"finish","","Consumes the `DebugSet`, finishing output and returning any error\nencountered.",3,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DebugMap`.",4,{"inputs":[{"name":"debugmap"},{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"entry","","Adds a new entry to the map output.",4,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"finish","","Consumes the `DebugMap`, finishing output and returning any error\nencountered.",4,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}]],"paths":[[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"]]};
searchIndex['cfg_if'] = {"items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
searchIndex['color_quant'] = {"items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"neuquant"}],"output":{"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample.",0,{"inputs":[{"name":"neuquant"}],"output":{"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex['glob'] = {"items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"globerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","The Path that the error corresponds to.",2,{"inputs":[{"name":"globerror"}],"output":{"name":"path"}}],[11,"error","","The error in question.",2,{"inputs":[{"name":"globerror"}],"output":{"name":"error"}}],[11,"description","","",2,{"inputs":[{"name":"globerror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"globerror"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"globerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"paths"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"patternerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"patternerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"patternerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"pattern"},{"name":"pattern"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"pattern"}],"output":{"name":"pattern"}}],[11,"fmt","","",4,{"inputs":[{"name":"pattern"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,{"inputs":[{"name":"pattern"},{"name":"path"}],"output":{"name":"bool"}}],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,{"inputs":[{"name":"pattern"},{"name":"str"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,{"inputs":[{"name":"pattern"},{"name":"path"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"as_str","","Access the original glob pattern.",4,{"inputs":[{"name":"pattern"}],"output":{"name":"str"}}],[11,"default","","",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"matchoptions"},{"name":"matchoptions"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[{"name":"matchoptions"}],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex['float'] = {"items":[[8,"Float","float","Convenience trait for floats.",null,null],[8,"Min","","Minimum value.",null,null],[10,"min","","Returns the minimum value of self or other.",0,{"inputs":[{"name":"min"},{"name":"self"}],"output":{"name":"self"}}],[8,"Max","","Maximum value.",null,null],[10,"max","","Returns the maximum value of self or other.",1,{"inputs":[{"name":"max"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signum","","The sign of the number.",null,null],[10,"signum","","Returns number representing the sign of self",2,{"inputs":[{"name":"signum"}],"output":{"name":"self"}}],[8,"Radians","","Useful constants for radians.",null,null],[10,"_90","","Returns radians corresponding to 90 degrees.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"_180","","Returns radians corresponding to 180 degrees.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"_360","","Returns radians corresponding to 360 degrees.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"deg_to_rad","","Convert a value to radians from degrees.\nEquivalent to ```value * (π / 180)```.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[10,"rad_to_deg","","Convert a value to degrees from radians.\nEquivalent to ```value * (180 / π)```.",3,{"inputs":[{"name":"radians"}],"output":{"name":"self"}}],[8,"One","","Number 1.",null,null],[10,"one","","Returns 1.",4,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Zero","","Number 0.",null,null],[10,"zero","","Returns 0.",5,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[8,"Sqrt","","Square root.",null,null],[10,"sqrt","","Returns square root.",6,{"inputs":[{"name":"sqrt"}],"output":{"name":"self"}}],[8,"Trig","","Basic trigonometry functions",null,null],[10,"sin","","Returns sine of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[10,"cos","","Returns cosine of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[10,"tan","","Returns tangent of self",7,{"inputs":[{"name":"trig"}],"output":{"name":"self"}}],[8,"Cast","","Casts into another type.",null,null],[10,"cast","","Casts into other type.",8,{"inputs":[{"name":"cast"}],"output":{"name":"t"}}],[8,"FromPrimitive","","Trait for converting from different numeric types",null,null],[10,"from_f64","","from a f64",9,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"self"}}],[10,"from_f32","","from a f32",9,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"self"}}],[10,"from_isize","","from a isze",9,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"self"}}]],"paths":[[8,"Min"],[8,"Max"],[8,"Signum"],[8,"Radians"],[8,"One"],[8,"Zero"],[8,"Sqrt"],[8,"Trig"],[8,"Cast"],[8,"FromPrimitive"]]};
searchIndex['lzw'] = {"items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or\nonly the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"decoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",1,{"inputs":[{"name":"decoder"},{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"decoderearlychange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder.",2,{"inputs":[{"name":"decoderearlychange"},{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"encoder"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"encoder"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"lsbreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[{"name":"lsbreader"}],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"msbreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[{"name":"msbreader"}],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"lsbwriter"},{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"lsbwriter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"msbwriter"},{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"msbwriter"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"lsbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"msbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"bitwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex['bitflags'] = {"items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['byteorder'] = {"items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['poison_pool'] = {"items":[[3,"PoisonPool","poison_pool","A pool that contains elements that can be recycled when they are finished being used.",null,null],[3,"Item","","An element that logically came from a PoisonPool.",null,null],[11,"clone","","",0,{"inputs":[{"name":"poisonpool"}],"output":{"name":"poisonpool"}}],[11,"new","","Creates a new PoisonPool with a given size and where each element is\ninitialized by the init function.",0,{"inputs":[{"name":"poisonpool"},{"name":"usize"},{"name":"f"}],"output":{"name":"poisonpool"}}],[11,"get","","Returns an unpoisoned item from the pool if possible.",0,{"inputs":[{"name":"poisonpool"}],"output":{"name":"option"}}],[11,"get_or","","Returns an unpoisoned item from the pool, or a given value, if one\nis not available.",0,{"inputs":[{"name":"poisonpool"},{"name":"t"}],"output":{"name":"item"}}],[11,"get_or_else","","Returns an unpoisoned item from the pool, or value generated by the function\n`f` if one is not available",0,{"inputs":[{"name":"poisonpool"},{"name":"f"}],"output":{"name":"item"}}],[11,"unpoison_all","","Removes poison from all the internal items",0,{"inputs":[{"name":"poisonpool"}],"output":null}],[11,"from_value","","Directly construct an Item.  When this Item is dropped, it will\nnot be returned to any Pool.",1,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[11,"replace","","Replaces the value of the item with another one.",1,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"t"}}],[11,"poison","","Poisons this value.",1,{"inputs":[{"name":"item"}],"output":null}],[11,"deref","","",1,{"inputs":[{"name":"item"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"item"}],"output":{"name":"t"}}],[11,"drop","","",1,{"inputs":[{"name":"item"}],"output":null}]],"paths":[[3,"PoisonPool"],[3,"Item"]]};
searchIndex['lazy_static'] = {"items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
