var searchIndex = {};
searchIndex['test_runner'] = {"items":[],"paths":[]};
searchIndex['lux'] = {"items":[[0,"","lux","# Lux",null,null],[4,"LuxError","","Any error that Lux might run into.",null,null],[13,"WindowError","","An error that can occur when creating a window.",0,null],[13,"OpenGlError","","An error that can occur when creating an opengl context.",0,null],[13,"ImageError","","An error related to image decoding.",0,null],[13,"ShaderError","","An error that can occur when compiling or linking shaders.",0,null],[13,"IoError","","An error that can occur when required I/O fails.",0,null],[13,"FontNotLoaded","","An error that can occur when attempting to use a font that hasn't\nbeen loaded yet.",0,null],[13,"DrawError","","An error that was produced while submitting a draw call",0,null],[13,"TextureCreationError","","An error occured while creating a texture",0,null],[13,"IndexBufferCreationError","","An error creating an index buffer occured",0,null],[13,"VertexBufferCreationError","","An error creating an vertex buffer occured",0,null],[13,"FontMetadataError","","An error occurred when reading the metadata of a font",0,null],[11,"clone","glutin::api::egl::ffi::egl","",1,{"inputs":[{"name":"fnptr"}],"output":{"name":"fnptr"}}],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",1,{"inputs":[{"name":"fnptr"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"egl"}],"output":{"name":"egl"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",2,{"inputs":[{"name":"egl"},{"name":"f"}],"output":{"name":"egl"}}],[11,"load","","Load each OpenGL symbol using a custom load function.",2,{"inputs":[{"name":"egl"},{"name":"t"}],"output":{"name":"egl"}}],[11,"BindAPI","","",2,{"inputs":[{"name":"egl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"BindTexImage","","",2,null],[11,"ChooseConfig","","",2,null],[11,"ClientWaitSync","","",2,null],[11,"CopyBuffers","","",2,null],[11,"CreateContext","","",2,null],[11,"CreateImage","","",2,null],[11,"CreatePbufferFromClientBuffer","","",2,null],[11,"CreatePbufferSurface","","",2,null],[11,"CreatePixmapSurface","","",2,null],[11,"CreatePlatformPixmapSurface","","",2,null],[11,"CreatePlatformWindowSurface","","",2,null],[11,"CreateSync","","",2,null],[11,"CreateWindowSurface","","",2,null],[11,"DestroyContext","","",2,null],[11,"DestroyImage","","",2,null],[11,"DestroySurface","","",2,null],[11,"DestroySync","","",2,null],[11,"GetConfigAttrib","","",2,null],[11,"GetConfigs","","",2,null],[11,"GetCurrentContext","","",2,null],[11,"GetCurrentDisplay","","",2,null],[11,"GetCurrentSurface","","",2,null],[11,"GetDisplay","","",2,null],[11,"GetError","","",2,{"inputs":[{"name":"egl"}],"output":{"name":"i32"}}],[11,"GetPlatformDisplay","","",2,null],[11,"GetProcAddress","","",2,null],[11,"GetSyncAttrib","","",2,null],[11,"Initialize","","",2,null],[11,"MakeCurrent","","",2,null],[11,"QueryAPI","","",2,{"inputs":[{"name":"egl"}],"output":{"name":"u32"}}],[11,"QueryContext","","",2,null],[11,"QueryString","","",2,null],[11,"QuerySurface","","",2,null],[11,"ReleaseTexImage","","",2,null],[11,"ReleaseThread","","",2,{"inputs":[{"name":"egl"}],"output":{"name":"u32"}}],[11,"SurfaceAttrib","","",2,null],[11,"SwapBuffers","","",2,null],[11,"SwapInterval","","",2,null],[11,"Terminate","","",2,null],[11,"WaitClient","","",2,{"inputs":[{"name":"egl"}],"output":{"name":"u32"}}],[11,"WaitGL","","",2,{"inputs":[{"name":"egl"}],"output":{"name":"u32"}}],[11,"WaitNative","","",2,{"inputs":[{"name":"egl"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"WaitSync","","",2,null],[11,"new","glutin::api::egl","",3,null],[11,"make_current","","",3,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"is_current","","",3,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",3,null],[11,"swap_buffers","","",3,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"get_api","","",3,{"inputs":[{"name":"context"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",3,{"inputs":[{"name":"context"}],"output":{"name":"pixelformat"}}],[11,"drop","","",3,null],[11,"make_current","glutin::api::wgl::make_current_guard","",4,null],[11,"drop","","",4,null],[11,"clone","glutin::api::wgl::gl::wgl_extra","",5,{"inputs":[{"name":"fnptr"}],"output":{"name":"fnptr"}}],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",5,{"inputs":[{"name":"fnptr"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"wgl"}],"output":{"name":"wgl"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",6,{"inputs":[{"name":"wgl"},{"name":"f"}],"output":{"name":"wgl"}}],[11,"load","","Load each OpenGL symbol using a custom load function.",6,{"inputs":[{"name":"wgl"},{"name":"t"}],"output":{"name":"wgl"}}],[11,"ChoosePixelFormatARB","","",6,null],[11,"CopyContext","","",6,null],[11,"CreateContext","","",6,null],[11,"CreateContextAttribsARB","","",6,null],[11,"CreateLayerContext","","",6,null],[11,"DeleteContext","","",6,null],[11,"DescribeLayerPlane","","",6,null],[11,"GetCurrentContext","","",6,null],[11,"GetCurrentDC","","",6,null],[11,"GetExtensionsStringARB","","",6,null],[11,"GetExtensionsStringEXT","","",6,null],[11,"GetLayerPaletteEntries","","",6,null],[11,"GetPixelFormatAttribfvARB","","",6,null],[11,"GetPixelFormatAttribivARB","","",6,null],[11,"GetProcAddress","","",6,null],[11,"GetSwapIntervalEXT","","",6,{"inputs":[{"name":"wgl"}],"output":{"name":"i32"}}],[11,"MakeCurrent","","",6,null],[11,"RealizeLayerPalette","","",6,null],[11,"SetLayerPaletteEntries","","",6,null],[11,"ShareLists","","",6,null],[11,"SwapLayerBuffers","","",6,null],[11,"SwapIntervalEXT","","",6,{"inputs":[{"name":"wgl"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"UseFontBitmaps","","",6,null],[11,"UseFontBitmapsA","","",6,null],[11,"UseFontBitmapsW","","",6,null],[11,"UseFontOutlines","","",6,null],[11,"UseFontOutlinesA","","",6,null],[11,"UseFontOutlinesW","","",6,null],[11,"drop","glutin::api::wgl","",7,null],[11,"drop","","",8,null],[11,"new","","Attempt to build a new WGL context on a window.",9,null],[11,"get_hglrc","","Returns the raw HGLRC.",9,null],[11,"make_current","","",9,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"is_current","","",9,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",9,null],[11,"swap_buffers","","",9,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"get_api","","",9,{"inputs":[{"name":"context"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",9,{"inputs":[{"name":"context"}],"output":{"name":"pixelformat"}}],[11,"next","glutin::api::win32::monitor","",10,{"inputs":[{"name":"deviceenumerator"}],"output":{"name":"option"}}],[11,"get_name","","See the docs if the crate root file.",11,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","See the docs of the crate root file.",11,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","See the docs if the crate root file.",11,null],[11,"get_adapter_name","","This is a Win32-only function for `MonitorID` that returns the system name of the adapter\ndevice.",11,null],[11,"get_position","","This is a Win32-only function for `MonitorID` that returns the position of the\n monitor on the desktop.\nA window that is positionned at these coordinates will overlap the monitor.",11,null],[11,"drop","glutin::api::win32","",12,null],[11,"clone","","",13,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","",13,null],[11,"new","","See the docs in the crate root file.",14,{"inputs":[{"name":"window"},{"name":"builderattribs"}],"output":{"name":"result"}}],[11,"set_title","","See the docs in the crate root file.",14,null],[11,"show","","",14,null],[11,"hide","","",14,null],[11,"get_position","","See the docs in the crate root file.",14,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","See the docs in the crate root file.",14,null],[11,"get_inner_size","","See the docs in the crate root file.",14,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","See the docs in the crate root file.",14,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","See the docs in the crate root file.",14,null],[11,"create_window_proxy","","",14,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"poll_events","","See the docs in the crate root file.",14,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","See the docs in the crate root file.",14,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"platform_display","","",14,null],[11,"platform_window","","",14,null],[11,"set_window_resize_callback","","",14,null],[11,"set_cursor","","",14,null],[11,"set_cursor_state","","",14,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"hidpi_factor","","",14,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","",14,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"make_current","","",14,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",14,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",14,null],[11,"swap_buffers","","",14,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",14,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",14,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"next","","",15,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"next","","",16,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"drop","","",14,null],[11,"new","glutin::platform::platform","",17,{"inputs":[{"name":"headlesscontext"},{"name":"builderattribs"}],"output":{"name":"result"}}],[11,"make_current","","",17,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",17,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",17,null],[11,"swap_buffers","","",17,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",17,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",17,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"fmt","glutin::events","",18,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"clone","","",19,{"inputs":[{"name":"touchphase"}],"output":{"name":"touchphase"}}],[11,"eq","","",19,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"touchphase"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"touchphase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"touch"}],"output":{"name":"touch"}}],[11,"fmt","","",20,{"inputs":[{"name":"touch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"elementstate"}],"output":{"name":"elementstate"}}],[11,"eq","","",21,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"elementstate"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"elementstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"mousebutton"}],"output":{"name":"mousebutton"}}],[11,"eq","","",22,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"mousebutton"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"mousebutton"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"mousescrolldelta"}],"output":{"name":"mousescrolldelta"}}],[11,"fmt","","",23,{"inputs":[{"name":"mousescrolldelta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"virtualkeycode"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",24,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"virtualkeycode"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"virtualkeycode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","glutin::headless","Initializes a new `HeadlessRendererBuilder` with default values.",25,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",25,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",25,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",25,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",25,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",25,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"make_current","","Creates a new OpenGL context\nSets the context as the current context.",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",26,null],[11,"get_api","","Returns the API that is currently provided by this window.",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"set_window_resize_callback","","",26,null],[11,"get_proc_addr","","",26,null],[11,"make_current","","",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"is_current","","",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",26,null],[11,"swap_buffers","","",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"result"}}],[11,"get_api","","",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",26,{"inputs":[{"name":"headlesscontext"}],"output":{"name":"pixelformat"}}],[11,"new","glutin::window","Initializes a new `WindowBuilder` with default values.",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",27,{"inputs":[{"name":"windowbuilder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",27,{"inputs":[{"name":"windowbuilder"},{"name":"string"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Requests fullscreen mode.",27,{"inputs":[{"name":"windowbuilder"},{"name":"monitorid"}],"output":{"name":"windowbuilder"}}],[11,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",27,{"inputs":[{"name":"windowbuilder"},{"name":"window"}],"output":{"name":"windowbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",27,{"inputs":[{"name":"windowbuilder"},{"name":"glrequest"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",27,{"inputs":[{"name":"windowbuilder"},{"name":"glprofile"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",27,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",27,{"inputs":[{"name":"windowbuilder"},{"name":"robustness"}],"output":{"name":"windowbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",27,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request.",27,{"inputs":[{"name":"windowbuilder"},{"name":"u16"}],"output":{"name":"windowbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",27,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",27,{"inputs":[{"name":"windowbuilder"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",27,{"inputs":[{"name":"windowbuilder"},{"name":"u8"},{"name":"u8"}],"output":{"name":"windowbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window. `None` means \"I don't care\".",27,{"inputs":[{"name":"windowbuilder"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",27,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",27,{"inputs":[{"name":"windowbuilder"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the window.",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"default","","",28,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[11,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",28,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",28,null],[11,"show","","Shows the window if it was hidden.",28,null],[11,"hide","","Hides the window if it was visible.",28,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",28,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",28,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",28,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",28,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",28,null],[11,"poll_events","","Returns an iterator that poll for the next event in the window's events queue.\nReturns `None` if there is no event in the queue.",28,{"inputs":[{"name":"window"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","Returns an iterator that returns events one by one, blocking if necessary until one is\navailable.",28,{"inputs":[{"name":"window"}],"output":{"name":"waiteventsiterator"}}],[11,"make_current","","Sets the context as the current context.",28,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",28,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",28,null],[11,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",28,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"platform_display","","Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",28,null],[11,"platform_window","","Gets the native platform specific window handle. This is\ntypically only required when integrating with other libraries\nthat need this information.",28,null],[11,"get_api","","Returns the API that is currently provided by this window.",28,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","Returns the pixel format of this window.",28,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",28,{"inputs":[{"name":"window"}],"output":{"name":"windowproxy"}}],[11,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",28,null],[11,"set_cursor","","Modifies the mouse cursor of the window.\nHas no effect on Android.",28,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the\nwindow size in screen pixels. This is typically one for a normal display\nand two for a retina display.",28,{"inputs":[{"name":"window"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",28,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how glutin handles the cursor. See the documentation of `CursorState` for details.",28,{"inputs":[{"name":"window"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"get_proc_addr","","",28,null],[11,"make_current","","",28,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"is_current","","",28,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",28,null],[11,"swap_buffers","","",28,{"inputs":[{"name":"window"}],"output":{"name":"result"}}],[11,"get_api","","",28,{"inputs":[{"name":"window"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",28,{"inputs":[{"name":"window"}],"output":{"name":"pixelformat"}}],[11,"clone","","",29,{"inputs":[{"name":"windowproxy"}],"output":{"name":"windowproxy"}}],[11,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",29,null],[11,"next","","",30,{"inputs":[{"name":"polleventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next","","",31,{"inputs":[{"name":"waiteventsiterator"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"next","","",32,{"inputs":[{"name":"availablemonitorsiter"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"get_name","","Returns a human-readable name of the monitor.",33,{"inputs":[{"name":"monitorid"}],"output":{"name":"option"}}],[11,"get_native_identifier","","Returns the native platform identifier for this monitor.",33,{"inputs":[{"name":"monitorid"}],"output":{"name":"nativemonitorid"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",33,null],[11,"eq","glutin","",34,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"creationerror"},{"name":"creationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",34,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"creationerror"}],"output":{"name":"str"}}],[11,"fmt","","",35,{"inputs":[{"name":"contexterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",36,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"glprofile"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"glprofile"}],"output":{"name":"glprofile"}}],[11,"fmt","","",37,{"inputs":[{"name":"glprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"glrequest"}],"output":{"name":"glrequest"}}],[11,"fmt","","",38,{"inputs":[{"name":"glrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",38,{"inputs":[{"name":"glrequest"}],"output":{"name":"option"}}],[11,"eq","","",39,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"robustness"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"robustness"}],"output":{"name":"robustness"}}],[11,"fmt","","",39,{"inputs":[{"name":"robustness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"mousecursor"}],"output":{"name":"mousecursor"}}],[11,"fmt","","",40,{"inputs":[{"name":"mousecursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"cursorstate"}],"output":{"name":"cursorstate"}}],[11,"fmt","","",41,{"inputs":[{"name":"cursorstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"pixelformat"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",42,{"inputs":[{"name":"pixelformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","glutin::native_monitor","",43,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"nativemonitorid"},{"name":"nativemonitorid"}],"output":{"name":"bool"}}],[11,"to_key","glutin::events","",24,null],[11,"into_sprite","image::dynimage","",44,{"inputs":[{"name":"dynamicimage"},{"name":"d"}],"output":{"name":"luxresult"}}],[11,"decode","font_atlas","",45,{"inputs":[{"name":"charinfo"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"charinfo"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"charinfo"}],"output":{"name":"charinfo"}}],[11,"decode","","",46,{"inputs":[{"name":"renderedfont"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"renderedfont"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"renderedfont"}}],[11,"new","","",46,{"inputs":[{"name":"renderedfont"},{"name":"option"},{"name":"option"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"renderedfont"}}],[11,"kerning","","Returns the offsets `(dx, dy)` in pixels that should be applied\nto the difference in position between chars `a` and `b` where\n`a` comes immediately before `b` in the text.",46,null],[11,"line_height","","Returns the suggested distance between lines of text.",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"u32"}}],[11,"max_width","","Returns the maximum width of a single char using this font.",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"u32"}}],[11,"char_info","","Returns the offset and advance information regarding the specified\ncharacter.",46,{"inputs":[{"name":"renderedfont"},{"name":"char"}],"output":{"name":"option"}}],[11,"family_name","","Returns the name of this font family e.g. Times New Roman",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"option"}}],[11,"style_name","","Returns the name of the style e.g. (Bold).",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"option"}}],[11,"image","","Returns a reference to the contained image.",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"i"}}],[11,"image_mut","","Returns a mutable reference to the contained image.",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"i"}}],[11,"map","","Applies a transformation function to the image of this rendered font\nproducing a new rendered font with that image.",46,{"inputs":[{"name":"renderedfont"},{"name":"f"}],"output":{"name":"renderedfont"}}],[11,"positions_for","","Given a string, this function returns a vec containing all of the\npositions of each character as it should be rendered to the screen.",46,{"inputs":[{"name":"renderedfont"},{"name":"str"}],"output":{"name":"vec"}}],[11,"reskin","","",46,{"inputs":[{"name":"renderedfont"}],"output":{"name":"result"}}],[11,"clone","image::math::nq","",47,{"inputs":[{"name":"quad"}],"output":{"name":"quad"}}],[11,"new","","Creates a new neuronal network and trains it with the supplied data",48,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data",48,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",48,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",48,null],[11,"clone","image::imageops::colorops","",49,{"inputs":[{"name":"bilevel"}],"output":{"name":"bilevel"}}],[11,"index_of","","",49,{"inputs":[{"name":"bilevel"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",49,null],[11,"index_of","image::math::nq","",48,{"inputs":[{"name":"neuquant"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",48,null],[11,"clone","image::imageops::sample","",50,{"inputs":[{"name":"filtertype"}],"output":{"name":"filtertype"}}],[11,"new","image::webp::decoder","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",51,{"inputs":[{"name":"webpdecoder"},{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",51,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",51,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",51,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",51,null],[11,"read_image","","",51,{"inputs":[{"name":"webpdecoder"}],"output":{"name":"result"}}],[11,"new","image::webp::vp8","",52,{"inputs":[{"name":"boolreader"}],"output":{"name":"boolreader"}}],[11,"init","","",52,null],[11,"read_bool","","",52,{"inputs":[{"name":"boolreader"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"read_literal","","",52,{"inputs":[{"name":"boolreader"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"read_magnitude_and_sign","","",52,{"inputs":[{"name":"boolreader"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"read_with_tree","","",52,null],[11,"read_flag","","",52,{"inputs":[{"name":"boolreader"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"macroblock"}],"output":{"name":"macroblock"}}],[11,"clone","","",54,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"fmt","","",54,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",54,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"default","","",55,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"clone","","",55,{"inputs":[{"name":"segment"}],"output":{"name":"segment"}}],[11,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",56,{"inputs":[{"name":"vp8decoder"},{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",56,{"inputs":[{"name":"vp8decoder"}],"output":{"name":"result"}}],[11,"new","image::ppm::encoder","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",57,{"inputs":[{"name":"ppmencoder"},{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",57,null],[11,"fmt","image::png::filter","",58,{"inputs":[{"name":"filtertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",58,{"inputs":[{"name":"filtertype"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",58,{"inputs":[{"name":"filtertype"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","image::png::decoder","",59,{"inputs":[{"name":"pngstate"},{"name":"pngstate"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"pngstate"},{"name":"pngstate"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"pngstate"}],"output":{"name":"pngstate"}}],[11,"eq","","",60,{"inputs":[{"name":"interlacemethod"},{"name":"interlacemethod"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"interlacemethod"},{"name":"interlacemethod"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"interlacemethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"interlacemethod"}],"output":{"name":"interlacemethod"}}],[11,"from_i64","","",60,{"inputs":[{"name":"interlacemethod"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",60,{"inputs":[{"name":"interlacemethod"},{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"adam7iterator"}],"output":{"name":"adam7iterator"}}],[11,"new","","",61,{"inputs":[{"name":"adam7iterator"},{"name":"u32"},{"name":"u32"}],"output":{"name":"adam7iterator"}}],[11,"next","","",61,{"inputs":[{"name":"adam7iterator"}],"output":{"name":"option"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",62,{"inputs":[{"name":"pngdecoder"},{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",62,null],[11,"dimensions","","",62,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",62,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",62,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",62,null],[11,"read_image","","",62,{"inputs":[{"name":"pngdecoder"}],"output":{"name":"result"}}],[11,"new","","",63,{"inputs":[{"name":"idatreader"},{"name":"r"}],"output":{"name":"idatreader"}}],[11,"set_inital_length","","",63,null],[11,"read","","",63,null],[11,"new","image::png::encoder","Create a new encoder that writes its output to ```w```",64,{"inputs":[{"name":"pngencoder"},{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",64,null],[11,"new","image::png::zlib","Create a new decoder that decodes from a Reader",65,{"inputs":[{"name":"zlibdecoder"},{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"inner","","Return a mutable reference to the wrapped Reader",65,{"inputs":[{"name":"zlibdecoder"}],"output":{"name":"r"}}],[11,"read","","",65,null],[11,"new","","Builds a new encoder.",66,{"inputs":[{"name":"zlibencoder"},{"name":"w"}],"output":{"name":"result"}}],[11,"into_inner","","Finish writing and returns the underlying writer.",66,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"write","","",66,null],[11,"flush","","",66,{"inputs":[{"name":"zlibencoder"}],"output":{"name":"result"}}],[11,"drop","","",66,null],[11,"new","image::png::deflate","Creates a new encoder that writes to the underlying writer.",67,{"inputs":[{"name":"deflater"},{"name":"w"}],"output":{"name":"deflater"}}],[11,"into_inner","","Stops encoding and returns the underlying writer.",67,{"inputs":[{"name":"deflater"}],"output":{"name":"result"}}],[11,"write","","",67,null],[11,"flush","","",67,{"inputs":[{"name":"deflater"}],"output":{"name":"result"}}],[11,"drop","","",67,null],[11,"clone","image::png::inflate","",68,{"inputs":[{"name":"tableelement"}],"output":{"name":"tableelement"}}],[11,"eq","","",68,{"inputs":[{"name":"tableelement"},{"name":"tableelement"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"tableelement"},{"name":"tableelement"}],"output":{"name":"bool"}}],[11,"put","","",68,null],[11,"new","","Create a new decoder that decodes from a Reader",69,{"inputs":[{"name":"inflater"},{"name":"r"}],"output":{"name":"inflater"}}],[11,"eof","","Indicate whether the end of the stream has been reached.",69,{"inputs":[{"name":"inflater"}],"output":{"name":"bool"}}],[11,"inner","","Return a mutable reference to the wrapped Reader",69,{"inputs":[{"name":"inflater"}],"output":{"name":"r"}}],[11,"read","","",69,null],[11,"new","","",70,{"inputs":[{"name":"huffreader"},{"name":"r"}],"output":{"name":"huffreader"}}],[11,"guarantee","","",70,{"inputs":[{"name":"huffreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"byte_align","","",70,null],[11,"consume","","",70,null],[11,"receive","","",70,{"inputs":[{"name":"huffreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"decode_symbol","","",70,null],[11,"clone","image::png::hash","",71,{"inputs":[{"name":"adler32"}],"output":{"name":"adler32"}}],[11,"new","","Create a new hasher.",71,{"inputs":[{"name":"adler32"}],"output":{"name":"adler32"}}],[11,"update","","Update the internal hasher with the bytes from ```buf```",71,null],[11,"checksum","","Return the computed hash.",71,{"inputs":[{"name":"adler32"}],"output":{"name":"u32"}}],[11,"reset","","Reset this hasher to its initial state.",71,null],[11,"clone","","",72,{"inputs":[{"name":"crc32"}],"output":{"name":"crc32"}}],[11,"new","","Create a new hasher.",72,{"inputs":[{"name":"crc32"}],"output":{"name":"crc32"}}],[11,"update","","Update the internal hasher with the bytes from ```buf```",72,null],[11,"checksum","","Return the computed hash.",72,{"inputs":[{"name":"crc32"}],"output":{"name":"u32"}}],[11,"reset","","Reset this hasher to its initial state.",72,null],[11,"new","image::jpeg::encoder","Create a new encoder that writes its output to ```w```",73,{"inputs":[{"name":"jpegencoder"},{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",73,null],[11,"clone","image::jpeg::decoder","",74,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"eq","","",75,{"inputs":[{"name":"jpegstate"},{"name":"jpegstate"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"jpegstate"},{"name":"jpegstate"}],"output":{"name":"bool"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",76,{"inputs":[{"name":"jpegdecoder"},{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",76,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",76,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",76,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",76,null],[11,"read_image","","",76,{"inputs":[{"name":"jpegdecoder"}],"output":{"name":"result"}}],[11,"clone","image::jpeg::entropy","",77,{"inputs":[{"name":"hufftable"}],"output":{"name":"hufftable"}}],[11,"default","","",77,{"inputs":[{"name":"hufftable"}],"output":{"name":"hufftable"}}],[11,"new","","",78,{"inputs":[{"name":"huffdecoder"}],"output":{"name":"huffdecoder"}}],[11,"read_bit","","",78,{"inputs":[{"name":"huffdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"receive","","",78,{"inputs":[{"name":"huffdecoder"},{"name":"r"},{"name":"u8"}],"output":{"name":"result"}}],[11,"decode_symbol","","",78,{"inputs":[{"name":"huffdecoder"},{"name":"r"},{"name":"hufftable"}],"output":{"name":"result"}}],[11,"new","image::gif","Creates a new decoder that decodes the input steam ```r```",79,{"inputs":[{"name":"decoder"},{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",79,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"colortype","","",79,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"row_len","","",79,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",79,null],[11,"read_image","","",79,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"new","","Creates a new GIF encoder.",80,{"inputs":[{"name":"encoder"},{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",80,{"inputs":[{"name":"encoder"},{"name":"frame"}],"output":{"name":"result"}}],[11,"from","image::image","",81,{"inputs":[{"name":"imageerror"},{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[11,"eq","image::tiff::decoder","",82,{"inputs":[{"name":"photometricinterpretation"},{"name":"photometricinterpretation"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"photometricinterpretation"},{"name":"photometricinterpretation"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"photometricinterpretation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"photometricinterpretation"}],"output":{"name":"photometricinterpretation"}}],[11,"from_i64","","",82,{"inputs":[{"name":"photometricinterpretation"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",82,{"inputs":[{"name":"photometricinterpretation"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",83,{"inputs":[{"name":"compressionmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"compressionmethod"}],"output":{"name":"compressionmethod"}}],[11,"from_i64","","",83,{"inputs":[{"name":"compressionmethod"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",83,{"inputs":[{"name":"compressionmethod"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",84,{"inputs":[{"name":"planarconfiguration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"planarconfiguration"}],"output":{"name":"planarconfiguration"}}],[11,"from_i64","","",84,{"inputs":[{"name":"planarconfiguration"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",84,{"inputs":[{"name":"planarconfiguration"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"predictor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"predictor"}],"output":{"name":"predictor"}}],[11,"from_i64","","",85,{"inputs":[{"name":"predictor"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",85,{"inputs":[{"name":"predictor"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"tiffdecoder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",86,{"inputs":[{"name":"tiffdecoder"},{"name":"r"}],"output":{"name":"result"}}],[11,"init","","Initializes the decoder.",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_long","","Reads a TIFF long value",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",86,{"inputs":[{"name":"tiffdecoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",86,null],[11,"read_image","","",86,{"inputs":[{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"hash","image::tiff::ifd","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"tag"}],"output":{"name":"tag"}}],[11,"from_u16","","",87,{"inputs":[{"name":"tag"},{"name":"u16"}],"output":{"name":"tag"}}],[11,"fmt","","",88,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"from_i64","","",88,{"inputs":[{"name":"type"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",88,{"inputs":[{"name":"type"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",89,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_u32","","",89,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"as_u32_vec","","",89,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"entry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",90,null],[11,"val","","",90,{"inputs":[{"name":"entry"},{"name":"tiffdecoder"}],"output":{"name":"result"}}],[11,"fmt","image::tiff::stream","",91,{"inputs":[{"name":"byteorder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"byteorder"}],"output":{"name":"byteorder"}}],[11,"new","","Wraps a reader",92,{"inputs":[{"name":"lzwreader"},{"name":"smartreader"}],"output":{"name":"result"}}],[11,"read","","",92,null],[11,"byte_order","","",92,{"inputs":[{"name":"lzwreader"}],"output":{"name":"byteorder"}}],[11,"fmt","","",93,{"inputs":[{"name":"smartreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wrap","","Wraps a reader",93,{"inputs":[{"name":"smartreader"},{"name":"r"},{"name":"byteorder"}],"output":{"name":"smartreader"}}],[11,"byte_order","","",93,{"inputs":[{"name":"smartreader"}],"output":{"name":"byteorder"}}],[11,"read","","",93,null],[11,"seek","","",93,{"inputs":[{"name":"smartreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","image::tga::decoder","",94,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_reader","","",95,{"inputs":[{"name":"colormap"},{"name":"read"},{"name":"u16"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","Get one entry from the color map",95,null],[11,"new","","Create a new decoder that decodes from the stream `r`",96,{"inputs":[{"name":"tgadecoder"},{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",96,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"colortype","","",96,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"row_len","","",96,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",96,null],[11,"read_image","","",96,{"inputs":[{"name":"tgadecoder"}],"output":{"name":"result"}}],[11,"eq","image::bmp::decoder","",97,{"inputs":[{"name":"imagetype"},{"name":"imagetype"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"imagetype"},{"name":"imagetype"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"bmpheadertype"},{"name":"bmpheadertype"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"bmpheadertype"},{"name":"bmpheadertype"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"format16bit"},{"name":"format16bit"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"format16bit"},{"name":"format16bit"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"formatfullbytes"},{"name":"formatfullbytes"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"formatfullbytes"},{"name":"formatfullbytes"}],"output":{"name":"bool"}}],[11,"new","","Create a new decoder that decodes from the stream ```r```",101,{"inputs":[{"name":"bmpdecoder"},{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",101,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"colortype","","",101,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"row_len","","",101,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"read_scanline","","",101,null],[11,"read_image","","",101,{"inputs":[{"name":"bmpdecoder"}],"output":{"name":"result"}}],[11,"fmt","image::image","",81,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"imageerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",81,{"inputs":[{"name":"imageerror"}],"output":{"name":"str"}}],[11,"cause","","",81,{"inputs":[{"name":"imageerror"}],"output":{"name":"option"}}],[11,"from","","",81,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"from","","",81,{"inputs":[{"name":"imageerror"},{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",102,{"inputs":[{"name":"imageformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"imageformat"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"imageformat"}],"output":{"name":"imageformat"}}],[11,"next","","",103,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"mutpixels"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",105,{"inputs":[{"name":"subimage"},{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",105,{"inputs":[{"name":"subimage"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",105,null],[11,"to_image","","Convert this subimage to an ImageBuffer",105,{"inputs":[{"name":"subimage"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",105,null],[11,"bounds","","",105,null],[11,"get_pixel","","",105,null],[11,"put_pixel","","",105,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",105,null],[11,"get_pixel_mut","","",105,null],[11,"new","image::utils::bitstream","Creates a new bit reader",106,{"inputs":[{"name":"lsbreader"},{"name":"r"}],"output":{"name":"lsbreader"}}],[11,"read","","",106,null],[11,"new","","Creates a new bit reader",107,{"inputs":[{"name":"msbreader"},{"name":"r"}],"output":{"name":"msbreader"}}],[11,"read","","",107,null],[11,"read_bits","","",106,{"inputs":[{"name":"lsbreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"read_bits","","",107,{"inputs":[{"name":"msbreader"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",108,{"inputs":[{"name":"lsbwriter"},{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",108,null],[11,"flush","","",108,{"inputs":[{"name":"lsbwriter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",109,{"inputs":[{"name":"msbwriter"},{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",109,null],[11,"flush","","",109,{"inputs":[{"name":"msbwriter"}],"output":{"name":"result"}}],[11,"write_bits","","",108,{"inputs":[{"name":"lsbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",109,{"inputs":[{"name":"msbwriter"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"clone","image::dynimage","",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey\npixels with transparency.",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"imagebuffer"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"vec"}}],[11,"color","","Return this image's color type.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image.\nThis method operates inplace.",44,null],[11,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",44,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",44,{"inputs":[{"name":"dynamicimage"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",44,null],[11,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",44,{"inputs":[{"name":"dynamicimage"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",44,{"inputs":[{"name":"dynamicimage"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to ```w```",44,{"inputs":[{"name":"dynamicimage"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"result"}}],[11,"dimensions","","",44,null],[11,"bounds","","",44,null],[11,"get_pixel","","",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"put_pixel","","",44,null],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",44,null],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",44,{"inputs":[{"name":"dynamicimage"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"clone","image::color","",110,{"inputs":[{"name":"colortype"}],"output":{"name":"colortype"}}],[11,"fmt","","",110,{"inputs":[{"name":"colortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"colortype"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"fmt","","",111,{"inputs":[{"name":"rgb"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"eq","","",111,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"rgb"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"channel_count","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"u8"}}],[11,"color_model","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"str"}}],[11,"color_type","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"colortype"}}],[11,"channels","","",111,null],[11,"channels_mut","","",111,null],[11,"channels4","","",111,null],[11,"from_channels","","",111,{"inputs":[{"name":"rgb"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",111,null],[11,"from_slice_mut","","",111,null],[11,"to_rgb","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"rgba"}}],[11,"to_luma","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"lumaa"}}],[11,"map","","",111,{"inputs":[{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",111,null],[11,"map_with_alpha","","",111,{"inputs":[{"name":"rgb"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",111,null],[11,"map2","","",111,{"inputs":[{"name":"rgb"},{"name":"rgb"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",111,null],[11,"invert","","",111,null],[11,"blend","","",111,null],[11,"index","","",111,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",111,{"inputs":[{"name":"rgb"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"luma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"eq","","",112,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"luma"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"channel_count","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"u8"}}],[11,"color_model","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"str"}}],[11,"color_type","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"colortype"}}],[11,"channels","","",112,null],[11,"channels_mut","","",112,null],[11,"channels4","","",112,null],[11,"from_channels","","",112,{"inputs":[{"name":"luma"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",112,null],[11,"from_slice_mut","","",112,null],[11,"to_rgb","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"rgba"}}],[11,"to_luma","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"lumaa"}}],[11,"map","","",112,{"inputs":[{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",112,null],[11,"map_with_alpha","","",112,{"inputs":[{"name":"luma"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",112,null],[11,"map2","","",112,{"inputs":[{"name":"luma"},{"name":"luma"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",112,null],[11,"invert","","",112,null],[11,"blend","","",112,null],[11,"index","","",112,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",112,{"inputs":[{"name":"luma"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"rgba"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"eq","","",113,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"rgba"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"channel_count","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"u8"}}],[11,"color_model","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"str"}}],[11,"color_type","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"colortype"}}],[11,"channels","","",113,null],[11,"channels_mut","","",113,null],[11,"channels4","","",113,null],[11,"from_channels","","",113,{"inputs":[{"name":"rgba"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",113,null],[11,"from_slice_mut","","",113,null],[11,"to_rgb","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"rgba"}}],[11,"to_luma","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"lumaa"}}],[11,"map","","",113,{"inputs":[{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",113,null],[11,"map_with_alpha","","",113,{"inputs":[{"name":"rgba"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",113,null],[11,"map2","","",113,{"inputs":[{"name":"rgba"},{"name":"rgba"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",113,null],[11,"invert","","",113,null],[11,"blend","","",113,null],[11,"index","","",113,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",113,{"inputs":[{"name":"rgba"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"lumaa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"eq","","",114,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"lumaa"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"channel_count","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"u8"}}],[11,"color_model","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"str"}}],[11,"color_type","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"colortype"}}],[11,"channels","","",114,null],[11,"channels_mut","","",114,null],[11,"channels4","","",114,null],[11,"from_channels","","",114,{"inputs":[{"name":"lumaa"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",114,null],[11,"from_slice_mut","","",114,null],[11,"to_rgb","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"rgba"}}],[11,"to_luma","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"lumaa"}}],[11,"map","","",114,{"inputs":[{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",114,null],[11,"map_with_alpha","","",114,{"inputs":[{"name":"lumaa"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",114,null],[11,"map2","","",114,{"inputs":[{"name":"lumaa"},{"name":"lumaa"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",114,null],[11,"invert","","",114,null],[11,"blend","","",114,null],[11,"index","","",114,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",114,{"inputs":[{"name":"lumaa"},{"name":"usize"}],"output":{"name":"t"}}],[11,"from_color","","",112,null],[11,"from_color","","",112,null],[11,"from_color","","",112,null],[11,"from_color","","",114,null],[11,"from_color","","",114,null],[11,"from_color","","",114,null],[11,"from_color","","",113,null],[11,"from_color","","",113,null],[11,"from_color","","",113,null],[11,"from_color","","",111,null],[11,"from_color","","",111,null],[11,"from_color","","",111,null],[11,"blend","","",114,null],[11,"blend","","",112,null],[11,"blend","","",113,null],[11,"blend","","",111,null],[11,"invert","","",114,null],[11,"invert","","",112,null],[11,"invert","","",113,null],[11,"invert","","",111,null],[11,"next","image::buffer","",115,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"pixels"}],"output":{"name":"option"}}],[11,"next","","",116,{"inputs":[{"name":"pixelsmut"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"pixelsmut"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"enumeratepixels"}],"output":{"name":"option"}}],[11,"next","","",118,{"inputs":[{"name":"enumeratepixelsmut"}],"output":{"name":"option"}}],[11,"from_raw","","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",119,null],[11,"width","","The width of this image.",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",119,null],[11,"save","","Saves the buffer to a file at the path specified.",119,{"inputs":[{"name":"imagebuffer"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",119,null],[11,"deref_mut","","",119,null],[11,"index","","",119,null],[11,"index_mut","","",119,null],[11,"clone","","",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",119,null],[11,"bounds","","",119,null],[11,"get_pixel","","",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",119,null],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels\nDEPRECATED: This method will be removed. Blend the pixel directly instead.",119,null],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",119,{"inputs":[{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"vec"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to\nadjust it's alpha value accordingly.",119,null],[11,"convert","","",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"imagebuffer"}}],[11,"new","image::animation","Contructs a new frame iterator",120,{"inputs":[{"name":"frames"},{"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",121,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",121,{"inputs":[{"name":"frame"},{"name":"imagebuffer"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",121,{"inputs":[{"name":"frame"},{"name":"imagebuffer"},{"name":"u32"},{"name":"u32"},{"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",121,{"inputs":[{"name":"frame"}],"output":{"name":"ratio"}}],[11,"buffer","","Returns the image buffer",121,{"inputs":[{"name":"frame"}],"output":{"name":"imagebuffer"}}],[11,"into_buffer","","Returns the image buffer",121,{"inputs":[{"name":"frame"}],"output":{"name":"imagebuffer"}}],[11,"left","","Returns the x offset",121,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"top","","Returns the x offset",121,{"inputs":[{"name":"frame"}],"output":{"name":"u32"}}],[11,"next","","",120,{"inputs":[{"name":"frames"}],"output":{"name":"option"}}],[11,"fmt","lux","",0,{"inputs":[{"name":"luxerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"luxerror"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"decodingerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"programcreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"texturecreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"ioerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"drawerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"imageerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"buffercreationerror"}],"output":{"name":"luxerror"}}],[11,"from","","",0,{"inputs":[{"name":"luxerror"},{"name":"buffercreationerror"}],"output":{"name":"luxerror"}}],[11,"fmt","","",0,{"inputs":[{"name":"luxerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow_display","lux::private::accessors","",122,{"inputs":[{"name":"display"}],"output":{"name":"display"}}],[0,"types","lux","Typedefs for use inside Lux.",null,null],[6,"Idx","lux::types","The type for indexing into vertices when drawing shapes.",null,null],[6,"Float","","The floating point type used for positions and colors.",null,null],[0,"color","lux","Color creation functions and some named defaults.",null,null],[5,"rgb","lux::color","Constructs a color from R, G, and B components.",null,null],[5,"rgba","","Constructs a color from R, G, B, and A components.",null,null],[5,"hsv","","Constructs a color from Hue, Saturation and Value components.",null,null],[5,"hsva","","Same as `hsv` but with an alpha component.",null,null],[5,"hex_rgb","","Convertes a u32 to a color by treating the last 3 bytes as rgb tripples.",null,null],[5,"hex_rgba","","Convertes a u32 to a color by treating the 4 bytes as rgb tripples.",null,null],[7,"ALICEBLUE","","All of the wc3 named colors.",null,null],[7,"ANTIQUEWHITE","","",null,null],[7,"AQUA","","",null,null],[7,"AQUAMARINE","","",null,null],[7,"AZURE","","",null,null],[7,"BEIGE","","",null,null],[7,"BISQUE","","",null,null],[7,"BLACK","","",null,null],[7,"BLANCHEDALMOND","","",null,null],[7,"BLUE","","",null,null],[7,"BLUEVIOLET","","",null,null],[7,"BROWN","","",null,null],[7,"BURLYWOOD","","",null,null],[7,"CADETBLUE","","",null,null],[7,"CHARTREUSE","","",null,null],[7,"CHOCOLATE","","",null,null],[7,"CORAL","","",null,null],[7,"CORNFLOWERBLUE","","",null,null],[7,"CORNSILK","","",null,null],[7,"CRIMSON","","",null,null],[7,"CYAN","","",null,null],[7,"DARKBLUE","","",null,null],[7,"DARKCYAN","","",null,null],[7,"DARKGOLDENROD","","",null,null],[7,"DARKGRAY","","",null,null],[7,"DARKGREEN","","",null,null],[7,"DARKKHAKI","","",null,null],[7,"DARKMAGENTA","","",null,null],[7,"DARKOLIVEGREEN","","",null,null],[7,"DARKORANGE","","",null,null],[7,"DARKORCHID","","",null,null],[7,"DARKRED","","",null,null],[7,"DARKSALMON","","",null,null],[7,"DARKSEAGREEN","","",null,null],[7,"DARKSLATEBLUE","","",null,null],[7,"DARKSLATEGRAY","","",null,null],[7,"DARKTURQUOISE","","",null,null],[7,"DARKVIOLET","","",null,null],[7,"DEEPPINK","","",null,null],[7,"DEEPSKYBLUE","","",null,null],[7,"DIMGRAY","","",null,null],[7,"DODGERBLUE","","",null,null],[7,"FIREBRICK","","",null,null],[7,"FLORALWHITE","","",null,null],[7,"FORESTGREEN","","",null,null],[7,"FUCHSIA","","",null,null],[7,"GAINSBORO","","",null,null],[7,"GHOSTWHITE","","",null,null],[7,"GOLD","","",null,null],[7,"GOLDENROD","","",null,null],[7,"GRAY","","",null,null],[7,"GREEN","","",null,null],[7,"GREENYELLOW","","",null,null],[7,"HONEYDEW","","",null,null],[7,"HOTPINK","","",null,null],[7,"INDIANRED","","",null,null],[7,"INDIGO","","",null,null],[7,"IVORY","","",null,null],[7,"KHAKI","","",null,null],[7,"LAVENDER","","",null,null],[7,"LAVENDERBLUSH","","",null,null],[7,"LAWNGREEN","","",null,null],[7,"LEMONCHIFFON","","",null,null],[7,"LIGHTBLUE","","",null,null],[7,"LIGHTCORAL","","",null,null],[7,"LIGHTCYAN","","",null,null],[7,"LIGHTGOLDENRODYELLOW","","",null,null],[7,"LIGHTGREEN","","",null,null],[7,"LIGHTGREY","","",null,null],[7,"LIGHTPINK","","",null,null],[7,"LIGHTSALMON","","",null,null],[7,"LIGHTSEAGREEN","","",null,null],[7,"LIGHTSKYBLUE","","",null,null],[7,"LIGHTSLATEGRAY","","",null,null],[7,"LIGHTSTEELBLUE","","",null,null],[7,"LIGHTYELLOW","","",null,null],[7,"LIME","","",null,null],[7,"LIMEGREEN","","",null,null],[7,"LINEN","","",null,null],[7,"MAGENTA","","",null,null],[7,"MAROON","","",null,null],[7,"MEDIUMAQUAMARINE","","",null,null],[7,"MEDIUMBLUE","","",null,null],[7,"MEDIUMORCHID","","",null,null],[7,"MEDIUMPURPLE","","",null,null],[7,"MEDIUMSEAGREEN","","",null,null],[7,"MEDIUMSLATEBLUE","","",null,null],[7,"MEDIUMSPRINGGREEN","","",null,null],[7,"MEDIUMTURQUOISE","","",null,null],[7,"MEDIUMVIOLETRED","","",null,null],[7,"MIDNIGHTBLUE","","",null,null],[7,"MINTCREAM","","",null,null],[7,"MISTYROSE","","",null,null],[7,"MOCCASIN","","",null,null],[7,"NAVAJOWHITE","","",null,null],[7,"NAVY","","",null,null],[7,"OLDLACE","","",null,null],[7,"OLIVE","","",null,null],[7,"OLIVEDRAB","","",null,null],[7,"ORANGE","","",null,null],[7,"ORANGERED","","",null,null],[7,"ORCHID","","",null,null],[7,"PALEGOLDENROD","","",null,null],[7,"PALEGREEN","","",null,null],[7,"PALEVIOLETRED","","",null,null],[7,"PAPAYAWHIP","","",null,null],[7,"PEACHPUFF","","",null,null],[7,"PERU","","",null,null],[7,"PINK","","",null,null],[7,"PLUM","","",null,null],[7,"POWDERBLUE","","",null,null],[7,"PURPLE","","",null,null],[7,"RED","","",null,null],[7,"ROSYBROWN","","",null,null],[7,"ROYALBLUE","","",null,null],[7,"SADDLEBROWN","","",null,null],[7,"SALMON","","",null,null],[7,"SANDYBROWN","","",null,null],[7,"SEAGREEN","","",null,null],[7,"SEASHELL","","",null,null],[7,"SIENNA","","",null,null],[7,"SILVER","","",null,null],[7,"SKYBLUE","","",null,null],[7,"SLATEBLUE","","",null,null],[7,"SLATEGRAY","","",null,null],[7,"SNOW","","",null,null],[7,"SPRINGGREEN","","",null,null],[7,"STEELBLUE","","",null,null],[7,"TAN","","",null,null],[7,"TEAL","","",null,null],[7,"THISTLE","","",null,null],[7,"TOMATO","","",null,null],[7,"TURQUOISE","","",null,null],[7,"VIOLET","","",null,null],[7,"WHEAT","","",null,null],[7,"WHITE","","",null,null],[7,"WHITESMOKE","","",null,null],[7,"YELLOW","","",null,null],[7,"YELLOWGREEN","","",null,null],[8,"Color","","A `Color` is any object that can be converted to a length-4 array of f32s.",null,null],[10,"to_rgba","","Converts this object to a length-4 array of floats.",123,null],[0,"graphics","lux","All of 2d graphics related functionality.",null,null],[11,"is_supported","glium::index","Returns true if the backend supports this type of primitives.",124,{"inputs":[{"name":"primitivetype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"clone","glium::backend::glutin_backend","",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"glutinfacade"}}],[11,"get_context","","",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"rc"}}],[6,"Item","lux::graphics","",null,null],[11,"next","glium::backend::glutin_backend","",126,{"inputs":[{"name":"polleventsiter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","glium::backend::glutin_backend","",127,{"inputs":[{"name":"waiteventsiter"}],"output":{"name":"option"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::backend::glutin_backend","",128,{"inputs":[{"name":"winref"}],"output":{"name":"window"}}],[11,"poll_events","","Reads all events received by the window.",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"polleventsiter"}}],[11,"wait_events","","Reads all events received by the window.",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"waiteventsiter"}}],[11,"get_window","","Returns the underlying window, or `None` if glium uses a headless context.",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"option"}}],[11,"draw","","Start drawing on the backbuffer.",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"frame"}}],[11,"new","glium::context","Builds a new context.",129,{"inputs":[{"name":"context"},{"name":"b"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_framebuffer_dimensions","","Calls `get_framebuffer_dimensions` on the backend object stored by this context.",129,null],[11,"rebuild","","Changes the OpenGL context associated with this context.",129,{"inputs":[{"name":"context"},{"name":"b"}],"output":{"name":"result"}}],[11,"swap_buffers","","Swaps the buffers in the backend.",129,{"inputs":[{"name":"context"}],"output":{"name":"result"}}],[11,"get_version","","DEPRECATED. Use `get_opengl_version` instead.",129,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_opengl_version","","Returns the OpenGL version detected by this context.",129,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_supported_glsl_version","","Returns the GLSL version guaranteed to be supported.",129,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"is_glsl_version_supported","","Returns true if the given GLSL version is supported.",129,{"inputs":[{"name":"context"},{"name":"version"}],"output":{"name":"bool"}}],[11,"is_robust","","Returns true if out-of-bound buffer access from the GPU side (inside a program) cannot\nresult in a crash.",129,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_context_loss_possible","","Returns true if a context loss is possible.",129,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"is_context_lost","","Returns true if the context has been lost and needs to be recreated.",129,{"inputs":[{"name":"context"}],"output":{"name":"bool"}}],[11,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",129,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport.",129,null],[11,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",129,null],[11,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",129,{"inputs":[{"name":"context"}],"output":{"name":"option"}}],[11,"read_front_buffer","","Reads the content of the front buffer.",129,{"inputs":[{"name":"context"}],"output":{"name":"t"}}],[11,"exec_in_context","","Execute an arbitrary closure with the OpenGL context active. Useful if another\ncomponent needs to directly manipulate OpenGL state.",129,{"inputs":[{"name":"context"},{"name":"f"}],"output":{"name":"t"}}],[11,"assert_no_error","","Asserts that there are no OpenGL errors pending.",129,null],[11,"synchronize","","Waits until all the previous commands have finished being executed.",129,null],[11,"insert_debug_marker","","Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will\nbe able to see that string.",129,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"result"}}],[11,"debug_insert_debug_marker","","Same as `insert_debug_marker`, except that if you don't compile with `debug_assertions`\nit is a no-op and returns `Ok`.",129,{"inputs":[{"name":"context"},{"name":"str"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::backend::glutin_backend","",125,{"inputs":[{"name":"glutinfacade"}],"output":{"name":"context"}}],[6,"Facade","lux::graphics","",null,null],[6,"Err","","",null,null],[11,"build_glium","glutin::window","",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"build_glium_unchecked","","",27,{"inputs":[{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",27,{"inputs":[{"name":"windowbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[6,"Facade","lux::graphics","",null,null],[6,"Err","","",null,null],[11,"build_glium","glutin::headless","",25,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"build_glium_unchecked","","",25,{"inputs":[{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"rebuild_glium","","",25,{"inputs":[{"name":"headlessrendererbuilder"},{"name":"glutinfacade"}],"output":{"name":"result"}}],[11,"swap_buffers","glium::backend::glutin_backend","",130,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"result"}}],[11,"get_proc_address","","",130,null],[11,"get_framebuffer_dimensions","","",130,null],[11,"is_current","","",130,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",130,null],[11,"new","","Builds a new backend from the builder.",130,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"get_window","","",130,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"window"}}],[11,"poll_events","","",130,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"polleventsiterator"}}],[11,"wait_events","","",130,{"inputs":[{"name":"glutinwindowbackend"}],"output":{"name":"waiteventsiterator"}}],[11,"rebuild","","",130,{"inputs":[{"name":"glutinwindowbackend"},{"name":"windowbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","","",131,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"result"}}],[11,"get_proc_address","","",131,null],[11,"get_framebuffer_dimensions","","",131,null],[11,"is_current","","",131,{"inputs":[{"name":"glutinheadlessbackend"}],"output":{"name":"bool"}}],[11,"make_current","","",131,null],[11,"new","","Builds a new backend from the builder.",131,{"inputs":[{"name":"glutinheadlessbackend"},{"name":"headlessrendererbuilder"}],"output":{"name":"result"}}],[11,"swap_buffers","alloc::rc","",132,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"get_proc_address","","",132,null],[11,"get_framebuffer_dimensions","","",132,null],[11,"is_current","","",132,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"make_current","","",132,null],[11,"get_context","","",132,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"clone","glium::buffer::alloc","",133,{"inputs":[{"name":"readerror"}],"output":{"name":"readerror"}}],[11,"fmt","","",133,{"inputs":[{"name":"readerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new buffer containing the given data. The size of the buffer is equal to the\nsize of the data.",134,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"d"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty","","Builds a new empty buffer of the given size.",134,{"inputs":[{"name":"buffer"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",134,{"inputs":[{"name":"buffer"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the total size in bytes of this buffer.",134,{"inputs":[{"name":"buffer"}],"output":{"name":"usize"}}],[11,"uses_persistent_mapping","","Returns true if the buffer is persistently mapped in memory.",134,{"inputs":[{"name":"buffer"}],"output":{"name":"bool"}}],[11,"set_type","","Changes the type of the buffer. Returns `Err` if this is forbidden.",134,{"inputs":[{"name":"buffer"},{"name":"buffertype"}],"output":{"name":"result"}}],[11,"prepare_for_vertex_attrib_array","","Calls `glMemoryBarrier(GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT)` if necessary.",134,null],[11,"prepare_for_element_array","","Calls `glMemoryBarrier(ELEMENT_ARRAY_BARRIER_BIT)` if necessary.",134,null],[11,"bind_to_element_array","","Binds the buffer to `GL_ELEMENT_ARRAY_BUFFER` regardless of the current vertex array object.",134,null],[11,"prepare_and_bind_for_pixel_pack","","Makes sure that the buffer is binded to the `GL_PIXEL_PACK_BUFFER` and calls\n`glMemoryBarrier(GL_PIXEL_BUFFER_BARRIER_BIT)` if necessary.",134,null],[11,"unbind_pixel_pack","","Makes sure that nothing is binded to `GL_PIXEL_PACK_BUFFER`.",134,null],[11,"prepare_and_bind_for_pixel_unpack","","Makes sure that the buffer is binded to the `GL_PIXEL_UNPACK_BUFFER` and calls\n`glMemoryBarrier(GL_PIXEL_BUFFER_BARRIER_BIT)` if necessary.",134,null],[11,"unbind_pixel_unpack","","Makes sure that nothing is binded to `GL_PIXEL_UNPACK_BUFFER`.",134,null],[11,"prepare_and_bind_for_draw_indirect","","Makes sure that the buffer is binded to the `GL_DRAW_INDIRECT_BUFFER` and calls\n`glMemoryBarrier(GL_COMMAND_BARRIER_BIT)` if necessary.",134,null],[11,"prepare_and_bind_for_uniform","","Makes sure that the buffer is binded to the indexed `GL_UNIFORM_BUFFER` point and calls\n`glMemoryBarrier(GL_UNIFORM_BARRIER_BIT)` if necessary.",134,null],[11,"prepare_and_bind_for_shared_storage","","Makes sure that the buffer is binded to the indexed `GL_SHARED_STORAGE_BUFFER` point and calls\n`glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT)` if necessary.",134,null],[11,"bind_to_transform_feedback","","Binds the buffer to `GL_TRANSFORM_FEEDBACk_BUFFER` regardless of the current transform\nfeedback object.",134,null],[11,"upload","","Uploads data in the buffer.",134,null],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",134,null],[11,"map","","Returns a read and write mapping in memory of the content of the buffer.",134,{"inputs":[{"name":"buffer"},{"name":"range"}],"output":{"name":"mapping"}}],[11,"map_read","","Returns a read-only mapping in memory of the content of the buffer.",134,{"inputs":[{"name":"buffer"},{"name":"range"}],"output":{"name":"readmapping"}}],[11,"map_write","","Returns a write-only mapping in memory of the content of the buffer.",134,{"inputs":[{"name":"buffer"},{"name":"range"}],"output":{"name":"writemapping"}}],[11,"read","","Reads the content of the buffer.",134,{"inputs":[{"name":"buffer"},{"name":"range"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"buffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",134,null],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::buffer::alloc","",134,{"inputs":[{"name":"buffer"}],"output":{"name":"u32"}}],[11,"drop","","",135,null],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::buffer::alloc","",136,{"inputs":[{"name":"mapping"}],"output":{"name":"d"}}],[11,"deref_mut","","",136,{"inputs":[{"name":"mapping"}],"output":{"name":"d"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::buffer::alloc","",137,{"inputs":[{"name":"readmapping"}],"output":{"name":"d"}}],[11,"write","","Writes the whole content.",138,null],[11,"len","","Returns the length of the mapping.",138,{"inputs":[{"name":"writemapping"}],"output":{"name":"usize"}}],[11,"set","","Changes an element of the mapping.",138,null],[11,"new","glium::buffer::fences","Initialization.",139,{"inputs":[{"name":"fences"}],"output":{"name":"fences"}}],[11,"inserter","","Creates an `Inserter` that allows inserting a fence in the list for the given range.",139,{"inputs":[{"name":"fences"},{"name":"range"}],"output":{"name":"inserter"}}],[11,"wait","","Waits until the given range is accessible.",139,null],[11,"clean","","Cleans up all fences in the container. Must be called or you'll get a panic.",139,null],[11,"insert","","Inserts a new fence.",140,null],[11,"new","glium::buffer::view","Builds a new buffer containing the given data. The size of the buffer is equal to the size\nof the data.",141,{"inputs":[{"name":"bufferview"},{"name":"f"},{"name":"t"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_unsized","","Builds a new buffer of the given size.",141,{"inputs":[{"name":"bufferview"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"get_context","","Returns the context corresponding to this buffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the size in bytes of this buffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"usize"}}],[11,"is_persistent","","Returns true if this buffer uses persistent mapping.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"bool"}}],[11,"write","","Uploads some data in this buffer.",141,null],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",141,null],[11,"read","","Reads the content of the buffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"result"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"writemapping"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"bufferviewanyslice"}}],[11,"empty","","Builds a new buffer of the given size.",141,{"inputs":[{"name":"bufferview"},{"name":"f"},{"name":"buffertype"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"empty_array","","Builds a new buffer of the given size.",141,{"inputs":[{"name":"bufferview"},{"name":"f"},{"name":"buffertype"},{"name":"usize"},{"name":"buffermode"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in this buffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"usize"}}],[11,"slice","","Builds a slice of this subbuffer. Returns `None` if out of range.",141,{"inputs":[{"name":"bufferview"},{"name":"range"}],"output":{"name":"option"}}],[11,"slice_mut","","Builds a slice of this subbuffer. Returns `None` if out of range.",141,{"inputs":[{"name":"bufferview"},{"name":"range"}],"output":{"name":"option"}}],[11,"as_slice","","Builds a slice containing the whole subbuffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"bufferviewslice"}}],[11,"as_mut_slice","","Builds a slice containing the whole subbuffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"bufferviewmutslice"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"bufferview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",141,null],[11,"get_offset_bytes","","",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",141,{"inputs":[{"name":"bufferview"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",141,null],[11,"prepare_for_element_array","","",141,null],[11,"bind_to_element_array","","",141,null],[11,"prepare_and_bind_for_pixel_pack","","",141,null],[11,"unbind_pixel_pack","","",141,null],[11,"prepare_and_bind_for_pixel_unpack","","",141,null],[11,"unbind_pixel_unpack","","",141,null],[11,"prepare_and_bind_for_draw_indirect","","",141,null],[11,"prepare_and_bind_for_uniform","","",141,null],[11,"prepare_and_bind_for_shared_storage","","",141,null],[11,"bind_to_transform_feedback","","",141,null],[11,"clone","","",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"bufferviewslice"}}],[11,"get_size","","Returns the size in bytes of this slice.",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"usize"}}],[11,"write","","Uploads some data in this buffer.",142,null],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",142,null],[11,"read","","Reads the content of the buffer.",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"result"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"bufferviewanyslice"}}],[11,"len","","Returns the number of elements in this slice.",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",142,{"inputs":[{"name":"bufferviewslice"},{"name":"range"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"bufferviewslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_fence","","",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"option"}}],[11,"get_offset_bytes","","",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",142,{"inputs":[{"name":"bufferviewslice"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",142,null],[11,"prepare_for_element_array","","",142,null],[11,"bind_to_element_array","","",142,null],[11,"prepare_and_bind_for_pixel_pack","","",142,null],[11,"unbind_pixel_pack","","",142,null],[11,"prepare_and_bind_for_pixel_unpack","","",142,null],[11,"unbind_pixel_unpack","","",142,null],[11,"prepare_and_bind_for_draw_indirect","","",142,null],[11,"prepare_and_bind_for_uniform","","",142,null],[11,"prepare_and_bind_for_shared_storage","","",142,null],[11,"bind_to_transform_feedback","","",142,null],[11,"get_size","","Returns the size in bytes of this slice.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"usize"}}],[11,"map","","Maps the buffer in memory for both reading and writing.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"mapping"}}],[11,"map_read","","Maps the buffer in memory for reading.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"readmapping"}}],[11,"map_write","","Maps the buffer in memory for writing only.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"writemapping"}}],[11,"write","","Uploads some data in this buffer.",143,null],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",143,null],[11,"read","","Reads the content of the buffer.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"result"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"bufferviewanyslice"}}],[11,"len","","Returns the number of elements in this slice.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"usize"}}],[11,"slice","","Builds a subslice of this slice. Returns `None` if out of range.",143,{"inputs":[{"name":"bufferviewmutslice"},{"name":"range"}],"output":{"name":"option"}}],[11,"read_as_texture_1d","","Reads the content of the buffer.",143,{"inputs":[{"name":"bufferviewmutslice"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"bufferviewmutslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_slice_any","","Builds a slice-any containing the whole subbuffer.",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"bufferviewanyslice"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"usize"}}],[11,"get_context","","Returns the context corresponding to this buffer.",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"rc"}}],[11,"get_size","","Returns the number of bytes in this subbuffer.",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the buffer. The data becomes undefined.",144,null],[11,"read","","UNSTABLE. This function can be removed at any moment without any further notice.",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"result"}}],[11,"from","","",144,{"inputs":[{"name":"bufferviewany"},{"name":"bufferview"}],"output":{"name":"bufferviewany"}}],[11,"drop","","",144,null],[11,"fmt","","",144,{"inputs":[{"name":"bufferviewany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_offset_bytes","","",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",144,{"inputs":[{"name":"bufferviewany"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",144,null],[11,"prepare_for_element_array","","",144,null],[11,"bind_to_element_array","","",144,null],[11,"prepare_and_bind_for_pixel_pack","","",144,null],[11,"unbind_pixel_pack","","",144,null],[11,"prepare_and_bind_for_pixel_unpack","","",144,null],[11,"unbind_pixel_unpack","","",144,null],[11,"prepare_and_bind_for_draw_indirect","","",144,null],[11,"prepare_and_bind_for_uniform","","",144,null],[11,"prepare_and_bind_for_shared_storage","","",144,null],[11,"bind_to_transform_feedback","","",144,null],[11,"clone","","",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"bufferviewanyslice"}}],[11,"get_size","","Returns the number of bytes in this slice.",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"usize"}}],[11,"get_elements_size","","Returns the size in bytes of each element in the buffer.",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"usize"}}],[11,"get_elements_count","","Returns the number of elements in the buffer.",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"usize"}}],[11,"invalidate","","Invalidates the content of the slice. The data becomes undefined.",145,null],[11,"fmt","","",145,{"inputs":[{"name":"bufferviewanyslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add_fence","","",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"option"}}],[11,"get_offset_bytes","","",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"usize"}}],[11,"get_buffer_id","","",145,{"inputs":[{"name":"bufferviewanyslice"}],"output":{"name":"u32"}}],[11,"prepare_for_vertex_attrib_array","","",145,null],[11,"prepare_for_element_array","","",145,null],[11,"bind_to_element_array","","",145,null],[11,"prepare_and_bind_for_pixel_pack","","",145,null],[11,"unbind_pixel_pack","","",145,null],[11,"prepare_and_bind_for_pixel_unpack","","",145,null],[11,"unbind_pixel_unpack","","",145,null],[11,"prepare_and_bind_for_draw_indirect","","",145,null],[11,"prepare_and_bind_for_uniform","","",145,null],[11,"prepare_and_bind_for_shared_storage","","",145,null],[11,"bind_to_transform_feedback","","",145,null],[6,"Owned","lux::graphics","",null,null],[6,"Owned","","",null,null],[11,"clone","glium::buffer","",146,{"inputs":[{"name":"buffercreationerror"}],"output":{"name":"buffercreationerror"}}],[11,"fmt","","",146,{"inputs":[{"name":"buffercreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"buffermode"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"buffermode"},{"name":"buffermode"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"buffermode"}],"output":{"name":"buffermode"}}],[11,"fmt","","",147,{"inputs":[{"name":"buffermode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",147,{"inputs":[{"name":"buffermode"}],"output":{"name":"buffermode"}}],[11,"eq","","",148,{"inputs":[{"name":"buffertype"},{"name":"buffertype"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"buffertype"},{"name":"buffertype"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"buffertype"}],"output":{"name":"buffertype"}}],[11,"fmt","","",148,{"inputs":[{"name":"buffertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","glium::debug","",149,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"severity"},{"name":"severity"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"severity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"severity"}],"output":{"name":"severity"}}],[11,"fmt","","",150,{"inputs":[{"name":"source"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"source"}],"output":{"name":"source"}}],[11,"fmt","","",151,{"inputs":[{"name":"messagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"messagetype"}],"output":{"name":"messagetype"}}],[11,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",152,{"inputs":[{"name":"timestampquery"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_ready","","Queries the counter to see if the timestamp is already available.",152,{"inputs":[{"name":"timestampquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the timestamp. Blocks until it is available.",152,{"inputs":[{"name":"timestampquery"}],"output":{"name":"u64"}}],[11,"to_glenum","glium::draw_parameters::query","",153,{"inputs":[{"name":"querytype"}],"output":{"name":"u32"}}],[11,"fmt","","",154,{"inputs":[{"name":"querycreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"querycreationerror"}],"output":{"name":"querycreationerror"}}],[11,"new","","Builds a new query. Returns `None` if the backend doesn't support this type.",155,{"inputs":[{"name":"rawquery"},{"name":"f"},{"name":"querytype"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",155,{"inputs":[{"name":"rawquery"}],"output":{"name":"bool"}}],[11,"get_u32","","Returns the value of the query. Blocks until it is available.",155,{"inputs":[{"name":"rawquery"}],"output":{"name":"u32"}}],[11,"get_u64","","Returns the value of the query. Blocks until it is available.",155,{"inputs":[{"name":"rawquery"}],"output":{"name":"u64"}}],[11,"get_bool","","Returns the value of the query. Blocks until it is available.",155,{"inputs":[{"name":"rawquery"}],"output":{"name":"bool"}}],[11,"drop","","",155,null],[11,"begin_query","","",155,{"inputs":[{"name":"rawquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",155,null],[11,"end_time_elapsed_query","","",155,null],[11,"end_primitives_generated_query","","",155,null],[11,"end_transform_feedback_primitives_written_query","","",155,null],[11,"begin_conditional_render","","",155,null],[11,"end_conditional_render","","",155,null],[11,"is_unused","","",155,{"inputs":[{"name":"rawquery"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"rawquery"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::draw_parameters::query","",155,{"inputs":[{"name":"rawquery"}],"output":{"name":"u32"}}],[11,"fmt","","",156,{"inputs":[{"name":"samplespassedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",156,{"inputs":[{"name":"samplespassedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",156,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",156,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"u32"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::draw_parameters::query","",156,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",156,{"inputs":[{"name":"samplespassedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",156,null],[11,"end_time_elapsed_query","","",156,null],[11,"end_primitives_generated_query","","",156,null],[11,"end_transform_feedback_primitives_written_query","","",156,null],[11,"begin_conditional_render","","",156,null],[11,"end_conditional_render","","",156,null],[11,"is_unused","","",156,{"inputs":[{"name":"samplespassedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"timeelapsedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",157,{"inputs":[{"name":"timeelapsedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",157,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",157,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"u32"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::draw_parameters::query","",157,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",157,{"inputs":[{"name":"timeelapsedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",157,null],[11,"end_time_elapsed_query","","",157,null],[11,"end_primitives_generated_query","","",157,null],[11,"end_transform_feedback_primitives_written_query","","",157,null],[11,"begin_conditional_render","","",157,null],[11,"end_conditional_render","","",157,null],[11,"is_unused","","",157,{"inputs":[{"name":"timeelapsedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"anysamplespassedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",158,{"inputs":[{"name":"anysamplespassedquery"},{"name":"f"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",158,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",158,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::draw_parameters::query","",158,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",158,{"inputs":[{"name":"anysamplespassedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",158,null],[11,"end_time_elapsed_query","","",158,null],[11,"end_primitives_generated_query","","",158,null],[11,"end_transform_feedback_primitives_written_query","","",158,null],[11,"begin_conditional_render","","",158,null],[11,"end_conditional_render","","",158,null],[11,"is_unused","","",158,{"inputs":[{"name":"anysamplespassedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",159,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",159,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",159,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"u32"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::draw_parameters::query","",159,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",159,{"inputs":[{"name":"primitivesgeneratedquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",159,null],[11,"end_time_elapsed_query","","",159,null],[11,"end_primitives_generated_query","","",159,null],[11,"end_transform_feedback_primitives_written_query","","",159,null],[11,"begin_conditional_render","","",159,null],[11,"end_conditional_render","","",159,null],[11,"is_unused","","",159,{"inputs":[{"name":"primitivesgeneratedquery"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new query.",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"f"}],"output":{"name":"result"}}],[11,"is_ready","","Queries the counter to see if the result is already available.",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"bool"}}],[11,"get","","Returns the value of the query. Blocks until it is available.",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"u32"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::draw_parameters::query","",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"u32"}}],[11,"begin_query","","",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"},{"name":"commandcontext"}],"output":{"name":"result"}}],[11,"end_samples_passed_query","","",160,null],[11,"end_time_elapsed_query","","",160,null],[11,"end_primitives_generated_query","","",160,null],[11,"end_transform_feedback_primitives_written_query","","",160,null],[11,"begin_conditional_render","","",160,null],[11,"end_conditional_render","","",160,null],[11,"is_unused","","",160,{"inputs":[{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"bool"}}],[11,"eq","glium::draw_parameters","",161,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"blendingfunction"},{"name":"blendingfunction"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"blendingfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"blendingfunction"}],"output":{"name":"blendingfunction"}}],[11,"eq","","",162,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"linearblendingfactor"},{"name":"linearblendingfactor"}],"output":{"name":"bool"}}],[11,"fmt","","",162,{"inputs":[{"name":"linearblendingfactor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"linearblendingfactor"}],"output":{"name":"linearblendingfactor"}}],[11,"to_glenum","","",162,{"inputs":[{"name":"linearblendingfactor"}],"output":{"name":"u32"}}],[11,"eq","","",163,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"backfacecullingmode"},{"name":"backfacecullingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"backfacecullingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"backfacecullingmode"}],"output":{"name":"backfacecullingmode"}}],[11,"eq","","",164,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"depthtest"},{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"depthtest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"depthtest"}],"output":{"name":"depthtest"}}],[11,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",164,{"inputs":[{"name":"depthtest"}],"output":{"name":"bool"}}],[11,"to_glenum","","",164,{"inputs":[{"name":"depthtest"}],"output":{"name":"u32"}}],[11,"eq","","",165,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"stenciltest"},{"name":"stenciltest"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"stenciltest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"stenciltest"}],"output":{"name":"stenciltest"}}],[11,"eq","","",166,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"stenciloperation"},{"name":"stenciloperation"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"stenciloperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"stenciloperation"}],"output":{"name":"stenciloperation"}}],[11,"to_glenum","","",166,{"inputs":[{"name":"stenciloperation"}],"output":{"name":"u32"}}],[11,"eq","","",167,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"polygonmode"},{"name":"polygonmode"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"polygonmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"polygonmode"}],"output":{"name":"polygonmode"}}],[11,"to_glenum","","",167,{"inputs":[{"name":"polygonmode"}],"output":{"name":"u32"}}],[11,"eq","","",168,{"inputs":[{"name":"smooth"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"smooth"},{"name":"smooth"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"smooth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"smooth"}],"output":{"name":"smooth"}}],[11,"to_glenum","","",168,{"inputs":[{"name":"smooth"}],"output":{"name":"u32"}}],[11,"fmt","","",169,{"inputs":[{"name":"drawparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"clone","","",170,{"inputs":[{"name":"conditionalrendering"}],"output":{"name":"conditionalrendering"}}],[11,"fmt","","",170,{"inputs":[{"name":"conditionalrendering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"samplesqueryparam"}],"output":{"name":"samplesqueryparam"}}],[11,"fmt","","",171,{"inputs":[{"name":"samplesqueryparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",171,{"inputs":[{"name":"samplesqueryparam"},{"name":"samplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"from","","",171,{"inputs":[{"name":"samplesqueryparam"},{"name":"anysamplespassedquery"}],"output":{"name":"samplesqueryparam"}}],[11,"default","","",169,{"inputs":[{"name":"drawparameters"}],"output":{"name":"drawparameters"}}],[11,"new","","Start building draw parameters.",169,{"inputs":[{"name":"drawparameters"},{"name":"f"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_depth","","Sets the depth operation to use while drawing.",172,null],[11,"with_blending_function","","Sets the function that the GPU will use to merge the existing pixel with the pixel that is\nbeing written.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"blendingfunction"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_backface_culling","","Sets whether to cull faces, and which ones.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"backfacecullingmode"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_viewport","","Sets the viewport to use.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"rect"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_scissor","","Sets the scissor box to use.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"rect"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_rasterizer_discard_if_supported","","Sets that the output of the rasterized must be discarded.",172,{"inputs":[{"name":"drawparametersbuilder"}],"output":{"name":"result"}}],[11,"without_multisampling","","Sets that multisampling must not be used.",172,{"inputs":[{"name":"drawparametersbuilder"}],"output":{"name":"drawparametersbuilder"}}],[11,"without_dithering","","Sets that dithering must not be used.",172,{"inputs":[{"name":"drawparametersbuilder"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_samples_passed_query","","Sets the query to store the number of samples that are written to the output.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"q"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_time_elapsed_query","","Sets the query to store the time that it takes to execute the commands.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"timeelapsedquery"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_primitives_generated_query","","Sets the query to store the number of primitives generated by the commands.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"primitivesgeneratedquery"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_transform_feedback_primitives_written_query","","Sets the query to store the number of vertices generated by transform feedback in\nthe commands.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"transformfeedbackprimitiveswrittenquery"}],"output":{"name":"drawparametersbuilder"}}],[11,"with_conditional_rendering","","See the `ConditionalRendering` struct.",172,{"inputs":[{"name":"drawparametersbuilder"},{"name":"q"},{"name":"bool"},{"name":"bool"}],"output":{"name":"drawparametersbuilder"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::draw_parameters","",172,{"inputs":[{"name":"drawparametersbuilder"}],"output":{"name":"drawparameters"}}],[11,"deref_mut","","",172,{"inputs":[{"name":"drawparametersbuilder"}],"output":{"name":"drawparameters"}}],[11,"new","glium::framebuffer::render_buffer","Builds a new render buffer.",173,{"inputs":[{"name":"renderbuffer"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"renderbuffer"}}],[11,"to_color_attachment","","",173,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"colorattachment"}}],[11,"get_dimensions","","Returns the dimensions of the render buffer.",174,null],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::framebuffer::render_buffer","",173,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",173,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"renderbufferany"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::framebuffer::render_buffer","",173,{"inputs":[{"name":"renderbuffer"}],"output":{"name":"u32"}}],[11,"new","","Builds a new render buffer.",175,{"inputs":[{"name":"depthrenderbuffer"},{"name":"f"},{"name":"depthformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthrenderbuffer"}}],[11,"to_depth_attachment","","",175,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"depthattachment"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::framebuffer::render_buffer","",175,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",175,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"renderbufferany"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::framebuffer::render_buffer","",175,{"inputs":[{"name":"depthrenderbuffer"}],"output":{"name":"u32"}}],[11,"new","","Builds a new render buffer.",176,{"inputs":[{"name":"stencilrenderbuffer"},{"name":"f"},{"name":"stencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"stencilrenderbuffer"}}],[11,"to_stencil_attachment","","",176,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"stencilattachment"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::framebuffer::render_buffer","",176,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",176,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::framebuffer::render_buffer","",176,{"inputs":[{"name":"stencilrenderbuffer"}],"output":{"name":"u32"}}],[11,"new","","Builds a new render buffer.",177,{"inputs":[{"name":"depthstencilrenderbuffer"},{"name":"f"},{"name":"depthstencilformat"},{"name":"u32"},{"name":"u32"}],"output":{"name":"depthstencilrenderbuffer"}}],[11,"to_depth_stencil_attachment","","",177,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"depthstencilattachment"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::framebuffer::render_buffer","",177,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[11,"deref_mut","","",177,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"renderbufferany"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::framebuffer::render_buffer","",177,{"inputs":[{"name":"depthstencilrenderbuffer"}],"output":{"name":"u32"}}],[11,"drop","","",174,null],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::framebuffer::render_buffer","",174,{"inputs":[{"name":"renderbufferany"}],"output":{"name":"u32"}}],[11,"new","glium::framebuffer","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",178,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"}],"output":{"name":"simpleframebuffer"}}],[11,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth\nbuffer, but no stencil buffer.",178,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"simpleframebuffer"}}],[11,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth\nbuffer, and a stencil buffer.",178,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"},{"name":"s"}],"output":{"name":"simpleframebuffer"}}],[11,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no depth buffer.",178,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"s"}],"output":{"name":"simpleframebuffer"}}],[11,"with_depth_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth-stencil buffer.",178,{"inputs":[{"name":"simpleframebuffer"},{"name":"f"},{"name":"c"},{"name":"d"}],"output":{"name":"simpleframebuffer"}}],[11,"clear","","",178,null],[11,"get_dimensions","","",178,null],[11,"get_depth_buffer_bits","","",178,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",178,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",178,{"inputs":[{"name":"simpleframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",178,null],[11,"blit_from_frame","","",178,null],[11,"blit_from_simple_framebuffer","","",178,null],[11,"blit_from_multioutput_framebuffer","","",178,null],[11,"get_attachments","","",178,{"inputs":[{"name":"simpleframebuffer"}],"output":{"name":"option"}}],[11,"new","","Creates a new `MultiOutputFrameBuffer`.",179,null],[11,"with_depth_buffer","","Creates a `MultiOutputFrameBuffer` with a depth buffer.",179,null],[11,"clear","","",179,null],[11,"get_dimensions","","",179,null],[11,"get_depth_buffer_bits","","",179,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",179,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"draw","","",179,{"inputs":[{"name":"multioutputframebuffer"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",179,null],[11,"blit_from_frame","","",179,null],[11,"blit_from_simple_framebuffer","","",179,null],[11,"blit_from_multioutput_framebuffer","","",179,null],[11,"get_attachments","","",179,{"inputs":[{"name":"multioutputframebuffer"}],"output":{"name":"option"}}],[11,"clone","","",180,{"inputs":[{"name":"colorattachment"}],"output":{"name":"colorattachment"}}],[11,"clone","","",181,{"inputs":[{"name":"depthattachment"}],"output":{"name":"depthattachment"}}],[11,"clone","","",182,{"inputs":[{"name":"stencilattachment"}],"output":{"name":"stencilattachment"}}],[11,"clone","","",183,{"inputs":[{"name":"depthstencilattachment"}],"output":{"name":"depthstencilattachment"}}],[11,"clone","glium::index::buffer","",184,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",184,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",184,{"inputs":[{"name":"creationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",185,{"inputs":[{"name":"indexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new index buffer from a list of indices and a primitive type.",185,null],[11,"dynamic","","Builds a new index buffer from a list of indices and a primitive type.",185,null],[11,"persistent","","Builds a new index buffer from a list of indices and a primitive type.",185,null],[11,"immutable","","Builds a new index buffer from a list of indices and a primitive type.",185,null],[11,"empty","","Builds a new empty index buffer.",185,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds a new empty index buffer.",185,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds a new empty index buffer.",185,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds a new empty index buffer.",185,{"inputs":[{"name":"indexbuffer"},{"name":"f"},{"name":"primitivetype"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",185,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",185,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",185,{"inputs":[{"name":"indexbuffer"},{"name":"range"}],"output":{"name":"option"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::index::buffer","",185,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"bufferview"}}],[11,"deref_mut","","",185,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"bufferview"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::index::buffer","",185,{"inputs":[{"name":"indexbuffer"}],"output":{"name":"u32"}}],[11,"from","glium::index","",186,{"inputs":[{"name":"indicessource"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[11,"fmt","glium::index::buffer","",187,{"inputs":[{"name":"indexbufferslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",187,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",187,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"indextype"}}],[11,"slice","","Returns `None` if out of range.",187,{"inputs":[{"name":"indexbufferslice"},{"name":"range"}],"output":{"name":"option"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::index::buffer","",187,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferviewslice"}}],[11,"deref_mut","","",187,{"inputs":[{"name":"indexbufferslice"}],"output":{"name":"bufferviewslice"}}],[11,"from","glium::index","",186,{"inputs":[{"name":"indicessource"},{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"from","","",186,{"inputs":[{"name":"indicessource"},{"name":"indexbufferslice"}],"output":{"name":"indicessource"}}],[11,"fmt","glium::index::buffer","",188,{"inputs":[{"name":"indexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",188,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"primitivetype"}}],[11,"get_indices_type","","Returns the data type of the indices inside this index buffer.",188,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"indextype"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::index::buffer","",188,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"bufferviewany"}}],[11,"deref_mut","","",188,{"inputs":[{"name":"indexbufferany"}],"output":{"name":"bufferviewany"}}],[11,"from","","",188,{"inputs":[{"name":"indexbufferany"},{"name":"indexbuffer"}],"output":{"name":"indexbufferany"}}],[11,"from","glium::index","",186,{"inputs":[{"name":"indicessource"},{"name":"indexbufferany"}],"output":{"name":"indicessource"}}],[11,"clone","glium::index::multidraw","",189,{"inputs":[{"name":"drawcommandnoindices"}],"output":{"name":"drawcommandnoindices"}}],[11,"fmt","","",189,{"inputs":[{"name":"drawcommandnoindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",189,{"inputs":[{"name":"drawcommandnoindices"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",189,{"inputs":[{"name":"drawcommandnoindices"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",190,{"inputs":[{"name":"drawcommandindices"}],"output":{"name":"drawcommandindices"}}],[11,"fmt","","",190,{"inputs":[{"name":"drawcommandindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","",190,{"inputs":[{"name":"drawcommandindices"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",190,{"inputs":[{"name":"drawcommandindices"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"empty","","Builds an empty buffer.",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_primitive_type","","Builds an indices source from this buffer and a primitives type. This indices source can\nbe passed to the `draw()` function.",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"},{"name":"primitivetype"}],"output":{"name":"indicessource"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::index::multidraw","",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"bufferview"}}],[11,"deref_mut","","",191,{"inputs":[{"name":"drawcommandsnoindicesbuffer"}],"output":{"name":"bufferview"}}],[11,"empty","","Builds an empty buffer.",192,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty buffer.",192,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty buffer.",192,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty buffer.",192,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"with_index_buffer","","Builds an indices source from this buffer and a primitives type. This indices source can\nbe passed to the `draw()` function.",192,{"inputs":[{"name":"drawcommandsindicesbuffer"},{"name":"indexbuffer"}],"output":{"name":"indicessource"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::index::multidraw","",192,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"bufferview"}}],[11,"deref_mut","","",192,{"inputs":[{"name":"drawcommandsindicesbuffer"}],"output":{"name":"bufferview"}}],[11,"clone","glium::index","",186,{"inputs":[{"name":"indicessource"}],"output":{"name":"indicessource"}}],[11,"get_primitives_type","","Returns the type of the primitives.",186,{"inputs":[{"name":"indicessource"}],"output":{"name":"primitivetype"}}],[11,"eq","","",124,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"fmt","","",124,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",124,{"inputs":[{"name":"primitivetype"}],"output":{"name":"u32"}}],[11,"fmt","","",193,{"inputs":[{"name":"noindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",193,{"inputs":[{"name":"noindices"}],"output":{"name":"noindices"}}],[11,"from","","",186,{"inputs":[{"name":"indicessource"},{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"from","","",186,{"inputs":[{"name":"indicessource"},{"name":"noindices"}],"output":{"name":"indicessource"}}],[11,"eq","","",194,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"indextype"},{"name":"indextype"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"indextype"}],"output":{"name":"indextype"}}],[11,"fmt","","",194,{"inputs":[{"name":"indextype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of each index of this type.",194,{"inputs":[{"name":"indextype"}],"output":{"name":"usize"}}],[11,"is_supported","","Returns true if the backend supports this type of index.",194,{"inputs":[{"name":"indextype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"to_glenum","","",194,{"inputs":[{"name":"indextype"}],"output":{"name":"u32"}}],[11,"new_empty","glium::pixel_buffer","Builds a new buffer with an uninitialized content.",195,{"inputs":[{"name":"pixelbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"pixelbuffer"}}],[11,"read_as_texture_2d","","Reads the content of the pixel buffer.",195,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::pixel_buffer","",195,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"bufferview"}}],[11,"deref_mut","","",195,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"bufferview"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::pixel_buffer","",195,{"inputs":[{"name":"pixelbuffer"}],"output":{"name":"u32"}}],[11,"is_supported","glium::program::compute","Returns true if the backend supports compute shaders.",196,{"inputs":[{"name":"computeshader"},{"name":"c"}],"output":{"name":"bool"}}],[11,"from_source","","Builds a new compute shader from some source code.",196,{"inputs":[{"name":"computeshader"},{"name":"f"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_binary","","Builds a new compute shader from some binary.",196,{"inputs":[{"name":"computeshader"},{"name":"f"},{"name":"binary"}],"output":{"name":"result"}}],[11,"execute","","Executes the compute shader.",196,null],[11,"get_binary","","Returns the program's compiled binary.",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"result"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",196,{"inputs":[{"name":"computeshader"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"fmt","","",196,{"inputs":[{"name":"computeshader"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::program::compute","",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"handle"}}],[11,"use_program","","",196,null],[11,"set_uniform","","",196,null],[11,"set_uniform_block_binding","","",196,null],[11,"set_shader_storage_block_binding","","",196,null],[11,"get_uniform","","",196,{"inputs":[{"name":"computeshader"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform_blocks","","",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","",196,{"inputs":[{"name":"computeshader"}],"output":{"name":"hashmap"}}],[11,"new","glium::program::program","Builds a new program.",197,{"inputs":[{"name":"program"},{"name":"f"},{"name":"i"}],"output":{"name":"result"}}],[11,"from_source","","Builds a new program from GLSL source code.",197,{"inputs":[{"name":"program"},{"name":"f"},{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",197,{"inputs":[{"name":"program"}],"output":{"name":"result"}}],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",197,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",197,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",197,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",197,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",197,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat`\nand `stride`.",197,{"inputs":[{"name":"program"},{"name":"cow"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it\ndepends on the vertex/index data passed when drawing.",197,{"inputs":[{"name":"program"}],"output":{"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",197,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",197,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",197,{"inputs":[{"name":"program"}],"output":{"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",197,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",197,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"uses_point_size","","Returns true if the program has been configured to use the `gl_PointSize` variable.",197,{"inputs":[{"name":"program"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::program::program","",197,{"inputs":[{"name":"program"}],"output":{"name":"handle"}}],[11,"use_program","","",197,null],[11,"set_uniform","","",197,null],[11,"set_uniform_block_binding","","",197,null],[11,"set_shader_storage_block_binding","","",197,null],[11,"get_uniform","","",197,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform_blocks","","",197,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","",197,{"inputs":[{"name":"program"}],"output":{"name":"hashmap"}}],[11,"from_shaders","glium::program::raw","Builds a new program from a list of shaders.",198,{"inputs":[{"name":"rawprogram"},{"name":"f"},{"name":"i"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_binary","","Creates a program from binary.",198,{"inputs":[{"name":"rawprogram"},{"name":"f"},{"name":"binary"}],"output":{"name":"result"}}],[11,"get_binary","","Returns the program's compiled binary.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"result"}}],[11,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",198,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform","","Returns informations about a uniform variable, if it exists.",198,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"uniforms","","Returns an iterator to the list of uniforms.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"iter"}}],[11,"get_uniform_blocks","","Returns a list of uniform blocks.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"get_transform_feedback_buffers","","Returns the list of transform feedback varyings.",198,null],[11,"transform_feedback_matches","","True if the transform feedback output of this program matches the specified `VertexFormat`\nand `stride`.",198,{"inputs":[{"name":"rawprogram"},{"name":"cow"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_output_primitives","","Returns the type of geometry that transform feedback would generate, or `None` if it\ndepends on the vertex/index data passed when drawing.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"option"}}],[11,"has_tessellation_shaders","","Returns true if the program contains a tessellation stage.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"bool"}}],[11,"get_attribute","","Returns informations about an attribute, if it exists.",198,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"attributes","","Returns an iterator to the list of attributes.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"iter"}}],[11,"has_srgb_output","","Returns true if the program has been configured to output sRGB instead of RGB.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"bool"}}],[11,"get_shader_storage_blocks","","Returns the list of shader storage blocks.",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"dispatch_compute","","Assumes that the program contains a compute shader and executes it.",198,{"inputs":[{"name":"rawprogram"},{"name":"u"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"rawprogram"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::program::raw","",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"handle"}}],[11,"use_program","","",198,null],[11,"set_uniform","","",198,null],[11,"set_uniform_block_binding","","",198,null],[11,"set_shader_storage_block_binding","","",198,null],[11,"get_uniform","","",198,{"inputs":[{"name":"rawprogram"},{"name":"str"}],"output":{"name":"option"}}],[11,"get_uniform_blocks","","",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"get_shader_storage_blocks","","",198,{"inputs":[{"name":"rawprogram"}],"output":{"name":"hashmap"}}],[11,"drop","","",198,null],[11,"clone","glium::program::reflection","",199,{"inputs":[{"name":"uniform"}],"output":{"name":"uniform"}}],[11,"fmt","","",199,{"inputs":[{"name":"uniform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",200,{"inputs":[{"name":"uniformblock"}],"output":{"name":"uniformblock"}}],[11,"fmt","","",200,{"inputs":[{"name":"uniformblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",201,{"inputs":[{"name":"blocklayout"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"blocklayout"},{"name":"blocklayout"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"blocklayout"}],"output":{"name":"blocklayout"}}],[11,"fmt","","",201,{"inputs":[{"name":"blocklayout"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",202,{"inputs":[{"name":"attribute"}],"output":{"name":"attribute"}}],[11,"fmt","","",202,{"inputs":[{"name":"attribute"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",203,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"transformfeedbackbuffer"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"transformfeedbackbuffer"}],"output":{"name":"transformfeedbackbuffer"}}],[11,"fmt","","",203,{"inputs":[{"name":"transformfeedbackbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"transformfeedbackvarying"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"transformfeedbackvarying"}],"output":{"name":"transformfeedbackvarying"}}],[11,"fmt","","",204,{"inputs":[{"name":"transformfeedbackvarying"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",205,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"transformfeedbackmode"},{"name":"transformfeedbackmode"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"transformfeedbackmode"}],"output":{"name":"transformfeedbackmode"}}],[11,"fmt","","",205,{"inputs":[{"name":"transformfeedbackmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",206,{"inputs":[{"name":"outputprimitives"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"outputprimitives"},{"name":"outputprimitives"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"outputprimitives"}],"output":{"name":"outputprimitives"}}],[11,"fmt","","",206,{"inputs":[{"name":"outputprimitives"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::program::shader","",207,{"inputs":[{"name":"shader"}],"output":{"name":"handle"}}],[11,"drop","","",207,null],[11,"new","glium::program::uniforms_storage","Builds a new empty storage.",208,{"inputs":[{"name":"uniformsstorage"}],"output":{"name":"uniformsstorage"}}],[11,"set_uniform_value","","Compares `value` with the value stored in this object. If the values differ, updates\nthe storage and calls `glUniform`.",208,null],[11,"set_uniform_block_binding","","Compares `value` with the value stored in this object. If the values differ, updates\nthe storage and calls `glUniformBlockBinding`.",208,null],[11,"set_shader_storage_block_binding","","Compares `value` with the value stored in this object. If the values differ, updates\nthe storage and calls `glShaderStorageBlockBinding`.",208,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",209,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",209,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",209,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",209,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"from","alloc::boxed","",210,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",210,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",210,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",210,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",211,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",212,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",213,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","","",214,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",215,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",216,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","lux","Returns true if the boxed type is the same as `T`",217,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",217,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",217,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",217,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",217,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",217,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",217,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",217,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[6,"Owned","lux::graphics","",null,null],[11,"into_ascii_uppercase","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"into_ascii_lowercase","","",218,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[6,"Owned","lux::graphics","",null,null],[11,"into_ascii_uppercase","collections::vec","",219,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"into_ascii_lowercase","","",219,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[6,"Owned","lux::graphics","",null,null],[6,"Owned","","",null,null],[6,"Item","","",null,null],[11,"next","std::ascii","",220,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"next_back","","",220,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shl","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"shr","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"add","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"not","core::num","",221,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","core::num","",221,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"clone","std::thread::local","",222,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",222,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",223,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",223,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"get","std::thread::local::imp","",224,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",225,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",225,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",225,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",226,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",226,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",226,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",226,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"scoped","","Spawns a new child thread that must be joined within a given\nscope, and returns a `JoinGuard`.",226,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",227,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",227,null],[11,"name","","Gets the thread's name.",227,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",227,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",227,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",228,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",228,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"thread","","Extracts a handle to the thread this guard will join on.",229,{"inputs":[{"name":"joinguard"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish, returning the result of the\nthread's calculation.",229,{"inputs":[{"name":"joinguard"}],"output":{"name":"t"}}],[11,"drop","","",229,null],[11,"clone","std::collections::hash::table","",230,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",231,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",232,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",232,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",232,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",234,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",234,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",231,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",231,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",231,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",231,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",231,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",231,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",231,null],[11,"next","","",234,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",234,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",234,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",234,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",233,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",233,null],[11,"take","","Removes this bucket's key and value from the hashtable.",233,null],[11,"replace","","",233,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",233,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",233,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",233,null],[11,"expect_full","","",235,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",236,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",236,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",237,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",238,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::table","",238,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::table","",239,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",240,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::table","",240,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"len","","",240,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::table","",241,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"len","","",241,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::table","",242,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"len","","",242,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::table","",243,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"len","","",243,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",243,null],[11,"clone","","",237,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",237,null],[11,"clone","std::collections::hash::map","",244,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",245,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",245,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",245,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",245,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",245,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",245,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",245,null],[11,"get","","Returns a reference to the value corresponding to the key.",245,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",245,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",245,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",245,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",245,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",245,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",245,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[6,"Output","lux::graphics","",null,null],[11,"index","std::collections::hash::map","",245,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",246,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",247,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",248,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","std::collections::hash::map","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",245,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::map","",246,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"len","","",246,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::map","",249,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",249,null],[11,"len","","",249,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::map","",250,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",250,null],[11,"len","","",250,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::map","",247,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"len","","",247,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::map","",248,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"len","","",248,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::map","",251,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"len","","",251,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",252,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",252,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",252,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",253,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",253,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",253,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",253,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",253,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",254,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",245,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",245,null],[11,"clone","","",255,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",255,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[6,"Hasher","lux::graphics","",null,null],[11,"hasher","std::collections::hash::map","",255,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",255,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",256,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",256,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",256,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",256,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",256,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",256,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",256,null],[11,"contains","","Returns `true` if the set contains a value.",256,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",256,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",256,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"eq","","",256,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",256,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",256,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",256,null],[11,"default","","",256,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[6,"Output","lux::graphics","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","std::collections::hash::set","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",256,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",257,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",257,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"len","","",257,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",258,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"len","","",258,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",259,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"len","","",259,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",260,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",260,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",260,null],[11,"clone","","",261,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",261,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"clone","","",262,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",262,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"clone","","",263,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::collections::hash::set","",263,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[6,"Hasher","lux::graphics","",null,null],[11,"hasher","std::collections::hash::state","",264,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",264,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",264,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::vec_deque","",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",265,null],[11,"default","","",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",265,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",265,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",265,null],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",265,null],[11,"truncate","","Shortens a ringbuf, dropping excess elements from the back.",265,null],[11,"iter","","Returns a front-to-back iterator.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",265,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",265,null],[11,"len","","Returns the number of elements in the `VecDeque`.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",265,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",265,null],[11,"push_back","","Appends an element to the back of a buffer",265,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",265,null],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",265,null],[11,"retain","","Retains only the elements specified by the predicate.",265,null],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",265,null],[11,"clone","","",266,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_deque","",266,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",266,null],[11,"next_back","","",266,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",266,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",266,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_deque","",267,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"next_back","","",267,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",268,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_deque","",268,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"next_back","","",268,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",269,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_deque","",269,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"next_back","","",269,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",265,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",265,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",265,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",265,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec_deque","",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",265,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",265,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::vec_deque","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",265,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::vec_deque","",265,null],[11,"fmt","","",265,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","collections::linked_list","",270,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",271,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"clone","","",272,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",273,null],[11,"iter","","Provides a forward iterator.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",273,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",273,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",273,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",273,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",273,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::linked_list","",270,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"next_back","","",270,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::linked_list","",274,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",274,null],[11,"next_back","","",274,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",274,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",274,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::linked_list","",271,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",271,null],[11,"next_back","","",271,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",273,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::linked_list","Consumes the list into an iterator yielding elements by value.",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::linked_list","",273,null],[11,"eq","","",273,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",273,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",273,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",273,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",273,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",273,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",273,null],[11,"clone","collections::binary_heap","",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",275,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",275,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",275,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",275,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",275,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",275,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",275,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",275,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",275,null],[11,"drop","","",276,null],[11,"clone","","",277,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::binary_heap","",277,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",277,null],[11,"next_back","","",277,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::binary_heap","",278,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",278,null],[11,"next_back","","",278,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::binary_heap","",279,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",279,null],[11,"next_back","","",279,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",275,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::binary_heap","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",275,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::binary_heap","",275,null],[11,"default","collections::vec_map","",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",280,null],[11,"hash","","",280,null],[11,"new","","Creates an empty `VecMap`.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",280,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",280,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",280,null],[11,"split_off","","Splits the collection into two at the given key.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",280,null],[11,"get","","Returns a reference to the value corresponding to the key.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",281,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",281,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",281,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",282,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",283,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",283,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",283,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",283,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",283,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",280,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",280,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",280,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",280,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",280,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::vec_map","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",280,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::vec_map","",280,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec_map","",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec_map","",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",280,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",284,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_map","",284,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",284,null],[11,"next_back","","",284,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_map","",285,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"next_back","","",285,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",286,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",287,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_map","",288,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",288,null],[11,"next_back","","",288,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_map","",286,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next_back","","",286,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_map","",287,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",287,null],[11,"next_back","","",287,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec_map","",289,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",289,null],[11,"next_back","","",289,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","std::dynamic_lib","",290,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",290,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",290,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",290,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",290,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",290,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",290,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::env","",291,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",291,null],[6,"Item","lux::graphics","",null,null],[11,"next","std::env","",292,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",292,null],[11,"clone","","",293,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",293,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",293,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",293,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::env","",294,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",294,null],[11,"fmt","","",295,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",295,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::env","",296,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",296,null],[11,"len","","",296,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::env","",297,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",297,null],[11,"len","","",297,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"hash","std::ffi::c_str","",298,null],[11,"cmp","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",298,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"clone","","",298,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",299,null],[11,"fmt","","",300,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",300,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",300,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",298,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",298,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",298,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",298,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",299,null],[11,"as_ptr","","Returns the inner pointer to this C string.",299,null],[11,"to_bytes","","Converts this C string to a byte slice.",299,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",299,null],[6,"Target","lux::graphics","",null,null],[11,"deref","std::ffi::c_str","",298,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",298,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",300,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",300,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",300,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",300,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",301,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std::ffi::c_str","",299,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",299,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",299,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"clone","std::ffi::os_str","",302,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",302,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",302,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",302,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",302,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",302,null],[11,"from","","",302,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",302,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[6,"Output","lux::graphics","",null,null],[11,"index","std::ffi::os_str","",302,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",303,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",303,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",303,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",303,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",303,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",303,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","std::ffi::os_str","",302,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",302,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",302,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",302,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",302,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",302,null],[11,"eq","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",303,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",303,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",303,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",303,null],[11,"fmt","","",303,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",302,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[6,"Owned","lux::graphics","",null,null],[11,"to_owned","std::ffi::os_str","",303,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",303,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",302,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",304,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",305,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",305,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",305,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",305,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",306,null],[11,"eq","","",306,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",306,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",306,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",307,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",307,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",307,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",307,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",307,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",307,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",307,null],[11,"write","","",307,null],[11,"flush","","",307,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",307,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",304,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",304,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",304,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",304,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",304,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",304,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",304,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",308,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",308,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",308,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",308,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",308,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",305,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",305,null],[11,"is_dir","","Test whether this file type represents a directory.",306,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",306,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",306,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::fs","",309,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",310,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",310,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",310,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",310,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::fs","",311,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"metadata","std::path","",312,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","",312,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","",312,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","",312,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","",312,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","",312,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","",312,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","",312,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"new","std::fs","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",313,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",313,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",313,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"get","std::io::lazy","",314,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity",315,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity",315,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",315,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",315,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",315,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",315,null],[11,"fill_buf","","",315,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",315,null],[11,"fmt","","",315,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",315,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity",317,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity",317,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",317,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying write.",317,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",317,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",317,null],[11,"flush","","",317,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",317,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",317,null],[11,"error","","Returns the error which caused the call to `into_inner` to fail.",316,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",316,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",301,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",316,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",316,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`",318,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",318,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",318,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",318,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",318,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",318,null],[11,"flush","","",318,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",319,null],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",320,{"inputs":[{"name":"bufstream"},{"name":"usize"},{"name":"usize"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",320,{"inputs":[{"name":"bufstream"},{"name":"s"}],"output":{"name":"bufstream"}}],[11,"get_ref","","Gets a reference to the underlying stream.",320,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"get_mut","","Gets a mutable reference to the underlying stream.",320,{"inputs":[{"name":"bufstream"}],"output":{"name":"s"}}],[11,"into_inner","","Unwraps this `BufStream`, returning the underlying stream.",320,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fill_buf","","",320,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"consume","","",320,null],[11,"read","","",320,null],[11,"write","","",320,null],[11,"flush","","",320,{"inputs":[{"name":"bufstream"}],"output":{"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"bufstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",321,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",321,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",321,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",321,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",321,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",321,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current value of this cursor",321,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the value of this cursor",321,null],[11,"seek","","",321,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",321,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"seek","","",321,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",321,null],[11,"read","","",321,null],[11,"read","","",321,null],[11,"fill_buf","","",321,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",321,null],[11,"fill_buf","","",321,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",321,null],[11,"fill_buf","","",321,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",321,null],[11,"write","","",321,null],[11,"flush","","",321,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",321,null],[11,"flush","","",321,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",301,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",322,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",323,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",324,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",324,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",324,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",324,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",301,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",301,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",301,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",301,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",301,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",301,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",301,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"read","alloc::boxed","",210,null],[11,"read_to_end","","",210,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",210,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","","",210,null],[11,"flush","","",210,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",210,null],[11,"write_fmt","","",210,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",210,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",210,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",210,null],[11,"read_until","","",210,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",210,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",219,null],[11,"write_all","","",219,null],[11,"flush","","",219,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"read","std::io::util","",325,null],[11,"fill_buf","","",325,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",325,null],[11,"read","","",326,null],[11,"write","","",327,null],[11,"flush","","",327,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",328,null],[11,"write","","",329,null],[11,"flush","","",329,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",330,null],[11,"flush","","",330,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",331,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",331,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",331,null],[11,"read_to_end","","",331,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",331,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",332,null],[11,"fill_buf","","",332,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",332,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",333,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",333,null],[11,"flush","","",333,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",333,null],[11,"write_fmt","","",333,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",334,null],[11,"flush","","",334,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",335,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",335,null],[11,"flush","","",335,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",335,null],[11,"write_fmt","","",335,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",336,null],[11,"flush","","",336,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",337,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",337,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",337,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",337,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",338,null],[11,"flush","","",338,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",339,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",340,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",340,null],[11,"fill_buf","","",340,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",340,null],[11,"read","","",341,null],[6,"Item","lux::graphics","",null,null],[11,"next","std::io","",342,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",343,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::io","",344,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",343,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",343,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",343,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::io","",345,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::io","",346,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",347,null],[11,"fmt","","",347,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",347,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",347,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",348,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",348,null],[11,"clone","","",348,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",348,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",348,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",349,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",349,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",347,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",349,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",349,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",349,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",349,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",349,null],[11,"partial_cmp","","",349,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",349,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",349,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",350,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",350,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",350,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",350,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",350,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",350,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",350,null],[11,"partial_cmp","","",350,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",350,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",351,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",351,null],[11,"eq","","",351,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",351,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",351,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",351,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",351,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",351,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",352,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",352,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",352,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",353,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",353,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",353,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns scope ID associated with this address, corresponding to the\n`sin6_flowinfo` field in C.",353,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns scope ID associated with this address, corresponding to the\n`sin6_scope_id` field in C.",353,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",351,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",352,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",352,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",353,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",352,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",353,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",352,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",353,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",352,null],[11,"hash","","",353,null],[6,"Iter","lux::graphics","",null,null],[11,"to_socket_addrs","std::net::addr","",351,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[6,"Iter","lux::graphics","",null,null],[11,"to_socket_addrs","std::net::addr","",352,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[6,"Iter","lux::graphics","",null,null],[11,"to_socket_addrs","std::net::addr","",353,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[6,"Iter","lux::graphics","",null,null],[6,"Iter","","",null,null],[6,"Iter","","",null,null],[6,"Iter","","",null,null],[6,"Iter","","",null,null],[6,"Iter","","",null,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",354,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",354,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",354,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",354,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",354,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified.",354,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",354,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read","","",354,null],[11,"write","","",354,null],[11,"flush","","",354,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",354,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",355,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",355,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",355,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",355,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",355,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::net::tcp","",356,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",355,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",357,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",357,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",357,null],[11,"local_addr","","Returns the socket address that this socket was created from.",357,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",357,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the broadcast flag on or off.",357,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","Sets the multicast loop flag to the specified value.",357,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it).",357,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it).",357,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_multicast_time_to_live","","Sets the multicast TTL.",357,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_time_to_live","","Sets this socket's TTL.",357,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"fmt","","",357,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","lux::graphics","",null,null],[11,"from_str","std::net::ip","",347,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[6,"Err","lux::graphics","",null,null],[11,"from_str","std::net::ip","",349,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[6,"Err","lux::graphics","",null,null],[11,"from_str","std::net::ip","",350,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[6,"Err","lux::graphics","",null,null],[11,"from_str","std::net::addr","",351,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",358,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",358,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",358,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::net","",359,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",359,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::net","",360,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"from_wide","std::ffi::os_str","",302,null],[11,"encode_wide","","",303,{"inputs":[{"name":"osstr"}],"output":{"name":"encodewide"}}],[11,"desired_access","std::fs","",304,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"creation_disposition","","",304,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"flags_and_attributes","","",304,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"share_mode","","",304,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"file_attributes","","",308,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"creation_time","","",308,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"last_access_time","","",308,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"last_write_time","","",308,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"file_size","","",308,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"as_raw_handle","","",307,null],[11,"from_raw_handle","","",307,null],[11,"as_raw_socket","std::net::tcp","",354,{"inputs":[{"name":"tcpstream"}],"output":{"name":"u64"}}],[11,"as_raw_socket","","",355,{"inputs":[{"name":"tcplistener"}],"output":{"name":"u64"}}],[11,"as_raw_socket","std::net::udp","",357,{"inputs":[{"name":"udpsocket"}],"output":{"name":"u64"}}],[11,"from_raw_socket","std::net::tcp","",354,{"inputs":[{"name":"tcpstream"},{"name":"u64"}],"output":{"name":"tcpstream"}}],[11,"from_raw_socket","","",355,{"inputs":[{"name":"tcplistener"},{"name":"u64"}],"output":{"name":"tcplistener"}}],[11,"from_raw_socket","std::net::udp","",357,{"inputs":[{"name":"udpsocket"},{"name":"u64"}],"output":{"name":"udpsocket"}}],[11,"eq","std::path","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",361,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",361,null],[11,"fmt","","",361,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",361,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins `\\\\?\\`.",361,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",362,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",362,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",362,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",363,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",363,null],[11,"clone","","",363,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",363,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",363,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",363,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",363,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",363,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"fmt","","",364,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",364,null],[11,"cmp","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",364,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",364,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",364,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",364,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",365,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",365,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",365,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",365,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",365,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",366,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::path","",366,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",366,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::path","",365,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",365,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",365,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",365,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",365,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"hash","","",367,null],[11,"clone","","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",367,null],[11,"pop","","Truncate `self` to `self.parent()`.",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",367,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",367,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",367,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",367,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",367,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",367,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",367,null],[11,"fmt","","",367,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",312,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",312,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",312,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",312,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",312,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",312,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",312,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",312,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",312,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",312,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",312,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",312,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",312,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",312,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file()`.",312,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file()`, if possible.",312,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",312,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",312,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",312,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",312,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",312,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",312,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","std::path","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[6,"Owned","lux::graphics","",null,null],[11,"to_owned","std::path","",312,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",367,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",367,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",367,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"hash","","",312,null],[11,"as_ref","","",312,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",312,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",368,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",312,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",312,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",312,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",312,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",303,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",302,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",367,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"write","std::process","",369,null],[11,"flush","","",369,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",370,null],[11,"read","","",371,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",372,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",372,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",372,null],[11,"env","","Inserts or updates an environment variable mapping.",372,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",372,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",372,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",372,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",372,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",372,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",372,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",372,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",372,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",372,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",372,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",373,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",373,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",373,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"clone","","",374,{"inputs":[{"name":"stdioimp"}],"output":{"name":"stdioimp"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",375,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",375,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",375,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",376,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",376,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",376,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",376,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",376,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",376,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",376,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",377,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",377,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `Output`\ninstance.",377,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",378,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",378,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",378,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",378,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",379,null],[11,"new","std::sync::mpsc::oneshot","",380,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",380,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",380,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",380,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",380,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",380,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",380,null],[11,"drop_port","","",380,null],[11,"can_recv","","",380,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",380,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",380,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",380,null],[11,"eq","std::sync::mpsc::select","",381,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",381,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",382,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",382,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",382,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",383,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",383,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",383,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",383,null],[11,"drop","","",382,null],[11,"drop","","",383,null],[6,"Item","lux::graphics","",null,null],[11,"next","std::sync::mpsc::select","",384,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",385,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",385,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",385,null],[11,"send","","",385,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",385,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",385,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",385,null],[11,"drop_chan","","",385,null],[11,"drop_port","","",385,null],[11,"can_recv","","",385,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",385,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",385,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",385,null],[11,"new","std::sync::mpsc::stream","",386,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",386,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",386,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",386,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",386,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",386,null],[11,"drop_port","","",386,null],[11,"can_recv","","",386,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",386,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",386,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",386,null],[11,"fmt","std::sync::mpsc::sync","",387,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",388,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",388,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",388,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",388,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",388,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",388,null],[11,"drop_chan","","",388,null],[11,"drop_port","","",388,null],[11,"can_recv","","",388,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",388,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",388,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",388,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",389,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",389,null],[11,"pop","","Pops some data from this queue.",389,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",389,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",390,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",390,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",390,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",390,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",390,null],[11,"clone","std::sync::mpsc","",391,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",391,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",391,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",392,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",392,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",392,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",392,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",393,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",393,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",393,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",393,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",394,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",394,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",394,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",395,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",395,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",395,null],[11,"send","","Sends a value on this synchronous channel.",396,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",396,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",396,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",396,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",397,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",397,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",397,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::sync::mpsc","",398,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[11,"next","std::sync::mpsc","",399,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","std::sync::mpsc","",397,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",397,null],[11,"fmt","","",391,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",391,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",391,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",391,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",394,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",394,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",394,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",394,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",392,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",392,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",392,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",393,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",393,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",393,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",400,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",400,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",401,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"new","std::sync::condvar","Creates a new condition variable which is ready to be waited on and\nnotified.",402,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",402,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",402,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",402,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",402,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",402,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",402,null],[11,"drop","","",402,null],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",403,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",403,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",403,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",403,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",403,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",403,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",403,null],[11,"get","std::sync::future","Get the value of the future.",404,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"into_inner","","Gets the value from this future, forcing evaluation.",404,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",404,{"inputs":[{"name":"future"}],"output":{"name":"a"}}],[11,"from_value","","Create a future from a value.",404,{"inputs":[{"name":"future"},{"name":"a"}],"output":{"name":"future"}}],[11,"from_fn","","Create a future from a function.",404,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"from_receiver","","Create a future from a port",404,{"inputs":[{"name":"future"},{"name":"receiver"}],"output":{"name":"future"}}],[11,"spawn","","Create a future from a unique closure.",404,{"inputs":[{"name":"future"},{"name":"f"}],"output":{"name":"future"}}],[11,"drop","std::sync::mutex","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",405,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",405,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",405,null],[6,"Target","lux::graphics","",null,null],[11,"deref","std::sync::mutex","",406,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",406,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",406,null],[11,"call_once","std::sync::once","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",407,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",408,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",408,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",408,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",408,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",408,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",408,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"drop","","",408,null],[11,"fmt","","",408,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",409,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",409,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",409,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",409,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",409,null],[6,"Target","lux::graphics","",null,null],[11,"deref","std::sync::rwlock","",410,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","std::sync::rwlock","",411,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",411,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",410,null],[11,"drop","","",411,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",412,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",412,null],[11,"release","","Release a resource from this semaphore.",412,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",412,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",413,null],[11,"default","core::atomic","",414,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",415,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",416,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",417,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",418,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",414,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",414,null],[11,"swap","","Stores a value into the bool, returning the old value.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",414,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",415,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",415,null],[11,"swap","","Stores a value into the isize, returning the old value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",415,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",416,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",416,null],[11,"swap","","Stores a value into the usize, returning the old value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",416,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",417,null],[11,"load","","Loads a value from the pointer.",417,null],[11,"store","","Stores a value into the pointer.",417,null],[11,"swap","","Stores a value into the pointer, returning the old value.",417,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",417,null],[11,"fmt","std::time::duration","",419,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",419,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Crates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",419,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",419,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",419,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",419,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"secs","","Returns the number of whole seconds represented by this duration.",419,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"extra_nanos","","Returns the nanosecond precision represented by this duration.",419,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[6,"Output","lux::graphics","",null,null],[11,"add","std::time::duration","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","std::time::duration","",419,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[6,"Output","lux::graphics","",null,null],[11,"mul","std::time::duration","",419,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[6,"Output","lux::graphics","",null,null],[11,"div","std::time::duration","",419,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"fmt","","",419,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",420,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",420,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",420,null],[11,"wait","","Waits for a signal on the specified mutex.",420,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",420,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",420,null],[11,"lock","std::sys_common::mutex","Locks the mutex blocking the current thread until it is available.",421,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",421,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",421,null],[11,"destroy","","Deallocates all resources associated with this mutex.",421,null],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys_common::net","",422,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",422,null],[11,"connect","","",423,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_nodelay","","",423,{"inputs":[{"name":"tcpstream"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_keepalive","","",423,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read","","",423,null],[11,"write","","",423,null],[11,"peer_addr","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",423,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",423,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",424,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",424,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",425,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",425,null],[11,"send_to","","",425,null],[11,"set_broadcast","","",425,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"set_multicast_loop","","",425,{"inputs":[{"name":"udpsocket"},{"name":"bool"}],"output":{"name":"result"}}],[11,"join_multicast","","",425,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"leave_multicast","","",425,{"inputs":[{"name":"udpsocket"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"multicast_time_to_live","","",425,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"time_to_live","","",425,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"duplicate","","",425,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","std::sys_common::poison","",426,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",426,null],[11,"get","","",426,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",427,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",427,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",427,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",427,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",428,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",428,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",428,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",428,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",429,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",429,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",429,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",429,null],[11,"fmt","","",429,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","std::sys_common::remutex","",430,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",430,null],[11,"read","std::sys_common::rwlock","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",431,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",431,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",431,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",431,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",431,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",431,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",431,null],[11,"get","std::sys_common::thread_local","Gets the value associated with this TLS key",432,null],[11,"set","","Sets this TLS key to a new value.",432,null],[11,"destroy","","Deallocates this OS TLS key.",432,null],[11,"new","","Creates a new managed OS TLS key.",433,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",433,null],[11,"set","","See StaticKey::set",433,null],[11,"drop","","",433,null],[11,"clone","std::sys_common::wtf8","",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",434,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",434,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",434,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",434,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",434,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",434,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",436,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",436,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_point_at","","Returns the code point at `position`.",436,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"codepoint"}}],[11,"code_point_range_at","","Returns the code point at `position`\nand the position of the next code point.",436,null],[11,"code_points","","Returns an iterator for the string’s code points.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","std::sys_common::wtf8","",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an new, empty WTF-8 string.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates an new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",435,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",435,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",435,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",435,null],[11,"as_slice","","",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",435,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",435,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",435,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",435,null],[11,"push","","Append a code point at the end of the string.",435,null],[11,"truncate","","Shortens a string to the specified length.",435,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",435,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",435,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",435,null],[11,"eq","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",436,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Output","lux::graphics","",null,null],[11,"index","std::sys_common::wtf8","",436,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[6,"Output","lux::graphics","",null,null],[11,"index","std::sys_common::wtf8","",436,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[6,"Output","lux::graphics","",null,null],[11,"index","std::sys_common::wtf8","",436,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[6,"Output","lux::graphics","",null,null],[11,"index","std::sys_common::wtf8","",436,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",437,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys_common::wtf8","",437,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",437,null],[11,"clone","","",438,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys_common::wtf8","",438,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",438,null],[11,"hash","","",434,null],[11,"hash","","",435,null],[11,"hash","","",436,null],[6,"Owned","lux::graphics","",null,null],[11,"is_ascii","std::sys_common::wtf8","",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",436,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",436,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",436,null],[11,"make_ascii_lowercase","","",436,null],[11,"drop","std::sys::backtrace","",439,null],[11,"new","std::sys::condvar","",440,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","",440,null],[11,"wait_timeout","","",440,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"notify_one","","",440,null],[11,"notify_all","","",440,null],[11,"destroy","","",440,null],[11,"hash","std::sys::fs","",441,null],[11,"eq","","",441,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",441,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",441,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"default","","",442,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"clone","","",442,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",443,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",443,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",443,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",443,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys::fs","",444,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",445,null],[11,"path","","",446,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",446,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"file_type","","",446,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"metadata","","",446,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"new","","",442,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",442,null],[11,"write","","",442,null],[11,"append","","",442,null],[11,"create","","",442,null],[11,"truncate","","",442,null],[11,"creation_disposition","","",442,null],[11,"flags_and_attributes","","",442,null],[11,"desired_access","","",442,null],[11,"share_mode","","",442,null],[11,"security_attributes","","",442,null],[11,"open","","",447,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"fsync","","",447,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",447,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",447,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"file_attr","","",447,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"read","","",447,null],[11,"write","","",447,null],[11,"flush","","",447,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",447,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"handle","","",447,{"inputs":[{"name":"file"}],"output":{"name":"handle"}}],[11,"into_handle","","",447,{"inputs":[{"name":"file"}],"output":{"name":"handle"}}],[11,"fmt","","",447,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"attrs","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"u32"}}],[11,"file_type","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"created","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"accessed","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"modified","","",448,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"readonly","","",443,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",443,null],[11,"is_dir","","",441,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",441,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",441,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"new","","",449,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",449,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","std::sys::handle","",450,null],[11,"raw","","",450,null],[11,"into_raw","","",450,null],[11,"read","","",450,null],[11,"write","","",450,null],[11,"duplicate","","",450,{"inputs":[{"name":"handle"},{"name":"u32"},{"name":"bool"},{"name":"u32"}],"output":{"name":"result"}}],[11,"drop","","",450,null],[11,"lock","std::sys::mutex","",451,null],[11,"try_lock","","",451,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","",451,null],[11,"destroy","","",451,null],[11,"uninitialized","","",452,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",452,null],[11,"lock","","",452,null],[11,"try_lock","","",452,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",452,null],[11,"destroy","","",452,null],[11,"new","std::sys::net","",453,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",453,null],[11,"duplicate","","",453,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",453,null],[11,"drop","","",453,null],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys::os","",454,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"drop","","",454,null],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys::os","",455,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"fmt","","",456,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",456,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",456,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[6,"Item","lux::graphics","",null,null],[11,"next","std::sys::os","",457,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",457,null],[11,"len","","",457,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"drop","","",457,null],[11,"hash","std::sys::os_str","",458,null],[11,"clone","","",458,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",458,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",459,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",458,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",458,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",458,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",458,null],[11,"from_str","","",459,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",459,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",459,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",459,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"handle","std::sys::pipe","",460,{"inputs":[{"name":"anonpipe"}],"output":{"name":"handle"}}],[11,"read","","",460,null],[11,"write","","",460,null],[11,"clone","std::sys::process","",461,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",461,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",461,null],[11,"args","","",461,null],[11,"env","","",461,null],[11,"env_remove","","",461,null],[11,"env_clear","","",461,null],[11,"cwd","","",461,null],[11,"spawn","","",462,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"kill","","",462,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"wait","","",462,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"fmt","","",463,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",463,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",463,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",463,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",463,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",463,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",463,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","std::sys::rwlock","",464,null],[11,"try_read","","",464,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",464,null],[11,"try_write","","",464,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",464,null],[11,"write_unlock","","",464,null],[11,"destroy","","",464,null],[11,"new","std::sys::stack_overflow","",465,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",465,null],[11,"new","std::sys::thread","",466,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"set_name","","",466,null],[11,"join","","",466,null],[11,"yield_now","","",466,null],[11,"sleep","","",466,null],[11,"now","std::sys::time","",467,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[6,"Output","lux::graphics","",null,null],[11,"new","std::sys::stdio","",468,{"inputs":[{"name":"stdin"}],"output":{"name":"stdin"}}],[11,"read","","",468,null],[11,"new","","",469,{"inputs":[{"name":"stdout"}],"output":{"name":"stdout"}}],[11,"write","","",469,null],[11,"new","","",470,{"inputs":[{"name":"stderr"}],"output":{"name":"stderr"}}],[11,"write","","",470,null],[11,"write","","",470,null],[11,"flush","","",470,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"drop","","",471,null],[11,"handle","","",472,{"inputs":[{"name":"output"}],"output":{"name":"handle"}}],[11,"clone","std::rt::unwind::eabi","",473,{"inputs":[{"name":"exception_disposition"}],"output":{"name":"exception_disposition"}}],[11,"clone","std::rt::libunwind","",474,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",475,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",475,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",475,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",475,null],[11,"drop","","",475,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",476,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",476,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",476,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",476,null],[11,"clone","std::rand","",477,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",477,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",477,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",477,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",477,null],[11,"from_seed","","",477,null],[11,"reseed","","",478,null],[11,"clone","","",479,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",479,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",479,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",479,null],[11,"fmt","core::cmp","",480,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",480,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",480,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",480,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",480,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",480,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",480,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"clone","core::iter","",481,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",481,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",481,null],[11,"next_back","","",481,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"indexable","","",481,{"inputs":[{"name":"rev"}],"output":{"name":"usize"}}],[11,"idx","","",481,{"inputs":[{"name":"rev"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","","",482,{"inputs":[{"name":"minmaxresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",482,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",482,{"inputs":[{"name":"minmaxresult"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"clone","","",482,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"minmaxresult"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x,y)` is returned where `x <= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",482,{"inputs":[{"name":"minmaxresult"}],"output":{"name":"option"}}],[11,"clone","","",483,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",483,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",483,null],[11,"next_back","","",483,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"indexable","","",483,{"inputs":[{"name":"cloned"}],"output":{"name":"usize"}}],[11,"idx","","",483,{"inputs":[{"name":"cloned"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",484,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",484,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",484,null],[11,"indexable","","",484,{"inputs":[{"name":"cycle"}],"output":{"name":"usize"}}],[11,"idx","","",484,{"inputs":[{"name":"cycle"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",485,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",485,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",485,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",485,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",485,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",485,null],[11,"next_back","","",485,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"indexable","","",485,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"idx","","",485,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",486,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",486,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",486,null],[11,"next_back","","",486,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"indexable","","",486,{"inputs":[{"name":"zip"}],"output":{"name":"usize"}}],[11,"idx","","",486,{"inputs":[{"name":"zip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",487,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",487,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",487,null],[11,"next_back","","",487,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"indexable","","",487,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"idx","","",487,{"inputs":[{"name":"map"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",488,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",488,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",488,null],[11,"next_back","","",488,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",489,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",489,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",489,null],[11,"next_back","","",489,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",490,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","# Overflow Behavior",490,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",490,null],[11,"nth","","",490,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",490,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",490,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"indexable","","",490,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"idx","","",490,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",491,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",491,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",491,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",491,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",491,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",491,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",491,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",491,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",492,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",492,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",492,null],[11,"clone","","",493,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",493,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",493,null],[11,"clone","","",494,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",494,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",494,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",494,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",494,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",494,null],[11,"indexable","","",494,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"idx","","",494,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",495,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",495,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",495,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",495,null],[11,"indexable","","",495,{"inputs":[{"name":"take"}],"output":{"name":"usize"}}],[11,"idx","","",495,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",496,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",496,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",496,null],[11,"clone","","",497,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",497,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",497,null],[11,"next_back","","",497,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",498,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",498,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",498,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",498,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",498,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",498,null],[11,"next_back","","",498,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"indexable","","",498,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"idx","","",498,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"reset_fuse","","Resets the `Fuse` such that the next call to `.next()` or\n`.next_back()` will call the underlying iterator again even if it\npreviously returned `None`.",498,null],[11,"clone","","",499,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",499,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",499,null],[11,"next_back","","",499,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"indexable","","",499,{"inputs":[{"name":"inspect"}],"output":{"name":"usize"}}],[11,"idx","","",499,{"inputs":[{"name":"inspect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",500,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",500,{"inputs":[{"name":"unfold"},{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",500,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",500,null],[11,"clone","","",501,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",502,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",503,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",501,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",501,null],[11,"clone","","",504,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",504,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",504,null],[11,"next_back","","",504,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",501,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",501,null],[6,"Item","lux::graphics","",null,null],[11,"next","core::ops","",503,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",503,null],[11,"next_back","","",503,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::ops","",502,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",505,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::iter","",505,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",505,null],[11,"next_back","","",505,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"indexable","","",505,{"inputs":[{"name":"repeat"}],"output":{"name":"usize"}}],[11,"idx","","",505,{"inputs":[{"name":"repeat"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new","core::ptr","Creates a new `Unique`.",506,null],[11,"get","","Dereferences the content.",506,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",506,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","core::ptr","",506,null],[11,"fmt","","",506,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",219,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",219,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",219,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",219,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",219,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",219,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",219,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",219,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",219,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",219,null],[11,"as_slice","","Extracts a slice containing the entire vector.",219,null],[11,"as_mut_slice","","Deprecated: use `&mut s[..]` instead.",219,null],[11,"set_len","","Sets the length of a vector.",219,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",219,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",219,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",219,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",219,null],[11,"push","","Appends an element to the back of a collection.",219,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",219,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",219,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",219,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",219,null],[11,"len","","Returns the number of elements in the vector.",219,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",219,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",219,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",219,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",219,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",219,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",219,null],[11,"clone","","",219,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",219,null],[11,"hash","","",219,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec","",219,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",219,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec","",219,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec","",219,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec","",219,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::vec","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[6,"Target","lux::graphics","",null,null],[11,"deref","collections::vec","",219,null],[11,"deref_mut","","",219,null],[11,"from_iter","","",219,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::vec","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",219,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::vec","",219,null],[11,"eq","","",219,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","collections::borrow","",507,null],[11,"ne","","",507,null],[11,"eq","","",507,null],[11,"ne","","",507,null],[11,"eq","","",507,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",507,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"partial_cmp","","",219,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",219,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",219,null],[11,"default","","",219,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",219,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",219,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",219,null],[11,"from","","",219,null],[11,"from","","",219,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",507,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",219,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",508,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec","",508,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",508,null],[11,"count","","",508,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",508,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",508,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::vec","",509,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",509,null],[11,"next_back","","",509,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",509,null],[6,"Output","lux::graphics","",null,null],[11,"index","collections::bit","",510,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",510,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bitvec"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",510,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",510,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",510,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"bitvec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",510,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",510,null],[11,"set_all","","Sets all bits to 1.",510,null],[11,"negate","","Flips all bits.",510,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",510,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",510,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",510,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"append","","Moves all bits from `other` into `Self`, leaving `other` empty.",510,null],[11,"split_off","","Splits the `BitVec` into two at the given bit,\nretaining the first half in-place and returning the second one.",510,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"none","","Returns `true` if all bits are 0.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",510,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",510,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",510,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",510,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",510,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",510,null],[11,"len","","Returns the total number of bits in this vector",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no bits in this vector",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",510,null],[11,"default","","",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_iter","","",510,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"bitvec"}}],[11,"extend","","",510,null],[11,"clone","","",510,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"clone_from","","",510,null],[11,"partial_cmp","","",510,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"option"}}],[11,"cmp","","",510,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"ordering"}}],[11,"fmt","","",510,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",510,null],[11,"eq","","",510,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clone","","",511,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",511,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",511,null],[11,"next_back","","",511,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",511,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",511,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"clone","collections::bit","",512,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"default","","",512,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"from_iter","","",512,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":{"name":"bitset"}}],[11,"extend","","",512,null],[11,"partial_cmp","","",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"option"}}],[11,"cmp","","",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"ordering"}}],[11,"eq","","",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",512,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",512,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",512,{"inputs":[{"name":"bitset"},{"name":"bitvec"}],"output":{"name":"bitset"}}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",512,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",512,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",512,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",512,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",512,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",512,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",512,{"inputs":[{"name":"bitset"}],"output":{"name":"setiter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",512,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",512,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",512,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",512,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",512,null],[11,"split_off","","Splits the `BitSet` into two at the given key including the key.\nRetains the first part in-place while returning the second part.",512,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"len","","Returns the number of set bits in this set.",512,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",512,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",512,null],[11,"contains","","Returns `true` if this set contains the specified integer.",512,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",512,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",512,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",512,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",512,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",512,null],[11,"clone","","",513,{"inputs":[{"name":"setiter"}],"output":{"name":"setiter"}}],[11,"clone","","",514,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"twobitpositions"}}],[11,"clone","","",515,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",516,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",517,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",518,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",513,{"inputs":[{"name":"setiter"}],"output":{"name":"option"}}],[11,"size_hint","","",513,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",514,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"option"}}],[11,"size_hint","","",514,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",515,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",515,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",516,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",516,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",517,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",517,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::bit","",518,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",518,null],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[11,"next","collections::btree::node","",519,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",519,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",519,null],[11,"drop","","",520,null],[11,"as_slices","","",520,null],[11,"as_slices_mut","","",520,null],[11,"as_slices_internal","","",520,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",520,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",520,null],[11,"keys_mut","","",520,null],[11,"vals","","",520,null],[11,"vals_mut","","",520,null],[11,"edges","","",520,null],[11,"edges_mut","","",520,null],[11,"clone","","",520,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",520,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",520,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",520,null],[11,"len","","How many key-value pairs the node contains",520,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",520,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",520,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",520,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",520,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",520,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",521,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",521,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",521,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",521,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",521,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",521,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",521,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",521,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",521,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",521,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",521,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",521,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",521,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",521,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",520,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",520,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",520,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",520,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",520,null],[11,"clone","","",522,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[6,"Item","lux::graphics","",null,null],[6,"Edge","","",null,null],[11,"next_kv","collections::btree::node","",522,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",522,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",522,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",522,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"Edge","","",null,null],[11,"next_kv","collections::btree::node","",523,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",523,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",523,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",523,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",523,null],[11,"clone","","",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::node","",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",524,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",525,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",525,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",525,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",526,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",526,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",526,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",528,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",527,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",527,null],[11,"get","","Returns a reference to the value corresponding to the key.",527,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",527,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",527,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",527,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",527,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::btree::map","Gets an owning iterator over the entries of the map.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[6,"Item","","",null,null],[6,"IntoIter","","",null,null],[6,"Target","","",null,null],[11,"deref","collections::btree::map::stack","",529,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",529,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",530,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",530,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",531,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",531,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",532,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",532,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",532,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",532,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",532,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",527,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",527,null],[11,"hash","","",527,null],[11,"default","","",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",527,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",527,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",527,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",527,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::btree::map","",527,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",524,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",524,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",524,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",528,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",528,null],[11,"next_back","","",528,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",533,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",533,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",533,null],[11,"next_back","","",533,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",534,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",534,null],[11,"next_back","","",534,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",535,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",535,null],[11,"next_back","","",535,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",536,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",536,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",536,null],[11,"next_back","","",536,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",537,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",537,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",537,null],[11,"next_back","","",537,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",538,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",538,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",538,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::map","",539,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",539,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",540,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",540,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",540,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",541,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",542,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",542,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",542,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",542,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",542,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",527,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",527,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",527,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",527,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",543,null],[11,"clone","","",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",543,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",543,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",543,null],[11,"contains","","Returns `true` if the set contains a value.",543,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",543,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",543,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",543,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"from_iter","","",543,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","collections::btree::set","Gets an iterator for moving out the BtreeSet's contents.",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::btree::set","",543,null],[11,"default","","",543,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[6,"Output","lux::graphics","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"fmt","collections::btree::set","",543,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",544,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",544,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",544,null],[11,"next_back","","",544,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",545,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",545,null],[11,"next_back","","",545,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",546,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",546,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",546,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",547,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",547,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",548,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",548,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",549,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",549,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",550,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::btree::set","",550,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","alloc::boxed","",210,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",210,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","alloc::rc","",132,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",551,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",507,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[6,"Owned","lux::graphics","",null,null],[11,"clone","collections::borrow","",507,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",507,null],[11,"into_owned","","Extracts the owned data.",507,null],[6,"Target","lux::graphics","",null,null],[11,"deref","collections::borrow","",507,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",507,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",507,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",507,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",507,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",507,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",507,null],[11,"into_cow","","",507,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",507,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",552,null],[11,"cmp","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",552,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",552,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",552,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",552,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",552,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",552,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",552,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",552,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",552,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",552,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[6,"Output","lux::graphics","",null,null],[11,"sub","collections::enum_set","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[6,"Output","lux::graphics","",null,null],[11,"bitor","collections::enum_set","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[6,"Output","lux::graphics","",null,null],[11,"bitand","collections::enum_set","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[6,"Output","lux::graphics","",null,null],[11,"bitxor","collections::enum_set","",552,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",553,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::enum_set","",553,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",553,null],[11,"from_iter","","",552,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"extend","collections::enum_set","",552,null],[11,"clone","core::fmt::rt::v1","",554,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",555,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",556,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",556,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",556,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",557,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",558,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"start","core::ops","",502,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",559,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",503,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",503,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[6,"Output","lux::graphics","",null,null],[11,"clone","collections::slice","",560,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",560,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",219,null],[11,"borrow_mut","","",219,null],[6,"Owned","lux::graphics","",null,null],[11,"clone","collections::slice","",561,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",562,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::slice","",560,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",560,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::slice","",563,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",563,null],[6,"Output","lux::graphics","",null,null],[11,"clone","collections::str","",564,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",565,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::str","",565,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",565,null],[11,"clone","","",566,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",567,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::str","",567,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",568,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[6,"Item","lux::graphics","",null,null],[11,"next","collections::str","",568,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",568,null],[11,"borrow","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[6,"Owned","lux::graphics","",null,null],[11,"fmt","core::str::pattern","",569,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",569,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",569,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",569,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",570,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[6,"Searcher","lux::graphics","",null,null],[11,"into_searcher","core::str::pattern","",571,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",570,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",570,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",570,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",572,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"eq","","",573,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",573,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",573,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[6,"Searcher","lux::graphics","",null,null],[11,"haystack","core::str::pattern","",572,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",572,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",572,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",574,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[6,"Searcher","lux::graphics","",null,null],[11,"clone","core::str::pattern","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",575,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[6,"Searcher","lux::graphics","",null,null],[11,"clone","core::str::pattern","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",576,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[6,"Searcher","lux::graphics","",null,null],[6,"Searcher","","",null,null],[11,"cmp","collections::string","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",218,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",215,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",218,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",218,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",218,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",218,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",218,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",218,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",218,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",218,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",218,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",218,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",218,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",218,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",218,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",218,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",218,null],[11,"push","","Adds the given character to the end of the string.",218,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",218,null],[11,"truncate","","Shortens a string to the specified length.",218,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",218,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",218,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",218,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",218,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",218,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",218,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",218,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",218,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",215,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",215,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",215,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",218,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",218,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",218,null],[11,"extend","","",218,null],[6,"Searcher","lux::graphics","",null,null],[11,"eq","collections::string","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",507,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",507,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",507,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",507,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",218,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",507,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",507,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",218,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",218,null],[6,"Output","lux::graphics","",null,null],[11,"add","collections::string","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::string","",218,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::string","",218,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::string","",218,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[6,"Output","lux::graphics","",null,null],[11,"index","collections::string","",218,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","collections::string","",577,{"inputs":[{"name":"derefstring"}],"output":{"name":"string"}}],[11,"eq","","",578,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",578,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",578,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",578,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[6,"Err","lux::graphics","",null,null],[11,"from_str","collections::string","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",218,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",218,null],[11,"from","","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",507,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",507,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",218,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",218,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",218,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",218,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",579,null],[6,"Item","lux::graphics","",null,null],[11,"next","collections::string","",579,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",579,null],[11,"next_back","","",579,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","collections::vec","",580,null],[11,"drop","","",581,null],[11,"drop","","",582,null],[11,"eq","collections","",583,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",583,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",583,null],[11,"fmt","","",583,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",583,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",210,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",210,null],[11,"default","","",210,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",210,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",210,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",210,null],[11,"eq","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",210,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",210,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",210,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",210,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","alloc::boxed","",210,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",210,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[6,"Item","lux::graphics","",null,null],[11,"next","alloc::boxed","",210,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",210,null],[11,"next_back","","",210,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[6,"Output","lux::graphics","",null,null],[6,"Output","","",null,null],[11,"call_once","alloc::boxed","",210,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[6,"Output","lux::graphics","",null,null],[11,"call_once","alloc::boxed","",210,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","collections::vec","",580,{"inputs":[{"name":"derefvec"}],"output":{"name":"vec"}}],[11,"hash","core::option","",584,null],[11,"fmt","","",584,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",584,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",584,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",584,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",584,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",584,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",584,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",584,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",584,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",584,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",584,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",584,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value or returns a default.",584,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value or computes a default.",584,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",584,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",584,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",584,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",584,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",584,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",584,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",584,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",584,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",584,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",584,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",584,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",584,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","core::option","Returns a consuming iterator over the possibly contained value.",584,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",585,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::option","",585,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",585,null],[11,"next_back","","",585,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::option","",586,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",586,null],[11,"next_back","","",586,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",586,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::option","",587,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",587,null],[11,"next_back","","",587,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::option","",588,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",588,null],[11,"next_back","","",588,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",584,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"cmp","core::marker","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"option"}}],[11,"lt","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"le","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"gt","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ge","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"eq","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"ne","","",589,{"inputs":[{"name":"nocopy"},{"name":"nocopy"}],"output":{"name":"bool"}}],[11,"clone","","",589,{"inputs":[{"name":"nocopy"}],"output":{"name":"nocopy"}}],[11,"hash","","",590,null],[11,"eq","","",590,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",590,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",590,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",590,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"fmt","lux","",591,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",591,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",591,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",591,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",591,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",591,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",591,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",591,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",592,null],[11,"fmt","","",592,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",592,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",592,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",592,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",592,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"fmt","core::simd","",593,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",593,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",594,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",594,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",595,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",595,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",596,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",596,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",597,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",597,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",598,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",598,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",599,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",599,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",600,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",600,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",601,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",601,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",602,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",602,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",603,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",603,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",603,null],[11,"as_unsafe_cell","","Gets a reference to the underlying `UnsafeCell`.",603,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",603,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",603,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",603,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",604,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",604,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",604,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",604,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",605,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",605,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",605,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",605,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",605,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Gets a reference to the underlying `UnsafeCell`.",605,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",605,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",605,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",605,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",606,null],[11,"clone","","",606,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","core::cell","",607,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"drop","","",608,null],[6,"Target","lux::graphics","",null,null],[11,"deref","core::cell","",609,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",609,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",610,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",610,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",610,null],[11,"clone","core::raw","",611,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",612,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[6,"Output","lux::graphics","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[11,"eq","core::ops","",613,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",613,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",613,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",613,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",503,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",503,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",503,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",503,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",502,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",502,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",502,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",502,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",559,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",559,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",559,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",559,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[6,"Target","","",null,null],[6,"Output","","",null,null],[6,"Output","","",null,null],[6,"Item","","",null,null],[11,"next","rustc_unicode::char","",614,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","rustc_unicode::char","",615,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"hash","core::result","",616,null],[11,"fmt","","",616,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",616,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",616,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",616,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",616,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",616,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",616,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",616,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",616,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",616,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",616,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",616,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",616,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",616,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",616,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",616,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",616,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",616,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",616,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",616,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",616,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[6,"Item","lux::graphics","",null,null],[6,"IntoIter","","",null,null],[11,"into_iter","core::result","Returns a consuming iterator over the possibly contained value.",616,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::result","",617,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",617,null],[11,"next_back","","",617,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",617,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::result","",618,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",618,null],[11,"next_back","","",618,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[6,"Item","lux::graphics","",null,null],[11,"next","core::result","",619,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",619,null],[11,"next_back","","",619,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",616,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",620,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",620,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",620,null],[11,"finish","","",620,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",620,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",620,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",132,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",132,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",132,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","alloc::rc","",132,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",132,null],[11,"clone","","Makes a clone of the `Rc<T>`.",132,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",132,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",132,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",132,null],[11,"fmt","","",132,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",621,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",621,null],[11,"clone","","Makes a clone of the `Weak<T>`.",621,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",621,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::program","",622,{"inputs":[{"name":"compiler_global_lock"}],"output":{"name":"mutex"}}],[11,"fmt","","",623,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",623,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"programcreationerror"}}],[11,"fmt","","",623,{"inputs":[{"name":"programcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",623,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"str"}}],[11,"cause","","",623,{"inputs":[{"name":"programcreationerror"}],"output":{"name":"option"}}],[11,"fmt","","",624,{"inputs":[{"name":"getbinaryerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",624,{"inputs":[{"name":"getbinaryerror"}],"output":{"name":"getbinaryerror"}}],[11,"from","","",625,{"inputs":[{"name":"programcreationinput"},{"name":"sourcecode"}],"output":{"name":"programcreationinput"}}],[11,"from","","",625,{"inputs":[{"name":"programcreationinput"},{"name":"binary"}],"output":{"name":"programcreationinput"}}],[11,"fmt","glium::uniforms::buffer","",626,{"inputs":[{"name":"uniformbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",627,{"inputs":[{"name":"typelessuniformbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Uploads data in the uniforms buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"dynamic","","Uploads data in the uniforms buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"persistent","","Uploads data in the uniforms buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"immutable","","Uploads data in the uniforms buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_persistent","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_immutable","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"}],"output":{"name":"result"}}],[11,"empty_unsized","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_dynamic","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_persistent","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_unsized_immutable","","Creates an empty buffer.",626,{"inputs":[{"name":"uniformbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::uniforms::buffer","",626,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"bufferview"}}],[11,"deref_mut","","",626,{"inputs":[{"name":"uniformbuffer"}],"output":{"name":"bufferview"}}],[11,"eq","glium::uniforms::sampler","",628,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"ne","","",628,{"inputs":[{"name":"samplerwrapfunction"},{"name":"samplerwrapfunction"}],"output":{"name":"bool"}}],[11,"hash","","",628,null],[11,"clone","","",628,{"inputs":[{"name":"samplerwrapfunction"}],"output":{"name":"samplerwrapfunction"}}],[11,"fmt","","",628,{"inputs":[{"name":"samplerwrapfunction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",628,{"inputs":[{"name":"samplerwrapfunction"}],"output":{"name":"u32"}}],[11,"eq","","",629,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",629,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"magnifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",629,null],[11,"clone","","",629,{"inputs":[{"name":"magnifysamplerfilter"}],"output":{"name":"magnifysamplerfilter"}}],[11,"fmt","","",629,{"inputs":[{"name":"magnifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",629,{"inputs":[{"name":"magnifysamplerfilter"}],"output":{"name":"u32"}}],[11,"eq","","",630,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"ne","","",630,{"inputs":[{"name":"minifysamplerfilter"},{"name":"minifysamplerfilter"}],"output":{"name":"bool"}}],[11,"hash","","",630,null],[11,"clone","","",630,{"inputs":[{"name":"minifysamplerfilter"}],"output":{"name":"minifysamplerfilter"}}],[11,"fmt","","",630,{"inputs":[{"name":"minifysamplerfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_glenum","","",630,{"inputs":[{"name":"minifysamplerfilter"}],"output":{"name":"u32"}}],[11,"new","","Builds a new `Sampler` with default parameters.",631,{"inputs":[{"name":"sampler"},{"name":"t"}],"output":{"name":"sampler"}}],[11,"wrap_function","","Changes the wrap functions of all three coordinates.",631,{"inputs":[{"name":"sampler"},{"name":"samplerwrapfunction"}],"output":{"name":"sampler"}}],[11,"minify_filter","","Changes the minifying filter of the sampler.",631,{"inputs":[{"name":"sampler"},{"name":"minifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"magnify_filter","","Changes the magnifying filter of the sampler.",631,{"inputs":[{"name":"sampler"},{"name":"magnifysamplerfilter"}],"output":{"name":"sampler"}}],[11,"anisotropy","","Changes the magnifying filter of the sampler.",631,{"inputs":[{"name":"sampler"},{"name":"u16"}],"output":{"name":"sampler"}}],[11,"eq","","",632,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"ne","","",632,{"inputs":[{"name":"samplerbehavior"},{"name":"samplerbehavior"}],"output":{"name":"bool"}}],[11,"hash","","",632,null],[11,"clone","","",632,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"fmt","","",632,{"inputs":[{"name":"samplerbehavior"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",632,{"inputs":[{"name":"samplerbehavior"}],"output":{"name":"samplerbehavior"}}],[11,"clone","glium::uniforms::uniforms","",633,{"inputs":[{"name":"emptyuniforms"}],"output":{"name":"emptyuniforms"}}],[11,"fmt","","",633,{"inputs":[{"name":"emptyuniforms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_values","","",633,null],[11,"new","","Builds a new storage with a value.",634,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"t"}],"output":{"name":"uniformsstorage"}}],[11,"add","","Adds a value to the storage.",634,{"inputs":[{"name":"uniformsstorage"},{"name":"str"},{"name":"u"}],"output":{"name":"uniformsstorage"}}],[11,"visit_values","","",634,null],[11,"eq","glium::uniforms::value","",635,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"ne","","",635,{"inputs":[{"name":"uniformtype"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"fmt","","",635,{"inputs":[{"name":"uniformtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",635,{"inputs":[{"name":"uniformtype"}],"output":{"name":"uniformtype"}}],[11,"clone","","",636,{"inputs":[{"name":"uniformvalue"}],"output":{"name":"uniformvalue"}}],[11,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",636,{"inputs":[{"name":"uniformvalue"},{"name":"uniformtype"}],"output":{"name":"bool"}}],[11,"fmt","glium::uniforms","",637,{"inputs":[{"name":"layoutmismatcherror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",637,{"inputs":[{"name":"layoutmismatcherror"}],"output":{"name":"layoutmismatcherror"}}],[11,"fmt","glium::vertex::buffer","",638,{"inputs":[{"name":"creationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",638,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"from","","",638,{"inputs":[{"name":"creationerror"},{"name":"buffercreationerror"}],"output":{"name":"creationerror"}}],[11,"fmt","","",639,{"inputs":[{"name":"vertexbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new vertex buffer.",639,null],[11,"dynamic","","Builds a new vertex buffer.",639,null],[11,"persistent","","Builds a new vertex buffer.",639,null],[11,"immutable","","Builds a new vertex buffer.",639,null],[11,"empty","","Builds an empty vertex buffer.",639,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_dynamic","","Builds an empty vertex buffer.",639,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_persistent","","Builds an empty vertex buffer.",639,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"empty_immutable","","Builds an empty vertex buffer.",639,{"inputs":[{"name":"vertexbuffer"},{"name":"f"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new_raw","","Builds a new vertex buffer from an indeterminate data type and bindings.",639,null],[11,"new_raw_dynamic","","Dynamic version of `new_raw`.",639,null],[11,"slice","","Accesses a slice of the buffer.",639,{"inputs":[{"name":"vertexbuffer"},{"name":"range"}],"output":{"name":"option"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",639,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"cow"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",639,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"result"}}],[11,"into_vertex_buffer_any","","DEPRECATED: use `.into()` instead.\nDiscard the type information and turn the vertex buffer into a `VertexBufferAny`.",639,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",639,{"inputs":[{"name":"vertexbuffer"},{"name":"bufferview"}],"output":{"name":"vertexbuffer"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::vertex::buffer","",639,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"bufferview"}}],[11,"deref_mut","","",639,{"inputs":[{"name":"vertexbuffer"}],"output":{"name":"bufferview"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::vertex::buffer","",640,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferviewslice"}}],[11,"deref_mut","","",640,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"bufferviewslice"}}],[11,"into_vertices_source","","",640,{"inputs":[{"name":"vertexbufferslice"}],"output":{"name":"verticessource"}}],[11,"fmt","","",641,{"inputs":[{"name":"vertexbufferany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",641,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"len","","Returns the number of elements in the buffer.",641,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"usize"}}],[11,"get_bindings","","Returns the associated `VertexFormat`.",641,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"cow"}}],[11,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",641,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"vertexbuffer"}}],[11,"per_instance","","Creates a marker that instructs glium to use multiple instances.",641,{"inputs":[{"name":"vertexbufferany"}],"output":{"name":"result"}}],[11,"from","","",641,{"inputs":[{"name":"vertexbufferany"},{"name":"vertexbuffer"}],"output":{"name":"vertexbufferany"}}],[11,"from","","",641,{"inputs":[{"name":"vertexbufferany"},{"name":"bufferview"}],"output":{"name":"vertexbufferany"}}],[11,"clone","","",642,{"inputs":[{"name":"instancingnotsupported"}],"output":{"name":"instancingnotsupported"}}],[11,"fmt","","",642,{"inputs":[{"name":"instancingnotsupported"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","glium::vertex::format","",643,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",643,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",643,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",643,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"is_supported","","Returns true if the backend supports this type of attribute.",643,{"inputs":[{"name":"attributetype"},{"name":"c"}],"output":{"name":"bool"}}],[11,"get_size_bytes","","Returns the size in bytes of a value of this type.",643,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of values for this type.",643,{"inputs":[{"name":"attributetype"}],"output":{"name":"usize"}}],[11,"fmt","glium::vertex::transform_feedback","",644,{"inputs":[{"name":"transformfeedbacksession"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",645,{"inputs":[{"name":"transformfeedbacksessioncreationerror"}],"output":{"name":"transformfeedbacksessioncreationerror"}}],[11,"fmt","","",645,{"inputs":[{"name":"transformfeedbacksessioncreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new transform feedback session.",644,{"inputs":[{"name":"transformfeedbacksession"},{"name":"f"},{"name":"program"},{"name":"bufferview"}],"output":{"name":"result"}}],[11,"bind","","",644,null],[11,"unbind","","",644,null],[11,"ensure_buffer_out_of_transform_feedback","","",644,null],[11,"drop","","",644,null],[11,"clone","glium::vertex","",646,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",646,{"inputs":[{"name":"verticessource"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",647,{"inputs":[{"name":"emptyvertexattributes"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",648,{"inputs":[{"name":"emptyinstanceattributes"}],"output":{"name":"verticessource"}}],[11,"into_vertices_source","","",649,{"inputs":[{"name":"perinstance"}],"output":{"name":"verticessource"}}],[6,"Iterator","lux::graphics","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[6,"Iterator","","",null,null],[11,"clone","glium::texture::any","",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureanymipmap"}}],[11,"eq","","",651,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"ne","","",651,{"inputs":[{"name":"dimensions"},{"name":"dimensions"}],"output":{"name":"bool"}}],[11,"fmt","","",651,{"inputs":[{"name":"dimensions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",651,{"inputs":[{"name":"dimensions"}],"output":{"name":"dimensions"}}],[11,"get_texture","","Returns the texture.",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"textureany"}}],[11,"get_level","","Returns the level of the texture.",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer of the texture.",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"u32"}}],[11,"read","","",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"pixelbuffer"}}],[11,"upload_texture","","",650,null],[11,"download_compressed_data","","",650,{"inputs":[{"name":"textureanymipmap"}],"output":{"name":"option"}}],[11,"get_width","","Returns the width of the texture.",652,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the height of the texture.",652,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_depth","","Returns the depth of the texture.",652,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_array_size","","Returns the array size of the texture.",652,{"inputs":[{"name":"textureany"}],"output":{"name":"option"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",652,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"get_texture_type","","Returns the type of the texture (1D, 2D, 3D, etc.).",652,{"inputs":[{"name":"textureany"}],"output":{"name":"dimensions"}}],[11,"get_internal_format","","Determines the internal format of this texture.",652,{"inputs":[{"name":"textureany"}],"output":{"name":"result"}}],[11,"mipmap","","Returns a structure that represents a specific mipmap of the texture.",652,{"inputs":[{"name":"textureany"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_context","","",652,{"inputs":[{"name":"textureany"}],"output":{"name":"rc"}}],[11,"get_bind_point","","",652,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"bind_to_current","","",652,{"inputs":[{"name":"textureany"},{"name":"commandcontext"}],"output":{"name":"u32"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture::any","",652,{"inputs":[{"name":"textureany"}],"output":{"name":"u32"}}],[11,"fmt","","",652,{"inputs":[{"name":"textureany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",652,null],[11,"new","glium::texture::bindless","Takes ownership of the given texture and makes it resident.",653,{"inputs":[{"name":"residenttexture"},{"name":"textureany"}],"output":{"name":"result"}}],[11,"into_inner","","Unwraps the texture and restores it.",653,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture::bindless","",653,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"deref_mut","","",653,{"inputs":[{"name":"residenttexture"}],"output":{"name":"textureany"}}],[11,"drop","","",653,null],[11,"clone","","",654,{"inputs":[{"name":"texturehandle"}],"output":{"name":"texturehandle"}}],[11,"new","","Builds a new handle.",654,{"inputs":[{"name":"texturehandle"},{"name":"residenttexture"},{"name":"samplerbehavior"}],"output":{"name":"texturehandle"}}],[11,"set","","Sets the value to the given texture.",654,null],[11,"as_uniform_value","","",654,{"inputs":[{"name":"texturehandle"}],"output":{"name":"uniformvalue"}}],[11,"matches","","",654,{"inputs":[{"name":"texturehandle"},{"name":"blocklayout"},{"name":"usize"}],"output":{"name":"result"}}],[11,"build_layout","","",654,{"inputs":[{"name":"texturehandle"},{"name":"usize"}],"output":{"name":"blocklayout"}}],[11,"clone","","",655,{"inputs":[{"name":"bindlesstexturesnotsupportederror"}],"output":{"name":"bindlesstexturesnotsupportederror"}}],[11,"fmt","","",655,{"inputs":[{"name":"bindlesstexturesnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","glium::texture::get_format","",656,{"inputs":[{"name":"getformaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",656,{"inputs":[{"name":"getformaterror"}],"output":{"name":"getformaterror"}}],[11,"eq","","",657,{"inputs":[{"name":"internalformat"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"ne","","",657,{"inputs":[{"name":"internalformat"},{"name":"internalformat"}],"output":{"name":"bool"}}],[11,"fmt","","",657,{"inputs":[{"name":"internalformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",657,{"inputs":[{"name":"internalformat"}],"output":{"name":"internalformat"}}],[11,"get_total_bits","","Returns the total number of bits of this format.",657,{"inputs":[{"name":"internalformat"}],"output":{"name":"usize"}}],[11,"eq","","",658,{"inputs":[{"name":"internalformattype"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[11,"ne","","",658,{"inputs":[{"name":"internalformattype"},{"name":"internalformattype"}],"output":{"name":"bool"}}],[11,"fmt","","",658,{"inputs":[{"name":"internalformattype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",658,{"inputs":[{"name":"internalformattype"}],"output":{"name":"internalformattype"}}],[11,"get_format","image::color","",111,{"inputs":[{"name":"rgb"}],"output":{"name":"clientformat"}}],[11,"get_format","","",113,{"inputs":[{"name":"rgba"}],"output":{"name":"clientformat"}}],[11,"get_format","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"clientformat"}}],[11,"get_format","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"clientformat"}}],[11,"get_format","","",112,{"inputs":[{"name":"luma"}],"output":{"name":"clientformat"}}],[11,"get_format","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"clientformat"}}],[11,"get_format","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"clientformat"}}],[11,"get_format","","",114,{"inputs":[{"name":"lumaa"}],"output":{"name":"clientformat"}}],[11,"get_width","glium::texture","",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",659,{"inputs":[{"name":"texture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",659,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",659,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",659,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",659,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",659,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",659,{"inputs":[{"name":"texture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",659,{"inputs":[{"name":"texture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",659,{"inputs":[{"name":"texture1d"}],"output":{"name":"texture1dmipmap"}}],[11,"clone","","",660,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",660,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"texture1d"}}],[11,"get_level","","Returns the texture level.",660,{"inputs":[{"name":"texture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",661,{"inputs":[{"name":"compressedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",661,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",661,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",661,null],[11,"with_format","","Builds a new texture with a specific format.",661,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",661,{"inputs":[{"name":"compressedtexture1d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",661,{"inputs":[{"name":"compressedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",661,{"inputs":[{"name":"compressedtexture1d"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"clone","","",662,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1dmipmap"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",662,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",662,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"compressedtexture1d"}}],[11,"get_level","","Returns the texture level.",662,{"inputs":[{"name":"compressedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",663,{"inputs":[{"name":"srgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",663,{"inputs":[{"name":"srgbtexture1d"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"clone","","",664,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",664,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"srgbtexture1d"}}],[11,"get_level","","Returns the texture level.",664,{"inputs":[{"name":"srgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",665,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",665,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",665,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",665,null],[11,"with_format","","Builds a new texture with a specific format.",665,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",665,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",665,{"inputs":[{"name":"compressedsrgbtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",665,{"inputs":[{"name":"compressedsrgbtexture1d"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"clone","","",666,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1dmipmap"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",666,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",666,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"compressedsrgbtexture1d"}}],[11,"get_level","","Returns the texture level.",666,{"inputs":[{"name":"compressedsrgbtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",667,{"inputs":[{"name":"integraltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",667,{"inputs":[{"name":"integraltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",667,{"inputs":[{"name":"integraltexture1d"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"clone","","",668,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",668,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"integraltexture1d"}}],[11,"get_level","","Returns the texture level.",668,{"inputs":[{"name":"integraltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",669,{"inputs":[{"name":"unsignedtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",669,{"inputs":[{"name":"unsignedtexture1d"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"clone","","",670,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",670,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"unsignedtexture1d"}}],[11,"get_level","","Returns the texture level.",670,{"inputs":[{"name":"unsignedtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",671,{"inputs":[{"name":"depthtexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",671,{"inputs":[{"name":"depthtexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",671,{"inputs":[{"name":"depthtexture1d"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"clone","","",672,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",672,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"depthtexture1d"}}],[11,"get_level","","Returns the texture level.",672,{"inputs":[{"name":"depthtexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",673,{"inputs":[{"name":"stenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",673,{"inputs":[{"name":"stenciltexture1d"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"clone","","",674,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",674,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"stenciltexture1d"}}],[11,"get_level","","Returns the texture level.",674,{"inputs":[{"name":"stenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"get_height","","",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"option"}}],[11,"get_depth","","",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"option"}}],[11,"get_array_size","","",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"fmt","","",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",675,{"inputs":[{"name":"depthstenciltexture1d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",675,{"inputs":[{"name":"depthstenciltexture1d"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"clone","","",676,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",676,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"depthstenciltexture1d"}}],[11,"get_level","","Returns the texture level.",676,{"inputs":[{"name":"depthstenciltexture1dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",677,{"inputs":[{"name":"texture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"sampler"}}],[11,"to_color_attachment","","",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"colorattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",677,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",677,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",677,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",677,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",677,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",677,{"inputs":[{"name":"texture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"as_surface","","Starts drawing on the texture.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"pixelbuffer"}}],[11,"write","","Uploads some data in the texture.",677,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",677,{"inputs":[{"name":"texture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",677,{"inputs":[{"name":"texture2d"}],"output":{"name":"texture2dmipmap"}}],[11,"clone","","",678,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2dmipmap"}}],[11,"write","","Uploads some data in the texture level.",678,null],[11,"get_texture","","Returns the corresponding texture.",678,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"texture2d"}}],[11,"get_level","","Returns the texture level.",678,{"inputs":[{"name":"texture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",679,{"inputs":[{"name":"compressedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",679,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",679,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",679,null],[11,"with_format","","Builds a new texture with a specific format.",679,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",679,{"inputs":[{"name":"compressedtexture2d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",679,null],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",679,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",679,{"inputs":[{"name":"compressedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",679,{"inputs":[{"name":"compressedtexture2d"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"clone","","",680,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2dmipmap"}}],[11,"write","","Uploads some data in the texture level.",680,null],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",680,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",680,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",680,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"compressedtexture2d"}}],[11,"get_level","","Returns the texture level.",680,{"inputs":[{"name":"compressedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"sampler"}}],[11,"to_color_attachment","","",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"colorattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",681,{"inputs":[{"name":"srgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",681,{"inputs":[{"name":"srgbtexture2d"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"clone","","",682,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",682,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"srgbtexture2d"}}],[11,"get_level","","Returns the texture level.",682,{"inputs":[{"name":"srgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",683,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",683,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",683,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",683,null],[11,"with_format","","Builds a new texture with a specific format.",683,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",683,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"u32"}}],[11,"read","","Reads the content of the texture to RAM.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"t"}}],[11,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"pixelbuffer"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"option"}}],[11,"write","","Uploads some data in the texture.",683,null],[11,"write_compressed_data","","Uploads some data in the texture by using a compressed format as input.",683,null],[11,"resident","","Turns the texture into a `ResidentTexture`.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",683,{"inputs":[{"name":"compressedsrgbtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",683,{"inputs":[{"name":"compressedsrgbtexture2d"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"clone","","",684,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2dmipmap"}}],[11,"write","","Uploads some data in the texture level.",684,null],[11,"write_compressed_data","","Uploads some data in the texture level by using a compressed format as input.",684,null],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",684,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",684,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"compressedsrgbtexture2d"}}],[11,"get_level","","Returns the texture level.",684,{"inputs":[{"name":"compressedsrgbtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",685,{"inputs":[{"name":"integraltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",685,{"inputs":[{"name":"integraltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",685,{"inputs":[{"name":"integraltexture2d"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"clone","","",686,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",686,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"integraltexture2d"}}],[11,"get_level","","Returns the texture level.",686,{"inputs":[{"name":"integraltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",687,{"inputs":[{"name":"unsignedtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",687,{"inputs":[{"name":"unsignedtexture2d"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"clone","","",688,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",688,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"unsignedtexture2d"}}],[11,"get_level","","Returns the texture level.",688,{"inputs":[{"name":"unsignedtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",689,{"inputs":[{"name":"depthtexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"sampler"}}],[11,"to_depth_attachment","","",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"depthattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",689,{"inputs":[{"name":"depthtexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",689,{"inputs":[{"name":"depthtexture2d"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"clone","","",690,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",690,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"depthtexture2d"}}],[11,"get_level","","Returns the texture level.",690,{"inputs":[{"name":"depthtexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"textureany"}}],[11,"to_stencil_attachment","","",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"stencilattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",691,{"inputs":[{"name":"stenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",691,{"inputs":[{"name":"stenciltexture2d"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"clone","","",692,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",692,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"stenciltexture2d"}}],[11,"get_level","","Returns the texture level.",692,{"inputs":[{"name":"stenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"get_height","","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"option"}}],[11,"get_depth","","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"option"}}],[11,"get_array_size","","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"fmt","","",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"textureany"}}],[11,"to_depth_stencil_attachment","","",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"depthstencilattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",693,{"inputs":[{"name":"depthstenciltexture2d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",693,{"inputs":[{"name":"depthstenciltexture2d"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"clone","","",694,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",694,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"depthstenciltexture2d"}}],[11,"get_level","","Returns the texture level.",694,{"inputs":[{"name":"depthstenciltexture2dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",695,{"inputs":[{"name":"texture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"sampler"}}],[11,"to_color_attachment","","",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"colorattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",695,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",695,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",695,{"inputs":[{"name":"texture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"as_surface","","Starts drawing on the texture.",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"simpleframebuffer"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",695,{"inputs":[{"name":"texture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",695,{"inputs":[{"name":"texture2dmultisample"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"clone","","",696,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",696,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"texture2dmultisample"}}],[11,"get_level","","Returns the texture level.",696,{"inputs":[{"name":"texture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",697,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",697,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",697,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",697,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",697,{"inputs":[{"name":"integraltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",697,{"inputs":[{"name":"integraltexture2dmultisample"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"clone","","",698,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",698,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"integraltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",698,{"inputs":[{"name":"integraltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",699,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"to_color_attachment","","",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"colorattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",699,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",699,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",699,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",699,{"inputs":[{"name":"srgbtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",699,{"inputs":[{"name":"srgbtexture2dmultisample"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"clone","","",700,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",700,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"srgbtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",700,{"inputs":[{"name":"srgbtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",701,{"inputs":[{"name":"unsignedtexture2dmultisample"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"clone","","",702,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",702,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"unsignedtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",702,{"inputs":[{"name":"unsignedtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",703,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"sampler"}}],[11,"to_depth_attachment","","",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"depthattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",703,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",703,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",703,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",703,{"inputs":[{"name":"depthtexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",703,{"inputs":[{"name":"depthtexture2dmultisample"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"clone","","",704,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",704,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"depthtexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",704,{"inputs":[{"name":"depthtexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",705,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"to_stencil_attachment","","",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"stencilattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",705,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",705,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",705,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",705,{"inputs":[{"name":"stenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",705,{"inputs":[{"name":"stenciltexture2dmultisample"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"clone","","",706,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",706,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"stenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",706,{"inputs":[{"name":"stenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"get_height","","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_depth","","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"option"}}],[11,"get_array_size","","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"fmt","","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"textureany"}}],[11,"to_depth_stencil_attachment","","",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"depthstencilattachment"}}],[11,"get_internal_format","","Determines the internal format of this texture.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",707,{"inputs":[{"name":"depthstenciltexture2dmultisample"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"clone","","",708,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisamplemipmap"}}],[11,"get_texture","","Returns the corresponding texture.",708,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"depthstenciltexture2dmultisample"}}],[11,"get_level","","Returns the texture level.",708,{"inputs":[{"name":"depthstenciltexture2dmultisamplemipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",709,{"inputs":[{"name":"texture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",709,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",709,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",709,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",709,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",709,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",709,{"inputs":[{"name":"texture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",709,{"inputs":[{"name":"texture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",709,{"inputs":[{"name":"texture3d"}],"output":{"name":"texture3dmipmap"}}],[11,"clone","","",710,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",710,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"texture3d"}}],[11,"get_level","","Returns the texture level.",710,{"inputs":[{"name":"texture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",711,{"inputs":[{"name":"compressedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",711,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",711,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",711,null],[11,"with_format","","Builds a new texture with a specific format.",711,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",711,{"inputs":[{"name":"compressedtexture3d"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",711,{"inputs":[{"name":"compressedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",711,{"inputs":[{"name":"compressedtexture3d"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"clone","","",712,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3dmipmap"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",712,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",712,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"compressedtexture3d"}}],[11,"get_level","","Returns the texture level.",712,{"inputs":[{"name":"compressedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",713,{"inputs":[{"name":"srgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",713,{"inputs":[{"name":"srgbtexture3d"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"clone","","",714,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",714,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"srgbtexture3d"}}],[11,"get_level","","Returns the texture level.",714,{"inputs":[{"name":"srgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",715,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",715,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",715,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",715,null],[11,"with_format","","Builds a new texture with a specific format.",715,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"t"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",715,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"u32"}}],[11,"read_compressed_data","","Reads the content of the texture to RAM without decompressing it before.",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"option"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",715,{"inputs":[{"name":"compressedsrgbtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",715,{"inputs":[{"name":"compressedsrgbtexture3d"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"clone","","",716,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3dmipmap"}}],[11,"read_compressed_data","","Reads the content of the texture level to RAM without decompressing it before.",716,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"option"}}],[11,"get_texture","","Returns the corresponding texture.",716,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"compressedsrgbtexture3d"}}],[11,"get_level","","Returns the texture level.",716,{"inputs":[{"name":"compressedsrgbtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",717,{"inputs":[{"name":"integraltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",717,{"inputs":[{"name":"integraltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",717,{"inputs":[{"name":"integraltexture3d"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"clone","","",718,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",718,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"integraltexture3d"}}],[11,"get_level","","Returns the texture level.",718,{"inputs":[{"name":"integraltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"t"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",719,{"inputs":[{"name":"unsignedtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",719,{"inputs":[{"name":"unsignedtexture3d"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"clone","","",720,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",720,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"unsignedtexture3d"}}],[11,"get_level","","Returns the texture level.",720,{"inputs":[{"name":"unsignedtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",721,{"inputs":[{"name":"depthtexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"t"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",721,{"inputs":[{"name":"depthtexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",721,{"inputs":[{"name":"depthtexture3d"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"clone","","",722,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",722,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"depthtexture3d"}}],[11,"get_level","","Returns the texture level.",722,{"inputs":[{"name":"depthtexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",723,{"inputs":[{"name":"stenciltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",723,{"inputs":[{"name":"stenciltexture3d"}],"output":{"name":"stenciltexture3dmipmap"}}],[11,"clone","","",724,{"inputs":[{"name":"stenciltexture3dmipmap"}],"output":{"name":"stenciltexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",724,{"inputs":[{"name":"stenciltexture3dmipmap"}],"output":{"name":"stenciltexture3d"}}],[11,"get_level","","Returns the texture level.",724,{"inputs":[{"name":"stenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"get_height","","",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"option"}}],[11,"get_depth","","",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"option"}}],[11,"get_array_size","","",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"fmt","","",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"t"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",725,{"inputs":[{"name":"depthstenciltexture3d"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",725,{"inputs":[{"name":"depthstenciltexture3d"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"clone","","",726,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3dmipmap"}}],[11,"get_texture","","Returns the corresponding texture.",726,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"depthstenciltexture3d"}}],[11,"get_level","","Returns the texture level.",726,{"inputs":[{"name":"depthstenciltexture3dmipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",727,{"inputs":[{"name":"texture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",727,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",727,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",727,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",727,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",727,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",727,{"inputs":[{"name":"texture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",727,{"inputs":[{"name":"texture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",727,{"inputs":[{"name":"texture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",728,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",728,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darray"}}],[11,"get_layer","","Returns the layer index.",728,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",728,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",728,{"inputs":[{"name":"texture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",728,{"inputs":[{"name":"texture1darraylayer"}],"output":{"name":"texture1darraymipmap"}}],[11,"clone","","",729,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",729,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"texture1darray"}}],[11,"get_level","","Returns the texture level.",729,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",729,{"inputs":[{"name":"texture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",730,{"inputs":[{"name":"compressedtexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",730,{"inputs":[{"name":"compressedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",731,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",731,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",731,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",731,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",731,{"inputs":[{"name":"compressedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",731,{"inputs":[{"name":"compressedtexture1darraylayer"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"clone","","",732,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",732,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"compressedtexture1darray"}}],[11,"get_level","","Returns the texture level.",732,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",732,{"inputs":[{"name":"compressedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",733,{"inputs":[{"name":"srgbtexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",733,{"inputs":[{"name":"srgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",734,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",734,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",734,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",734,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",734,{"inputs":[{"name":"srgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",734,{"inputs":[{"name":"srgbtexture1darraylayer"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"clone","","",735,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",735,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"srgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",735,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",735,{"inputs":[{"name":"srgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",736,{"inputs":[{"name":"compressedsrgbtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",737,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",737,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_layer","","Returns the layer index.",737,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",737,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",737,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",737,{"inputs":[{"name":"compressedsrgbtexture1darraylayer"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"clone","","",738,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",738,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"compressedsrgbtexture1darray"}}],[11,"get_level","","Returns the texture level.",738,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",738,{"inputs":[{"name":"compressedsrgbtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",739,{"inputs":[{"name":"integraltexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",739,{"inputs":[{"name":"integraltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darray"}}],[11,"get_layer","","Returns the layer index.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",740,{"inputs":[{"name":"integraltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",740,{"inputs":[{"name":"integraltexture1darraylayer"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"clone","","",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"integraltexture1darray"}}],[11,"get_level","","Returns the texture level.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",741,{"inputs":[{"name":"integraltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",742,{"inputs":[{"name":"unsignedtexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",742,{"inputs":[{"name":"unsignedtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",743,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",743,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_layer","","Returns the layer index.",743,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",743,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",743,{"inputs":[{"name":"unsignedtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",743,{"inputs":[{"name":"unsignedtexture1darraylayer"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"clone","","",744,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",744,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"unsignedtexture1darray"}}],[11,"get_level","","Returns the texture level.",744,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",744,{"inputs":[{"name":"unsignedtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",745,{"inputs":[{"name":"depthtexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",745,{"inputs":[{"name":"depthtexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",746,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",746,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darray"}}],[11,"get_layer","","Returns the layer index.",746,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",746,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",746,{"inputs":[{"name":"depthtexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",746,{"inputs":[{"name":"depthtexture1darraylayer"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"clone","","",747,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",747,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"depthtexture1darray"}}],[11,"get_level","","Returns the texture level.",747,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",747,{"inputs":[{"name":"depthtexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",748,{"inputs":[{"name":"stenciltexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",748,{"inputs":[{"name":"stenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",749,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",749,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",749,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",749,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",749,{"inputs":[{"name":"stenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",749,{"inputs":[{"name":"stenciltexture1darraylayer"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"clone","","",750,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",750,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"stenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",750,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",750,{"inputs":[{"name":"stenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"get_height","","",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_depth","","",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"fmt","","",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",751,{"inputs":[{"name":"depthstenciltexture1darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",751,{"inputs":[{"name":"depthstenciltexture1darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",752,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",752,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_layer","","Returns the layer index.",752,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",752,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",752,{"inputs":[{"name":"depthstenciltexture1darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",752,{"inputs":[{"name":"depthstenciltexture1darraylayer"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"clone","","",753,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",753,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"depthstenciltexture1darray"}}],[11,"get_level","","Returns the texture level.",753,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",753,{"inputs":[{"name":"depthstenciltexture1darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",754,{"inputs":[{"name":"texture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",754,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",754,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",754,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",754,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",754,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",754,{"inputs":[{"name":"texture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",754,{"inputs":[{"name":"texture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",754,{"inputs":[{"name":"texture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",755,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",755,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darray"}}],[11,"get_layer","","Returns the layer index.",755,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",755,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",755,{"inputs":[{"name":"texture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",755,{"inputs":[{"name":"texture2darraylayer"}],"output":{"name":"texture2darraymipmap"}}],[11,"clone","","",756,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",756,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"texture2darray"}}],[11,"get_level","","Returns the texture level.",756,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",756,{"inputs":[{"name":"texture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"f"},{"name":"compressedformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",757,{"inputs":[{"name":"compressedtexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",757,{"inputs":[{"name":"compressedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",758,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",758,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",758,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",758,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",758,{"inputs":[{"name":"compressedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",758,{"inputs":[{"name":"compressedtexture2darraylayer"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"clone","","",759,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",759,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"compressedtexture2darray"}}],[11,"get_level","","Returns the texture level.",759,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",759,{"inputs":[{"name":"compressedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"srgbformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",760,{"inputs":[{"name":"srgbtexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",760,{"inputs":[{"name":"srgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",761,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",761,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",761,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",761,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",761,{"inputs":[{"name":"srgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",761,{"inputs":[{"name":"srgbtexture2darraylayer"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"clone","","",762,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",762,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"srgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",762,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",762,{"inputs":[{"name":"srgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_compressed_data","","Builds a new texture with a specific format. The input data must also be of the\nspecified compressed format.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"f"},{"name":"compressedsrgbformat"},{"name":"compressedmipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",763,{"inputs":[{"name":"compressedsrgbtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",764,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",764,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_layer","","Returns the layer index.",764,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",764,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",764,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",764,{"inputs":[{"name":"compressedsrgbtexture2darraylayer"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"clone","","",765,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",765,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"compressedsrgbtexture2darray"}}],[11,"get_level","","Returns the texture level.",765,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",765,{"inputs":[{"name":"compressedsrgbtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",766,{"inputs":[{"name":"integraltexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",766,{"inputs":[{"name":"integraltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",767,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",767,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darray"}}],[11,"get_layer","","Returns the layer index.",767,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",767,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",767,{"inputs":[{"name":"integraltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",767,{"inputs":[{"name":"integraltexture2darraylayer"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"clone","","",768,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",768,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"integraltexture2darray"}}],[11,"get_level","","Returns the texture level.",768,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",768,{"inputs":[{"name":"integraltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",769,{"inputs":[{"name":"unsignedtexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",769,{"inputs":[{"name":"unsignedtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",770,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",770,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_layer","","Returns the layer index.",770,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",770,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",770,{"inputs":[{"name":"unsignedtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",770,{"inputs":[{"name":"unsignedtexture2darraylayer"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"clone","","",771,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",771,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"unsignedtexture2darray"}}],[11,"get_level","","Returns the texture level.",771,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",771,{"inputs":[{"name":"unsignedtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",772,{"inputs":[{"name":"depthtexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",772,{"inputs":[{"name":"depthtexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",773,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",773,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darray"}}],[11,"get_layer","","Returns the layer index.",773,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",773,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",773,{"inputs":[{"name":"depthtexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",773,{"inputs":[{"name":"depthtexture2darraylayer"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"clone","","",774,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",774,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"depthtexture2darray"}}],[11,"get_level","","Returns the texture level.",774,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",774,{"inputs":[{"name":"depthtexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"stencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",775,{"inputs":[{"name":"stenciltexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",775,{"inputs":[{"name":"stenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",776,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",776,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",776,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",776,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",776,{"inputs":[{"name":"stenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",776,{"inputs":[{"name":"stenciltexture2darraylayer"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"clone","","",777,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",777,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"stenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",777,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",777,{"inputs":[{"name":"stenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"get_height","","",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_depth","","",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"option"}}],[11,"get_array_size","","",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"fmt","","",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"result"}}],[11,"new","","Builds a new texture by uploading data.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"}],"output":{"name":"result"}}],[11,"with_mipmaps","","Builds a new texture by uploading data.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"with_format","","Builds a new texture with a specific format.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"vec"},{"name":"depthstencilformat"},{"name":"mipmapsoption"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",778,{"inputs":[{"name":"depthstenciltexture2darray"}],"output":{"name":"result"}}],[11,"layer","","Access a single layer of this texture.",778,{"inputs":[{"name":"depthstenciltexture2darray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",779,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraylayer"}}],[11,"get_texture","","Returns the corresponding texture.",779,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_layer","","Returns the layer index.",779,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",779,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"u32"}}],[11,"mipmap","","Access a single mipmap level of this layer.",779,{"inputs":[{"name":"depthstenciltexture2darraylayer"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this layer.",779,{"inputs":[{"name":"depthstenciltexture2darraylayer"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"clone","","",780,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",780,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"depthstenciltexture2darray"}}],[11,"get_level","","Returns the texture level.",780,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_layer","","Returns the layer index.",780,{"inputs":[{"name":"depthstenciltexture2darraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",781,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",781,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",781,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedfloatformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",781,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",781,{"inputs":[{"name":"texture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",781,{"inputs":[{"name":"texture2dmultisamplearray"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"clone","","",782,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",782,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"texture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",782,{"inputs":[{"name":"texture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"srgbformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",783,{"inputs":[{"name":"srgbtexture2dmultisamplearray"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"clone","","",784,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",784,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"srgbtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",784,{"inputs":[{"name":"srgbtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"uncompressedintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",785,{"inputs":[{"name":"integraltexture2dmultisamplearray"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"clone","","",786,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",786,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"integraltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",786,{"inputs":[{"name":"integraltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"uncompresseduintformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",787,{"inputs":[{"name":"unsignedtexture2dmultisamplearray"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"clone","","",788,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",788,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"unsignedtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",788,{"inputs":[{"name":"unsignedtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"as_uniform_value","glium::uniforms::sampler","",631,{"inputs":[{"name":"sampler"}],"output":{"name":"uniformvalue"}}],[11,"sampled","glium::texture","Builds a `Sampler` marker object that allows you to indicate\nhow the texture should be sampled from inside a shader.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"sampler"}}],[11,"get_internal_format","","Determines the internal format of this texture.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"depthformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",789,{"inputs":[{"name":"depthtexture2dmultisamplearray"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"clone","","",790,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",790,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"depthtexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",790,{"inputs":[{"name":"depthtexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"stencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",791,{"inputs":[{"name":"stenciltexture2dmultisamplearray"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",792,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",792,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"stenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",792,{"inputs":[{"name":"stenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"get_width","","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"get_height","","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_depth","","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[11,"get_array_size","","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"option"}}],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::texture","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"fmt","","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Target","lux::graphics","",null,null],[11,"deref","glium::texture","",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"textureany"}}],[11,"get_internal_format","","Determines the internal format of this texture.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"empty","","Creates an empty texture.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_format","","Creates an empty texture with a specific format.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"depthstencilformat"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"empty_with_mipmaps","","Creates an empty texture. Specifies whether is has mipmaps.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"f"},{"name":"mipmapsoption"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get_mipmap_levels","","Returns the number of mipmap levels of the texture.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"u32"}}],[11,"resident","","Turns the texture into a `ResidentTexture`.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"result"}}],[11,"mipmap","","Access a single mipmap level of this texture.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"},{"name":"u32"}],"output":{"name":"option"}}],[11,"main_level","","Access the main mipmap level of this texture.",793,{"inputs":[{"name":"depthstenciltexture2dmultisamplearray"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"clone","","",794,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearraymipmap"}}],[11,"get_texture","","Returns the corresponding texture.",794,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"depthstenciltexture2dmultisamplearray"}}],[11,"get_level","","Returns the texture level.",794,{"inputs":[{"name":"depthstenciltexture2dmultisamplearraymipmap"}],"output":{"name":"u32"}}],[11,"eq","","",795,{"inputs":[{"name":"mipmapsoption"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",795,{"inputs":[{"name":"mipmapsoption"},{"name":"mipmapsoption"}],"output":{"name":"bool"}}],[11,"clone","","",795,{"inputs":[{"name":"mipmapsoption"}],"output":{"name":"mipmapsoption"}}],[11,"fmt","","",795,{"inputs":[{"name":"mipmapsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",796,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"ne","","",796,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"compressedmipmapsoption"}],"output":{"name":"bool"}}],[11,"clone","","",796,{"inputs":[{"name":"compressedmipmapsoption"}],"output":{"name":"compressedmipmapsoption"}}],[11,"fmt","","",796,{"inputs":[{"name":"compressedmipmapsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","collections::vec","",219,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage1d"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","glium::texture","",797,{"inputs":[{"name":"rawimage1d"}],"output":{"name":"rawimage1d"}}],[11,"from_raw","collections::vec","",219,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"}],"output":{"name":"vec"}}],[6,"Data","lux::graphics","",null,null],[11,"from_vec_raw1d","glium::texture","Transforms a Vec<RawImage1d> into a RawImage2d",798,{"inputs":[{"name":"rawimage2d"},{"name":"vec"}],"output":{"name":"rawimage2d"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","collections::vec","",219,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage2d"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","glium::texture","",798,{"inputs":[{"name":"rawimage2d"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","collections::vec","",219,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vec"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","image::buffer","",119,{"inputs":[{"name":"imagebuffer"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","","",119,{"inputs":[{"name":"imagebuffer"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"imagebuffer"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","image::dynimage","",44,{"inputs":[{"name":"dynamicimage"}],"output":{"name":"rawimage2d"}}],[11,"from_raw","","",44,{"inputs":[{"name":"dynamicimage"},{"name":"cow"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"from_vec_raw2d","glium::texture","Transforms a Vec<RawImage2d> into a RawImage3d",799,{"inputs":[{"name":"rawimage3d"},{"name":"vec"}],"output":{"name":"rawimage3d"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","collections::vec","",219,{"inputs":[{"name":"vec"}],"output":{"name":"rawimage3d"}}],[6,"Data","lux::graphics","",null,null],[11,"into_raw","glium::texture","",799,{"inputs":[{"name":"rawimage3d"}],"output":{"name":"rawimage3d"}}],[11,"from_raw","collections::vec","",219,{"inputs":[{"name":"vec"},{"name":"cow"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vec"}}],[11,"eq","glium::texture","",800,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",800,{"inputs":[{"name":"texturecreationerror"},{"name":"texturecreationerror"}],"output":{"name":"bool"}}],[11,"clone","","",800,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"texturecreationerror"}}],[11,"fmt","","",800,{"inputs":[{"name":"texturecreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",800,{"inputs":[{"name":"texturecreationerror"},{"name":"formatnotsupportederror"}],"output":{"name":"texturecreationerror"}}],[11,"clone","glium::context::extensions","",801,{"inputs":[{"name":"extensionslist"}],"output":{"name":"extensionslist"}}],[11,"fmt","","",801,{"inputs":[{"name":"extensionslist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","glium::context::state","",802,{"inputs":[{"name":"textureunitstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",802,{"inputs":[{"name":"textureunitstate"}],"output":{"name":"textureunitstate"}}],[11,"fmt","","",803,{"inputs":[{"name":"indexedbufferstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",803,{"inputs":[{"name":"indexedbufferstate"}],"output":{"name":"indexedbufferstate"}}],[11,"default","","",804,{"inputs":[{"name":"glstate"}],"output":{"name":"glstate"}}],[11,"default","","",802,{"inputs":[{"name":"textureunitstate"}],"output":{"name":"textureunitstate"}}],[11,"default","","",803,{"inputs":[{"name":"indexedbufferstate"}],"output":{"name":"indexedbufferstate"}}],[11,"set_report_debug_output_errors","glium::context","",129,null],[11,"make_current","","",129,{"inputs":[{"name":"context"}],"output":{"name":"commandcontext"}}],[11,"capabilities","","",129,{"inputs":[{"name":"context"}],"output":{"name":"capabilities"}}],[11,"get_extensions","","",129,{"inputs":[{"name":"context"}],"output":{"name":"extensionslist"}}],[11,"get_version","","",129,{"inputs":[{"name":"context"}],"output":{"name":"version"}}],[11,"get_extensions","","",129,{"inputs":[{"name":"context"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",129,{"inputs":[{"name":"context"}],"output":{"name":"capabilities"}}],[11,"drop","","",129,null],[11,"get_version","","",805,{"inputs":[{"name":"commandcontext"}],"output":{"name":"version"}}],[11,"get_extensions","","",805,{"inputs":[{"name":"commandcontext"}],"output":{"name":"extensionslist"}}],[11,"get_capabilities","","",805,{"inputs":[{"name":"commandcontext"}],"output":{"name":"capabilities"}}],[11,"clone","glium::fbo","",806,{"inputs":[{"name":"attachment"}],"output":{"name":"attachment"}}],[11,"clone","","",807,{"inputs":[{"name":"framebufferdepthstencilattachments"}],"output":{"name":"framebufferdepthstencilattachments"}}],[11,"clone","","",808,{"inputs":[{"name":"framebufferattachments"}],"output":{"name":"framebufferattachments"}}],[11,"validate","","After building a `FramebufferAttachments` struct, you must use this function\nto \"compile\" the attachments and make sure that they are valid together.",808,{"inputs":[{"name":"framebufferattachments"}],"output":{"name":"result"}}],[11,"clone","","",809,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"validatedattachments"}}],[11,"get_dimensions","","Returns the dimensions that the framebuffer will have if you use these attachments.",809,null],[11,"get_depth_buffer_bits","","Returns the number of bits of precision of the depth buffer, or `None` if there is no\ndepth buffer. Also works for depth-stencil buffers.",809,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","Returns the number of bits of precision of the stencil buffer, or `None` if there is no\nstencil buffer. Also works for depth-stencil buffers.",809,{"inputs":[{"name":"validatedattachments"}],"output":{"name":"option"}}],[11,"eq","","",810,{"inputs":[{"name":"validationerror"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"ne","","",810,{"inputs":[{"name":"validationerror"},{"name":"validationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",810,{"inputs":[{"name":"validationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",810,{"inputs":[{"name":"validationerror"}],"output":{"name":"validationerror"}}],[11,"eq","","",811,{"inputs":[{"name":"rawattachments"},{"name":"rawattachments"}],"output":{"name":"bool"}}],[11,"ne","","",811,{"inputs":[{"name":"rawattachments"},{"name":"rawattachments"}],"output":{"name":"bool"}}],[11,"clone","","",811,{"inputs":[{"name":"rawattachments"}],"output":{"name":"rawattachments"}}],[11,"hash","","",811,null],[11,"eq","","",812,{"inputs":[{"name":"rawattachment"},{"name":"rawattachment"}],"output":{"name":"bool"}}],[11,"ne","","",812,{"inputs":[{"name":"rawattachment"},{"name":"rawattachment"}],"output":{"name":"bool"}}],[11,"clone","","",812,{"inputs":[{"name":"rawattachment"}],"output":{"name":"rawattachment"}}],[11,"hash","","",812,null],[11,"new","","Initializes the container.",813,{"inputs":[{"name":"framebufferscontainer"}],"output":{"name":"framebufferscontainer"}}],[11,"purge_all","","Destroys all framebuffer objects. This is used when using a new context for example.",813,null],[11,"purge_texture","","Destroys all framebuffer objects that contain a precise texture.",813,null],[11,"purge_renderbuffer","","Destroys all framebuffer objects that contain a precise renderbuffer.",813,null],[11,"cleanup","","Destroys all framebuffer objects.",813,null],[11,"get_framebuffer_for_drawing","","",813,{"inputs":[{"name":"framebufferscontainer"},{"name":"commandcontext"},{"name":"option"}],"output":{"name":"u32"}}],[11,"bind_default_framebuffer_for_reading","","Binds the default framebuffer to `GL_READ_FRAMEBUFFER` or `GL_FRAMEBUFFER` so that it\nbecomes the target of `glReadPixels`, `glCopyTexImage2D`, etc.",813,null],[11,"bind_framebuffer_for_reading","","Binds a framebuffer to `GL_READ_FRAMEBUFFER` or `GL_FRAMEBUFFER` so that it becomes the\ntarget of `glReadPixels`, `glCopyTexImage2D`, etc.",813,null],[11,"drop","","",813,null],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::fbo","",814,{"inputs":[{"name":"framebufferobject"}],"output":{"name":"u32"}}],[11,"fmt","glium::image_format","",815,{"inputs":[{"name":"formatnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",815,{"inputs":[{"name":"formatnotsupportederror"}],"output":{"name":"formatnotsupportederror"}}],[11,"fmt","","",816,{"inputs":[{"name":"textureformatrequest"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",816,{"inputs":[{"name":"textureformatrequest"}],"output":{"name":"textureformatrequest"}}],[11,"eq","","",817,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"ne","","",817,{"inputs":[{"name":"clientformat"},{"name":"clientformat"}],"output":{"name":"bool"}}],[11,"clone","","",817,{"inputs":[{"name":"clientformat"}],"output":{"name":"clientformat"}}],[11,"fmt","","",817,{"inputs":[{"name":"clientformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_size","","Returns the size in bytes of a pixel of this type.",817,{"inputs":[{"name":"clientformat"}],"output":{"name":"usize"}}],[11,"get_num_components","","Returns the number of components of this client format.",817,{"inputs":[{"name":"clientformat"}],"output":{"name":"u8"}}],[11,"eq","","",818,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"ne","","",818,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"uncompressedfloatformat"}],"output":{"name":"bool"}}],[11,"clone","","",818,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"uncompressedfloatformat"}}],[11,"fmt","","",818,{"inputs":[{"name":"uncompressedfloatformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",818,{"inputs":[{"name":"uncompressedfloatformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",819,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",819,{"inputs":[{"name":"srgbformat"},{"name":"srgbformat"}],"output":{"name":"bool"}}],[11,"clone","","",819,{"inputs":[{"name":"srgbformat"}],"output":{"name":"srgbformat"}}],[11,"fmt","","",819,{"inputs":[{"name":"srgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",819,{"inputs":[{"name":"srgbformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",820,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"ne","","",820,{"inputs":[{"name":"uncompressedintformat"},{"name":"uncompressedintformat"}],"output":{"name":"bool"}}],[11,"clone","","",820,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"uncompressedintformat"}}],[11,"fmt","","",820,{"inputs":[{"name":"uncompressedintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",820,{"inputs":[{"name":"uncompressedintformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",821,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"ne","","",821,{"inputs":[{"name":"uncompresseduintformat"},{"name":"uncompresseduintformat"}],"output":{"name":"bool"}}],[11,"clone","","",821,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"uncompresseduintformat"}}],[11,"fmt","","",821,{"inputs":[{"name":"uncompresseduintformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",821,{"inputs":[{"name":"uncompresseduintformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",822,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"ne","","",822,{"inputs":[{"name":"compressedformat"},{"name":"compressedformat"}],"output":{"name":"bool"}}],[11,"clone","","",822,{"inputs":[{"name":"compressedformat"}],"output":{"name":"compressedformat"}}],[11,"fmt","","",822,{"inputs":[{"name":"compressedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",823,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"ne","","",823,{"inputs":[{"name":"compressedsrgbformat"},{"name":"compressedsrgbformat"}],"output":{"name":"bool"}}],[11,"clone","","",823,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"compressedsrgbformat"}}],[11,"fmt","","",823,{"inputs":[{"name":"compressedsrgbformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",822,{"inputs":[{"name":"compressedformat"}],"output":{"name":"textureformat"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",823,{"inputs":[{"name":"compressedsrgbformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",824,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"ne","","",824,{"inputs":[{"name":"depthformat"},{"name":"depthformat"}],"output":{"name":"bool"}}],[11,"clone","","",824,{"inputs":[{"name":"depthformat"}],"output":{"name":"depthformat"}}],[11,"fmt","","",824,{"inputs":[{"name":"depthformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",824,{"inputs":[{"name":"depthformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",825,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",825,{"inputs":[{"name":"depthstencilformat"},{"name":"depthstencilformat"}],"output":{"name":"bool"}}],[11,"clone","","",825,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"depthstencilformat"}}],[11,"fmt","","",825,{"inputs":[{"name":"depthstencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",825,{"inputs":[{"name":"depthstencilformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",826,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"ne","","",826,{"inputs":[{"name":"stencilformat"},{"name":"stencilformat"}],"output":{"name":"bool"}}],[11,"clone","","",826,{"inputs":[{"name":"stencilformat"}],"output":{"name":"stencilformat"}}],[11,"fmt","","",826,{"inputs":[{"name":"stencilformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_texture_format","","Turns this format into a more generic `TextureFormat`.",826,{"inputs":[{"name":"stencilformat"}],"output":{"name":"textureformat"}}],[11,"eq","","",827,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"ne","","",827,{"inputs":[{"name":"textureformat"},{"name":"textureformat"}],"output":{"name":"bool"}}],[11,"clone","","",827,{"inputs":[{"name":"textureformat"}],"output":{"name":"textureformat"}}],[11,"fmt","","",827,{"inputs":[{"name":"textureformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",828,{"inputs":[{"name":"clientformatany"},{"name":"clientformatany"}],"output":{"name":"bool"}}],[11,"ne","","",828,{"inputs":[{"name":"clientformatany"},{"name":"clientformatany"}],"output":{"name":"bool"}}],[11,"clone","","",828,{"inputs":[{"name":"clientformatany"}],"output":{"name":"clientformatany"}}],[11,"fmt","","",828,{"inputs":[{"name":"clientformatany"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_compressed","","Checks if this format is a compressed format.",828,{"inputs":[{"name":"clientformatany"}],"output":{"name":"bool"}}],[11,"get_buffer_size","","Gets the size in bytes of the buffer required to store a uncompressed image\nof the specified dimensions on this format.",828,{"inputs":[{"name":"clientformatany"},{"name":"u32"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"usize"}}],[11,"get_num_components","","",828,{"inputs":[{"name":"clientformatany"}],"output":{"name":"u8"}}],[11,"from","glium::ops::read","",829,{"inputs":[{"name":"source"},{"name":"attachment"}],"output":{"name":"source"}}],[11,"from","","",830,{"inputs":[{"name":"destination"},{"name":"vec"}],"output":{"name":"destination"}}],[11,"from","","",830,{"inputs":[{"name":"destination"},{"name":"pixelbuffer"}],"output":{"name":"destination"}}],[11,"new","glium::sampler_object","Builds a new sampler object.",831,{"inputs":[{"name":"samplerobject"},{"name":"commandcontext"},{"name":"samplerbehavior"}],"output":{"name":"samplerobject"}}],[11,"destroy","","",831,null],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::sampler_object","",831,{"inputs":[{"name":"samplerobject"}],"output":{"name":"u32"}}],[11,"drop","","",831,null],[11,"fmt","glium::sync","",832,{"inputs":[{"name":"syncnotsupportederror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",832,{"inputs":[{"name":"syncnotsupportederror"}],"output":{"name":"syncnotsupportederror"}}],[11,"new","","Builds a new `SyncFence` that is injected in the server.",833,{"inputs":[{"name":"syncfence"},{"name":"f"}],"output":{"name":"result"}}],[11,"wait","","Blocks until the operation has finished on the server.",833,null],[11,"drop","","",833,null],[11,"into_sync_fence","","Turns the prototype into a real fence.",834,{"inputs":[{"name":"linearsyncfence"},{"name":"f"}],"output":{"name":"syncfence"}}],[11,"drop","","",834,null],[11,"new","glium::utils::bitsfield","",835,{"inputs":[{"name":"bitsfield"}],"output":{"name":"bitsfield"}}],[11,"set_used","","",835,null],[11,"set_unused","","",835,null],[11,"is_used","","",835,{"inputs":[{"name":"bitsfield"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"get_unused","","",835,{"inputs":[{"name":"bitsfield"}],"output":{"name":"option"}}],[11,"eq","glium::version","",836,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",836,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",836,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"fmt","","",836,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",837,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"ne","","",837,{"inputs":[{"name":"api"},{"name":"api"}],"output":{"name":"bool"}}],[11,"clone","","",837,{"inputs":[{"name":"api"}],"output":{"name":"api"}}],[11,"fmt","","",837,{"inputs":[{"name":"api"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",836,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[11,"new","glium::vertex_array_object","Builds a new `VertexAttributesSystem`.",838,{"inputs":[{"name":"vertexattributessystem"}],"output":{"name":"vertexattributessystem"}}],[11,"start","","Starts the process of binding vertex attributes.",838,{"inputs":[{"name":"vertexattributessystem"},{"name":"commandcontext"},{"name":"program"},{"name":"option"},{"name":"bool"}],"output":{"name":"binder"}}],[11,"purge_buffer","","This function *must* be called whenever you destroy a buffer so that the system can\npurge its VAOs cache.",838,null],[11,"purge_program","","This function *must* be called whenever you destroy a program so that the system can\npurge its VAOs cache.",838,null],[11,"purge_all","","Purges the VAOs cache.",838,null],[11,"cleanup","","Purges the VAOs cache. Contrary to `purge_all`, this function expects the system to be\ndestroyed soon.",838,null],[11,"hijack_current_element_array_buffer","","Tells the VAOs system that the currently binded element array buffer will change.",838,null],[11,"add","","Adds a buffer to bind as a source of vertices.",839,{"inputs":[{"name":"binder"},{"name":"bufferviewanyslice"},{"name":"cow"},{"name":"option"}],"output":{"name":"binder"}}],[11,"bind","","Finish binding the vertex attributes.",839,{"inputs":[{"name":"binder"}],"output":{"name":"option"}}],[11,"drop","","",840,null],[6,"Id","lux::graphics","",null,null],[11,"get_id","glium::vertex_array_object","",840,{"inputs":[{"name":"vertexarrayobject"}],"output":{"name":"u32"}}],[11,"is_loaded","glium::gl","Returns `true` if the function has been successfully loaded.",841,{"inputs":[{"name":"fnptr"}],"output":{"name":"bool"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the\nuse of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",842,{"inputs":[{"name":"gl"},{"name":"f"}],"output":{"name":"gl"}}],[11,"load","","Load each OpenGL symbol using a custom load function.",842,{"inputs":[{"name":"gl"},{"name":"t"}],"output":{"name":"gl"}}],[11,"Accum","","",842,null],[11,"ActiveShaderProgram","","",842,null],[11,"ActiveTexture","","",842,null],[11,"AlphaFunc","","",842,null],[11,"AreTexturesResident","","",842,null],[11,"ArrayElement","","",842,null],[11,"AttachObjectARB","","",842,null],[11,"AttachShader","","",842,null],[11,"Begin","","",842,null],[11,"BeginConditionalRender","","",842,null],[11,"BeginConditionalRenderNV","","",842,null],[11,"BeginQuery","","",842,null],[11,"BeginQueryARB","","",842,null],[11,"BeginQueryIndexed","","",842,null],[11,"BeginTransformFeedback","","",842,null],[11,"BeginTransformFeedbackEXT","","",842,null],[11,"BindAttribLocation","","",842,null],[11,"BindAttribLocationARB","","",842,null],[11,"BindBuffer","","",842,null],[11,"BindBufferARB","","",842,null],[11,"BindBufferBase","","",842,null],[11,"BindBufferBaseEXT","","",842,null],[11,"BindBufferOffsetEXT","","",842,null],[11,"BindBufferRange","","",842,null],[11,"BindBufferRangeEXT","","",842,null],[11,"BindBuffersBase","","",842,null],[11,"BindBuffersRange","","",842,null],[11,"BindFragDataLocation","","",842,null],[11,"BindFragDataLocationEXT","","",842,null],[11,"BindFragDataLocationIndexed","","",842,null],[11,"BindFramebuffer","","",842,null],[11,"BindFramebufferEXT","","",842,null],[11,"BindImageTexture","","",842,null],[11,"BindImageTextures","","",842,null],[11,"BindMultiTextureEXT","","",842,null],[11,"BindProgramPipeline","","",842,null],[11,"BindRenderbuffer","","",842,null],[11,"BindRenderbufferEXT","","",842,null],[11,"BindSampler","","",842,null],[11,"BindSamplers","","",842,null],[11,"BindTexture","","",842,null],[11,"BindTextureUnit","","",842,null],[11,"BindTextures","","",842,null],[11,"BindTransformFeedback","","",842,null],[11,"BindVertexArray","","",842,null],[11,"BindVertexArrayAPPLE","","",842,null],[11,"BindVertexBuffer","","",842,null],[11,"BindVertexBuffers","","",842,null],[11,"Bitmap","","",842,null],[11,"BlendColor","","",842,null],[11,"BlendEquation","","",842,null],[11,"BlendEquationSeparate","","",842,null],[11,"BlendEquationSeparatei","","",842,null],[11,"BlendEquationi","","",842,null],[11,"BlendFunc","","",842,null],[11,"BlendFuncSeparate","","",842,null],[11,"BlendFuncSeparatei","","",842,null],[11,"BlendFunci","","",842,null],[11,"BlitFramebuffer","","",842,null],[11,"BlitFramebufferEXT","","",842,null],[11,"BlitNamedFramebuffer","","",842,null],[11,"BufferData","","",842,null],[11,"BufferDataARB","","",842,null],[11,"BufferStorage","","",842,null],[11,"BufferSubData","","",842,null],[11,"BufferSubDataARB","","",842,null],[11,"CallList","","",842,null],[11,"CallLists","","",842,null],[11,"CheckFramebufferStatus","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CheckFramebufferStatusEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CheckNamedFramebufferStatus","","",842,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CheckNamedFramebufferStatusEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"ClampColor","","",842,null],[11,"Clear","","",842,null],[11,"ClearAccum","","",842,null],[11,"ClearBufferData","","",842,null],[11,"ClearBufferSubData","","",842,null],[11,"ClearBufferfi","","",842,null],[11,"ClearBufferfv","","",842,null],[11,"ClearBufferiv","","",842,null],[11,"ClearBufferuiv","","",842,null],[11,"ClearColor","","",842,null],[11,"ClearColorIiEXT","","",842,null],[11,"ClearColorIuiEXT","","",842,null],[11,"ClearDepth","","",842,null],[11,"ClearDepthf","","",842,null],[11,"ClearIndex","","",842,null],[11,"ClearNamedBufferData","","",842,null],[11,"ClearNamedBufferDataEXT","","",842,null],[11,"ClearNamedBufferSubData","","",842,null],[11,"ClearNamedBufferSubDataEXT","","",842,null],[11,"ClearNamedFramebufferfi","","",842,null],[11,"ClearNamedFramebufferfv","","",842,null],[11,"ClearNamedFramebufferiv","","",842,null],[11,"ClearNamedFramebufferuiv","","",842,null],[11,"ClearStencil","","",842,null],[11,"ClearTexImage","","",842,null],[11,"ClearTexSubImage","","",842,null],[11,"ClientActiveTexture","","",842,null],[11,"ClientAttribDefaultEXT","","",842,null],[11,"ClientWaitSync","","",842,null],[11,"ClipControl","","",842,null],[11,"ClipPlane","","",842,null],[11,"Color3b","","",842,null],[11,"Color3bv","","",842,null],[11,"Color3d","","",842,null],[11,"Color3dv","","",842,null],[11,"Color3f","","",842,null],[11,"Color3fv","","",842,null],[11,"Color3i","","",842,null],[11,"Color3iv","","",842,null],[11,"Color3s","","",842,null],[11,"Color3sv","","",842,null],[11,"Color3ub","","",842,null],[11,"Color3ubv","","",842,null],[11,"Color3ui","","",842,null],[11,"Color3uiv","","",842,null],[11,"Color3us","","",842,null],[11,"Color3usv","","",842,null],[11,"Color4b","","",842,null],[11,"Color4bv","","",842,null],[11,"Color4d","","",842,null],[11,"Color4dv","","",842,null],[11,"Color4f","","",842,null],[11,"Color4fv","","",842,null],[11,"Color4i","","",842,null],[11,"Color4iv","","",842,null],[11,"Color4s","","",842,null],[11,"Color4sv","","",842,null],[11,"Color4ub","","",842,null],[11,"Color4ubv","","",842,null],[11,"Color4ui","","",842,null],[11,"Color4uiv","","",842,null],[11,"Color4us","","",842,null],[11,"Color4usv","","",842,null],[11,"ColorMask","","",842,null],[11,"ColorMaski","","",842,null],[11,"ColorMaterial","","",842,null],[11,"ColorP3ui","","",842,null],[11,"ColorP3uiv","","",842,null],[11,"ColorP4ui","","",842,null],[11,"ColorP4uiv","","",842,null],[11,"ColorPointer","","",842,null],[11,"CompileShader","","",842,null],[11,"CompileShaderARB","","",842,null],[11,"CompressedMultiTexImage1DEXT","","",842,null],[11,"CompressedMultiTexImage2DEXT","","",842,null],[11,"CompressedMultiTexImage3DEXT","","",842,null],[11,"CompressedMultiTexSubImage1DEXT","","",842,null],[11,"CompressedMultiTexSubImage2DEXT","","",842,null],[11,"CompressedMultiTexSubImage3DEXT","","",842,null],[11,"CompressedTexImage1D","","",842,null],[11,"CompressedTexImage2D","","",842,null],[11,"CompressedTexImage3D","","",842,null],[11,"CompressedTexSubImage1D","","",842,null],[11,"CompressedTexSubImage2D","","",842,null],[11,"CompressedTexSubImage3D","","",842,null],[11,"CompressedTextureImage1DEXT","","",842,null],[11,"CompressedTextureImage2DEXT","","",842,null],[11,"CompressedTextureImage3DEXT","","",842,null],[11,"CompressedTextureSubImage1D","","",842,null],[11,"CompressedTextureSubImage1DEXT","","",842,null],[11,"CompressedTextureSubImage2D","","",842,null],[11,"CompressedTextureSubImage2DEXT","","",842,null],[11,"CompressedTextureSubImage3D","","",842,null],[11,"CompressedTextureSubImage3DEXT","","",842,null],[11,"CopyBufferSubData","","",842,null],[11,"CopyImageSubData","","",842,null],[11,"CopyMultiTexImage1DEXT","","",842,null],[11,"CopyMultiTexImage2DEXT","","",842,null],[11,"CopyMultiTexSubImage1DEXT","","",842,null],[11,"CopyMultiTexSubImage2DEXT","","",842,null],[11,"CopyMultiTexSubImage3DEXT","","",842,null],[11,"CopyNamedBufferSubData","","",842,null],[11,"CopyPixels","","",842,null],[11,"CopyTexImage1D","","",842,null],[11,"CopyTexImage2D","","",842,null],[11,"CopyTexSubImage1D","","",842,null],[11,"CopyTexSubImage2D","","",842,null],[11,"CopyTexSubImage3D","","",842,null],[11,"CopyTextureImage1DEXT","","",842,null],[11,"CopyTextureImage2DEXT","","",842,null],[11,"CopyTextureSubImage1D","","",842,null],[11,"CopyTextureSubImage1DEXT","","",842,null],[11,"CopyTextureSubImage2D","","",842,null],[11,"CopyTextureSubImage2DEXT","","",842,null],[11,"CopyTextureSubImage3D","","",842,null],[11,"CopyTextureSubImage3DEXT","","",842,null],[11,"CreateBuffers","","",842,null],[11,"CreateFramebuffers","","",842,null],[11,"CreateProgram","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"CreateProgramObjectARB","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"CreateProgramPipelines","","",842,null],[11,"CreateQueries","","",842,null],[11,"CreateRenderbuffers","","",842,null],[11,"CreateSamplers","","",842,null],[11,"CreateShader","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CreateShaderObjectARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"CreateShaderProgramv","","",842,null],[11,"CreateTextures","","",842,null],[11,"CreateTransformFeedbacks","","",842,null],[11,"CreateVertexArrays","","",842,null],[11,"CullFace","","",842,null],[11,"DebugMessageCallback","","",842,null],[11,"DebugMessageCallbackARB","","",842,null],[11,"DebugMessageControl","","",842,null],[11,"DebugMessageControlARB","","",842,null],[11,"DebugMessageInsert","","",842,null],[11,"DebugMessageInsertARB","","",842,null],[11,"DeleteBuffers","","",842,null],[11,"DeleteBuffersARB","","",842,null],[11,"DeleteFramebuffers","","",842,null],[11,"DeleteFramebuffersEXT","","",842,null],[11,"DeleteLists","","",842,null],[11,"DeleteObjectARB","","",842,null],[11,"DeleteProgram","","",842,null],[11,"DeleteProgramPipelines","","",842,null],[11,"DeleteQueries","","",842,null],[11,"DeleteQueriesARB","","",842,null],[11,"DeleteRenderbuffers","","",842,null],[11,"DeleteRenderbuffersEXT","","",842,null],[11,"DeleteSamplers","","",842,null],[11,"DeleteShader","","",842,null],[11,"DeleteSync","","",842,null],[11,"DeleteTextures","","",842,null],[11,"DeleteTransformFeedbacks","","",842,null],[11,"DeleteVertexArrays","","",842,null],[11,"DeleteVertexArraysAPPLE","","",842,null],[11,"DepthFunc","","",842,null],[11,"DepthMask","","",842,null],[11,"DepthRange","","",842,null],[11,"DepthRangeArrayv","","",842,null],[11,"DepthRangeIndexed","","",842,null],[11,"DepthRangef","","",842,null],[11,"DetachObjectARB","","",842,null],[11,"DetachShader","","",842,null],[11,"Disable","","",842,null],[11,"DisableClientState","","",842,null],[11,"DisableClientStateIndexedEXT","","",842,null],[11,"DisableClientStateiEXT","","",842,null],[11,"DisableIndexedEXT","","",842,null],[11,"DisableVertexArrayAttrib","","",842,null],[11,"DisableVertexArrayAttribEXT","","",842,null],[11,"DisableVertexArrayEXT","","",842,null],[11,"DisableVertexAttribArray","","",842,null],[11,"DisableVertexAttribArrayARB","","",842,null],[11,"Disablei","","",842,null],[11,"DispatchCompute","","",842,null],[11,"DispatchComputeIndirect","","",842,null],[11,"DrawArrays","","",842,null],[11,"DrawArraysIndirect","","",842,null],[11,"DrawArraysInstanced","","",842,null],[11,"DrawArraysInstancedBaseInstance","","",842,null],[11,"DrawBuffer","","",842,null],[11,"DrawBuffers","","",842,null],[11,"DrawElements","","",842,null],[11,"DrawElementsBaseVertex","","",842,null],[11,"DrawElementsIndirect","","",842,null],[11,"DrawElementsInstanced","","",842,null],[11,"DrawElementsInstancedBaseInstance","","",842,null],[11,"DrawElementsInstancedBaseVertex","","",842,null],[11,"DrawElementsInstancedBaseVertexBaseInstance","","",842,null],[11,"DrawPixels","","",842,null],[11,"DrawRangeElements","","",842,null],[11,"DrawRangeElementsBaseVertex","","",842,null],[11,"DrawTransformFeedback","","",842,null],[11,"DrawTransformFeedbackInstanced","","",842,null],[11,"DrawTransformFeedbackStream","","",842,null],[11,"DrawTransformFeedbackStreamInstanced","","",842,null],[11,"EdgeFlag","","",842,null],[11,"EdgeFlagPointer","","",842,null],[11,"EdgeFlagv","","",842,null],[11,"Enable","","",842,null],[11,"EnableClientState","","",842,null],[11,"EnableClientStateIndexedEXT","","",842,null],[11,"EnableClientStateiEXT","","",842,null],[11,"EnableIndexedEXT","","",842,null],[11,"EnableVertexArrayAttrib","","",842,null],[11,"EnableVertexArrayAttribEXT","","",842,null],[11,"EnableVertexArrayEXT","","",842,null],[11,"EnableVertexAttribArray","","",842,null],[11,"EnableVertexAttribArrayARB","","",842,null],[11,"Enablei","","",842,null],[11,"End","","",842,null],[11,"EndConditionalRender","","",842,null],[11,"EndConditionalRenderNV","","",842,null],[11,"EndList","","",842,null],[11,"EndQuery","","",842,null],[11,"EndQueryARB","","",842,null],[11,"EndQueryIndexed","","",842,null],[11,"EndTransformFeedback","","",842,null],[11,"EndTransformFeedbackEXT","","",842,null],[11,"EvalCoord1d","","",842,null],[11,"EvalCoord1dv","","",842,null],[11,"EvalCoord1f","","",842,null],[11,"EvalCoord1fv","","",842,null],[11,"EvalCoord2d","","",842,null],[11,"EvalCoord2dv","","",842,null],[11,"EvalCoord2f","","",842,null],[11,"EvalCoord2fv","","",842,null],[11,"EvalMesh1","","",842,null],[11,"EvalMesh2","","",842,null],[11,"EvalPoint1","","",842,null],[11,"EvalPoint2","","",842,null],[11,"FeedbackBuffer","","",842,null],[11,"FenceSync","","",842,null],[11,"Finish","","",842,null],[11,"Flush","","",842,null],[11,"FlushMappedBufferRange","","",842,null],[11,"FlushMappedNamedBufferRange","","",842,null],[11,"FlushMappedNamedBufferRangeEXT","","",842,null],[11,"FogCoordPointer","","",842,null],[11,"FogCoordd","","",842,null],[11,"FogCoorddv","","",842,null],[11,"FogCoordf","","",842,null],[11,"FogCoordfv","","",842,null],[11,"Fogf","","",842,null],[11,"Fogfv","","",842,null],[11,"Fogi","","",842,null],[11,"Fogiv","","",842,null],[11,"FramebufferDrawBufferEXT","","",842,null],[11,"FramebufferDrawBuffersEXT","","",842,null],[11,"FramebufferParameteri","","",842,null],[11,"FramebufferReadBufferEXT","","",842,null],[11,"FramebufferRenderbuffer","","",842,null],[11,"FramebufferRenderbufferEXT","","",842,null],[11,"FramebufferTexture","","",842,null],[11,"FramebufferTexture1D","","",842,null],[11,"FramebufferTexture1DEXT","","",842,null],[11,"FramebufferTexture2D","","",842,null],[11,"FramebufferTexture2DEXT","","",842,null],[11,"FramebufferTexture3D","","",842,null],[11,"FramebufferTexture3DEXT","","",842,null],[11,"FramebufferTextureARB","","",842,null],[11,"FramebufferTextureFaceARB","","",842,null],[11,"FramebufferTextureLayer","","",842,null],[11,"FramebufferTextureLayerARB","","",842,null],[11,"FrontFace","","",842,null],[11,"Frustum","","",842,null],[11,"GenBuffers","","",842,null],[11,"GenBuffersARB","","",842,null],[11,"GenFramebuffers","","",842,null],[11,"GenFramebuffersEXT","","",842,null],[11,"GenLists","","",842,{"inputs":[{"name":"gl"},{"name":"i32"}],"output":{"name":"u32"}}],[11,"GenProgramPipelines","","",842,null],[11,"GenQueries","","",842,null],[11,"GenQueriesARB","","",842,null],[11,"GenRenderbuffers","","",842,null],[11,"GenRenderbuffersEXT","","",842,null],[11,"GenSamplers","","",842,null],[11,"GenTextures","","",842,null],[11,"GenTransformFeedbacks","","",842,null],[11,"GenVertexArrays","","",842,null],[11,"GenVertexArraysAPPLE","","",842,null],[11,"GenerateMipmap","","",842,null],[11,"GenerateMipmapEXT","","",842,null],[11,"GenerateMultiTexMipmapEXT","","",842,null],[11,"GenerateTextureMipmap","","",842,null],[11,"GenerateTextureMipmapEXT","","",842,null],[11,"GetActiveAtomicCounterBufferiv","","",842,null],[11,"GetActiveAttrib","","",842,null],[11,"GetActiveAttribARB","","",842,null],[11,"GetActiveSubroutineName","","",842,null],[11,"GetActiveSubroutineUniformName","","",842,null],[11,"GetActiveSubroutineUniformiv","","",842,null],[11,"GetActiveUniform","","",842,null],[11,"GetActiveUniformARB","","",842,null],[11,"GetActiveUniformBlockName","","",842,null],[11,"GetActiveUniformBlockiv","","",842,null],[11,"GetActiveUniformName","","",842,null],[11,"GetActiveUniformsiv","","",842,null],[11,"GetAttachedObjectsARB","","",842,null],[11,"GetAttachedShaders","","",842,null],[11,"GetAttribLocation","","",842,null],[11,"GetAttribLocationARB","","",842,null],[11,"GetBooleanIndexedvEXT","","",842,null],[11,"GetBooleani_v","","",842,null],[11,"GetBooleanv","","",842,null],[11,"GetBufferParameteri64v","","",842,null],[11,"GetBufferParameteriv","","",842,null],[11,"GetBufferParameterivARB","","",842,null],[11,"GetBufferPointerv","","",842,null],[11,"GetBufferPointervARB","","",842,null],[11,"GetBufferSubData","","",842,null],[11,"GetBufferSubDataARB","","",842,null],[11,"GetClipPlane","","",842,null],[11,"GetCompressedMultiTexImageEXT","","",842,null],[11,"GetCompressedTexImage","","",842,null],[11,"GetCompressedTextureImage","","",842,null],[11,"GetCompressedTextureImageEXT","","",842,null],[11,"GetCompressedTextureSubImage","","",842,null],[11,"GetDebugMessageLog","","",842,null],[11,"GetDebugMessageLogARB","","",842,null],[11,"GetDoubleIndexedvEXT","","",842,null],[11,"GetDoublei_v","","",842,null],[11,"GetDoublei_vEXT","","",842,null],[11,"GetDoublev","","",842,null],[11,"GetError","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetFloatIndexedvEXT","","",842,null],[11,"GetFloati_v","","",842,null],[11,"GetFloati_vEXT","","",842,null],[11,"GetFloatv","","",842,null],[11,"GetFragDataIndex","","",842,null],[11,"GetFragDataLocation","","",842,null],[11,"GetFragDataLocationEXT","","",842,null],[11,"GetFramebufferAttachmentParameteriv","","",842,null],[11,"GetFramebufferAttachmentParameterivEXT","","",842,null],[11,"GetFramebufferParameteriv","","",842,null],[11,"GetFramebufferParameterivEXT","","",842,null],[11,"GetGraphicsResetStatus","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetGraphicsResetStatusARB","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetGraphicsResetStatusKHR","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetHandleARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"GetImageHandleARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"i32"},{"name":"u8"},{"name":"i32"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"GetInfoLogARB","","",842,null],[11,"GetInteger64i_v","","",842,null],[11,"GetInteger64v","","",842,null],[11,"GetIntegerIndexedvEXT","","",842,null],[11,"GetIntegeri_v","","",842,null],[11,"GetIntegerv","","",842,null],[11,"GetInternalformati64v","","",842,null],[11,"GetInternalformativ","","",842,null],[11,"GetLightfv","","",842,null],[11,"GetLightiv","","",842,null],[11,"GetMapdv","","",842,null],[11,"GetMapfv","","",842,null],[11,"GetMapiv","","",842,null],[11,"GetMaterialfv","","",842,null],[11,"GetMaterialiv","","",842,null],[11,"GetMultiTexEnvfvEXT","","",842,null],[11,"GetMultiTexEnvivEXT","","",842,null],[11,"GetMultiTexGendvEXT","","",842,null],[11,"GetMultiTexGenfvEXT","","",842,null],[11,"GetMultiTexGenivEXT","","",842,null],[11,"GetMultiTexImageEXT","","",842,null],[11,"GetMultiTexLevelParameterfvEXT","","",842,null],[11,"GetMultiTexLevelParameterivEXT","","",842,null],[11,"GetMultiTexParameterIivEXT","","",842,null],[11,"GetMultiTexParameterIuivEXT","","",842,null],[11,"GetMultiTexParameterfvEXT","","",842,null],[11,"GetMultiTexParameterivEXT","","",842,null],[11,"GetMultisamplefv","","",842,null],[11,"GetNamedBufferParameteri64v","","",842,null],[11,"GetNamedBufferParameteriv","","",842,null],[11,"GetNamedBufferParameterivEXT","","",842,null],[11,"GetNamedBufferPointerv","","",842,null],[11,"GetNamedBufferPointervEXT","","",842,null],[11,"GetNamedBufferSubData","","",842,null],[11,"GetNamedBufferSubDataEXT","","",842,null],[11,"GetNamedFramebufferAttachmentParameteriv","","",842,null],[11,"GetNamedFramebufferAttachmentParameterivEXT","","",842,null],[11,"GetNamedFramebufferParameteriv","","",842,null],[11,"GetNamedFramebufferParameterivEXT","","",842,null],[11,"GetNamedProgramLocalParameterIivEXT","","",842,null],[11,"GetNamedProgramLocalParameterIuivEXT","","",842,null],[11,"GetNamedProgramLocalParameterdvEXT","","",842,null],[11,"GetNamedProgramLocalParameterfvEXT","","",842,null],[11,"GetNamedProgramStringEXT","","",842,null],[11,"GetNamedProgramivEXT","","",842,null],[11,"GetNamedRenderbufferParameteriv","","",842,null],[11,"GetNamedRenderbufferParameterivEXT","","",842,null],[11,"GetObjectLabel","","",842,null],[11,"GetObjectParameterfvARB","","",842,null],[11,"GetObjectParameterivARB","","",842,null],[11,"GetObjectPtrLabel","","",842,null],[11,"GetPixelMapfv","","",842,null],[11,"GetPixelMapuiv","","",842,null],[11,"GetPixelMapusv","","",842,null],[11,"GetPointerIndexedvEXT","","",842,null],[11,"GetPointeri_vEXT","","",842,null],[11,"GetPointerv","","",842,null],[11,"GetPolygonStipple","","",842,null],[11,"GetProgramBinary","","",842,null],[11,"GetProgramInfoLog","","",842,null],[11,"GetProgramInterfaceiv","","",842,null],[11,"GetProgramPipelineInfoLog","","",842,null],[11,"GetProgramPipelineiv","","",842,null],[11,"GetProgramResourceIndex","","",842,null],[11,"GetProgramResourceLocation","","",842,null],[11,"GetProgramResourceLocationIndex","","",842,null],[11,"GetProgramResourceName","","",842,null],[11,"GetProgramResourceiv","","",842,null],[11,"GetProgramStageiv","","",842,null],[11,"GetProgramiv","","",842,null],[11,"GetQueryBufferObjecti64v","","",842,null],[11,"GetQueryBufferObjectiv","","",842,null],[11,"GetQueryBufferObjectui64v","","",842,null],[11,"GetQueryBufferObjectuiv","","",842,null],[11,"GetQueryIndexediv","","",842,null],[11,"GetQueryObjecti64v","","",842,null],[11,"GetQueryObjectiv","","",842,null],[11,"GetQueryObjectivARB","","",842,null],[11,"GetQueryObjectui64v","","",842,null],[11,"GetQueryObjectuiv","","",842,null],[11,"GetQueryObjectuivARB","","",842,null],[11,"GetQueryiv","","",842,null],[11,"GetQueryivARB","","",842,null],[11,"GetRenderbufferParameteriv","","",842,null],[11,"GetRenderbufferParameterivEXT","","",842,null],[11,"GetSamplerParameterIiv","","",842,null],[11,"GetSamplerParameterIuiv","","",842,null],[11,"GetSamplerParameterfv","","",842,null],[11,"GetSamplerParameteriv","","",842,null],[11,"GetShaderInfoLog","","",842,null],[11,"GetShaderPrecisionFormat","","",842,null],[11,"GetShaderSource","","",842,null],[11,"GetShaderSourceARB","","",842,null],[11,"GetShaderiv","","",842,null],[11,"GetString","","",842,null],[11,"GetStringi","","",842,null],[11,"GetSubroutineIndex","","",842,null],[11,"GetSubroutineUniformLocation","","",842,null],[11,"GetSynciv","","",842,null],[11,"GetTexEnvfv","","",842,null],[11,"GetTexEnviv","","",842,null],[11,"GetTexGendv","","",842,null],[11,"GetTexGenfv","","",842,null],[11,"GetTexGeniv","","",842,null],[11,"GetTexImage","","",842,null],[11,"GetTexLevelParameterfv","","",842,null],[11,"GetTexLevelParameteriv","","",842,null],[11,"GetTexParameterIiv","","",842,null],[11,"GetTexParameterIivEXT","","",842,null],[11,"GetTexParameterIuiv","","",842,null],[11,"GetTexParameterIuivEXT","","",842,null],[11,"GetTexParameterfv","","",842,null],[11,"GetTexParameteriv","","",842,null],[11,"GetTextureHandleARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"GetTextureImage","","",842,null],[11,"GetTextureImageEXT","","",842,null],[11,"GetTextureLevelParameterfv","","",842,null],[11,"GetTextureLevelParameterfvEXT","","",842,null],[11,"GetTextureLevelParameteriv","","",842,null],[11,"GetTextureLevelParameterivEXT","","",842,null],[11,"GetTextureParameterIiv","","",842,null],[11,"GetTextureParameterIivEXT","","",842,null],[11,"GetTextureParameterIuiv","","",842,null],[11,"GetTextureParameterIuivEXT","","",842,null],[11,"GetTextureParameterfv","","",842,null],[11,"GetTextureParameterfvEXT","","",842,null],[11,"GetTextureParameteriv","","",842,null],[11,"GetTextureParameterivEXT","","",842,null],[11,"GetTextureSamplerHandleARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"GetTextureSubImage","","",842,null],[11,"GetTransformFeedbackVarying","","",842,null],[11,"GetTransformFeedbackVaryingEXT","","",842,null],[11,"GetTransformFeedbacki64_v","","",842,null],[11,"GetTransformFeedbacki_v","","",842,null],[11,"GetTransformFeedbackiv","","",842,null],[11,"GetUniformBlockIndex","","",842,null],[11,"GetUniformIndices","","",842,null],[11,"GetUniformLocation","","",842,null],[11,"GetUniformLocationARB","","",842,null],[11,"GetUniformSubroutineuiv","","",842,null],[11,"GetUniformdv","","",842,null],[11,"GetUniformfv","","",842,null],[11,"GetUniformfvARB","","",842,null],[11,"GetUniformiv","","",842,null],[11,"GetUniformivARB","","",842,null],[11,"GetUniformuiv","","",842,null],[11,"GetUniformuivEXT","","",842,null],[11,"GetVertexArrayIndexed64iv","","",842,null],[11,"GetVertexArrayIndexediv","","",842,null],[11,"GetVertexArrayIntegeri_vEXT","","",842,null],[11,"GetVertexArrayIntegervEXT","","",842,null],[11,"GetVertexArrayPointeri_vEXT","","",842,null],[11,"GetVertexArrayPointervEXT","","",842,null],[11,"GetVertexArrayiv","","",842,null],[11,"GetVertexAttribIiv","","",842,null],[11,"GetVertexAttribIuiv","","",842,null],[11,"GetVertexAttribLdv","","",842,null],[11,"GetVertexAttribLi64vNV","","",842,null],[11,"GetVertexAttribLui64vARB","","",842,null],[11,"GetVertexAttribLui64vNV","","",842,null],[11,"GetVertexAttribPointerv","","",842,null],[11,"GetVertexAttribPointervARB","","",842,null],[11,"GetVertexAttribdv","","",842,null],[11,"GetVertexAttribdvARB","","",842,null],[11,"GetVertexAttribfv","","",842,null],[11,"GetVertexAttribfvARB","","",842,null],[11,"GetVertexAttribiv","","",842,null],[11,"GetVertexAttribivARB","","",842,null],[11,"GetnColorTable","","",842,null],[11,"GetnColorTableARB","","",842,null],[11,"GetnCompressedTexImage","","",842,null],[11,"GetnCompressedTexImageARB","","",842,null],[11,"GetnConvolutionFilter","","",842,null],[11,"GetnConvolutionFilterARB","","",842,null],[11,"GetnHistogram","","",842,null],[11,"GetnHistogramARB","","",842,null],[11,"GetnMapdv","","",842,null],[11,"GetnMapdvARB","","",842,null],[11,"GetnMapfv","","",842,null],[11,"GetnMapfvARB","","",842,null],[11,"GetnMapiv","","",842,null],[11,"GetnMapivARB","","",842,null],[11,"GetnMinmax","","",842,null],[11,"GetnMinmaxARB","","",842,null],[11,"GetnPixelMapfv","","",842,null],[11,"GetnPixelMapfvARB","","",842,null],[11,"GetnPixelMapuiv","","",842,null],[11,"GetnPixelMapuivARB","","",842,null],[11,"GetnPixelMapusv","","",842,null],[11,"GetnPixelMapusvARB","","",842,null],[11,"GetnPolygonStipple","","",842,null],[11,"GetnPolygonStippleARB","","",842,null],[11,"GetnSeparableFilter","","",842,null],[11,"GetnSeparableFilterARB","","",842,null],[11,"GetnTexImage","","",842,null],[11,"GetnTexImageARB","","",842,null],[11,"GetnUniformdv","","",842,null],[11,"GetnUniformdvARB","","",842,null],[11,"GetnUniformfv","","",842,null],[11,"GetnUniformfvARB","","",842,null],[11,"GetnUniformfvKHR","","",842,null],[11,"GetnUniformiv","","",842,null],[11,"GetnUniformivARB","","",842,null],[11,"GetnUniformivKHR","","",842,null],[11,"GetnUniformuiv","","",842,null],[11,"GetnUniformuivARB","","",842,null],[11,"GetnUniformuivKHR","","",842,null],[11,"Hint","","",842,null],[11,"IndexMask","","",842,null],[11,"IndexPointer","","",842,null],[11,"Indexd","","",842,null],[11,"Indexdv","","",842,null],[11,"Indexf","","",842,null],[11,"Indexfv","","",842,null],[11,"Indexi","","",842,null],[11,"Indexiv","","",842,null],[11,"Indexs","","",842,null],[11,"Indexsv","","",842,null],[11,"Indexub","","",842,null],[11,"Indexubv","","",842,null],[11,"InitNames","","",842,null],[11,"InsertEventMarkerEXT","","",842,null],[11,"InterleavedArrays","","",842,null],[11,"InvalidateBufferData","","",842,null],[11,"InvalidateBufferSubData","","",842,null],[11,"InvalidateFramebuffer","","",842,null],[11,"InvalidateNamedFramebufferData","","",842,null],[11,"InvalidateNamedFramebufferSubData","","",842,null],[11,"InvalidateSubFramebuffer","","",842,null],[11,"InvalidateTexImage","","",842,null],[11,"InvalidateTexSubImage","","",842,null],[11,"IsBuffer","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsBufferARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsEnabled","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsEnabledIndexedEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsEnabledi","","",842,{"inputs":[{"name":"gl"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsFramebuffer","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsFramebufferEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsImageHandleResidentARB","","",842,{"inputs":[{"name":"gl"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"IsList","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsProgram","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsProgramPipeline","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsQuery","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsQueryARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsRenderbuffer","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsRenderbufferEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsSampler","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsShader","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsSync","","",842,null],[11,"IsTexture","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsTextureHandleResidentARB","","",842,{"inputs":[{"name":"gl"},{"name":"u64"}],"output":{"name":"u8"}}],[11,"IsTransformFeedback","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsVertexArray","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsVertexArrayAPPLE","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"LightModelf","","",842,null],[11,"LightModelfv","","",842,null],[11,"LightModeli","","",842,null],[11,"LightModeliv","","",842,null],[11,"Lightf","","",842,null],[11,"Lightfv","","",842,null],[11,"Lighti","","",842,null],[11,"Lightiv","","",842,null],[11,"LineStipple","","",842,null],[11,"LineWidth","","",842,null],[11,"LinkProgram","","",842,null],[11,"LinkProgramARB","","",842,null],[11,"ListBase","","",842,null],[11,"LoadIdentity","","",842,null],[11,"LoadMatrixd","","",842,null],[11,"LoadMatrixf","","",842,null],[11,"LoadName","","",842,null],[11,"LoadTransposeMatrixd","","",842,null],[11,"LoadTransposeMatrixf","","",842,null],[11,"LogicOp","","",842,null],[11,"MakeImageHandleNonResidentARB","","",842,null],[11,"MakeImageHandleResidentARB","","",842,null],[11,"MakeTextureHandleNonResidentARB","","",842,null],[11,"MakeTextureHandleResidentARB","","",842,null],[11,"Map1d","","",842,null],[11,"Map1f","","",842,null],[11,"Map2d","","",842,null],[11,"Map2f","","",842,null],[11,"MapBuffer","","",842,null],[11,"MapBufferARB","","",842,null],[11,"MapBufferRange","","",842,null],[11,"MapGrid1d","","",842,null],[11,"MapGrid1f","","",842,null],[11,"MapGrid2d","","",842,null],[11,"MapGrid2f","","",842,null],[11,"MapNamedBuffer","","",842,null],[11,"MapNamedBufferEXT","","",842,null],[11,"MapNamedBufferRange","","",842,null],[11,"MapNamedBufferRangeEXT","","",842,null],[11,"Materialf","","",842,null],[11,"Materialfv","","",842,null],[11,"Materiali","","",842,null],[11,"Materialiv","","",842,null],[11,"MatrixFrustumEXT","","",842,null],[11,"MatrixLoadIdentityEXT","","",842,null],[11,"MatrixLoadTransposedEXT","","",842,null],[11,"MatrixLoadTransposefEXT","","",842,null],[11,"MatrixLoaddEXT","","",842,null],[11,"MatrixLoadfEXT","","",842,null],[11,"MatrixMode","","",842,null],[11,"MatrixMultTransposedEXT","","",842,null],[11,"MatrixMultTransposefEXT","","",842,null],[11,"MatrixMultdEXT","","",842,null],[11,"MatrixMultfEXT","","",842,null],[11,"MatrixOrthoEXT","","",842,null],[11,"MatrixPopEXT","","",842,null],[11,"MatrixPushEXT","","",842,null],[11,"MatrixRotatedEXT","","",842,null],[11,"MatrixRotatefEXT","","",842,null],[11,"MatrixScaledEXT","","",842,null],[11,"MatrixScalefEXT","","",842,null],[11,"MatrixTranslatedEXT","","",842,null],[11,"MatrixTranslatefEXT","","",842,null],[11,"MemoryBarrier","","",842,null],[11,"MemoryBarrierByRegion","","",842,null],[11,"MinSampleShading","","",842,null],[11,"MultMatrixd","","",842,null],[11,"MultMatrixf","","",842,null],[11,"MultTransposeMatrixd","","",842,null],[11,"MultTransposeMatrixf","","",842,null],[11,"MultiDrawArrays","","",842,null],[11,"MultiDrawArraysIndirect","","",842,null],[11,"MultiDrawElements","","",842,null],[11,"MultiDrawElementsBaseVertex","","",842,null],[11,"MultiDrawElementsIndirect","","",842,null],[11,"MultiTexBufferEXT","","",842,null],[11,"MultiTexCoord1d","","",842,null],[11,"MultiTexCoord1dv","","",842,null],[11,"MultiTexCoord1f","","",842,null],[11,"MultiTexCoord1fv","","",842,null],[11,"MultiTexCoord1i","","",842,null],[11,"MultiTexCoord1iv","","",842,null],[11,"MultiTexCoord1s","","",842,null],[11,"MultiTexCoord1sv","","",842,null],[11,"MultiTexCoord2d","","",842,null],[11,"MultiTexCoord2dv","","",842,null],[11,"MultiTexCoord2f","","",842,null],[11,"MultiTexCoord2fv","","",842,null],[11,"MultiTexCoord2i","","",842,null],[11,"MultiTexCoord2iv","","",842,null],[11,"MultiTexCoord2s","","",842,null],[11,"MultiTexCoord2sv","","",842,null],[11,"MultiTexCoord3d","","",842,null],[11,"MultiTexCoord3dv","","",842,null],[11,"MultiTexCoord3f","","",842,null],[11,"MultiTexCoord3fv","","",842,null],[11,"MultiTexCoord3i","","",842,null],[11,"MultiTexCoord3iv","","",842,null],[11,"MultiTexCoord3s","","",842,null],[11,"MultiTexCoord3sv","","",842,null],[11,"MultiTexCoord4d","","",842,null],[11,"MultiTexCoord4dv","","",842,null],[11,"MultiTexCoord4f","","",842,null],[11,"MultiTexCoord4fv","","",842,null],[11,"MultiTexCoord4i","","",842,null],[11,"MultiTexCoord4iv","","",842,null],[11,"MultiTexCoord4s","","",842,null],[11,"MultiTexCoord4sv","","",842,null],[11,"MultiTexCoordP1ui","","",842,null],[11,"MultiTexCoordP1uiv","","",842,null],[11,"MultiTexCoordP2ui","","",842,null],[11,"MultiTexCoordP2uiv","","",842,null],[11,"MultiTexCoordP3ui","","",842,null],[11,"MultiTexCoordP3uiv","","",842,null],[11,"MultiTexCoordP4ui","","",842,null],[11,"MultiTexCoordP4uiv","","",842,null],[11,"MultiTexCoordPointerEXT","","",842,null],[11,"MultiTexEnvfEXT","","",842,null],[11,"MultiTexEnvfvEXT","","",842,null],[11,"MultiTexEnviEXT","","",842,null],[11,"MultiTexEnvivEXT","","",842,null],[11,"MultiTexGendEXT","","",842,null],[11,"MultiTexGendvEXT","","",842,null],[11,"MultiTexGenfEXT","","",842,null],[11,"MultiTexGenfvEXT","","",842,null],[11,"MultiTexGeniEXT","","",842,null],[11,"MultiTexGenivEXT","","",842,null],[11,"MultiTexImage1DEXT","","",842,null],[11,"MultiTexImage2DEXT","","",842,null],[11,"MultiTexImage3DEXT","","",842,null],[11,"MultiTexParameterIivEXT","","",842,null],[11,"MultiTexParameterIuivEXT","","",842,null],[11,"MultiTexParameterfEXT","","",842,null],[11,"MultiTexParameterfvEXT","","",842,null],[11,"MultiTexParameteriEXT","","",842,null],[11,"MultiTexParameterivEXT","","",842,null],[11,"MultiTexRenderbufferEXT","","",842,null],[11,"MultiTexSubImage1DEXT","","",842,null],[11,"MultiTexSubImage2DEXT","","",842,null],[11,"MultiTexSubImage3DEXT","","",842,null],[11,"NamedBufferData","","",842,null],[11,"NamedBufferDataEXT","","",842,null],[11,"NamedBufferStorage","","",842,null],[11,"NamedBufferStorageEXT","","",842,null],[11,"NamedBufferSubData","","",842,null],[11,"NamedBufferSubDataEXT","","",842,null],[11,"NamedCopyBufferSubDataEXT","","",842,null],[11,"NamedFramebufferDrawBuffer","","",842,null],[11,"NamedFramebufferDrawBuffers","","",842,null],[11,"NamedFramebufferParameteri","","",842,null],[11,"NamedFramebufferParameteriEXT","","",842,null],[11,"NamedFramebufferReadBuffer","","",842,null],[11,"NamedFramebufferRenderbuffer","","",842,null],[11,"NamedFramebufferRenderbufferEXT","","",842,null],[11,"NamedFramebufferTexture","","",842,null],[11,"NamedFramebufferTexture1DEXT","","",842,null],[11,"NamedFramebufferTexture2DEXT","","",842,null],[11,"NamedFramebufferTexture3DEXT","","",842,null],[11,"NamedFramebufferTextureEXT","","",842,null],[11,"NamedFramebufferTextureFaceEXT","","",842,null],[11,"NamedFramebufferTextureLayer","","",842,null],[11,"NamedFramebufferTextureLayerEXT","","",842,null],[11,"NamedProgramLocalParameter4dEXT","","",842,null],[11,"NamedProgramLocalParameter4dvEXT","","",842,null],[11,"NamedProgramLocalParameter4fEXT","","",842,null],[11,"NamedProgramLocalParameter4fvEXT","","",842,null],[11,"NamedProgramLocalParameterI4iEXT","","",842,null],[11,"NamedProgramLocalParameterI4ivEXT","","",842,null],[11,"NamedProgramLocalParameterI4uiEXT","","",842,null],[11,"NamedProgramLocalParameterI4uivEXT","","",842,null],[11,"NamedProgramLocalParameters4fvEXT","","",842,null],[11,"NamedProgramLocalParametersI4ivEXT","","",842,null],[11,"NamedProgramLocalParametersI4uivEXT","","",842,null],[11,"NamedProgramStringEXT","","",842,null],[11,"NamedRenderbufferStorage","","",842,null],[11,"NamedRenderbufferStorageEXT","","",842,null],[11,"NamedRenderbufferStorageMultisample","","",842,null],[11,"NamedRenderbufferStorageMultisampleCoverageEXT","","",842,null],[11,"NamedRenderbufferStorageMultisampleEXT","","",842,null],[11,"NewList","","",842,null],[11,"Normal3b","","",842,null],[11,"Normal3bv","","",842,null],[11,"Normal3d","","",842,null],[11,"Normal3dv","","",842,null],[11,"Normal3f","","",842,null],[11,"Normal3fv","","",842,null],[11,"Normal3i","","",842,null],[11,"Normal3iv","","",842,null],[11,"Normal3s","","",842,null],[11,"Normal3sv","","",842,null],[11,"NormalP3ui","","",842,null],[11,"NormalP3uiv","","",842,null],[11,"NormalPointer","","",842,null],[11,"ObjectLabel","","",842,null],[11,"ObjectPtrLabel","","",842,null],[11,"Ortho","","",842,null],[11,"PassThrough","","",842,null],[11,"PatchParameterfv","","",842,null],[11,"PatchParameteri","","",842,null],[11,"PauseTransformFeedback","","",842,null],[11,"PixelMapfv","","",842,null],[11,"PixelMapuiv","","",842,null],[11,"PixelMapusv","","",842,null],[11,"PixelStoref","","",842,null],[11,"PixelStorei","","",842,null],[11,"PixelTransferf","","",842,null],[11,"PixelTransferi","","",842,null],[11,"PixelZoom","","",842,null],[11,"PointParameterf","","",842,null],[11,"PointParameterfv","","",842,null],[11,"PointParameteri","","",842,null],[11,"PointParameteriv","","",842,null],[11,"PointSize","","",842,null],[11,"PolygonMode","","",842,null],[11,"PolygonOffset","","",842,null],[11,"PolygonStipple","","",842,null],[11,"PopAttrib","","",842,null],[11,"PopClientAttrib","","",842,null],[11,"PopDebugGroup","","",842,null],[11,"PopGroupMarkerEXT","","",842,null],[11,"PopMatrix","","",842,null],[11,"PopName","","",842,null],[11,"PrimitiveRestartIndex","","",842,null],[11,"PrioritizeTextures","","",842,null],[11,"ProgramBinary","","",842,null],[11,"ProgramParameteri","","",842,null],[11,"ProgramParameteriARB","","",842,null],[11,"ProgramUniform1d","","",842,null],[11,"ProgramUniform1dEXT","","",842,null],[11,"ProgramUniform1dv","","",842,null],[11,"ProgramUniform1dvEXT","","",842,null],[11,"ProgramUniform1f","","",842,null],[11,"ProgramUniform1fEXT","","",842,null],[11,"ProgramUniform1fv","","",842,null],[11,"ProgramUniform1fvEXT","","",842,null],[11,"ProgramUniform1i","","",842,null],[11,"ProgramUniform1iEXT","","",842,null],[11,"ProgramUniform1iv","","",842,null],[11,"ProgramUniform1ivEXT","","",842,null],[11,"ProgramUniform1ui","","",842,null],[11,"ProgramUniform1uiEXT","","",842,null],[11,"ProgramUniform1uiv","","",842,null],[11,"ProgramUniform1uivEXT","","",842,null],[11,"ProgramUniform2d","","",842,null],[11,"ProgramUniform2dEXT","","",842,null],[11,"ProgramUniform2dv","","",842,null],[11,"ProgramUniform2dvEXT","","",842,null],[11,"ProgramUniform2f","","",842,null],[11,"ProgramUniform2fEXT","","",842,null],[11,"ProgramUniform2fv","","",842,null],[11,"ProgramUniform2fvEXT","","",842,null],[11,"ProgramUniform2i","","",842,null],[11,"ProgramUniform2iEXT","","",842,null],[11,"ProgramUniform2iv","","",842,null],[11,"ProgramUniform2ivEXT","","",842,null],[11,"ProgramUniform2ui","","",842,null],[11,"ProgramUniform2uiEXT","","",842,null],[11,"ProgramUniform2uiv","","",842,null],[11,"ProgramUniform2uivEXT","","",842,null],[11,"ProgramUniform3d","","",842,null],[11,"ProgramUniform3dEXT","","",842,null],[11,"ProgramUniform3dv","","",842,null],[11,"ProgramUniform3dvEXT","","",842,null],[11,"ProgramUniform3f","","",842,null],[11,"ProgramUniform3fEXT","","",842,null],[11,"ProgramUniform3fv","","",842,null],[11,"ProgramUniform3fvEXT","","",842,null],[11,"ProgramUniform3i","","",842,null],[11,"ProgramUniform3iEXT","","",842,null],[11,"ProgramUniform3iv","","",842,null],[11,"ProgramUniform3ivEXT","","",842,null],[11,"ProgramUniform3ui","","",842,null],[11,"ProgramUniform3uiEXT","","",842,null],[11,"ProgramUniform3uiv","","",842,null],[11,"ProgramUniform3uivEXT","","",842,null],[11,"ProgramUniform4d","","",842,null],[11,"ProgramUniform4dEXT","","",842,null],[11,"ProgramUniform4dv","","",842,null],[11,"ProgramUniform4dvEXT","","",842,null],[11,"ProgramUniform4f","","",842,null],[11,"ProgramUniform4fEXT","","",842,null],[11,"ProgramUniform4fv","","",842,null],[11,"ProgramUniform4fvEXT","","",842,null],[11,"ProgramUniform4i","","",842,null],[11,"ProgramUniform4iEXT","","",842,null],[11,"ProgramUniform4iv","","",842,null],[11,"ProgramUniform4ivEXT","","",842,null],[11,"ProgramUniform4ui","","",842,null],[11,"ProgramUniform4uiEXT","","",842,null],[11,"ProgramUniform4uiv","","",842,null],[11,"ProgramUniform4uivEXT","","",842,null],[11,"ProgramUniformHandleui64ARB","","",842,null],[11,"ProgramUniformHandleui64vARB","","",842,null],[11,"ProgramUniformMatrix2dv","","",842,null],[11,"ProgramUniformMatrix2dvEXT","","",842,null],[11,"ProgramUniformMatrix2fv","","",842,null],[11,"ProgramUniformMatrix2fvEXT","","",842,null],[11,"ProgramUniformMatrix2x3dv","","",842,null],[11,"ProgramUniformMatrix2x3dvEXT","","",842,null],[11,"ProgramUniformMatrix2x3fv","","",842,null],[11,"ProgramUniformMatrix2x3fvEXT","","",842,null],[11,"ProgramUniformMatrix2x4dv","","",842,null],[11,"ProgramUniformMatrix2x4dvEXT","","",842,null],[11,"ProgramUniformMatrix2x4fv","","",842,null],[11,"ProgramUniformMatrix2x4fvEXT","","",842,null],[11,"ProgramUniformMatrix3dv","","",842,null],[11,"ProgramUniformMatrix3dvEXT","","",842,null],[11,"ProgramUniformMatrix3fv","","",842,null],[11,"ProgramUniformMatrix3fvEXT","","",842,null],[11,"ProgramUniformMatrix3x2dv","","",842,null],[11,"ProgramUniformMatrix3x2dvEXT","","",842,null],[11,"ProgramUniformMatrix3x2fv","","",842,null],[11,"ProgramUniformMatrix3x2fvEXT","","",842,null],[11,"ProgramUniformMatrix3x4dv","","",842,null],[11,"ProgramUniformMatrix3x4dvEXT","","",842,null],[11,"ProgramUniformMatrix3x4fv","","",842,null],[11,"ProgramUniformMatrix3x4fvEXT","","",842,null],[11,"ProgramUniformMatrix4dv","","",842,null],[11,"ProgramUniformMatrix4dvEXT","","",842,null],[11,"ProgramUniformMatrix4fv","","",842,null],[11,"ProgramUniformMatrix4fvEXT","","",842,null],[11,"ProgramUniformMatrix4x2dv","","",842,null],[11,"ProgramUniformMatrix4x2dvEXT","","",842,null],[11,"ProgramUniformMatrix4x2fv","","",842,null],[11,"ProgramUniformMatrix4x2fvEXT","","",842,null],[11,"ProgramUniformMatrix4x3dv","","",842,null],[11,"ProgramUniformMatrix4x3dvEXT","","",842,null],[11,"ProgramUniformMatrix4x3fv","","",842,null],[11,"ProgramUniformMatrix4x3fvEXT","","",842,null],[11,"ProvokingVertex","","",842,null],[11,"PushAttrib","","",842,null],[11,"PushClientAttrib","","",842,null],[11,"PushClientAttribDefaultEXT","","",842,null],[11,"PushDebugGroup","","",842,null],[11,"PushGroupMarkerEXT","","",842,null],[11,"PushMatrix","","",842,null],[11,"PushName","","",842,null],[11,"QueryCounter","","",842,null],[11,"RasterPos2d","","",842,null],[11,"RasterPos2dv","","",842,null],[11,"RasterPos2f","","",842,null],[11,"RasterPos2fv","","",842,null],[11,"RasterPos2i","","",842,null],[11,"RasterPos2iv","","",842,null],[11,"RasterPos2s","","",842,null],[11,"RasterPos2sv","","",842,null],[11,"RasterPos3d","","",842,null],[11,"RasterPos3dv","","",842,null],[11,"RasterPos3f","","",842,null],[11,"RasterPos3fv","","",842,null],[11,"RasterPos3i","","",842,null],[11,"RasterPos3iv","","",842,null],[11,"RasterPos3s","","",842,null],[11,"RasterPos3sv","","",842,null],[11,"RasterPos4d","","",842,null],[11,"RasterPos4dv","","",842,null],[11,"RasterPos4f","","",842,null],[11,"RasterPos4fv","","",842,null],[11,"RasterPos4i","","",842,null],[11,"RasterPos4iv","","",842,null],[11,"RasterPos4s","","",842,null],[11,"RasterPos4sv","","",842,null],[11,"ReadBuffer","","",842,null],[11,"ReadPixels","","",842,null],[11,"ReadnPixels","","",842,null],[11,"ReadnPixelsARB","","",842,null],[11,"ReadnPixelsKHR","","",842,null],[11,"Rectd","","",842,null],[11,"Rectdv","","",842,null],[11,"Rectf","","",842,null],[11,"Rectfv","","",842,null],[11,"Recti","","",842,null],[11,"Rectiv","","",842,null],[11,"Rects","","",842,null],[11,"Rectsv","","",842,null],[11,"ReleaseShaderCompiler","","",842,null],[11,"RenderMode","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"RenderbufferStorage","","",842,null],[11,"RenderbufferStorageEXT","","",842,null],[11,"RenderbufferStorageMultisample","","",842,null],[11,"ResumeTransformFeedback","","",842,null],[11,"Rotated","","",842,null],[11,"Rotatef","","",842,null],[11,"SampleCoverage","","",842,null],[11,"SampleMaski","","",842,null],[11,"SamplerParameterIiv","","",842,null],[11,"SamplerParameterIuiv","","",842,null],[11,"SamplerParameterf","","",842,null],[11,"SamplerParameterfv","","",842,null],[11,"SamplerParameteri","","",842,null],[11,"SamplerParameteriv","","",842,null],[11,"Scaled","","",842,null],[11,"Scalef","","",842,null],[11,"Scissor","","",842,null],[11,"ScissorArrayv","","",842,null],[11,"ScissorIndexed","","",842,null],[11,"ScissorIndexedv","","",842,null],[11,"SecondaryColor3b","","",842,null],[11,"SecondaryColor3bv","","",842,null],[11,"SecondaryColor3d","","",842,null],[11,"SecondaryColor3dv","","",842,null],[11,"SecondaryColor3f","","",842,null],[11,"SecondaryColor3fv","","",842,null],[11,"SecondaryColor3i","","",842,null],[11,"SecondaryColor3iv","","",842,null],[11,"SecondaryColor3s","","",842,null],[11,"SecondaryColor3sv","","",842,null],[11,"SecondaryColor3ub","","",842,null],[11,"SecondaryColor3ubv","","",842,null],[11,"SecondaryColor3ui","","",842,null],[11,"SecondaryColor3uiv","","",842,null],[11,"SecondaryColor3us","","",842,null],[11,"SecondaryColor3usv","","",842,null],[11,"SecondaryColorP3ui","","",842,null],[11,"SecondaryColorP3uiv","","",842,null],[11,"SecondaryColorPointer","","",842,null],[11,"SelectBuffer","","",842,null],[11,"ShadeModel","","",842,null],[11,"ShaderBinary","","",842,null],[11,"ShaderSource","","",842,null],[11,"ShaderSourceARB","","",842,null],[11,"ShaderStorageBlockBinding","","",842,null],[11,"StencilFunc","","",842,null],[11,"StencilFuncSeparate","","",842,null],[11,"StencilMask","","",842,null],[11,"StencilMaskSeparate","","",842,null],[11,"StencilOp","","",842,null],[11,"StencilOpSeparate","","",842,null],[11,"StringMarkerGREMEDY","","",842,null],[11,"TexBuffer","","",842,null],[11,"TexBufferRange","","",842,null],[11,"TexCoord1d","","",842,null],[11,"TexCoord1dv","","",842,null],[11,"TexCoord1f","","",842,null],[11,"TexCoord1fv","","",842,null],[11,"TexCoord1i","","",842,null],[11,"TexCoord1iv","","",842,null],[11,"TexCoord1s","","",842,null],[11,"TexCoord1sv","","",842,null],[11,"TexCoord2d","","",842,null],[11,"TexCoord2dv","","",842,null],[11,"TexCoord2f","","",842,null],[11,"TexCoord2fv","","",842,null],[11,"TexCoord2i","","",842,null],[11,"TexCoord2iv","","",842,null],[11,"TexCoord2s","","",842,null],[11,"TexCoord2sv","","",842,null],[11,"TexCoord3d","","",842,null],[11,"TexCoord3dv","","",842,null],[11,"TexCoord3f","","",842,null],[11,"TexCoord3fv","","",842,null],[11,"TexCoord3i","","",842,null],[11,"TexCoord3iv","","",842,null],[11,"TexCoord3s","","",842,null],[11,"TexCoord3sv","","",842,null],[11,"TexCoord4d","","",842,null],[11,"TexCoord4dv","","",842,null],[11,"TexCoord4f","","",842,null],[11,"TexCoord4fv","","",842,null],[11,"TexCoord4i","","",842,null],[11,"TexCoord4iv","","",842,null],[11,"TexCoord4s","","",842,null],[11,"TexCoord4sv","","",842,null],[11,"TexCoordP1ui","","",842,null],[11,"TexCoordP1uiv","","",842,null],[11,"TexCoordP2ui","","",842,null],[11,"TexCoordP2uiv","","",842,null],[11,"TexCoordP3ui","","",842,null],[11,"TexCoordP3uiv","","",842,null],[11,"TexCoordP4ui","","",842,null],[11,"TexCoordP4uiv","","",842,null],[11,"TexCoordPointer","","",842,null],[11,"TexEnvf","","",842,null],[11,"TexEnvfv","","",842,null],[11,"TexEnvi","","",842,null],[11,"TexEnviv","","",842,null],[11,"TexGend","","",842,null],[11,"TexGendv","","",842,null],[11,"TexGenf","","",842,null],[11,"TexGenfv","","",842,null],[11,"TexGeni","","",842,null],[11,"TexGeniv","","",842,null],[11,"TexImage1D","","",842,null],[11,"TexImage2D","","",842,null],[11,"TexImage2DMultisample","","",842,null],[11,"TexImage3D","","",842,null],[11,"TexImage3DMultisample","","",842,null],[11,"TexParameterIiv","","",842,null],[11,"TexParameterIivEXT","","",842,null],[11,"TexParameterIuiv","","",842,null],[11,"TexParameterIuivEXT","","",842,null],[11,"TexParameterf","","",842,null],[11,"TexParameterfv","","",842,null],[11,"TexParameteri","","",842,null],[11,"TexParameteriv","","",842,null],[11,"TexStorage1D","","",842,null],[11,"TexStorage2D","","",842,null],[11,"TexStorage2DMultisample","","",842,null],[11,"TexStorage3D","","",842,null],[11,"TexStorage3DMultisample","","",842,null],[11,"TexSubImage1D","","",842,null],[11,"TexSubImage2D","","",842,null],[11,"TexSubImage3D","","",842,null],[11,"TextureBarrier","","",842,null],[11,"TextureBuffer","","",842,null],[11,"TextureBufferEXT","","",842,null],[11,"TextureBufferRange","","",842,null],[11,"TextureBufferRangeEXT","","",842,null],[11,"TextureImage1DEXT","","",842,null],[11,"TextureImage2DEXT","","",842,null],[11,"TextureImage3DEXT","","",842,null],[11,"TexturePageCommitmentEXT","","",842,null],[11,"TextureParameterIiv","","",842,null],[11,"TextureParameterIivEXT","","",842,null],[11,"TextureParameterIuiv","","",842,null],[11,"TextureParameterIuivEXT","","",842,null],[11,"TextureParameterf","","",842,null],[11,"TextureParameterfEXT","","",842,null],[11,"TextureParameterfv","","",842,null],[11,"TextureParameterfvEXT","","",842,null],[11,"TextureParameteri","","",842,null],[11,"TextureParameteriEXT","","",842,null],[11,"TextureParameteriv","","",842,null],[11,"TextureParameterivEXT","","",842,null],[11,"TextureRenderbufferEXT","","",842,null],[11,"TextureStorage1D","","",842,null],[11,"TextureStorage1DEXT","","",842,null],[11,"TextureStorage2D","","",842,null],[11,"TextureStorage2DEXT","","",842,null],[11,"TextureStorage2DMultisample","","",842,null],[11,"TextureStorage2DMultisampleEXT","","",842,null],[11,"TextureStorage3D","","",842,null],[11,"TextureStorage3DEXT","","",842,null],[11,"TextureStorage3DMultisample","","",842,null],[11,"TextureStorage3DMultisampleEXT","","",842,null],[11,"TextureSubImage1D","","",842,null],[11,"TextureSubImage1DEXT","","",842,null],[11,"TextureSubImage2D","","",842,null],[11,"TextureSubImage2DEXT","","",842,null],[11,"TextureSubImage3D","","",842,null],[11,"TextureSubImage3DEXT","","",842,null],[11,"TextureView","","",842,null],[11,"TransformFeedbackBufferBase","","",842,null],[11,"TransformFeedbackBufferRange","","",842,null],[11,"TransformFeedbackVaryings","","",842,null],[11,"TransformFeedbackVaryingsEXT","","",842,null],[11,"Translated","","",842,null],[11,"Translatef","","",842,null],[11,"Uniform1d","","",842,null],[11,"Uniform1dv","","",842,null],[11,"Uniform1f","","",842,null],[11,"Uniform1fARB","","",842,null],[11,"Uniform1fv","","",842,null],[11,"Uniform1fvARB","","",842,null],[11,"Uniform1i","","",842,null],[11,"Uniform1iARB","","",842,null],[11,"Uniform1iv","","",842,null],[11,"Uniform1ivARB","","",842,null],[11,"Uniform1ui","","",842,null],[11,"Uniform1uiEXT","","",842,null],[11,"Uniform1uiv","","",842,null],[11,"Uniform1uivEXT","","",842,null],[11,"Uniform2d","","",842,null],[11,"Uniform2dv","","",842,null],[11,"Uniform2f","","",842,null],[11,"Uniform2fARB","","",842,null],[11,"Uniform2fv","","",842,null],[11,"Uniform2fvARB","","",842,null],[11,"Uniform2i","","",842,null],[11,"Uniform2iARB","","",842,null],[11,"Uniform2iv","","",842,null],[11,"Uniform2ivARB","","",842,null],[11,"Uniform2ui","","",842,null],[11,"Uniform2uiEXT","","",842,null],[11,"Uniform2uiv","","",842,null],[11,"Uniform2uivEXT","","",842,null],[11,"Uniform3d","","",842,null],[11,"Uniform3dv","","",842,null],[11,"Uniform3f","","",842,null],[11,"Uniform3fARB","","",842,null],[11,"Uniform3fv","","",842,null],[11,"Uniform3fvARB","","",842,null],[11,"Uniform3i","","",842,null],[11,"Uniform3iARB","","",842,null],[11,"Uniform3iv","","",842,null],[11,"Uniform3ivARB","","",842,null],[11,"Uniform3ui","","",842,null],[11,"Uniform3uiEXT","","",842,null],[11,"Uniform3uiv","","",842,null],[11,"Uniform3uivEXT","","",842,null],[11,"Uniform4d","","",842,null],[11,"Uniform4dv","","",842,null],[11,"Uniform4f","","",842,null],[11,"Uniform4fARB","","",842,null],[11,"Uniform4fv","","",842,null],[11,"Uniform4fvARB","","",842,null],[11,"Uniform4i","","",842,null],[11,"Uniform4iARB","","",842,null],[11,"Uniform4iv","","",842,null],[11,"Uniform4ivARB","","",842,null],[11,"Uniform4ui","","",842,null],[11,"Uniform4uiEXT","","",842,null],[11,"Uniform4uiv","","",842,null],[11,"Uniform4uivEXT","","",842,null],[11,"UniformBlockBinding","","",842,null],[11,"UniformHandleui64ARB","","",842,null],[11,"UniformHandleui64vARB","","",842,null],[11,"UniformMatrix2dv","","",842,null],[11,"UniformMatrix2fv","","",842,null],[11,"UniformMatrix2fvARB","","",842,null],[11,"UniformMatrix2x3dv","","",842,null],[11,"UniformMatrix2x3fv","","",842,null],[11,"UniformMatrix2x4dv","","",842,null],[11,"UniformMatrix2x4fv","","",842,null],[11,"UniformMatrix3dv","","",842,null],[11,"UniformMatrix3fv","","",842,null],[11,"UniformMatrix3fvARB","","",842,null],[11,"UniformMatrix3x2dv","","",842,null],[11,"UniformMatrix3x2fv","","",842,null],[11,"UniformMatrix3x4dv","","",842,null],[11,"UniformMatrix3x4fv","","",842,null],[11,"UniformMatrix4dv","","",842,null],[11,"UniformMatrix4fv","","",842,null],[11,"UniformMatrix4fvARB","","",842,null],[11,"UniformMatrix4x2dv","","",842,null],[11,"UniformMatrix4x2fv","","",842,null],[11,"UniformMatrix4x3dv","","",842,null],[11,"UniformMatrix4x3fv","","",842,null],[11,"UniformSubroutinesuiv","","",842,null],[11,"UnmapBuffer","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UnmapBufferARB","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UnmapNamedBuffer","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UnmapNamedBufferEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"UseProgram","","",842,null],[11,"UseProgramObjectARB","","",842,null],[11,"UseProgramStages","","",842,null],[11,"ValidateProgram","","",842,null],[11,"ValidateProgramARB","","",842,null],[11,"ValidateProgramPipeline","","",842,null],[11,"Vertex2d","","",842,null],[11,"Vertex2dv","","",842,null],[11,"Vertex2f","","",842,null],[11,"Vertex2fv","","",842,null],[11,"Vertex2i","","",842,null],[11,"Vertex2iv","","",842,null],[11,"Vertex2s","","",842,null],[11,"Vertex2sv","","",842,null],[11,"Vertex3d","","",842,null],[11,"Vertex3dv","","",842,null],[11,"Vertex3f","","",842,null],[11,"Vertex3fv","","",842,null],[11,"Vertex3i","","",842,null],[11,"Vertex3iv","","",842,null],[11,"Vertex3s","","",842,null],[11,"Vertex3sv","","",842,null],[11,"Vertex4d","","",842,null],[11,"Vertex4dv","","",842,null],[11,"Vertex4f","","",842,null],[11,"Vertex4fv","","",842,null],[11,"Vertex4i","","",842,null],[11,"Vertex4iv","","",842,null],[11,"Vertex4s","","",842,null],[11,"Vertex4sv","","",842,null],[11,"VertexArrayAttribBinding","","",842,null],[11,"VertexArrayAttribFormat","","",842,null],[11,"VertexArrayAttribIFormat","","",842,null],[11,"VertexArrayAttribLFormat","","",842,null],[11,"VertexArrayBindVertexBufferEXT","","",842,null],[11,"VertexArrayBindingDivisor","","",842,null],[11,"VertexArrayColorOffsetEXT","","",842,null],[11,"VertexArrayEdgeFlagOffsetEXT","","",842,null],[11,"VertexArrayElementBuffer","","",842,null],[11,"VertexArrayFogCoordOffsetEXT","","",842,null],[11,"VertexArrayIndexOffsetEXT","","",842,null],[11,"VertexArrayMultiTexCoordOffsetEXT","","",842,null],[11,"VertexArrayNormalOffsetEXT","","",842,null],[11,"VertexArraySecondaryColorOffsetEXT","","",842,null],[11,"VertexArrayTexCoordOffsetEXT","","",842,null],[11,"VertexArrayVertexAttribBindingEXT","","",842,null],[11,"VertexArrayVertexAttribDivisorEXT","","",842,null],[11,"VertexArrayVertexAttribFormatEXT","","",842,null],[11,"VertexArrayVertexAttribIFormatEXT","","",842,null],[11,"VertexArrayVertexAttribIOffsetEXT","","",842,null],[11,"VertexArrayVertexAttribLFormatEXT","","",842,null],[11,"VertexArrayVertexAttribLOffsetEXT","","",842,null],[11,"VertexArrayVertexAttribOffsetEXT","","",842,null],[11,"VertexArrayVertexBindingDivisorEXT","","",842,null],[11,"VertexArrayVertexBuffer","","",842,null],[11,"VertexArrayVertexBuffers","","",842,null],[11,"VertexArrayVertexOffsetEXT","","",842,null],[11,"VertexAttrib1d","","",842,null],[11,"VertexAttrib1dARB","","",842,null],[11,"VertexAttrib1dv","","",842,null],[11,"VertexAttrib1dvARB","","",842,null],[11,"VertexAttrib1f","","",842,null],[11,"VertexAttrib1fARB","","",842,null],[11,"VertexAttrib1fv","","",842,null],[11,"VertexAttrib1fvARB","","",842,null],[11,"VertexAttrib1s","","",842,null],[11,"VertexAttrib1sARB","","",842,null],[11,"VertexAttrib1sv","","",842,null],[11,"VertexAttrib1svARB","","",842,null],[11,"VertexAttrib2d","","",842,null],[11,"VertexAttrib2dARB","","",842,null],[11,"VertexAttrib2dv","","",842,null],[11,"VertexAttrib2dvARB","","",842,null],[11,"VertexAttrib2f","","",842,null],[11,"VertexAttrib2fARB","","",842,null],[11,"VertexAttrib2fv","","",842,null],[11,"VertexAttrib2fvARB","","",842,null],[11,"VertexAttrib2s","","",842,null],[11,"VertexAttrib2sARB","","",842,null],[11,"VertexAttrib2sv","","",842,null],[11,"VertexAttrib2svARB","","",842,null],[11,"VertexAttrib3d","","",842,null],[11,"VertexAttrib3dARB","","",842,null],[11,"VertexAttrib3dv","","",842,null],[11,"VertexAttrib3dvARB","","",842,null],[11,"VertexAttrib3f","","",842,null],[11,"VertexAttrib3fARB","","",842,null],[11,"VertexAttrib3fv","","",842,null],[11,"VertexAttrib3fvARB","","",842,null],[11,"VertexAttrib3s","","",842,null],[11,"VertexAttrib3sARB","","",842,null],[11,"VertexAttrib3sv","","",842,null],[11,"VertexAttrib3svARB","","",842,null],[11,"VertexAttrib4Nbv","","",842,null],[11,"VertexAttrib4NbvARB","","",842,null],[11,"VertexAttrib4Niv","","",842,null],[11,"VertexAttrib4NivARB","","",842,null],[11,"VertexAttrib4Nsv","","",842,null],[11,"VertexAttrib4NsvARB","","",842,null],[11,"VertexAttrib4Nub","","",842,null],[11,"VertexAttrib4NubARB","","",842,null],[11,"VertexAttrib4Nubv","","",842,null],[11,"VertexAttrib4NubvARB","","",842,null],[11,"VertexAttrib4Nuiv","","",842,null],[11,"VertexAttrib4NuivARB","","",842,null],[11,"VertexAttrib4Nusv","","",842,null],[11,"VertexAttrib4NusvARB","","",842,null],[11,"VertexAttrib4bv","","",842,null],[11,"VertexAttrib4bvARB","","",842,null],[11,"VertexAttrib4d","","",842,null],[11,"VertexAttrib4dARB","","",842,null],[11,"VertexAttrib4dv","","",842,null],[11,"VertexAttrib4dvARB","","",842,null],[11,"VertexAttrib4f","","",842,null],[11,"VertexAttrib4fARB","","",842,null],[11,"VertexAttrib4fv","","",842,null],[11,"VertexAttrib4fvARB","","",842,null],[11,"VertexAttrib4iv","","",842,null],[11,"VertexAttrib4ivARB","","",842,null],[11,"VertexAttrib4s","","",842,null],[11,"VertexAttrib4sARB","","",842,null],[11,"VertexAttrib4sv","","",842,null],[11,"VertexAttrib4svARB","","",842,null],[11,"VertexAttrib4ubv","","",842,null],[11,"VertexAttrib4ubvARB","","",842,null],[11,"VertexAttrib4uiv","","",842,null],[11,"VertexAttrib4uivARB","","",842,null],[11,"VertexAttrib4usv","","",842,null],[11,"VertexAttrib4usvARB","","",842,null],[11,"VertexAttribBinding","","",842,null],[11,"VertexAttribDivisor","","",842,null],[11,"VertexAttribFormat","","",842,null],[11,"VertexAttribI1i","","",842,null],[11,"VertexAttribI1iv","","",842,null],[11,"VertexAttribI1ui","","",842,null],[11,"VertexAttribI1uiv","","",842,null],[11,"VertexAttribI2i","","",842,null],[11,"VertexAttribI2iv","","",842,null],[11,"VertexAttribI2ui","","",842,null],[11,"VertexAttribI2uiv","","",842,null],[11,"VertexAttribI3i","","",842,null],[11,"VertexAttribI3iv","","",842,null],[11,"VertexAttribI3ui","","",842,null],[11,"VertexAttribI3uiv","","",842,null],[11,"VertexAttribI4bv","","",842,null],[11,"VertexAttribI4i","","",842,null],[11,"VertexAttribI4iv","","",842,null],[11,"VertexAttribI4sv","","",842,null],[11,"VertexAttribI4ubv","","",842,null],[11,"VertexAttribI4ui","","",842,null],[11,"VertexAttribI4uiv","","",842,null],[11,"VertexAttribI4usv","","",842,null],[11,"VertexAttribIFormat","","",842,null],[11,"VertexAttribIPointer","","",842,null],[11,"VertexAttribL1d","","",842,null],[11,"VertexAttribL1dv","","",842,null],[11,"VertexAttribL1i64NV","","",842,null],[11,"VertexAttribL1i64vNV","","",842,null],[11,"VertexAttribL1ui64ARB","","",842,null],[11,"VertexAttribL1ui64NV","","",842,null],[11,"VertexAttribL1ui64vARB","","",842,null],[11,"VertexAttribL1ui64vNV","","",842,null],[11,"VertexAttribL2d","","",842,null],[11,"VertexAttribL2dv","","",842,null],[11,"VertexAttribL2i64NV","","",842,null],[11,"VertexAttribL2i64vNV","","",842,null],[11,"VertexAttribL2ui64NV","","",842,null],[11,"VertexAttribL2ui64vNV","","",842,null],[11,"VertexAttribL3d","","",842,null],[11,"VertexAttribL3dv","","",842,null],[11,"VertexAttribL3i64NV","","",842,null],[11,"VertexAttribL3i64vNV","","",842,null],[11,"VertexAttribL3ui64NV","","",842,null],[11,"VertexAttribL3ui64vNV","","",842,null],[11,"VertexAttribL4d","","",842,null],[11,"VertexAttribL4dv","","",842,null],[11,"VertexAttribL4i64NV","","",842,null],[11,"VertexAttribL4i64vNV","","",842,null],[11,"VertexAttribL4ui64NV","","",842,null],[11,"VertexAttribL4ui64vNV","","",842,null],[11,"VertexAttribLFormat","","",842,null],[11,"VertexAttribLFormatNV","","",842,null],[11,"VertexAttribLPointer","","",842,null],[11,"VertexAttribP1ui","","",842,null],[11,"VertexAttribP1uiv","","",842,null],[11,"VertexAttribP2ui","","",842,null],[11,"VertexAttribP2uiv","","",842,null],[11,"VertexAttribP3ui","","",842,null],[11,"VertexAttribP3uiv","","",842,null],[11,"VertexAttribP4ui","","",842,null],[11,"VertexAttribP4uiv","","",842,null],[11,"VertexAttribPointer","","",842,null],[11,"VertexAttribPointerARB","","",842,null],[11,"VertexBindingDivisor","","",842,null],[11,"VertexP2ui","","",842,null],[11,"VertexP2uiv","","",842,null],[11,"VertexP3ui","","",842,null],[11,"VertexP3uiv","","",842,null],[11,"VertexP4ui","","",842,null],[11,"VertexP4uiv","","",842,null],[11,"VertexPointer","","",842,null],[11,"Viewport","","",842,null],[11,"ViewportArrayv","","",842,null],[11,"ViewportIndexedf","","",842,null],[11,"ViewportIndexedfv","","",842,null],[11,"WaitSync","","",842,null],[11,"WindowPos2d","","",842,null],[11,"WindowPos2dv","","",842,null],[11,"WindowPos2f","","",842,null],[11,"WindowPos2fv","","",842,null],[11,"WindowPos2i","","",842,null],[11,"WindowPos2iv","","",842,null],[11,"WindowPos2s","","",842,null],[11,"WindowPos2sv","","",842,null],[11,"WindowPos3d","","",842,null],[11,"WindowPos3dv","","",842,null],[11,"WindowPos3f","","",842,null],[11,"WindowPos3fv","","",842,null],[11,"WindowPos3i","","",842,null],[11,"WindowPos3iv","","",842,null],[11,"WindowPos3s","","",842,null],[11,"WindowPos3sv","","",842,null],[11,"BeginQueryEXT","","",842,null],[11,"BindVertexArrayOES","","",842,null],[11,"BufferStorageEXT","","",842,null],[11,"ClientWaitSyncAPPLE","","",842,null],[11,"CopyBufferSubDataNV","","",842,null],[11,"DebugMessageCallbackKHR","","",842,null],[11,"DebugMessageControlKHR","","",842,null],[11,"DebugMessageInsertKHR","","",842,null],[11,"DeleteQueriesEXT","","",842,null],[11,"DeleteSyncAPPLE","","",842,null],[11,"DeleteVertexArraysOES","","",842,null],[11,"EndQueryEXT","","",842,null],[11,"FenceSyncAPPLE","","",842,null],[11,"GenQueriesEXT","","",842,null],[11,"GenVertexArraysOES","","",842,null],[11,"GetDebugMessageLogKHR","","",842,null],[11,"GetGraphicsResetStatusEXT","","",842,{"inputs":[{"name":"gl"}],"output":{"name":"u32"}}],[11,"GetInteger64vAPPLE","","",842,null],[11,"GetObjectLabelKHR","","",842,null],[11,"GetObjectPtrLabelKHR","","",842,null],[11,"GetPointervKHR","","",842,null],[11,"GetQueryObjecti64vEXT","","",842,null],[11,"GetQueryObjectivEXT","","",842,null],[11,"GetQueryObjectui64vEXT","","",842,null],[11,"GetQueryObjectuivEXT","","",842,null],[11,"GetQueryivEXT","","",842,null],[11,"GetSyncivAPPLE","","",842,null],[11,"GetnUniformfvEXT","","",842,null],[11,"GetnUniformivEXT","","",842,null],[11,"IsQueryEXT","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"IsSyncAPPLE","","",842,null],[11,"IsVertexArrayOES","","",842,{"inputs":[{"name":"gl"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"MultiDrawArraysIndirectEXT","","",842,null],[11,"MultiDrawElementsIndirectEXT","","",842,null],[11,"ObjectLabelKHR","","",842,null],[11,"ObjectPtrLabelKHR","","",842,null],[11,"PopDebugGroupKHR","","",842,null],[11,"PushDebugGroupKHR","","",842,null],[11,"QueryCounterEXT","","",842,null],[11,"ReadnPixelsEXT","","",842,null],[11,"WaitSyncAPPLE","","",842,null],[11,"hash","glium","",843,null],[11,"fmt","","",843,{"inputs":[{"name":"handle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",843,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",843,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"ne","","",843,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"fmt","","",844,{"inputs":[{"name":"rawuniformvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",844,{"inputs":[{"name":"rawuniformvalue"}],"output":{"name":"rawuniformvalue"}}],[11,"eq","","",845,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"ne","","",845,{"inputs":[{"name":"rect"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"default","","",845,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"clone","","",845,{"inputs":[{"name":"rect"}],"output":{"name":"rect"}}],[11,"fmt","","",845,{"inputs":[{"name":"rect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",846,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"ne","","",846,{"inputs":[{"name":"blittarget"},{"name":"blittarget"}],"output":{"name":"bool"}}],[11,"default","","",846,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"clone","","",846,{"inputs":[{"name":"blittarget"}],"output":{"name":"blittarget"}}],[11,"fmt","","",846,{"inputs":[{"name":"blittarget"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",847,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",847,{"inputs":[{"name":"drawerror"}],"output":{"name":"drawerror"}}],[11,"fmt","","",847,{"inputs":[{"name":"drawerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",848,{"inputs":[{"name":"swapbufferserror"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"ne","","",848,{"inputs":[{"name":"swapbufferserror"},{"name":"swapbufferserror"}],"output":{"name":"bool"}}],[11,"clone","","",848,{"inputs":[{"name":"swapbufferserror"}],"output":{"name":"swapbufferserror"}}],[11,"fmt","","",848,{"inputs":[{"name":"swapbufferserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Builds a new `Frame`. Use the `draw` function on `Display` instead of this function.",849,null],[11,"finish","","Stop drawing, swap the buffers, and consume the Frame.",849,{"inputs":[{"name":"frame"}],"output":{"name":"result"}}],[11,"set_finish","","Stop drawing, swap the buffers.",849,{"inputs":[{"name":"frame"}],"output":{"name":"result"}}],[11,"clear","","",849,null],[11,"get_dimensions","","",849,null],[11,"get_depth_buffer_bits","","",849,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"get_stencil_buffer_bits","","",849,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"draw","","",849,{"inputs":[{"name":"frame"},{"name":"v"},{"name":"i"},{"name":"program"},{"name":"u"},{"name":"drawparameters"}],"output":{"name":"result"}}],[11,"blit_color","","",849,null],[11,"blit_from_frame","","",849,null],[11,"blit_from_simple_framebuffer","","",849,null],[11,"blit_from_multioutput_framebuffer","","",849,null],[11,"get_attachments","","",849,{"inputs":[{"name":"frame"}],"output":{"name":"option"}}],[11,"drop","","",849,null],[11,"eq","","",850,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"ne","","",850,{"inputs":[{"name":"gliumcreationerror"},{"name":"gliumcreationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",850,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",850,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"gliumcreationerror"}}],[11,"fmt","","",850,{"inputs":[{"name":"gliumcreationerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",850,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"str"}}],[11,"cause","","",850,{"inputs":[{"name":"gliumcreationerror"}],"output":{"name":"option"}}],[11,"from","","",850,{"inputs":[{"name":"gliumcreationerror"},{"name":"t"}],"output":{"name":"gliumcreationerror"}}],[4,"PrimitiveType","lux::graphics","List of available primitives.",null,null],[13,"Points","","",124,null],[13,"LinesList","","",124,null],[13,"LinesListAdjacency","","",124,null],[13,"LineStrip","","",124,null],[13,"LineStripAdjacency","","",124,null],[13,"LineLoop","","",124,null],[13,"TrianglesList","","",124,null],[13,"TrianglesListAdjacency","","",124,null],[13,"TriangleStrip","","",124,null],[13,"TriangleStripAdjacency","","",124,null],[13,"TriangleFan","","",124,null],[13,"Patches","","",124,null],[12,"vertices_per_patch","lux::graphics::PrimitiveType","",124,null],[3,"Rectangle","lux::graphics","A Rectangle that can be drawn to the screen.",null,null],[3,"Ellipse","","An ellipse that can be drawn to the screen.",null,null],[3,"ContainedSprite","","A sprite that can be drawn to the screen.",null,null],[3,"ColorVertex","","A colored vertex.",null,null],[12,"pos","","The position in screen space.",851,null],[12,"color","","The color in [r, g, b, a].",851,null],[3,"TexVertex","","A textured vertex.",null,null],[12,"pos","","The position in screen space",852,null],[12,"tex_coords","","The texture cooordinates [x, y] where x and y\nare in the range `0.0` to `1.0`.",852,null],[3,"Sprite","","A ref-counted reference to a texture on the GPU.",null,null],[3,"Texture","","An owned texture on the hardware.",null,null],[3,"DrawableTexture","","A texture that can be drawn to like a regular canvas.",null,null],[3,"UniformSpriteSheet","","A uniform sprite sheet is a sprite sheet that is broken up into\na grid of equally sized sub-sprites.",null,null],[12,"sprite","","The sprite that this sprite sheet indexes into",853,null],[3,"NonUniformSpriteSheet","","A uniform sprite sheet is a sprite sheet that has parts of the original\nsprite broken up into chunks that are associated to a Key.",null,null],[12,"sprite","","The sprite that this sprite sheet indexes into",854,null],[12,"mapping","","The mapping from a key to a subsprite",854,null],[4,"StencilType","","When modifying a stencil or clearing the stencil buffer,\noperations require a StencilType.",null,null],[13,"Deny","","Deny blacklists pixels on the screen when drawing or clearing.",855,null],[13,"Allow","","Deny whitelists pixels on the screen when drawing or clearing.",855,null],[8,"Canvas","","Canvas is the main trait for drawing in Lux.  It supports all operations\nthat paint to the screen or to a buffer.",null,null],[10,"size","","Returns the size of the canvas as a pair of (width, height).",856,null],[11,"width","","Returns the width of the canvas.",856,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"height","","Returns the height of the canvas.",856,{"inputs":[{"name":"canvas"}],"output":{"name":"float"}}],[11,"clear","","Clears the canvas with a solid color.",856,{"inputs":[{"name":"canvas"},{"name":"c"}],"output":null}],[11,"with_scissor","","Evaluates the function with a canvas that will only draw into the\nprovided rectangle.",856,{"inputs":[{"name":"canvas"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"name":"r"}}],[11,"draw_to_stencil","","Executes a drawing function where all drawing is done on the\nstencil buffer.",856,{"inputs":[{"name":"canvas"},{"name":"stenciltype"},{"name":"s"}],"output":{"name":"r"}}],[11,"clear_stencil","","Clears the stencil buffer allowing all draws to go though.",856,{"inputs":[{"name":"canvas"},{"name":"stenciltype"}],"output":null}],[11,"rect","","Returns a rectangle with the given dimensions and position.",856,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"square","","Returns a square with the given dimensions and position.",856,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"rectangle"}}],[11,"ellipse","","Returns an ellipse with the given dimensions and position.",856,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"circle","","Returns an circle with the given dimensions and position.",856,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":{"name":"ellipse"}}],[11,"draw_point","","Draws a 1-pixel colored point to the screen at a position.",856,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"c"}],"output":null}],[11,"draw_points","","Draws a sequence of colored points with the size of 1 pixel.",856,null],[11,"draw_line","","Draws a single line from `start` to `end` with a\nthickness of `line_size`.",856,{"inputs":[{"name":"canvas"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"},{"name":"float"}],"output":null}],[11,"draw_lines","","Draws a series of lines from each point to the next with a thickness\nof `line_size`.",856,{"inputs":[{"name":"canvas"},{"name":"i"},{"name":"float"}],"output":null}],[11,"draw_arc","","Draws an arc centered at `pos` from `angle1` to `angle_2` with a\nthickness of `line_size`.",856,null],[11,"sprite","","Draws a sprite  to the screen.",856,{"inputs":[{"name":"canvas"},{"name":"sprite"},{"name":"float"},{"name":"float"}],"output":{"name":"containedsprite"}}],[8,"PrimitiveCanvas","","A Primitive canvas is a trait that is implemented by objects that\ncan have draw commands issued to them.",null,null],[10,"clear","","Clears the canvas with a color.",857,{"inputs":[{"name":"primitivecanvas"},{"name":"c"}],"output":null}],[10,"clear_stencil","","Clears the stencil buffer.",857,{"inputs":[{"name":"primitivecanvas"},{"name":"i32"}],"output":null}],[10,"draw_colored","","Draws the verteces to the canvas. This function uses caching to\nbatch draw calls that are similar.",857,null],[10,"draw_colored_now","","Draws colored vertices to the canvas with no thought given to the\ncached draw commands.",857,null],[10,"draw_colored_no_batch","","Immediately draws colored vertices to the canvas.",857,null],[10,"draw_tex","","Same as `draw_colored` but for textured vertices.",857,null],[10,"draw_textured_now","","Same as `draw_colored_now` but for textured vertices.",857,null],[10,"draw_tex_no_batch","","Same as `draw_colored_no_batch` but for textured vertices.",857,null],[10,"flush_draw","","Flush all stored draw calls to the screen.",857,{"inputs":[{"name":"primitivecanvas"}],"output":{"name":"luxresult"}}],[8,"IntoSprite","","Implemented by any object that can be converted into a Sprite.",null,null],[10,"into_sprite","","Attempts to convert itself into a sprite.",858,{"inputs":[{"name":"intosprite"},{"name":"d"}],"output":{"name":"luxresult"}}],[8,"TextureLoader","","TextureLoader is implemented on any object that can load textures.",null,null],[10,"load_texture_file","","Attempts to load a texture from a path.",859,{"inputs":[{"name":"textureloader"},{"name":"p"}],"output":{"name":"result"}}],[10,"texture_from_image","","Attempts to load a texture from a `DynamicImage` from the `image` crate.",859,{"inputs":[{"name":"textureloader"},{"name":"dynamicimage"}],"output":{"name":"result"}}],[0,"interactive","lux","Functionality for dealing with events, querying, and  modifying\nthe window.",null,null],[3,"EventIterator","lux::interactive","An iterator for windowing events.",null,null],[4,"Event","","An even coming from an Interactive object.",null,null],[13,"MouseMoved","","The mouse moved to this position.",860,null],[13,"MouseWheel","","The mouse wheel moved by this delta.",860,null],[13,"MouseDown","","This mouse button was pushed down.",860,null],[13,"MouseUp","","This mouse button was released.",860,null],[13,"KeyPressed","","This key was pressed.",860,null],[13,"KeyReleased","","This key was released.",860,null],[13,"WindowResized","","The window was resized to this size.",860,null],[13,"WindowMoved","","The window was moved to this position on the screen.",860,null],[13,"FileDropped","","A file has been dragged-and-dropped into the screen.",860,null],[4,"MouseButton","","A handy enumeration for the buttons on a mouse.",null,null],[13,"Left","","The left mouse button.",861,null],[13,"Right","","The right mouse button.",861,null],[13,"Middle","","The middle mouse button.",861,null],[13,"Other","","Any other unnamed mouse button.",861,null],[0,"keycodes","","A keycode is a platform independent way to refer to\nkeys on the keyboard.",null,null],[4,"VirtualKeyCode","lux::interactive::keycodes","",null,null],[13,"Key1","","The '1' key over the letters.",24,null],[13,"Key2","","The '2' key over the letters.",24,null],[13,"Key3","","The '3' key over the letters.",24,null],[13,"Key4","","The '4' key over the letters.",24,null],[13,"Key5","","The '5' key over the letters.",24,null],[13,"Key6","","The '6' key over the letters.",24,null],[13,"Key7","","The '7' key over the letters.",24,null],[13,"Key8","","The '8' key over the letters.",24,null],[13,"Key9","","The '9' key over the letters.",24,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",24,null],[13,"A","","",24,null],[13,"B","","",24,null],[13,"C","","",24,null],[13,"D","","",24,null],[13,"E","","",24,null],[13,"F","","",24,null],[13,"G","","",24,null],[13,"H","","",24,null],[13,"I","","",24,null],[13,"J","","",24,null],[13,"K","","",24,null],[13,"L","","",24,null],[13,"M","","",24,null],[13,"N","","",24,null],[13,"O","","",24,null],[13,"P","","",24,null],[13,"Q","","",24,null],[13,"R","","",24,null],[13,"S","","",24,null],[13,"T","","",24,null],[13,"U","","",24,null],[13,"V","","",24,null],[13,"W","","",24,null],[13,"X","","",24,null],[13,"Y","","",24,null],[13,"Z","","",24,null],[13,"Escape","","The Escape key, next to F1.",24,null],[13,"F1","","",24,null],[13,"F2","","",24,null],[13,"F3","","",24,null],[13,"F4","","",24,null],[13,"F5","","",24,null],[13,"F6","","",24,null],[13,"F7","","",24,null],[13,"F8","","",24,null],[13,"F9","","",24,null],[13,"F10","","",24,null],[13,"F11","","",24,null],[13,"F12","","",24,null],[13,"F13","","",24,null],[13,"F14","","",24,null],[13,"F15","","",24,null],[13,"Snapshot","","Print Screen/SysRq.",24,null],[13,"Scroll","","Scroll Lock.",24,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",24,null],[13,"Insert","","`Insert`, next to Backspace.",24,null],[13,"Home","","",24,null],[13,"Delete","","",24,null],[13,"End","","",24,null],[13,"PageDown","","",24,null],[13,"PageUp","","",24,null],[13,"Left","","",24,null],[13,"Up","","",24,null],[13,"Right","","",24,null],[13,"Down","","",24,null],[13,"Back","","The Backspace key, right over Enter.",24,null],[13,"Return","","The Enter key.",24,null],[13,"Space","","The space bar.",24,null],[13,"Numlock","","",24,null],[13,"Numpad0","","",24,null],[13,"Numpad1","","",24,null],[13,"Numpad2","","",24,null],[13,"Numpad3","","",24,null],[13,"Numpad4","","",24,null],[13,"Numpad5","","",24,null],[13,"Numpad6","","",24,null],[13,"Numpad7","","",24,null],[13,"Numpad8","","",24,null],[13,"Numpad9","","",24,null],[13,"AbntC1","","",24,null],[13,"AbntC2","","",24,null],[13,"Add","","",24,null],[13,"Apostrophe","","",24,null],[13,"Apps","","",24,null],[13,"At","","",24,null],[13,"Ax","","",24,null],[13,"Backslash","","",24,null],[13,"Calculator","","",24,null],[13,"Capital","","",24,null],[13,"Colon","","",24,null],[13,"Comma","","",24,null],[13,"Convert","","",24,null],[13,"Decimal","","",24,null],[13,"Divide","","",24,null],[13,"Equals","","",24,null],[13,"Grave","","",24,null],[13,"Kana","","",24,null],[13,"Kanji","","",24,null],[13,"LAlt","","",24,null],[13,"LBracket","","",24,null],[13,"LControl","","",24,null],[13,"LMenu","","",24,null],[13,"LShift","","",24,null],[13,"LWin","","",24,null],[13,"Mail","","",24,null],[13,"MediaSelect","","",24,null],[13,"MediaStop","","",24,null],[13,"Minus","","",24,null],[13,"Multiply","","",24,null],[13,"Mute","","",24,null],[13,"MyComputer","","",24,null],[13,"NextTrack","","",24,null],[13,"NoConvert","","",24,null],[13,"NumpadComma","","",24,null],[13,"NumpadEnter","","",24,null],[13,"NumpadEquals","","",24,null],[13,"OEM102","","",24,null],[13,"Period","","",24,null],[13,"PlayPause","","",24,null],[13,"Power","","",24,null],[13,"PrevTrack","","",24,null],[13,"RAlt","","",24,null],[13,"RBracket","","",24,null],[13,"RControl","","",24,null],[13,"RMenu","","",24,null],[13,"RShift","","",24,null],[13,"RWin","","",24,null],[13,"Semicolon","","",24,null],[13,"Slash","","",24,null],[13,"Sleep","","",24,null],[13,"Stop","","",24,null],[13,"Subtract","","",24,null],[13,"Sysrq","","",24,null],[13,"Tab","","",24,null],[13,"Underline","","",24,null],[13,"Unlabeled","","",24,null],[13,"VolumeDown","","",24,null],[13,"VolumeUp","","",24,null],[13,"Wake","","",24,null],[13,"WebBack","","",24,null],[13,"WebFavorites","","",24,null],[13,"WebForward","","",24,null],[13,"WebHome","","",24,null],[13,"WebRefresh","","",24,null],[13,"WebSearch","","",24,null],[13,"WebStop","","",24,null],[13,"Yen","","",24,null],[8,"Interactive","lux::interactive","A trait for objects that are interactive to the user.\nThe only known impelementation for this trait is the glutin Window.",null,null],[10,"is_open","","Returns true if the window is not yet closed.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"was_open","","Returns true if the window wasn't closed the last time that input was\npolled.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"title","","Returns the title of the object.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"str"}}],[10,"set_title","","Sets the title of the object.  If the object is a window,\nthis title will be used to decorate the window.",862,{"inputs":[{"name":"interactive"},{"name":"str"}],"output":null}],[10,"set_size","","Sets the size of the window if possible.",862,{"inputs":[{"name":"interactive"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_size_u","","Returns the size of the window as an unsigned integer.",862,null],[11,"get_size","","Returns the size of the window.",862,null],[11,"width","","Returns the width of the window.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"height","","Returns the height of the window.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"f32"}}],[11,"width_u","","Returns the width of the window as an unsigned integer.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[11,"height_u","","Returns the height of the window as an unsigned integer.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"u32"}}],[10,"is_focused","","Returns true if the operating system has given this object focus.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"is_mouse_down","","Returns true if any mouse button is down.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"bool"}}],[10,"mouse_pos","","Returns the current position of the mouse.",862,null],[10,"mouse_pos_i","","Returns the current position of the mouse in integer units.",862,null],[11,"mouse_x","","Returns the x coordinate of the mouse.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_x_i","","Returns the x coordinate of the mouse in integer units.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[11,"mouse_y","","Returns the y coordinate of the mouse.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"float"}}],[11,"mouse_y_i","","Returns the y coordinate of the mouse in integer units.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"i32"}}],[10,"is_key_pressed","","Returns true if a given key is currently being pressed.",862,{"inputs":[{"name":"interactive"},{"name":"k"}],"output":{"name":"bool"}}],[10,"events","","Consumes all unseen events and returns them in an iterator.",862,{"inputs":[{"name":"interactive"}],"output":{"name":"eventiterator"}}],[8,"AbstractKey","","A conversion trait for representing the different ways that a key\ncan be represented.",null,null],[10,"to_key","","Converts an abstract key into a set of concrete key implementations.",863,null],[0,"window","lux","The main window and the frames that are generated by the window.",null,null],[3,"Window","lux::window","A 1 to 1 correlation with a window shown on your desktop.",null,null],[3,"Frame","","A frame is a render target that can be drawn on.",null,null],[0,"modifiers","lux","Many contexts can be modified and chained together in a logical way.",null,null],[8,"Colored","lux::modifiers","A trait representing objects that can be colored with\nseperate fill colors and stroke colors.",null,null],[10,"get_color","","Returns the current color.",864,null],[10,"color","","Sets the color.",864,{"inputs":[{"name":"colored"},{"name":"c"}],"output":{"name":"self"}}],[11,"with_color","","Executes a closure with the given color, then resets it to what it was before.",864,{"inputs":[{"name":"colored"},{"name":"c"},{"name":"f"}],"output":null}],[8,"Transform","","A trait for objects that can be \"transformed\".  Transformations\ninclude scaling, translation, shearing, rotating, and general\npurpose matrix application.",null,null],[10,"current_matrix","","Return a reference to the current matrix.",865,null],[10,"current_matrix_mut","","Return a mutible reference to the current matrix.",865,null],[11,"apply_matrix","","Multiplies the current matrix against another.\n`self = self * other`.",865,null],[11,"translate","","Applies a translation transformation to the matrix.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"scale","","Applies a scaling transformation to the matrix.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"shear","","Applies a shearing transformation to the matrix.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate","","Applies a rotation transformation to the matrix.",865,{"inputs":[{"name":"transform"},{"name":"float"}],"output":{"name":"self"}}],[11,"rotate_around","","Combines rotation with translation to effectively\nrotate around a given point.",865,null],[11,"with_matrix","","Used when you want to make several successive calls to transformations\non a single stacked matrix.",865,{"inputs":[{"name":"transform"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotation","","Similar to `with_matrix` but with a rotation applied\nfor the duration of the closure.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_translate","","Similar to `with_matrix` but with a translation applied\nfor the duration of the closure.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_scale","","Similar to `with_matrix` but with a scale applied\nfor the duration of the closure.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_shear","","Similar to `with_matrix` but with a shear applied\nfor the duration of the closure.",865,{"inputs":[{"name":"transform"},{"name":"float"},{"name":"float"},{"name":"f"}],"output":{"name":"r"}}],[11,"with_rotate_around","","Similar to `with_matrix` but with rotate_around applied\nfor the duration of the closure.",865,null],[0,"game","lux","A game loop implementation using Lux for windowing and graphics.",null,null],[3,"GameRunner","lux::game","A struct that wraps a `Game` and a `Window` and implementes a game loop.",null,null],[12,"window","","The window being used to run the game.",866,null],[12,"game","","The wrapped game.",866,null],[8,"Game","","A trait that represents basic game functionality.",null,null],[10,"update","","The update portion of the game loop.",867,{"inputs":[{"name":"game"},{"name":"f32"},{"name":"window"},{"name":"eventiterator"}],"output":{"name":"luxresult"}}],[10,"render","","The render portion of the game loop.",867,{"inputs":[{"name":"game"},{"name":"f32"},{"name":"window"},{"name":"frame"}],"output":{"name":"luxresult"}}],[11,"clear_color","","The color that is used to clear the screen before each frame.",867,{"inputs":[{"name":"game"}],"output":{"name":"option"}}],[11,"show_fps","","If running in a GameRunner, this function can be overridden to\ndisplay a running FPS counter that shows how time is being spent\nin the game.",867,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"bool"}}],[11,"should_close","","For custom game-closing logic this function can be overridden to\nconditionally return true.",867,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"bool"}}],[11,"prepare_window","","Called once when the GameRunner is set up, this function can be\noverridden to set properties on the Window.",867,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"luxresult"}}],[11,"on_close","","Called once before terminating the window.",867,{"inputs":[{"name":"game"},{"name":"window"}],"output":{"name":"luxresult"}}],[11,"updates_per_s","","Returs the amount of updates you want to have run in one wall-clock\nsecond.",867,{"inputs":[{"name":"game"}],"output":{"name":"f64"}}],[11,"s_per_update","","Returns the amount of (fractional) seconds that you want an individual\nupdate to take.",867,{"inputs":[{"name":"game"}],"output":{"name":"f64"}}],[11,"run_until_end","","Starts this game and runs it until the game is over.",867,{"inputs":[{"name":"game"}],"output":{"name":"luxresult"}}],[0,"font","lux","Text drawing and loading functionality.",null,null],[5,"load_atlas","lux::font","Load the image portion of a font atlas from a slice of bytes, and the\nmetadata portion from a slice.",null,null],[5,"read_atlas","","Load the image portion of a font atlas from one Reader, and the\nmetadata portion from another.",null,{"inputs":[{"name":"r1"},{"name":"r2"}],"output":{"name":"result"}}],[5,"save_atlas","","Saves an atlas to two paths.  One for the image (using the specified image format),\none for the font metadata.",null,{"inputs":[{"name":"renderedfont"},{"name":"imageformat"},{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"write_atlas","","Saves an atlas to two Writers.  One for the image (using the specified image format),\none for the font metadata.",null,{"inputs":[{"name":"renderedfont"},{"name":"imageformat"},{"name":"w1"},{"name":"w2"}],"output":{"name":"result"}}],[5,"render","","Given a freetype face, this function generates a RenderedFont with the\na `DynamicImage` backing it.",null,{"inputs":[{"name":"face"},{"name":"i"},{"name":"bool"}],"output":{"name":"result"}}],[3,"ContainedText","","A context that contains information about the text that can be drawn to the screen.",null,null],[7,"SOURCE_CODE_PRO_REGULAR","","",null,null],[8,"TextDraw","","Any struct that implements `TextDraw` can draw text to it.",null,null],[11,"text","","Starts drawing some text at a position.",868,{"inputs":[{"name":"textdraw"},{"name":"s"},{"name":"float"},{"name":"float"}],"output":{"name":"containedtext"}}],[8,"TextLoad","","Any struct that implements TextLoad can have fonts atlases added\nto an internal cache.",null,null],[11,"cache","","Adds a rendered font to the font cache.",869,{"inputs":[{"name":"textload"},{"name":"str"},{"name":"u16"},{"name":"renderedfont"}],"output":{"name":"luxresult"}}],[11,"clear","","Removes a rendered font from the cache.",869,{"inputs":[{"name":"textload"},{"name":"str"},{"name":"u16"}],"output":null}],[11,"use_font","","Sets a font as the current font.",869,{"inputs":[{"name":"textload"},{"name":"str"},{"name":"u16"}],"output":{"name":"luxresult"}}],[0,"prelude","lux","A collection of common traits, structs and functions that are\nrecommended for average Lux usage.",null,null],[6,"LuxResult","","A result returning either a value or a lux-generated error.",null,null],[11,"get_size","lux::interactive","Returns the size of the window.",862,null],[11,"width","","Returns the width of the window.",862,null],[11,"height","","Returns the height of the window.",862,null],[11,"width_u","","Returns the width of the window as an unsigned integer.",862,null],[11,"height_u","","Returns the height of the window as an unsigned integer.",862,null],[11,"mouse_x","","Returns the x coordinate of the mouse.",862,null],[11,"mouse_x_i","","Returns the x coordinate of the mouse in integer units.",862,null],[11,"mouse_y","","Returns the y coordinate of the mouse.",862,null],[11,"mouse_y_i","","Returns the y coordinate of the mouse in integer units.",862,null],[11,"clone","","",860,null],[11,"eq","","",860,null],[11,"ne","","",860,null],[11,"fmt","","",860,null],[11,"clone","","",861,null],[11,"hash","","",861,null],[11,"eq","","",861,null],[11,"ne","","",861,null],[11,"fmt","","",861,null],[11,"is_empty","","Returns true if this event iterator contains no events",870,null],[11,"from_deque","","Constructs an `EventIterator` from a `VecDeque`.",870,null],[11,"into_deque","","Convertes this `EventIterator` back into a `VecDeque`.",870,null],[11,"as_ref","","Returns an iterator over the events contained inside without\nremoving them.",870,null],[11,"as_mut","","Returns a mutable iterator over the events contained\ninside without removing them.",870,null],[11,"next","","",870,null],[11,"size_hint","","",870,null],[11,"next_back","","",870,null],[11,"width","lux::graphics","Returns the width of the canvas.",856,null],[11,"height","","Returns the height of the canvas.",856,null],[11,"clear","","Clears the canvas with a solid color.",856,null],[11,"with_scissor","","Evaluates the function with a canvas that will only draw into the\nprovided rectangle.",856,null],[11,"draw_to_stencil","","Executes a drawing function where all drawing is done on the\nstencil buffer.",856,null],[11,"clear_stencil","","Clears the stencil buffer allowing all draws to go though.",856,null],[11,"rect","","Returns a rectangle with the given dimensions and position.",856,null],[11,"square","","Returns a square with the given dimensions and position.",856,null],[11,"ellipse","","Returns an ellipse with the given dimensions and position.",856,null],[11,"circle","","Returns an circle with the given dimensions and position.",856,null],[11,"draw_point","","Draws a 1-pixel colored point to the screen at a position.",856,null],[11,"draw_points","","Draws a sequence of colored points with the size of 1 pixel.",856,null],[11,"draw_line","","Draws a single line from `start` to `end` with a\nthickness of `line_size`.",856,null],[11,"draw_lines","","Draws a series of lines from each point to the next with a thickness\nof `line_size`.",856,null],[11,"draw_arc","","Draws an arc centered at `pos` from `angle1` to `angle_2` with a\nthickness of `line_size`.",856,null],[11,"sprite","","Draws a sprite  to the screen.",856,null],[11,"spokes","","Sets the number of segments that are used to approximate a circle.",871,null],[11,"current_matrix","","",872,null],[11,"current_matrix_mut","","",872,null],[11,"current_matrix","","",871,null],[11,"current_matrix_mut","","",871,null],[11,"get_color","","",871,null],[11,"color","","",871,null],[11,"get_color","","",872,null],[11,"color","","",872,null],[11,"get_color","","",873,null],[11,"color","","",873,null],[11,"fill","","Fills in the ellipse with a solid color.",871,null],[11,"size","","Sets the side of the sprite when drawn to the screen.",873,null],[11,"draw","","Draws the sprite to the screen.",873,null],[11,"fill","","Fills the rectangle with a solid color.",872,null],[11,"stroke","","Draws a border around the rectangle.",872,null],[11,"fill_and_stroke","","Both fills and strokes the rectangle.",872,null],[11,"border","","Sets the size of the border.  The border is drawn using the\n`stroke()` function.",872,null],[11,"apply_matrix","lux::modifiers","Multiplies the current matrix against another.\n`self = self * other`.",865,null],[11,"translate","","Applies a translation transformation to the matrix.",865,null],[11,"scale","","Applies a scaling transformation to the matrix.",865,null],[11,"shear","","Applies a shearing transformation to the matrix.",865,null],[11,"rotate","","Applies a rotation transformation to the matrix.",865,null],[11,"rotate_around","","Combines rotation with translation to effectively\nrotate around a given point.",865,null],[11,"with_matrix","","Used when you want to make several successive calls to transformations\non a single stacked matrix.",865,null],[11,"with_rotation","","Similar to `with_matrix` but with a rotation applied\nfor the duration of the closure.",865,null],[11,"with_translate","","Similar to `with_matrix` but with a translation applied\nfor the duration of the closure.",865,null],[11,"with_scale","","Similar to `with_matrix` but with a scale applied\nfor the duration of the closure.",865,null],[11,"with_shear","","Similar to `with_matrix` but with a shear applied\nfor the duration of the closure.",865,null],[11,"with_rotate_around","","Similar to `with_matrix` but with rotate_around applied\nfor the duration of the closure.",865,null],[11,"with_color","","Executes a closure with the given color, then resets it to what it was before.",864,null],[11,"clone","lux::graphics","",851,null],[11,"fmt","","",851,null],[11,"build_bindings","","",851,null],[11,"clone","","",852,null],[11,"fmt","","",852,null],[11,"build_bindings","","",852,null],[11,"drop","lux::window","",874,null],[11,"assert_no_error","","Panics if an OpenGL error has occurred.",875,null],[11,"new","","Constructs a new window with the default settings.",875,null],[11,"restock_events","","Add the events from an iterator of events back to the internal event queue.",875,null],[11,"process_events","","Query the underlying window system for events and add them to the\nthe interal event queue.",875,null],[11,"cleared_frame","","Produce a frame that has been cleared with a color.",875,null],[11,"frame","","Produce a frame that has not been cleared.",875,null],[11,"size","","",874,null],[11,"is_open","","",875,null],[11,"was_open","","",875,null],[11,"title","","",875,null],[11,"set_title","","",875,null],[11,"set_size","","",875,null],[11,"get_size_u","","",875,null],[11,"get_size","","",875,null],[11,"is_focused","","",875,null],[11,"mouse_pos_i","","",875,null],[11,"mouse_pos","","",875,null],[11,"is_mouse_down","","",875,null],[11,"events","","",875,null],[11,"is_key_pressed","","",875,null],[11,"current_matrix_mut","","",874,null],[11,"current_matrix","","",874,null],[11,"get_color","","",874,null],[11,"color","","",874,null],[11,"borrow_display","","",875,null],[11,"font_cache","","",875,null],[11,"borrow_display","","",874,null],[11,"font_cache","","",874,null],[11,"surface","","",874,null],[11,"surface_and_texture_shader","","",874,null],[11,"surface_and_color_shader","","",874,null],[11,"color_draw_cache","","",874,null],[11,"tex_draw_cache","","",874,null],[11,"color_draw_cache_mut","","",874,null],[11,"tex_draw_cache_mut","","",874,null],[11,"texture_shader","","",875,null],[11,"color_shader","","",875,null],[11,"texture_shader","","",874,null],[11,"color_shader","","",874,null],[11,"fetch","","",874,null],[11,"fetch","","",874,null],[11,"fetch","","",874,null],[11,"draw_param_mod","","",874,null],[11,"draw_param_mod_mut","","",874,null],[11,"fmt","lux::graphics","",876,null],[11,"clone","","",876,null],[11,"fmt","","",853,null],[11,"clone","","",853,null],[11,"fmt","","",854,null],[11,"clone","","",854,null],[11,"into_sprite","","",876,null],[11,"into_sprite","","",877,null],[11,"empty","","Creates an empty texture with a given width and height.",877,null],[11,"to_sprite","","Converts this texture into a `Sprite`.",877,null],[11,"as_drawable","","Returns a reference to this texture with a drawable context.",877,null],[11,"draw_param_mod","","",878,null],[11,"draw_param_mod_mut","","",878,null],[11,"get_color","","",878,null],[11,"color","","",878,null],[11,"current_matrix","","",878,null],[11,"current_matrix_mut","","",878,null],[11,"borrow_display","","",878,null],[11,"surface","","",878,null],[11,"surface_and_texture_shader","","",878,null],[11,"surface_and_color_shader","","",878,null],[11,"color_draw_cache","","",878,null],[11,"tex_draw_cache","","",878,null],[11,"color_draw_cache_mut","","",878,null],[11,"tex_draw_cache_mut","","",878,null],[11,"fetch","","",878,null],[11,"fetch","","",878,null],[11,"fetch","","",878,null],[11,"size","","",878,null],[11,"drop","","",878,null],[11,"ideal_size","","Returns the size of this sprite given the size of the image in pixels\nthat this sprite was loaded from.",876,null],[11,"sub_sprite","","Returns a new sprite located offset from this sprite with a specified size.",876,null],[11,"original_sprite","","Returns a sprite that contains the entire texture that the sprite\nwas loaded from.",876,null],[11,"bounds","","Returns a an array containing the positions of",876,null],[11,"texture","","Returns a clone of the reference counted texture that this\nsprite was loaded from.",876,null],[11,"texture_ref","","Returns a reference to the texture that this sprite wasa loaded from.",876,null],[11,"as_uniform_sprite_sheet","","Returns a new uniform sprite sheet using this sprite as its base.",876,null],[11,"as_nonuniform_sprite_sheet","","Returns a new nonuniform sprite sheet using this sprite as its base.",876,null],[11,"num_divs","","Returns the number of divisions made in the x and y direction.",853,null],[11,"get","","Gets the sprite that is in the (x, y) position in the grid\ndefined by this sprite sheet.",853,null],[11,"get_opt","","Same as `get` but returns None instead of failing if\nthe sprite is out of bounds.",853,null],[11,"associate","","Associates a key with a sprite location.",854,null],[11,"get","","Gets the sprite that is associated with a key.",854,null],[11,"get_opt","","Same as `get` but returns None instead of failing if the key\ndoesn't associate to anything.",854,null],[11,"text","lux::font","Starts drawing some text at a position.",868,null],[11,"cache","","Adds a rendered font to the font cache.",869,null],[11,"clear","","Removes a rendered font from the cache.",869,null],[11,"use_font","","Sets a font as the current font.",869,null],[11,"size","","Sets the size of the font.",879,null],[11,"font","","Sets the font to be used.",879,null],[11,"draw","","Draws the font to the screen.",879,null],[11,"line_height","","Returns the height of one line of text with the selected font.",879,null],[11,"max_advance","","Returns the maximum horizontal distance that a character can move the pen\nwhile drawing.",879,null],[11,"absolute_positions","","Returns an iterator containing each character in the input text along\nwith the position and the size.",879,null],[11,"positions","","Returns an iterator containing each character in the input text along\nwith the position and the size.",879,null],[11,"bounding_box","","Returns the bounding box around this text.",879,null],[11,"get_length","","Returns the length in pixels of the rendered string.",879,null],[11,"current_matrix","","",879,null],[11,"current_matrix_mut","","",879,null],[11,"get_color","","",879,null],[11,"color","","",879,null],[11,"clear_color","lux::game","The color that is used to clear the screen before each frame.",867,null],[11,"show_fps","","If running in a GameRunner, this function can be overridden to\ndisplay a running FPS counter that shows how time is being spent\nin the game.",867,null],[11,"should_close","","For custom game-closing logic this function can be overridden to\nconditionally return true.",867,null],[11,"prepare_window","","Called once when the GameRunner is set up, this function can be\noverridden to set properties on the Window.",867,null],[11,"on_close","","Called once before terminating the window.",867,null],[11,"updates_per_s","","Returs the amount of updates you want to have run in one wall-clock\nsecond.",867,null],[11,"s_per_update","","Returns the amount of (fractional) seconds that you want an individual\nupdate to take.",867,null],[11,"run_until_end","","Starts this game and runs it until the game is over.",867,null],[11,"new","","Constructs a new GameRunner wrapping a game.",866,null],[11,"run_until_end","","Runs the game until the game is terminated.",866,null],[11,"clone","lux::graphics","",855,null],[11,"inverse","","Returns the opposite of this stencil type.",855,null]],"paths":[[4,"LuxError"],[3,"FnPtr"],[3,"Egl"],[3,"Context"],[3,"CurrentContextGuard"],[3,"FnPtr"],[3,"Wgl"],[3,"WindowWrapper"],[3,"ContextWrapper"],[3,"Context"],[3,"DeviceEnumerator"],[3,"MonitorID"],[3,"WindowWrapper"],[3,"WindowProxy"],[3,"Window"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"HeadlessContext"],[4,"Event"],[4,"TouchPhase"],[3,"Touch"],[4,"ElementState"],[4,"MouseButton"],[4,"MouseScrollDelta"],[4,"VirtualKeyCode"],[3,"HeadlessRendererBuilder"],[3,"HeadlessContext"],[3,"WindowBuilder"],[3,"Window"],[3,"WindowProxy"],[3,"PollEventsIterator"],[3,"WaitEventsIterator"],[3,"AvailableMonitorsIter"],[3,"MonitorID"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"MouseCursor"],[4,"CursorState"],[3,"PixelFormat"],[4,"NativeMonitorId"],[4,"DynamicImage"],[3,"CharInfo"],[3,"RenderedFont"],[3,"Quad"],[3,"NeuQuant"],[3,"BiLevel"],[4,"FilterType"],[3,"WebpDecoder"],[3,"BoolReader"],[3,"MacroBlock"],[3,"Frame"],[3,"Segment"],[3,"VP8Decoder"],[3,"PPMEncoder"],[4,"FilterType"],[4,"PNGState"],[4,"InterlaceMethod"],[3,"Adam7Iterator"],[3,"PNGDecoder"],[3,"IDATReader"],[3,"PNGEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"Deflater"],[4,"TableElement"],[3,"Inflater"],[3,"HuffReader"],[3,"Adler32"],[3,"Crc32"],[3,"JPEGEncoder"],[3,"Component"],[4,"JPEGState"],[3,"JPEGDecoder"],[3,"HuffTable"],[3,"HuffDecoder"],[3,"Decoder"],[3,"Encoder"],[4,"ImageError"],[4,"PhotometricInterpretation"],[4,"CompressionMethod"],[4,"PlanarConfiguration"],[4,"Predictor"],[3,"TIFFDecoder"],[4,"Tag"],[4,"Type"],[4,"Value"],[3,"Entry"],[4,"ByteOrder"],[3,"LZWReader"],[3,"SmartReader"],[3,"Header"],[3,"ColorMap"],[3,"TGADecoder"],[4,"ImageType"],[4,"BMPHeaderType"],[4,"Format16Bit"],[4,"FormatFullBytes"],[3,"BMPDecoder"],[4,"ImageFormat"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[4,"ColorType"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"Pixels"],[3,"PixelsMut"],[3,"EnumeratePixels"],[3,"EnumeratePixelsMut"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[6,"Display"],[8,"Color"],[4,"PrimitiveType"],[3,"GlutinFacade"],[3,"PollEventsIter"],[3,"WaitEventsIter"],[3,"WinRef"],[3,"Context"],[3,"GlutinWindowBackend"],[3,"GlutinHeadlessBackend"],[3,"Rc"],[4,"ReadError"],[3,"Buffer"],[4,"MappingImpl"],[3,"Mapping"],[3,"ReadMapping"],[3,"WriteMapping"],[3,"Fences"],[3,"Inserter"],[3,"BufferView"],[3,"BufferViewSlice"],[3,"BufferViewMutSlice"],[3,"BufferViewAny"],[3,"BufferViewAnySlice"],[4,"BufferCreationError"],[4,"BufferMode"],[4,"BufferType"],[4,"Severity"],[4,"Source"],[4,"MessageType"],[3,"TimestampQuery"],[4,"QueryType"],[4,"QueryCreationError"],[3,"RawQuery"],[3,"SamplesPassedQuery"],[3,"TimeElapsedQuery"],[3,"AnySamplesPassedQuery"],[3,"PrimitivesGeneratedQuery"],[3,"TransformFeedbackPrimitivesWrittenQuery"],[4,"BlendingFunction"],[4,"LinearBlendingFactor"],[4,"BackfaceCullingMode"],[4,"DepthTest"],[4,"StencilTest"],[4,"StencilOperation"],[4,"PolygonMode"],[4,"Smooth"],[3,"DrawParameters"],[3,"ConditionalRendering"],[4,"SamplesQueryParam"],[3,"DrawParametersBuilder"],[3,"RenderBuffer"],[3,"RenderBufferAny"],[3,"DepthRenderBuffer"],[3,"StencilRenderBuffer"],[3,"DepthStencilRenderBuffer"],[3,"SimpleFrameBuffer"],[3,"MultiOutputFrameBuffer"],[4,"ColorAttachment"],[4,"DepthAttachment"],[4,"StencilAttachment"],[4,"DepthStencilAttachment"],[4,"CreationError"],[3,"IndexBuffer"],[4,"IndicesSource"],[3,"IndexBufferSlice"],[3,"IndexBufferAny"],[3,"DrawCommandNoIndices"],[3,"DrawCommandIndices"],[3,"DrawCommandsNoIndicesBuffer"],[3,"DrawCommandsIndicesBuffer"],[3,"NoIndices"],[4,"IndexType"],[3,"PixelBuffer"],[3,"ComputeShader"],[3,"Program"],[3,"RawProgram"],[3,"Uniform"],[3,"UniformBlock"],[4,"BlockLayout"],[3,"Attribute"],[3,"TransformFeedbackBuffer"],[3,"TransformFeedbackVarying"],[4,"TransformFeedbackMode"],[4,"OutputPrimitives"],[3,"Shader"],[3,"UniformsStorage"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"String"],[3,"Vec"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"JoinGuard"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"Metadata"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"Path"],[3,"DirBuilder"],[3,"Lazy"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"InternalBufWriter"],[3,"BufStream"],[3,"Cursor"],[4,"Repr"],[3,"Custom"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Display"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Output"],[4,"StdioImp"],[3,"Stdio"],[3,"ExitStatus"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Condvar"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Cleanup"],[3,"Condvar"],[4,"FileType"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"ReadDir"],[3,"FindNextFileHandle"],[3,"DirEntry"],[3,"File"],[3,"FileAttr"],[3,"DirBuilder"],[3,"Handle"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"Env"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"Process"],[3,"ExitStatus"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"SteadyTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"NoClose"],[4,"Output"],[4,"EXCEPTION_DISPOSITION"],[4,"_Unwind_Action"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[4,"Ordering"],[3,"Rev"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Unfold"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Unique"],[4,"Cow"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"SetIter"],[3,"TwoBitPositions"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Arc"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"RangeTo"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"StrSearcher"],[4,"State"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"DerefString"],[3,"ParseError"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[4,"Bound"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"NoCopy"],[3,"PhantomData"],[8,"Any"],[3,"TypeId"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"Slice"],[3,"TraitObject"],[3,"RangeFull"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"SipHasher"],[3,"Weak"],[3,"COMPILER_GLOBAL_LOCK"],[4,"ProgramCreationError"],[4,"GetBinaryError"],[4,"ProgramCreationInput"],[3,"UniformBuffer"],[3,"TypelessUniformBuffer"],[4,"SamplerWrapFunction"],[4,"MagnifySamplerFilter"],[4,"MinifySamplerFilter"],[3,"Sampler"],[3,"SamplerBehavior"],[3,"EmptyUniforms"],[3,"UniformsStorage"],[4,"UniformType"],[4,"UniformValue"],[4,"LayoutMismatchError"],[4,"CreationError"],[3,"VertexBuffer"],[3,"VertexBufferSlice"],[3,"VertexBufferAny"],[3,"InstancingNotSupported"],[4,"AttributeType"],[3,"TransformFeedbackSession"],[4,"TransformFeedbackSessionCreationError"],[4,"VerticesSource"],[3,"EmptyVertexAttributes"],[3,"EmptyInstanceAttributes"],[3,"PerInstance"],[3,"TextureAnyMipmap"],[4,"Dimensions"],[3,"TextureAny"],[3,"ResidentTexture"],[3,"TextureHandle"],[3,"BindlessTexturesNotSupportedError"],[4,"GetFormatError"],[4,"InternalFormat"],[4,"InternalFormatType"],[3,"Texture1d"],[3,"Texture1dMipmap"],[3,"CompressedTexture1d"],[3,"CompressedTexture1dMipmap"],[3,"SrgbTexture1d"],[3,"SrgbTexture1dMipmap"],[3,"CompressedSrgbTexture1d"],[3,"CompressedSrgbTexture1dMipmap"],[3,"IntegralTexture1d"],[3,"IntegralTexture1dMipmap"],[3,"UnsignedTexture1d"],[3,"UnsignedTexture1dMipmap"],[3,"DepthTexture1d"],[3,"DepthTexture1dMipmap"],[3,"StencilTexture1d"],[3,"StencilTexture1dMipmap"],[3,"DepthStencilTexture1d"],[3,"DepthStencilTexture1dMipmap"],[3,"Texture2d"],[3,"Texture2dMipmap"],[3,"CompressedTexture2d"],[3,"CompressedTexture2dMipmap"],[3,"SrgbTexture2d"],[3,"SrgbTexture2dMipmap"],[3,"CompressedSrgbTexture2d"],[3,"CompressedSrgbTexture2dMipmap"],[3,"IntegralTexture2d"],[3,"IntegralTexture2dMipmap"],[3,"UnsignedTexture2d"],[3,"UnsignedTexture2dMipmap"],[3,"DepthTexture2d"],[3,"DepthTexture2dMipmap"],[3,"StencilTexture2d"],[3,"StencilTexture2dMipmap"],[3,"DepthStencilTexture2d"],[3,"DepthStencilTexture2dMipmap"],[3,"Texture2dMultisample"],[3,"Texture2dMultisampleMipmap"],[3,"IntegralTexture2dMultisample"],[3,"IntegralTexture2dMultisampleMipmap"],[3,"SrgbTexture2dMultisample"],[3,"SrgbTexture2dMultisampleMipmap"],[3,"UnsignedTexture2dMultisample"],[3,"UnsignedTexture2dMultisampleMipmap"],[3,"DepthTexture2dMultisample"],[3,"DepthTexture2dMultisampleMipmap"],[3,"StencilTexture2dMultisample"],[3,"StencilTexture2dMultisampleMipmap"],[3,"DepthStencilTexture2dMultisample"],[3,"DepthStencilTexture2dMultisampleMipmap"],[3,"Texture3d"],[3,"Texture3dMipmap"],[3,"CompressedTexture3d"],[3,"CompressedTexture3dMipmap"],[3,"SrgbTexture3d"],[3,"SrgbTexture3dMipmap"],[3,"CompressedSrgbTexture3d"],[3,"CompressedSrgbTexture3dMipmap"],[3,"IntegralTexture3d"],[3,"IntegralTexture3dMipmap"],[3,"UnsignedTexture3d"],[3,"UnsignedTexture3dMipmap"],[3,"DepthTexture3d"],[3,"DepthTexture3dMipmap"],[3,"StencilTexture3d"],[3,"StencilTexture3dMipmap"],[3,"DepthStencilTexture3d"],[3,"DepthStencilTexture3dMipmap"],[3,"Texture1dArray"],[3,"Texture1dArrayLayer"],[3,"Texture1dArrayMipmap"],[3,"CompressedTexture1dArray"],[3,"CompressedTexture1dArrayLayer"],[3,"CompressedTexture1dArrayMipmap"],[3,"SrgbTexture1dArray"],[3,"SrgbTexture1dArrayLayer"],[3,"SrgbTexture1dArrayMipmap"],[3,"CompressedSrgbTexture1dArray"],[3,"CompressedSrgbTexture1dArrayLayer"],[3,"CompressedSrgbTexture1dArrayMipmap"],[3,"IntegralTexture1dArray"],[3,"IntegralTexture1dArrayLayer"],[3,"IntegralTexture1dArrayMipmap"],[3,"UnsignedTexture1dArray"],[3,"UnsignedTexture1dArrayLayer"],[3,"UnsignedTexture1dArrayMipmap"],[3,"DepthTexture1dArray"],[3,"DepthTexture1dArrayLayer"],[3,"DepthTexture1dArrayMipmap"],[3,"StencilTexture1dArray"],[3,"StencilTexture1dArrayLayer"],[3,"StencilTexture1dArrayMipmap"],[3,"DepthStencilTexture1dArray"],[3,"DepthStencilTexture1dArrayLayer"],[3,"DepthStencilTexture1dArrayMipmap"],[3,"Texture2dArray"],[3,"Texture2dArrayLayer"],[3,"Texture2dArrayMipmap"],[3,"CompressedTexture2dArray"],[3,"CompressedTexture2dArrayLayer"],[3,"CompressedTexture2dArrayMipmap"],[3,"SrgbTexture2dArray"],[3,"SrgbTexture2dArrayLayer"],[3,"SrgbTexture2dArrayMipmap"],[3,"CompressedSrgbTexture2dArray"],[3,"CompressedSrgbTexture2dArrayLayer"],[3,"CompressedSrgbTexture2dArrayMipmap"],[3,"IntegralTexture2dArray"],[3,"IntegralTexture2dArrayLayer"],[3,"IntegralTexture2dArrayMipmap"],[3,"UnsignedTexture2dArray"],[3,"UnsignedTexture2dArrayLayer"],[3,"UnsignedTexture2dArrayMipmap"],[3,"DepthTexture2dArray"],[3,"DepthTexture2dArrayLayer"],[3,"DepthTexture2dArrayMipmap"],[3,"StencilTexture2dArray"],[3,"StencilTexture2dArrayLayer"],[3,"StencilTexture2dArrayMipmap"],[3,"DepthStencilTexture2dArray"],[3,"DepthStencilTexture2dArrayLayer"],[3,"DepthStencilTexture2dArrayMipmap"],[3,"Texture2dMultisampleArray"],[3,"Texture2dMultisampleArrayMipmap"],[3,"SrgbTexture2dMultisampleArray"],[3,"SrgbTexture2dMultisampleArrayMipmap"],[3,"IntegralTexture2dMultisampleArray"],[3,"IntegralTexture2dMultisampleArrayMipmap"],[3,"UnsignedTexture2dMultisampleArray"],[3,"UnsignedTexture2dMultisampleArrayMipmap"],[3,"DepthTexture2dMultisampleArray"],[3,"DepthTexture2dMultisampleArrayMipmap"],[3,"StencilTexture2dMultisampleArray"],[3,"StencilTexture2dMultisampleArrayMipmap"],[3,"DepthStencilTexture2dMultisampleArray"],[3,"DepthStencilTexture2dMultisampleArrayMipmap"],[4,"MipmapsOption"],[4,"CompressedMipmapsOption"],[3,"RawImage1d"],[3,"RawImage2d"],[3,"RawImage3d"],[4,"TextureCreationError"],[3,"ExtensionsList"],[3,"TextureUnitState"],[3,"IndexedBufferState"],[3,"GlState"],[3,"CommandContext"],[4,"Attachment"],[4,"FramebufferDepthStencilAttachments"],[3,"FramebufferAttachments"],[3,"ValidatedAttachments"],[4,"ValidationError"],[3,"RawAttachments"],[4,"RawAttachment"],[3,"FramebuffersContainer"],[3,"FrameBufferObject"],[3,"FormatNotSupportedError"],[4,"TextureFormatRequest"],[4,"ClientFormat"],[4,"UncompressedFloatFormat"],[4,"SrgbFormat"],[4,"UncompressedIntFormat"],[4,"UncompressedUintFormat"],[4,"CompressedFormat"],[4,"CompressedSrgbFormat"],[4,"DepthFormat"],[4,"DepthStencilFormat"],[4,"StencilFormat"],[4,"TextureFormat"],[4,"ClientFormatAny"],[4,"Source"],[4,"Destination"],[3,"SamplerObject"],[3,"SyncNotSupportedError"],[3,"SyncFence"],[3,"LinearSyncFence"],[3,"Bitsfield"],[3,"Version"],[4,"Api"],[3,"VertexAttributesSystem"],[3,"Binder"],[3,"VertexArrayObject"],[3,"FnPtr"],[3,"Gl"],[4,"Handle"],[4,"RawUniformValue"],[3,"Rect"],[3,"BlitTarget"],[4,"DrawError"],[4,"SwapBuffersError"],[3,"Frame"],[4,"GliumCreationError"],[3,"ColorVertex"],[3,"TexVertex"],[3,"UniformSpriteSheet"],[3,"NonUniformSpriteSheet"],[4,"StencilType"],[8,"Canvas"],[8,"PrimitiveCanvas"],[8,"IntoSprite"],[8,"TextureLoader"],[4,"Event"],[4,"MouseButton"],[8,"Interactive"],[8,"AbstractKey"],[8,"Colored"],[8,"Transform"],[3,"GameRunner"],[8,"Game"],[8,"TextDraw"],[8,"TextLoad"],[3,"EventIterator"],[3,"Ellipse"],[3,"Rectangle"],[3,"ContainedSprite"],[3,"Frame"],[3,"Window"],[3,"Sprite"],[3,"Texture"],[3,"DrawableTexture"],[3,"ContainedText"]]};
initSearch(searchIndex);
